#define SERVER_OFFICIAL 0
#define SERVER_BETA 	1
#define LOCALHOST 		2
const SERVER_HOSTSTATUS = LOCALHOST;
#define YSI_NO_HEAP_MALLOC

#define MAX_COMMANDS 1024
#define SERVER_NAME "TRUNGTIN"

#include <a_samp>		

#undef MAX_PLAYERS
#define MAX_PLAYERS 				(101) // Maximu de players.

#include <a_mysql>	
#include <streamer>		
#include <playerzone>																																																																					
#include <a_zone>
#include <sscanf2>
#include <AutoAFK>															 
#include <mSelection>																																																		 
#include <days>															  
#include <a_http>																
#include <md5>
#include <progress2>
#include <easyDialog>
#include <YSI_Coding\y_hooks>
#include <YSI_Data\y_iterate>
#include <YSI_Visual\y_commands>
#include <YSI_Game\y_vehicledata.inc>
#include <YSI_Core\y_master>
#include <fly>
#include <YSI_Coding\y_timers>

#if !defined gpci
    native gpci(playerid, serial[], len);
#endif
#if !defined IsValidVehicle
    native IsValidVehicle(vehicleid);
#endif    

#define SPECIAL_ACTION_PISSING 		68 
#define MAX_PLAYER_VEHICLE			(20)

#define MAX_LOGIN 					(10)  // Maximul de personane care se pot loga
#define MAX_LOGIN_WAITING			(200)  // Daca trece de MAX_LOGIN_WAITING v-a primi kick "Server supra incarcat".

// FIRE
#define MAX_FIRES					100			
#define BurnOthers								
#define FireMessageColor			0x00FF55FF	
#define BURNING_RADIUS 				1.2	 	
#define ONFOOT_RADIUS				1.5	
#define PISSING_DISTANCE			2.0	
#define CAR_RADIUS					8.0	
#define Z_DIFFERENCE				2.5	
#define EXTINGUISH_TIME_VEHICLE		1	
#define EXTINGUISH_TIME_ONFOOT		4	
#define EXTINGUISH_TIME_PEEING		10	
#define EXTINGUISH_TIME_PLAYER		2
#define FIRE_OBJECT_SLOT			1	

#include "core/constant"

// DEFINES - OTHERS
// native IsValidVehicle(vehicleid);
// native gpci(playerid, serial[], len);

#define MAX_GARAGES	 100
#define MAX_SVEHICLES	1000
#define MAX_CHANNEL 	1000
#define MAX_COBJECTS	50
#define MAX_SYSTEMS 	12
#define MAX_SAFEZONES   21
#define MAX_CRATES 		5
#define GasMax 			100
#define RunOutTime 		20000
#define RefuelWait 		10000
#define CAR_AMOUNT 		700

#define SPEED_MULTIPLIER 1.025
#define SPEED_THRESHOLD  0.4

#define TEAM_TERRORIST 	1
#define TEAM_CTERRORIST 2

#define LOG_SHOP 		1
#define LOG_SELLCAR 	2
#define LOG_TRADE 		3
#define LOG_MONEY 		4
#define LOG_CAR 		5
#define LOG_GIFTBOX 	6 
#define LOG_LEVEL 		7
#define LOG_SELL		8
#define LOG_CHAT		9

#define MAX_MINIGAMES 	3	
#define MAX_MAPS 		6
#define MAX_PICKUPSW 	2000
#define MAX_FURNITURE 	100000
#define MAX_CLANS 		500
#define MAX_JOBS 		15
#define MAX_CLANHQ 		20

#define RC_BANDIT	 441
#define RC_BARON  	  464
#define RC_GOBLIN  	  501
#define RC_RAIDER	 465
#define D_TRAM		449
#define RC_MINITANK   564
#define RC_CAM		594

#define AdmBot 		  -1
#define KICK 		  1
#define BAN 		  2
#define JAIL 		  3
#define WARN 		  4
#define MUTE 		  5

#define function%0(%1) forward %0(%1); public %0(%1)
#define ResetMoneyBar	ResetPlayerMoney
#define UpdateMoneyBar   GivePlayerMoney

#define RATE_INC (500)
#define RATE_MAX (2500)
#define THRESOLD_ACTION 1
#define STR 100
#define MAX_NPCS 0
#define AdminOnly "* Ban khong du quyen han de su dung lenh nay!"
#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.8)
#define ATTACK_TYPE_PLAYERID 1
#define ATTACK_TYPE_IP 2
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))


#define GetPlayerInregisters()  				ServerAccounts

function Kick_Ban ( playerid, bool: kickban ) return ( !kickban ) ? Kick ( playerid ) : Ban ( playerid );
#define KickEx(%1) 			SetTimerEx ( "Kick_Ban", 500, false, "ii", %1, false )
#define Ban(%1) 			SetTimerEx ( "Kick_Ban", 500, false, "ii", %1, true )
	
// COLOR

#define COLOR_ERROR		 0xC0241FFF
#define COLOR_DARKNICERED 	0x9D000096
#define TEAM_RADIO_COLOR 	0xF2D068FF
#define COLOR_LIGHTGREEN 	0x9ACD32AA
#define COLOR_CHATBUBBLE	0xFFFFFFCC
#define COLOR_LIGHTBLUE 	0x00C3FFFF
#define COLOR_LIGHTRED 		0xFF6347FF
#define COLOR_LGREEN 		0xD7FFB3FF
#define COLOR_ORANGE		0xFFA500FF
#define COLOR_GOLD		  0xFFB95EFF
#define COLOR_LIGHTGOLD 	0xFCD482FF
#define COLOR_MONEY 		0x4dad2bFF
#define COLOR_CLIENT		0xA9C4E4FF
#define COLOR_SERVER		0x5F9CC9FF
#define COLOR_WARNING 		0xDE1414FF
#define COLOR_ADMCHAT 		0xFFC266AA
#define COLOR_GRAD1 		0xB4B5B7FF
#define COLOR_GRAD2 		0xBFC0C2FF
#define COLOR_GRAD3 		0xCBCCCEFF
#define COLOR_GRAD4 		0xD8D8D8FF
#define COLOR_GRAD5 		0xE3E3E3FF
#define COLOR_GRAD6 		0xF0F0F0FF
#define COLOR_GREY 			0xAFAFAFAA
#define COLOR_GREEN 		0x33AA33AA
#define COLOR_RED 			0xFF0000FF
#define COLOR_NEWS 			0xFFA500AA
#define COLOR_LOGIN 		0x00D269FF
#define COLOR_DEPAR 		0x4646FFFF
#define COLOR_YELLOW 		0xFFFF00FF
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_FADE1 		0xE6E6E6E6
#define COLOR_FADE2 		0xC8C8C8C8
#define COLOR_FADE3 		0xAAAAAAAA
#define COLOR_FADE4 		0x8C8C8C8C
#define COLOR_FADE5 		0x6E6E6E6E
#define COLOR_PURPLE 		0xC2A2DAAA
#define COLOR_DBLUE 		0x2641FEAA
#define COLOR_ALLDEPT 		0xFF8282AA
#define COLOR_NEWS 			0xFFA500AA
#define COLOR_DEPART 		0xFF8040FF
#define COLOR_DEPART2 		0xff3535FF
#define COLOR_LOGS 			0xE6833CFF
#define COLOR_BLUE	  	0x211CDEC8
#define COLOR_DARKPINK	  0xE7AAA5A5
#define COLOR_DGREEN		0xAAFF82FF
#define COLOR_TUTORIAL	  0x2CBD7AFF
#define COLOR_NICEGREEN	 0x8DDE00FF

// WALKSTYLE
#define WALK_DEFAULT	0
#define WALK_NORMAL	 1
#define WALK_PED		2
#define WALK_GANGSTA	3
#define WALK_GANGSTA2   4
#define WALK_OLD		5
#define WALK_FAT_OLD	6
#define WALK_FAT		7
#define WALK_LADY	  	8
#define WALK_LADY2	  9
#define WALK_WHORE	  10
#define WALK_WHORE2	 11
#define WALK_DRUNK	 	12
#define WALK_BLIND	 	13

#define maxobj 					50
#define Spam_MaxMsgs			4
#define MAX_STRING 				255
#define CHECKPOINT_NONE 		0
#define CHECKPOINT_HOME 		12
#define CHECKPOINT_LOCATE   	53
#define KEY_AIM 				(128)
#define KEY_HANDBRAKE 			(128)
#define SCM SendClientMessage			
#define SCMTA SendClientMessageToAll  
new MaxSeats[212] = {
4,2,2,2,4,4,1,2,2,4,2,2,2,4,2,2,4,2,4,2,4,4,2,2,2,1,4,4,4,2,1,9,1,2,2,1,2,9,4,2,
4,1,2,2,2,4,1,2,1,6,1,2,1,1,1,2,2,2,4,4,2,2,2,2,2,2,4,4,2,2,4,2,1,1,2,2,1,2,2,4,
2,1,4,3,1,1,1,4,2,2,4,2,4,1,2,2,2,4,4,2,2,2,2,2,2,2,2,4,2,1,1,2,1,1,2,2,4,2,2,1,
1,2,2,2,2,2,2,2,2,4,1,1,1,2,2,2,2,0,0,1,4,2,2,2,2,2,4,4,2,2,4,4,2,1,2,2,2,2,2,2,
4,4,2,2,1,2,4,4,1,0,0,1,1,2,1,2,2,2,2,4,4,2,4,1,1,4,2,2,2,2,6,1,2,2,2,1,4,4,4,2,
2,2,2,2,4,2,1,1,1,4,1,1
};
	// important
new StaffMotd[256];
new VehicleOwned[MAX_VEHICLES], VehicleSQL[MAX_VEHICLES], VehicleExist[MAX_VEHICLES];
 

new MonthName[12][] = {
	{"january"},
	{"februaru"},
	{"march"},
	{"april"},
	{"may"},
	{"june"},
	{"july"},
	{"august"},
	{"september"},
	{"october"},
	{"november"},
	{"december"}
};


new const
	KEY_VEHICLE_FORWARD  = 0b001000,
	KEY_VEHICLE_BACKWARD = 0b100000
;


new 
	MySQL:SQL = MYSQL_INVALID_HANDLE,
	// Local
	ServerAccounts, MaxPlayers, MaxPlayersDate[180], Float:g_SpeedThreshold, TrivalEvent, TrivalPremium, TrivalText[30],
	areape, RestartPayday, JailGate[12], Paydaydat, StartDate[50], FactionMembers[16], ClanMembers[MAX_CLANS], ServerGoal,
	bussines, garage, housess, sbiss, EventType, InEvent[MAX_PLAYERS], GateStatus, dsvehs,	fskins[15] = mS_INVALID_LISTID, GpsBizzType[18],
	skinlist = mS_INVALID_LISTID, Licitatie, TimpLicitatie, TipLicitatie, TotalBani, IDLicitatie, LastPlayer, RestartTime, BizzTypeID[18][15],
	PaintballWinnerScore[3], PaintballWinner[3], PaintTime[3] = -1,	EventStatus, EventVW, EventInt,	glasses = mS_INVALID_LISTID, hats = mS_INVALID_LISTID, gatelvpd[3],
	cbjstore[128], ghour = 0, gminute = 0, gsecond = 0, dollah = 100000, realtime = 1,wotime = 15, levelcost = 2000, timeshift = -1, shifthour,
	levelexp = 3, FactionChat[16], Questions, Tax, TaxValue, cell2,gatelspd, gateng,lspdbar, clanhqid, gString[500], gQuery[500],
	// Global	
	painttime, Aduty[MAX_PLAYERS], NearPNS[MAX_PLAYERS], WarKills[MAX_PLAYERS], WarDeaths[MAX_PLAYERS], WarningsCheat[MAX_PLAYERS], Exception[MAX_PLAYERS], playerObject[MAX_PLAYERS], playerObject2[MAX_PLAYERS],
	TradeID[MAX_PLAYERS], TradeItems[MAX_PLAYERS], TradeReady[MAX_PLAYERS], reportcheater[MAX_PLAYERS] = -1, ReportedPlayer[MAX_PLAYERS], Escape[MAX_PLAYERS], Escape2[MAX_PLAYERS], EscapeProces[MAX_PLAYERS],
	Question[MAX_PLAYERS], QuestText[MAX_PLAYERS][256], InTraining[MAX_PLAYERS], SelectedFaction2[MAX_PLAYERS][20],	SFID[MAX_PLAYERS], Showed[MAX_PLAYERS], SpecClan[MAX_PLAYERS], Refueling[MAX_PLAYERS],
	LastCP[MAX_PLAYERS], Blocked[MAX_PLAYERS][100][180], FreezeTime[MAX_PLAYERS], gPlayerSpawned[MAX_PLAYERS], MDCOn[MAX_PLAYERS], FactionDeelay[16], CheatWarnings[MAX_PLAYERS], MedicCall[MAX_PLAYERS],
	TurfTime[MAX_PLAYERS], eventorganizer[MAX_PLAYERS], requestingevent[MAX_PLAYERS], InstructorCall[MAX_PLAYERS], License[MAX_PLAYERS], LicenseOffer[MAX_PLAYERS], togclan[MAX_PLAYERS], 
	nameobject[MAX_VEHICLES], NeonObj[2][MAX_VEHICLES], Contract[MAX_PLAYERS], gPlayerUsingLoopingAnim[MAX_PLAYERS], gPlayerAnimLibsPreloaded[MAX_PLAYERS], UsedContract[MAX_PLAYERS], PlayerHit[MAX_PLAYERS],
	TradePlayer[MAX_PLAYERS], TradeMoney[MAX_PLAYERS], TradeType[MAX_PLAYERS], SelectedHud[MAX_PLAYERS], PlayRadio[MAX_PLAYERS], Helmet[MAX_PLAYERS], 
	ShowWanted[MAX_PLAYERS], ReportTimer[MAX_PLAYERS], DiceMoney[MAX_PLAYERS], DiceID[MAX_PLAYERS], WarSeconds[MAX_PLAYERS], TradeTime[MAX_PLAYERS], TotalMoney[MAX_PLAYERS],
	Reply[MAX_PLAYERS], Freezed[MAX_PLAYERS], WTimes[MAX_PLAYERS], SpecFaction[MAX_PLAYERS], PlayerTime[MAX_PLAYERS][5], AFKSeconds[MAX_PLAYERS], StartingWork[MAX_PLAYERS], HeadValue[MAX_PLAYERS],
	AcceptedBy[MAX_PLAYERS], DiceInvited[MAX_PLAYERS], InDice[MAX_PLAYERS], PlayWith[MAX_PLAYERS], InRob[MAX_PLAYERS], BizRobbed[MAX_PLAYERS], Bags[MAX_PLAYERS],
	SafeRTime[MAX_PLAYERS], HaveBag[MAX_PLAYERS], BagTime[MAX_PLAYERS], LastRVehicle[MAX_PLAYERS], toglicitatie[MAX_PLAYERS], InvitedFaction[MAX_PLAYERS], Invited[MAX_PLAYERS], Team[MAX_PLAYERS], 						
	SpecPlayers[MAX_PLAYERS], IsPlayerSpec[MAX_PLAYERS], PaintType[MAX_PLAYERS], PKills[MAX_PLAYERS], PDeaths[MAX_PLAYERS], PaintTimer[MAX_MINIGAMES], PaintMap[MAX_MINIGAMES], MapVotes[MAX_MINIGAMES][MAX_MAPS], 
	PaintVote[MAX_MINIGAMES], Voted[MAX_PLAYERS], PaintText[MAX_MINIGAMES],	DutyAFK[MAX_PLAYERS], HaveFish[2][MAX_PLAYERS], StartFish[MAX_PLAYERS], KG[MAX_PLAYERS], JobSeconds[MAX_PLAYERS], AdText[MAX_PLAYERS][180], AdTimer[MAX_PLAYERS],
	SecondsQuestion[MAX_PLAYERS], HaveHelp[MAX_PLAYERS],HelperDuty[MAX_PLAYERS], NewbieChat[MAX_PLAYERS], HaveHelper[500], OnHelper[MAX_PLAYERS],HelpMuted[MAX_PLAYERS], Ajutor[MAX_PLAYERS],Helped[MAX_PLAYERS], HelpText[MAX_PLAYERS][180],
	LastRecon[MAX_PLAYERS],UsedFly[MAX_PLAYERS],JobTime[MAX_PLAYERS], WantedTime[MAX_PLAYERS], LastCar[MAX_PLAYERS],
	SelectedRank[MAX_PLAYERS], pPret[MAX_PLAYERS], pNivel[MAX_PLAYERS],	CreateHouse[MAX_PLAYERS], pColor1[MAX_PLAYERS], pColor2[MAX_PLAYERS], 
	pCar[MAX_PLAYERS], pCarID[MAX_PLAYERS], togding[MAX_PLAYERS], togsurf[MAX_PLAYERS], InShop[MAX_PLAYERS],ClanDuty[MAX_PLAYERS],	StartedSpray[MAX_PLAYERS], StartedSpray2[MAX_PLAYERS], StartedSprayOn[MAX_PLAYERS], ClanProces[MAX_PLAYERS],
	szRank[MAX_PLAYERS][180], ssName[MAX_PLAYERS][180], Selected[MAX_PLAYERS][50][180], pInteriorID[MAX_PLAYERS], pVirtual[MAX_PLAYERS],SInterior[MAX_PLAYERS],Farming[MAX_PLAYERS], pDrunkLevelLast[MAX_PLAYERS],FPS2[MAX_PLAYERS],
	MoneyEarned[MAX_PLAYERS],CurseFacute[MAX_PLAYERS],GunoiKG[MAX_PLAYERS],JobWorking[MAX_PLAYERS],JobVehicle[MAX_PLAYERS],Trailer[MAX_PLAYERS], TruckerStep[MAX_PLAYERS],EditJob[MAX_PLAYERS],EditJobID[MAX_PLAYERS],togevent[MAX_PLAYERS],
	TestingModel[MAX_PLAYERS],DealerCarType[MAX_PLAYERS], SelectedCar[MAX_PLAYERS][150], TotalDealerCars[MAX_PLAYERS], DealerCar[MAX_PLAYERS],DealerCategory[MAX_PLAYERS],
	DealerCarColor1[MAX_PLAYERS], DealerCarColor2[MAX_PLAYERS], DealerID[MAX_PLAYERS],InDealer[MAX_PLAYERS], sSlot[MAX_PLAYERS], InvitedClan[MAX_PLAYERS],
	InvitedBy[MAX_PLAYERS],PlayerTimer[MAX_PLAYERS], PlayerCase[MAX_PLAYERS],CarRadio[MAX_VEHICLES],CarLink[MAX_VEHICLES][180], SelectedFaction[MAX_PLAYERS],SelectedMoney[MAX_PLAYERS],PlayerSellCar[MAX_PLAYERS], SelectedItem[MAX_PLAYERS],
	AcceptedService[MAX_PLAYERS],TaxiService[2][MAX_PLAYERS], tograport[MAX_PLAYERS],AcceptedTaxiService[2][MAX_PLAYERS],Fare[MAX_PLAYERS],TaxiDriver[MAX_PLAYERS], TaxiDuty[MAX_PLAYERS], TaxiMoney[MAX_PLAYERS],
	TaxiTimer[MAX_PLAYERS],	SeifID[MAX_PLAYERS], SelectedPlayers[MAX_PLAYERS][50],AcceptedReport[MAX_PLAYERS],ServerSystem[MAX_SYSTEMS], CarTrade[MAX_PLAYERS],
	ArenaSpec[MAX_PLAYERS], Weapons[MAX_PLAYERS][47], WeaponAmmo[MAX_PLAYERS][47], VehicleOccupied[MAX_VEHICLES], InClanHQ[MAX_PLAYERS],
	EmailID[MAX_PLAYERS][10],KillP[MAX_PLAYERS],DeathP[MAX_PLAYERS],tuningenter[MAX_PLAYERS],PlayerEnterTime[MAX_PLAYERS], shotTime[MAX_PLAYERS], shot[MAX_PLAYERS], WantedName[MAX_PLAYERS][180], WantedReason[MAX_PLAYERS],
	WantedTimer[MAX_PLAYERS], Wartimeon[MAX_PLAYERS], taxim[MAX_PLAYERS], towcarm[MAX_PLAYERS], toglc[MAX_PLAYERS], Carspawn[MAX_VEHICLES], togvip[MAX_PLAYERS],Dicem[MAX_PLAYERS], balem[MAX_PLAYERS], SpamCheck[MAX_PLAYERS],
	radiop[MAX_PLAYERS], radio[MAX_PLAYERS],login[MAX_PLAYERS], Speedlimit[MAX_PLAYERS], togip[MAX_PLAYERS], tazer[MAX_PLAYERS], XDeaths[MAX_PLAYERS],LastDeath[MAX_PLAYERS],playerDeath[MAX_PLAYERS], IsPin[MAX_PLAYERS],
	drug[MAX_PLAYERS], bizid[MAX_PLAYERS], bizprice[MAX_PLAYERS], biztype[MAX_PLAYERS], bizoffer[MAX_PLAYERS],SwitchKey[MAX_PLAYERS], togfind[MAX_PLAYERS], TradeAccepted[MAX_PLAYERS], 
	IsSmoking[MAX_PLAYERS], WalkStyle[MAX_PLAYERS],targetfind[MAX_PLAYERS], InHouse[MAX_PLAYERS], InBussines[MAX_PLAYERS], InHQ[MAX_PLAYERS], WTToggle[MAX_PLAYERS], WTChannel[MAX_PLAYERS] = 0, arrestcop[MAX_PLAYERS] = -1,
	UsingDrugs[MAX_PLAYERS], vehEngine[MAX_VEHICLES],AcceptOffer[MAX_PLAYERS], AcceptPrice[MAX_PLAYERS], FreeOffer[MAX_PLAYERS], FreePrice[MAX_PLAYERS], MatsOffer[MAX_PLAYERS], togpremium[MAX_PLAYERS],
	MatsPrice[MAX_PLAYERS], MatsAmmo[MAX_PLAYERS],SellgunOffer[MAX_PLAYERS], SellgunPrice[MAX_PLAYERS], SellgunMats[MAX_PLAYERS], SellgunAmmo[MAX_PLAYERS], SellgunID[MAX_PLAYERS], bool: RegisrationStep[MAX_PLAYERS][4],
	HouseID[MAX_PLAYERS], HouseOffer[MAX_PLAYERS],HousePrice[MAX_PLAYERS], MedicCallTime[MAX_PLAYERS], MechanicCall[MAX_PLAYERS], MechanicCallTime[MAX_PLAYERS], TaxiCall[MAX_PLAYERS], Iterator:MySpec[MAX_PLAYERS]<MAX_PLAYERS>,
	TaxiCallTime[MAX_PLAYERS], TaxiAccepted[MAX_PLAYERS],MedicTime[MAX_PLAYERS], NeedMedicTime[MAX_PLAYERS], TakingLesson[MAX_PLAYERS], UsedFind[MAX_PLAYERS], SpawnedCarYT[MAX_PLAYERS], ExamHP[MAX_PLAYERS],
	NoFuel[MAX_PLAYERS], MatsHolding[MAX_PLAYERS],TicketOffer[MAX_PLAYERS], TicketMoney[MAX_PLAYERS], SkinTrade[MAX_PLAYERS], PlayerStoned[MAX_PLAYERS], ConsumingMoney[MAX_PLAYERS], SpawnChange[MAX_PLAYERS], MoneyTrade[MAX_PLAYERS],
	TutTime[MAX_PLAYERS],  PlayerDrunk[MAX_PLAYERS],PlayerDrunkTime[MAX_PLAYERS], GotHit[MAX_PLAYERS], GoChase[MAX_PLAYERS], GetChased[MAX_PLAYERS], OrderReady[MAX_PLAYERS],  ConnectedToPC[MAX_PLAYERS], MiliardTrade[MAX_PLAYERS],
	PlayerTied[MAX_PLAYERS],PlayerCuffed[MAX_PLAYERS], PlayerCuffed2[MAX_PLAYERS], PlayerCuffedTime[MAX_PLAYERS], PlayerTazeTime[MAX_PLAYERS], LiveOffer[MAX_PLAYERS], TalkingLive[MAX_PLAYERS], RentPrice[MAX_PLAYERS],
	PlacedNews[MAX_PLAYERS], SelectChar[MAX_PLAYERS], SelectCharID[MAX_PLAYERS], SelectCharPlace[MAX_PLAYERS], ChosenSkin[MAX_PLAYERS], CP[MAX_PLAYERS], Connected[MAX_PLAYERS],SpawnActor, HouseTrade[MAX_PLAYERS], PickUpFish[MAX_PLAYERS],
	RepairOffer[MAX_PLAYERS], RepairPrice[MAX_PLAYERS],RefillOffer[MAX_PLAYERS], RefillPrice[MAX_PLAYERS], RepairCar[MAX_PLAYERS], Rapairx[MAX_PLAYERS], Refillx[MAX_PLAYERS], TransferOffer[MAX_PLAYERS], TimerMoney[MAX_PLAYERS], 
	TransferMoney[MAX_PLAYERS], DrugOffer[MAX_PLAYERS],DrugPrice[MAX_PLAYERS], DrugGram[MAX_PLAYERS], JailPrice[MAX_PLAYERS], OnDuty[MAX_PLAYERS], VehicleRent[MAX_PLAYERS], IsRentCar[MAX_PLAYERS], RainbowOn[MAX_PLAYERS], TerminatJobGoal = 0,
	gPlayerCheckpointStatus[MAX_PLAYERS],  IsPlayerLogged[MAX_PLAYERS], gPlayerLogTries[MAX_PLAYERS], gLastCar[MAX_VEHICLES], gOoc[MAX_PLAYERS], gNews[MAX_PLAYERS], gFam[MAX_PLAYERS],RentStock[10], FishTimer[MAX_PLAYERS],
	Undita[MAX_PLAYERS], Momeala[MAX_PLAYERS], BusinessTrade[MAX_PLAYERS], HiddenTrade[MAX_PLAYERS], bool: IsRegister[MAX_PLAYERS], HaveGift[MAX_PLAYERS], PlayerPickup[MAX_PLAYERS],
	SpamTimes[MAX_PLAYERS], PlayerText: HPAlert, togjob[MAX_PLAYERS], tograinbow[MAX_PLAYERS], togalert[MAX_PLAYERS], WorkingTime[MAX_PLAYERS], Float: CheckpointPos[MAX_PLAYERS][3], PlayerText: CpTDD, PlayerText: HudTD, PlayerText: AchivPTD[1], PlayerText: InfoPTD,
	Text: AchivTD[2], Text3D:deathLabel[MAX_PLAYERS], Text3D:vipLabel[MAX_PLAYERS], JobLeftTime[MAX_PLAYERS], PlayerBar:HudProgress[MAX_PLAYERS][3], PlayerBar:ProgressFish[MAX_PLAYERS], EnableBoast[MAX_PLAYERS], Text: CSTD, playerKills[MAX_PLAYERS], beachlink[128] = "",
	Iterator:PlayerAdmins<MAX_PLAYERS>, Iterator:PlayerHelpers<MAX_PLAYERS>, Iterator:IsSpeed<MAX_PLAYERS>, Text3D:Pet[MAX_PLAYERS], PetMoney = 70000, petstatusv[MAX_PLAYERS], StepExam[MAX_PLAYERS], ExamTime[MAX_PLAYERS],
 	listitemm[MAX_PLAYERS], IsCrates[MAX_PLAYERS], DaiWanted[MAX_PLAYERS], PlayerText: PacaneleTD[11], PlayerText: SlotTD[9], Float: VehicleHealth[MAX_PLAYERS],PlayerAccount[MAX_PLAYERS], TradeTicket[MAX_PLAYERS][2],
	PlayerText:FindSkinTD, IsStage[MAX_PLAYERS], StartQuest[MAX_PLAYERS], PlayerText: GiftTD[17], Text: RegisterTD[13], TimerPayDay[MAX_PLAYERS],YouTuberCar[MAX_PLAYERS], ExamObject, VoucherTrade[MAX_PLAYERS][3], IsEditVip[MAX_PLAYERS],
	Text: StageTD[2], PlayerText: StagePTD, SkinsActions[MAX_PLAYERS], IsSkins[MAX_PLAYERS], GiftStep[MAX_PLAYERS], MAXGOAL = 5000000, Text: LoginTD[2], StoreMoney[MAX_PLAYERS], MoneyMoney[MAX_PLAYERS], pHouseType[MAX_PLAYERS],
	Step[MAX_PLAYERS], CrateModel[MAX_PLAYERS], PlayerText: GoalPTD, TimerInfo[MAX_PLAYERS], ServerBonus = 15, ServerPremium, GunObject[MAX_PLAYERS], ServerStock[5], HavePestele[MAX_PLAYERS], UnFreezeTimer[MAX_PLAYERS],
	Text:DataT[3], TimerCratesEx[MAX_PLAYERS], PlayerText: BancaTD, PlayerText: RegisterPTD[7], CarEID[MAX_PLAYERS], SchimbaCuloare[MAX_PLAYERS], PacaneleT[MAX_PLAYERS], PlayerText: PinPTD[11], PinInsert[MAX_PLAYERS][10], 
	PlayerText: CratePTD[2], Text: CrateTD[6], CrateTime[MAX_PLAYERS], RollTime[MAX_PLAYERS], ShopType[MAX_PLAYERS], EditVehicleID[MAX_PLAYERS], szClanColor[MAX_PLAYERS], PlayerText: MissionTD, IsPacanele[MAX_PLAYERS], GunID[MAX_PLAYERS], IsGunShop[MAX_PLAYERS],
	RainBowColor[63], PlayerText: SkinsPTD[11], Text: SkinsTD[11], AlegeCrates[MAX_PLAYERS], RegisterPass[MAX_PLAYERS][64], RegisterReferral[MAX_PLAYERS][64], BetPacanele[MAX_PLAYERS], IsDublaj[MAX_PLAYERS], TotalBet[MAX_PLAYERS],
	CARrainbow[MAX_PLAYERS], masinaRainbow[MAX_PLAYERS], K[MAX_PLAYERS], TimerPacanele[MAX_PLAYERS], Slot[10][MAX_PLAYERS], PlayerText: DublajTD[7], PlayerText: GunTD[8], QuestVehicle[MAX_PLAYERS], SQL_clanzone, Iterator:Rainbows[4]<MAX_PLAYERS>,
	Iterator:MyVehicle[MAX_PLAYERS]<MAX_VEHICLES>, Iterator:PersonalVehicles<MAX_VEHICLES>, Iterator:LoginQueue[2]<MAX_PLAYERS>,  bool: EditObject3D[MAX_PLAYERS], PlayerText: PayDayPTD[3], PlayerRainbow[MAX_PLAYERS],
	Iterator:PlayerVips<MAX_PLAYERS>, Iterator:PlayerPremiums<MAX_PLAYERS>,	PnsTimer[MAX_PLAYERS], LastPns[MAX_PLAYERS], Iterator:PersonalVSpawned<MAX_PLAYERS>, MyVehicleSpawn[MAX_PLAYERS],
	BigEar[MAX_PLAYERS], Spectate[MAX_PLAYERS],	CellTime[MAX_PLAYERS], HireCar[MAX_PLAYERS], HidePM[MAX_PLAYERS], PhoneOnline[MAX_PLAYERS], TurfsDisp[MAX_PLAYERS], gDice[MAX_PLAYERS], PetLevelExp = 500,
	FirstSpawn[MAX_PLAYERS], Mobile[MAX_PLAYERS],DeelayCommand[MAX_PLAYERS][18],Combo[MAX_PLAYERS],DMGTimer[MAX_PLAYERS], bool:WeaponData[MAX_PLAYERS][13], InExamen[MAX_PLAYERS], ExamCar[MAX_PLAYERS],JobDeelay[MAX_PLAYERS][14],  
	// Textdraws		
	Text: Jailtime[MAX_PLAYERS], Text: TradeTD[21], Text: txtDateDisp, Text: txtTimeDisp,	Text: CountTD, Text:HiddTD[7], Text: ShopTD[5], 
	
	PlayerText: UndercoverTD, PlayerText: CpTD, PlayerText: DMGTD[2], PlayerText: TradePTD[7], Text: GoalTD[2], 
	PlayerText: TradeIcon[10], PlayerText: TradeTitle[10], PlayerText: JobTD, PlayerText: ShopTDs[2], PlayerText: InfosTD, 
	PlayerText: PaintTD, PlayerText: AirCategory, PlayerText: ShowFPS, PlayerText: SpeedometerPTD[3], Text: PinTD[7],
	PlayerText: CarsCategory, PlayerText: BikesCategory, PlayerText: BoatsCategory, PlayerText: CeasPTD, Text: CeasTD,
	PlayerText: SpecialCategory, PlayerText: BuyModel, PlayerText: TestModel, PlayerText: InfoDS, 
	PlayerText: ExitDS, PlayerText: BackCar, PlayerText: NextCar, PlayerText: FindTD, PlayerText: SpectatorTD, PlayerText: WantedTD[MAX_PLAYERS],
	PlayerText: CleoTD[2], PlayerText: HiddTDs[3], PlayerText: FareTD, PlayerText: TestTD, PlayerText: DSTds[5],
	PlayerText: GamePTD[7], PlayerText: WarTime,
	PlayerText: LogoPlayer, PlayerText: MoneyTD0, PlayerText: MoneyTD1, PlayerText: ExamTD[13], Text: Logo,//Text: LogoTD[2]
	
	Text3D:areap, Text3D: LabelCrates,
	// Vehicles
	ttcgate[2],gLastDriver[600],Gas[MAX_VEHICLES],
	// Float
	Float: pPos[MAX_PLAYERS][3], Float:etp[5], Float: SpecPos[MAX_PLAYERS][3], Float: TeleportDest[MAX_PLAYERS][3], Float: LastPos[MAX_PLAYERS][3], Float: Health[MAX_PLAYERS], Float: Armour[MAX_PLAYERS];
	
new GetVehicleColors[256][180] = {
	{"000000"}, {"F5F5F5"}, {"2A77A1"}, {"840410"}, {"263739"}, {"86446E"}, {"D78E10"}, {"4C75B7"}, {"BDBEC6"}, {"5E7072"},
	{"46597A"}, {"656A79"}, {"5D7E8D"}, {"58595A"}, {"D6DAD6"}, {"9CA1A3"}, {"335F3F"}, {"730E1A"}, {"7B0A2A"}, {"9F9D94"},
	{"3B4E78"}, {"732E3E"}, {"691E3B"}, {"96918C"}, {"515459"}, {"3F3E45"}, {"A5A9A7"}, {"635C5A"}, {"3D4A68"}, {"979592"},
	{"421F21"}, {"5F272B"}, {"8494AB"}, {"767B7C"}, {"646464"}, {"5A5752"}, {"252527"}, {"2D3A35"}, {"93A396"}, {"6D7A88"},
	{"221918"}, {"6F675F"}, {"7C1C2A"}, {"5F0A15"}, {"193826"}, {"5D1B20"}, {"9D9872"}, {"7A7560"}, {"989586"}, {"ADB0B0"},
	{"848988"}, {"304F45"}, {"4D6268"}, {"162248"}, {"272F4B"}, {"7D6256"}, {"9EA4AB"}, {"9C8D71"}, {"6D1822"}, {"4E6881"},
	{"9C9C98"}, {"917347"}, {"661C26"}, {"949D9F"}, {"A4A7A5"}, {"8E8C46"}, {"341A1E"}, {"6A7A8C"}, {"AAAD8E"}, {"AB988F"},
	{"851F2E"}, {"6F8297"}, {"585853"}, {"9AA790"}, {"601A23"}, {"20202C"}, {"A4A096"}, {"AA9D84"}, {"78222B"}, {"0E316D"},
	{"722A3F"}, {"7B715E"}, {"741D28"}, {"1E2E32"}, {"4D322F"}, {"7C1B44"}, {"2E5B20"}, {"395A83"}, {"6D2837"}, {"A7A28F"},
	{"AFB1B1"}, {"364155"}, {"6D6C6E"}, {"0F6A89"}, {"204B6B"}, {"2B3E57"}, {"9B9F9D"}, {"6C8495"}, {"4D8495"}, {"AE9B7F"},
	{"406C8F"}, {"1F253B"}, {"AB9276"}, {"134573"}, {"96816C"}, {"64686A"}, {"105082"}, {"A19983"}, {"385694"}, {"525661"},
	{"7F6956"}, {"8C929A"}, {"596E87"}, {"473532"}, {"44624F"}, {"730A27"}, {"223457"}, {"640D1B"}, {"A3ADC6"}, {"695853"},
	{"9B8B80"}, {"620B1C"}, {"5B5D5E"}, {"624428"}, {"731827"}, {"1B376D"}, {"EC6AAE"}, {"000000"},
	// Hidden
	{"177517"}, {"210606"}, {"125478"}, {"452A0D"}, {"571E1E"}, {"010701"}, {"25225A"}, {"2C89AA"}, {"8A4DBD"}, {"35963A"},
	{"B7B7B7"}, {"464C8D"}, {"84888C"}, {"817867"}, {"817A26"}, {"6A506F"}, {"583E6F"}, {"8CB972"}, {"824F78"}, {"6D276A"},
	{"1E1D13"}, {"1E1306"}, {"1F2518"}, {"2C4531"}, {"1E4C99"}, {"2E5F43"}, {"1E9948"}, {"1E9999"}, {"999976"}, {"7C8499"},
	{"992E1E"}, {"2C1E08"}, {"142407"}, {"993E4D"}, {"1E4C99"}, {"198181"}, {"1A292A"}, {"16616F"}, {"1B6687"}, {"6C3F99"},
	{"481A0E"}, {"7A7399"}, {"746D99"}, {"53387E"}, {"222407"}, {"3E190C"}, {"46210E"}, {"991E1E"}, {"8D4C8D"}, {"805B80"},
	{"7B3E7E"}, {"3C1737"}, {"733517"}, {"781818"}, {"83341A"}, {"8E2F1C"}, {"7E3E53"}, {"7C6D7C"}, {"020C02"}, {"072407"},
	{"163012"}, {"16301B"}, {"642B4F"}, {"368452"}, {"999590"}, {"818D96"}, {"99991E"}, {"7F994C"}, {"839292"}, {"788222"},
	{"2B3C99"}, {"3A3A0B"}, {"8A794E"}, {"0E1F49"}, {"15371C"}, {"15273A"}, {"375775"}, {"060820"}, {"071326"}, {"20394B"},
	{"2C5089"}, {"15426C"}, {"103250"}, {"241663"}, {"692015"}, {"8C8D94"}, {"516013"}, {"090F02"}, {"8C573A"}, {"52888E"},
	{"995C52"}, {"99581E"}, {"993A63"}, {"998F4E"}, {"99311E"}, {"0D1842"}, {"521E1E"}, {"42420D"}, {"4C991E"}, {"082A1D"},
	{"96821D"}, {"197F19"}, {"3B141F"}, {"745217"}, {"893F8D"}, {"7E1A6C"}, {"0B370B"}, {"27450D"}, {"071F24"}, {"784573"},
	{"8A653A"}, {"732617"}, {"319490"}, {"56941D"}, {"59163D"}, {"1B8A2F"}, {"38160B"}, {"041804"}, {"355D8E"}, {"2E3F5B"},
	{"561A28"}, {"4E0E27"}, {"706C67"}, {"3B3E42"}, {"2E2D33"}, {"7B7E7D"}, {"4A4442"}, {"28344E"}
};
	
new gTeam[MAX_PLAYERS];		
	// ENUMS
enum pInfo {
	Float: pConnectTime, Float: playerPos[3], Float: pSHealth, Float: pSeconds,pScripter, pManager,
	pSQLID,pCrimes,pDM,pStivuitorSkill,pUsername[36],pKey[128],pLevel,pAdmin,pHelper,pPremiumAccount,pSex,pAge,pMuted,pMuteTime,pExp,pCash,pBanned,pAccount,pCoins,
	pModel,pPnumber,pHouse,pBizz,pCarLicS,pFlyLicS,pBoatLicS,pGunLicS,pCarLicT,pCarLic,pFlyLicT,pFlyLic,pBoatLicT,pBoatLic,pFishLic,pGunLicT,pGunLic,pTag,pHat,pShowHat,pEscapePoints,
	pShowDMG,pColor,pShowHP,pShowAP,pAJail,pPilotSkill,pDays,pUsed,pGlasses,pShowGlasses,pGasCan,pCurierSkill,pPizzaSkill,pKills,pDeaths,pArrested,pWantedDeaths,pPhoneBook,pPhone,
	pWantedLevel,pJob,pPayCheck,pJailed,pJailTime,pMats,pDrugs,pLeader,pMember,pRank,pChar,pFACWarns,pFpunish,pLawyer, pQuest,
	pLawSkill,pDrugsSkill,pGarbageSkill,pTruckerSkill,pJackerSkill,pFarmerSkill,pFishSkill,pMatSkill, pInt,pLocal,pTeam,pRequestingBackup,pPayDay,pPayDayHad,
 	pRobSkill,pRob,pWarns,pFuel,pSleeping,pMilkcows,pChicken,pTow,pRented,pSpeaker,pWTalkie,pLighter,pCigarettes,pEmail[200],pRegistredDate[200], 
	pMP3,pReferral,pReferralRP,pReferralMoney, pReferralP,pLaptop,pVictim[64],pShowJob,pShowFaction,pShowFP,pShowLogo,pShowCeas,pPremiumPoints,pClan,pClanRank,pClanWarn, bool: pGuns[6],
	pClanDays,pHelpedPlayersToday,pPin,pPinLogged,pCommands[5],pGiftPoints,pNewbieMute,pHelpedPlayers,pReportTime,pShowHud, pShowProgress[4],pHudGen,pVip,pAW,pLW,pHW,pAchievementStatus[32],
	pSlot,pSpecialQuest[25],pObjectQuest[25],pInvalidCommands,pCrash,pArenaStats[2],pRacePlace[4],pPaintKills[3],pPaintDeaths[3],pAccused[64],pCrime1[184],pCrime2[184],pCrime3[184], pQuestFinish,
	pBTemp,pBYear, pBMonth,pBDay,pBBy[25],pBReason[184],pDailyLogin,pBackpack,pNeedProgress[2],pDailyMission[2],pProgress[2],pPet,pPetStatus,pPetLevel,pPetName[30],pPetPoints,pSkins[10], pCarKey[MAX_PLAYER_VEHICLE],
	pTreasurePoints, pTutorial, pHpoints, pJobBoost, pCrates[5], pVoucher[3], pPetType, pDailyBonus, pShowBanca, pHidden, pJobOwner, pMStore, pYouTuber, pTickete[2], pStoreAccount, pCredit,
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum pkInfo {
	pkID,
	pkType
}
new PickupInfo[MAX_PICKUPS][pkInfo];

new NeonColor[6][10] = {
	{"FFFFFF"},
	{"ff00c9"},
	{"fff000"},
	{"64ff00"},
	{"0046ff"},
	{"ff0400"}
};


new Float: TunningPos[4][3] = {
	{1554.2433,-2164.1299,14.5817},
	{1563.1868, -2164.2583, 14.5817},
	{1572.8722, -2164.1528, 14.5817},
	{1581.7557, -2164.1748, 14.5817}
};

new Float: PutVehiclePNS[4][4] = {
	{2066.3440,-1831.4973,13.2740,90.6973},
	{1024.8359,-1025.1244,31.8286,1.4482},
	{1975.3617,2162.3789,10.7974,268.9753},
	{720.1006,-458.8903,16.0630,0.0031}
};

new Float: ExitVehiclePNS[4][4] = {
	{2075.7385,-1831.3799,13.1911,271.4610},
	{1024.9517,-1034.4995,31.4208,177.5887},
	{1963.0897,2162.2114,10.5474,89.7477},
	{720.1700,-467.4203,16.0688,178.9350}
};

new Float: TunningCameraPos[2][3] = {
	{1562.145507, -2174.422363, 15.636567},
	{1568.677001, -2175.047607, 16.194417}
};

new Float: TunningCameraPosLook[2][3] = {
	{1558.444213, -2171.080078, 15.277501},
	{1566.384521, -2170.767822, 14.999076}
};

enum hInfo {
	hID,
	Float:hEntrancex, 
	Float:hEntrancey, 
	Float:hEntrancez, 
	Float:hExitx, 
	Float:hExity, 
	Float:hExitz,
	hOwner[25], 
	hDiscription[64], 
	hValue, 
	hHel, 
	hArm,
	hInterior, 
	hLock,
	hOwned, 
	hSize,
	hRentabil, 
	hTakings, 
	hLevel, 
	hVirtual, 
	hPickupID, 
	hRadio,
	hGarage
};
new 
	HouseInfo[200][hInfo], 
	Text3D:HouseLabel[sizeof(HouseInfo)], 
	MapIconHouse[sizeof(HouseInfo)]
;

enum gInfo {
	gID, Float: gEnterX, Float: gEnterY, Float: gEnterZ, Float: gEnterR, Float: gExitX, Float: gExitY, Float: gExitZ, Float: gExitR,
	gVirtualWorld, gOwner[25], gHouses, gPickup
}
new GarageInfo[MAX_GARAGES][gInfo], Text3D:GarageLabel[sizeof(GarageInfo)];

enum bInfo {
	bID,
	Float:bEntranceX, Float:bEntranceY,
	Float:bEntranceZ, Float:bExitX,
	Float:bExitY, Float:bExitZ,
	bOwned, bOwner[25], bMessage[50], 
	bLevel, bBuyPrice, bFee, bBalance, 
	bLocked, bInterior, bProducts, bVirtual, 
	bStatic, bRadio, bPickup, bGas, bType
};
new BizzInfo[100][bInfo], Text3D:BizzLabel[sizeof(BizzInfo)];

enum svInfo {
	vID, vModel,
	Float: vLocation[3], Float: vAngle,
	vColor[2], vFaction, vRank, vVirtual, vSpawned
}
new ServerVehicles[MAX_SVEHICLES][svInfo];



enum Factions {
	fID,
	fName[128],
	Float:fcX, Float:fcY, Float:fcZ, Float:extX, Float:extY, Float:extZ,
	fVW, fInterior, fMats, fDrugs, fBank, fAnn[180], fApp, fLock,
	Text3D: fLabel
};
new DynamicFactions[16][Factions], fRankNames[16][7][180];

enum LIST_ANTIFLOOD {
	lastCheck, floodRate
}
new AntiFlood_Data[MAX_PLAYERS][LIST_ANTIFLOOD];

enum zInfo {
	zID, zName[64], zOwned, zTime,
	Float:zMinX, Float:zMinY, Float:zMaxX, Float:zMaxY
};
new TurfInfo[36][zInfo], Turfs[36];

enum wInfo {
	wFaction, wAttacker, wTime,
};

new 
	WarInfo[sizeof(TurfInfo)][wInfo],
	Float: WarScoreF[16][sizeof(TurfInfo)],
	ucideri[MAX_PLAYERS][sizeof(TurfInfo)],
	decese[MAX_PLAYERS][sizeof(TurfInfo)],
	worstscoreat[sizeof(TurfInfo)],
	worstmemberat[sizeof(TurfInfo)],
	worstscoredf[sizeof(TurfInfo)],
	worstmemberdf[sizeof(TurfInfo)],
	bestscoreat[sizeof(TurfInfo)],
	bestmemberat[sizeof(TurfInfo)],
	bestscoredf[sizeof(TurfInfo)],
	bestmemberdf[sizeof(TurfInfo)],
	InWarTurf[16],
	InWar[16];

enum pSpec {
	Float:Coords[3], Float:sPx, Float:sPy, Float:sPz,
	sPint, sLocal, sCam,
};
new Unspec[MAX_PLAYERS][pSpec];

enum szInfo {
	szID,
	Float: szX, Float: szY, Float: szZ,
	szRange
}
new SafeZone[MAX_SAFEZONES][szInfo];

enum objInfo {
	oID, oMoney
}
new ObjectInfo[MAX_OBJECTS][objInfo];

enum sInfo {
	sID, sFactionID,
	Float: sPosX, Float: sPosY, Float: sPosZ,
	sMoney, sDrugs, sMaterials, sVirtualID
}
new SafeInfo[16][sInfo];

enum clInfo {
	cID, clName[64], clOwner[MAX_PLAYER_NAME], clMotd[180], clTag[32], clRankName1[64], clRankName2[64], clRankName3[64], clRankName4[64], clRankName5[64], clRankName6[64], clHQ,
 	clColor[7], clSlots, clRegisterDate[180], clTags, clDays, clRankColor1[20], clRankColor2[20], clRankColor3[20], clRankColor4[20], clRankColor5[20], clRankColor6[20], ClanBank, clPremiumPoints,
}
enum cHQInfo {
	cID, Float: cPosX, Float: cPosY, Float: cPosZ, Float: cEnterX, Float: cEnterY, Float: cEnterZ, cPrice, cClan, cVirtualWorld, cPickup
}
new ClanHQInfo[MAX_CLANHQ][cHQInfo], Text3D: ClanHqLabel[sizeof(ClanHQInfo)];

enum vInfo {
	vColorOne, vColorTwo
};
new VehicleStats[MAX_VEHICLES][vInfo];

enum cInfo {
	cID, cModel,
	Float:cLocationx, Float:cLocationy, Float:cLocationz, Float:cAngle, Float:KM, Float: cLastPos[3], cTemporar, cTemporarTime, cVip, cTimeGoto, Float: cVipPos[6],
	cColorOne, cColorTwo, cOwner[25], cValue, cLicense[14], cAlarm, cLock, Userid, Confiscated, Spawned, cSpecial, cPoints, cTax, paintjob, cFuel, cText[64], cTextColor, cVirtual, 
	cMod[14], bool: cRainBow, cLegendary, cStage, cMaxSpeed, Dayss, cTime, cNeon, cOnline
};
enum pPick {
	psID, psType, psWeapon, psAmmo, psWar, psAmount
}

enum ffInfo {
	fID, fRank1, fRank2, fRank3, fRank4, fRank5, fRank6
}

enum dInfo {
	dID, dModel, dPrice, dStock
};

enum gfInfo {
	gfID,
	Float:gfX, Float:gfY, Float:gfZ, Float:gfRot, 
	gfOwned, gfObject, gfAttacked
}

enum jInfo {
	jID, jName[128],		
	jLevel,
	jOwner[24], jBank,
	Float:jPosX, Float:jPosY, Float:jPosZ,
	jLegal, jSkill1Veh,	jSkill2Veh, jSkill3Veh,	jSkill4Veh,	jSkill5Veh, jSkill6Veh,		
	Text3D: jLabel,
	jPickup
}

new
	GraffitiInfo[MAX_SAFEZONES][gfInfo],
	JobInfo[MAX_JOBS][jInfo],
	FactionInfo[20][ffInfo],	
	CarInfo[MAX_VEHICLES][cInfo],
	Pickups[MAX_PICKUPSW][pPick],
	DSModels[59][dInfo],	
	ClanInfo[MAX_CLANS][clInfo];
 
stock SCMf(playerid, colour, const fmat[], va_args<>) {
	new UsageString[256]; va_format(UsageString, 128, fmat, va_start<3>);
	return SCM(playerid, colour, UsageString);
}


/* INCEPUT GAMEMODE */
#include "modules/rouletta.pwn"
#include <booter>

main() { }

public OnGameModeExit() {
	DestroyActor(SpawnActor);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `stuff` SET `goal`='%d'", ServerGoal);
	mysql_tquery(SQL, gQuery, "", "");
	save_stock();
	return true;
}

public OnGameModeInit() {
	for(new i = 0; i < 10; i++) RentStock[i] = 30;
	Command_AddAltNamed("da" , "deletead");
	Command_AddAltNamed("nd" , "ndelete");
	Command_AddAltNamed("smtd" , "staffmotd");
	Command_AddAltNamed("cmotd" , "clanmotd");
	Command_AddAltNamed("carradio" , "carmusic");
	Command_AddAltNamed("government" , "gov");
	Command_AddAltNamed("megaphone" , "m");
	Command_AddAltNamed("radio" , "r");
	Command_AddAltNamed("departments" , "d");
	Command_AddAltNamed("suspect" , "su");
	Command_AddAltNamed("bizmenu" , "bmenu");
	Command_AddAltNamed("housemenu" , "hmenu");
	Command_AddAltNamed("fpk" , "auninvite");
	Command_AddAltNamed("fvrespawn" , "fvr");
	Command_AddAltNamed("closereport" , "cr");
	Command_AddAltNamed("acceptreport" , "ar");
	Command_AddAltNamed("newbie" , "n");
	Command_AddAltNamed("nreply" , "nre");
	Command_AddAltNamed("setstat" , "set");
	Command_AddAltNamed("fixveh" , "fv");
	Command_AddAltNamed("locations" , "gps");
	Command_AddAltNamed("heal" , "healto");
	Command_AddAltNamed("pickup" , "p");
	Command_AddAltNamed("vsearch" , "vehname");
	Command_AddAltNamed("hangup" , "h");
	Command_AddAltNamed("ajail" , "jail");
	Command_AddAltNamed("whisper" , "w");
	Command_AddAltNamed("ad" , "advertise");
	Command_AddAltNamed("s" , "shout");
	Command_AddAltNamed("as" , "ashout");
	Command_AddAltNamed("startwork" , "work");
	Command_AddAltNamed("clanchat" , "c");
	Command_AddAltNamed("puthelmet" , "ph");
	Command_AddAltNamed("stopanim" , "unstuck");
	Command_AddAltNamed("tazer" , "ta");
	Command_AddAltNamed("missions" , "quests");
	Command_AddAltNamed("achievements" , "realizari");
	Command_AddAltNamed("respawnthiscar" , "vre");
	Command_AddAltNamed("clanduty" , "cduty");
	Command_AddAltNamed("nduty" , "hduty");
	Command_AddAltNamed("respawn" , "spawn");
	Command_AddAltNamed("myraport" , "raport");
	Command_AddAltNamed("myreferral" , "referal");
	Command_AddAltNamed("petmenu" , "pet");
	Command_AddAltNamed("hud" , "show");
	Command_AddAltNamed("emails" , "email");
	Command_AddAltNamed("achivemets", "realizari");
	Command_AddAltNamed("myskins" , "skins");
		
	new x = CreateDynamicActor(127, 2233.9841,-1333.1261,23.9815,86.8876, 1, 69.0, -1, -1, -1);
	ApplyDynamicActorAnimation(x, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);

	Iter_Init(MyVehicle);
	Iter_Init(LoginQueue);
	Iter_Init(Rainbows);
	Iter_Init(MySpec);

	mysql_log();

	RulettStatus = 0;
	RulettaTime[2] = RandomEx(70, 150);
	RulettaTime[1] = 3;
	RulettaTime[0] = 30;

	SpawnActor = CreateActor(158, 2250.7197,-83.0548,26.5266,259.7924);
	SetActorInvulnerable(SpawnActor, true);
	ApplyActorAnimation(SpawnActor, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);

	switch(SERVER_HOSTSTATUS) {
		case 0: SQL = mysql_connect("", "", "", ""), print("Server: Oficial");  //SQL = mysql_connect("193.203.39.73", "hc76samp80", "hc76samp80", "Z2K8VeKDxxQ1JaYm"), print("Server: Oficial"); // mare
		case 1: SQL = mysql_connect("", "", "", ""), print("Server: Beta"); // beta
		case 2: SQL = mysql_connect("localhost", "root", "", "gtavlc"), print("Server: localhost");
	}

	switch(mysql_errno()) {
		case 0: print("Ket noi voi co so du lieu thanh cong!");
		default: print("Ket noi voi co so du lieu that bai!");
	}

	new Year, Month, Day, Hour, Minute, Second;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(StartDate, sizeof(StartDate), "%02d/%02d/%d %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	format(gString, 100, "RO:RPG, %s", StartDate);
	SetGameModeText(gString);
	gString[0] = EOS;
 	mysql_tquery(SQL, "SELECT * FROM users", "TotalUsers", "");

	g_SpeedThreshold = SPEED_THRESHOLD * SPEED_THRESHOLD;
	ExamObject = CreateDynamicObject(1271, 280.6658, -134.8526, 1004.0625, 0.0, 0.0, 0.0);


	mysql_tquery(SQL, "SELECT * FROM `svehicles` ORDER BY `svehicles`.`vID` ASC", "LoadSVehicle", "");

	LoadMaps();
	LoadTDs();
	LoadIcons();
	LoadGates();
	LoadPickups();
	mysql_tquery(SQL, "SELECT * FROM `safezones` ORDER BY `safezones`.`ID` ASC", "InsertSafeZone", "");
	mysql_tquery(SQL, "SELECT * FROM `houses` ORDER BY `houses`.`ID` ASC", "LoadProperty", ""); 
	mysql_tquery(SQL, "SELECT * FROM `bizz` ORDER BY `bizz`.`ID` ASC", "LoadBizz", "");
	mysql_tquery(SQL, "SELECT * FROM `garages` ORDER BY `garages`.`ID` ASC", "InsertGarages", "");
	mysql_tquery(SQL, "SELECT * FROM `clans` ORDER BY `clans`.`ID` ASC", "InsertClans", "");
	mysql_tquery(SQL, "SELECT * FROM `clanhq`", "LoadHQClans", "");
	mysql_tquery(SQL, "SELECT * FROM `graffiti` ORDER BY `graffiti`.`ID` ASC", "LoadGraffiti", "");
	mysql_tquery(SQL, "SELECT * FROM `turfs`", "SQL_loadTurfs", "");
	mysql_tquery(SQL, "SELECT * FROM `factions` ORDER BY `factions`.`ID` ASC", "LoadFaction", "");
	mysql_tquery(SQL, "SELECT * FROM `factions` ORDER BY `factions`.`ID` ASC", "LoadFactions", "");
	mysql_tquery(SQL, "SELECT * FROM `stuff`", "LoadStuffs", "");
 	mysql_tquery(SQL, "SELECT * FROM `jobs` ORDER BY `jobs`.`ID` ASC", "LoadJobs", "");
 	mysql_tquery(SQL, "SELECT * FROM `dsveh`", "LoadDSVeh", "");
	mysql_tquery(SQL, "SELECT * FROM `seif`", "LoadSafes", "");
	
	skinlist = LoadModelSelectionMenu("skins.txt");
	hats = LoadModelSelectionMenu("hats.txt");
	glasses = LoadModelSelectionMenu("glasses.txt");
	fskins[0] = LoadModelSelectionMenu("f1.txt");
	fskins[1] = LoadModelSelectionMenu("f2.txt");
	fskins[2] = LoadModelSelectionMenu("f3.txt");
	fskins[3] = LoadModelSelectionMenu("f4.txt");
	fskins[4] = LoadModelSelectionMenu("f5.txt");
	fskins[5] = LoadModelSelectionMenu("f6.txt");
	fskins[6] = LoadModelSelectionMenu("f7.txt");
	fskins[7] = LoadModelSelectionMenu("f8.txt");
	fskins[8] = LoadModelSelectionMenu("f9.txt");
	fskins[9] = LoadModelSelectionMenu("f10.txt");
	fskins[10] = LoadModelSelectionMenu("f11.txt");
	fskins[11] = LoadModelSelectionMenu("f12.txt");
	fskins[12] = LoadModelSelectionMenu("f13.txt");
	fskins[13] = LoadModelSelectionMenu("f14.txt");
	fskins[14] = LoadModelSelectionMenu("f15.txt");

	for(new i = 0; i < sizeof(TurfInfo); i++) Turfs[i] = CreateZone(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY]);
	for(new i = 0; i <= sizeof(Peds)-1; i++) AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);  
	for(new c=0;c<CAR_AMOUNT;c++) Gas[c] = GasMax;

	if(realtime) {
		new tmphour, tmpminute, tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		new worldt = tmphour+1;
		SetWorldTimeEx(worldt);
	}	

	// if(!SERVER_HOSTSTATUS) 
	Logo = TextDrawCreate(637.500000, 433.000000, "rpg."SERVER_NAME".net");
	// else Logo = TextDrawCreate(637.500000, 433.000000, "beta.""SERVER_NAME"".ro");
	TextDrawLetterSize(Logo, 0.346587, 1.407498);
	TextDrawAlignment(Logo, 3);
	TextDrawColor(Logo, -1);
	TextDrawSetShadow(Logo, 0);
	TextDrawSetOutline(Logo, 1);
	TextDrawBackgroundColor(Logo, 227);
	TextDrawFont(Logo, 3);
	TextDrawSetProportional(Logo, 1);
	TextDrawSetShadow(Logo, 0);

	Iter_Add(PersonalVehicles, 0);  
	
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime) SetWorldTimeEx(wotime);
	DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(2);
	ManualVehicleEngineAndLights();

	RainBowColors();

	ServerPremium = random(5);
	return true;
}

function SQL_cacheserver() {
	if(!cache_num_rows()) 
		return true;
	
	new name[50], pw[30];
	cache_get_value_name(0, "Name", name);
	cache_get_value_name(0, "Password", pw);
	gString[0] = EOS;
	format(gString, 60, "hostname %s", name);
	SendRconCommand(gString);
	format(gString, sizeof(gString), "password %s", pw);
	SendRconCommand(gString);
	foreach(new i: Player) KickEx(i);
	return true;
}

public OnPlayerConnect(playerid) {
	TogglePlayerSpectating(playerid, true);
	TogglePlayerControllable(playerid, false);
	EnablePlayerCameraTarget(playerid, true);
	PlayerTextdraws(playerid);
	SetPlayerColor(playerid, COLOR_GREY);
	SetPlayerScore(playerid, 0);

	RemovePet(playerid);
	GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);
	ResetVariables(playerid);
	if(CountIP(GetIP(playerid)) > 1 && strcmp(GetIP(playerid), "127.0.0.1", true) != 0) {
		SCM(playerid, COLOR_WARNING, "Da da gioi han nguoi choi ket noi tren mot dia chi IP!");
		KickEx(playerid);
		return true;
	} 
	
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && i != playerid) {
			if(strcmp(GetName(playerid), GetName(i), true) == 0) KickEx(playerid);
		}
	}
	if(FaceReclama(PlayerInfo[playerid][pUsername])) {
		SCM(playerid, COLOR_WARNING, "Ban bi kick vi ten chua ky tu khong hop le!");
		Ban(playerid);	
		return true;
	}
	RemoveMaps(playerid);
	SetPlayerWorldBounds(playerid, 3579.6602, -4298.7334, 3971.8860, -3909.0200);
	SetPlayerColor(playerid, COLOR_GRAD2);
	ClearWanted(playerid);
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~CHECKING LOGIN QUEUE...~n~~w~~h~Please wait!", 5000, 3);
	if(Iter_Count(LoginQueue[0]) >= MAX_LOGIN) {
		Iter_Add(LoginQueue[1], playerid); 
		Camera(playerid);
		return true;
	}																
	else Iter_Add(LoginQueue[0], playerid);
	defer CheckAccount(playerid);
	return true; 
}
timer CheckAccount[7000](playerid) {
	gQuery[0] = EOS;
	TogglePlayerSpectating(playerid, false);
	format(gQuery,sizeof(gQuery),"SELECT * FROM users WHERE `name`='%s' LIMIT 1",GetName(playerid));
	mysql_tquery(SQL, gQuery, "CheckClassIP", "i", playerid);
	return true;
}
function GameModeInitExitFunc() {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			DisablePlayerCheckpointEx(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			SetPlayerCameraPos(i, 1460.0, -1324.0, 287.2);
			SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
			IsPlayerLogged[i] = 0;
		}
	}
	GameModeExit();
	return true;
}
function ArataMoney(playerid, type, amount) {
	new string[64];
	if(amount == 0) return true;
	switch(type) {
		case 0: format(string, sizeof(string), "~g~~h~+$%d", amount);
		case 1: format(string, sizeof(string), "~r~~h~-$%d", amount);
	}
	switch(PlayerInfo[playerid][pShowBanca]) {
		case 0: {
			PlayerTextDrawSetString(playerid, MoneyTD0, string);
			PlayerTextDrawShow(playerid, MoneyTD0);
		}
		case 1: {
			PlayerTextDrawSetString(playerid, MoneyTD1, string);
			PlayerTextDrawShow(playerid, MoneyTD1);
		}
	}
	TimerMoney[playerid] = gettime()+5;
	return true;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(PlayerInfo[playerid][pAdmin] > 0) Iter_Remove(PlayerAdmins, playerid);
	if(PlayerInfo[playerid][pHelper] > 0) Iter_Remove(PlayerHelpers, playerid);
	UpdateVar(playerid, "Status", 0);
	DestroyPlayerProgressBar(playerid, HudProgress[playerid][0]);
	DestroyPlayerProgressBar(playerid, HudProgress[playerid][1]);
	DestroyPlayerProgressBar(playerid, HudProgress[playerid][2]);
	DestroyPlayerProgressBar(playerid, ProgressFish[playerid]);
	if(SpawnedCarYT[playerid] == 1) { DestroyDynamicObject(nameobject[YouTuberCar[playerid]]), DestroyVehicle(YouTuberCar[playerid]), SpawnedCarYT[playerid] = 0; }
 	if(IsRentCar[playerid] == 1) { DestroyVehicle(VehicleRent[playerid]), VehicleRent[playerid] = 0, IsRentCar[playerid] = 0; }
	Delete3DTextLabel(deathLabel[playerid]);
	Delete3DTextLabel(vipLabel[playerid]);
	if(StartQuest[playerid] != 0) {
		for(new i = 0; i < sizeof(QuestPos); i++) {
			if(PlayerInfo[playerid][pSpecialQuest][i] == 1) {}
			else {
				DestroyPlayerObject(playerid, PlayerInfo[playerid][pObjectQuest][i]);
				RemovePlayerMapIcon(playerid, 70+i);
			}
		}
		DestroyVehicle(QuestVehicle[playerid]);
	}
	if(Iter_Count(MyVehicle[playerid]) != 0) { 
		foreach(new idd: MyVehicle[playerid]) {
			DestroyPlayerCar(idd);
			CarInfo[idd][cTime] = -1;
			Iter_Remove(PersonalVehicles, idd);
		}
	}
	if(Iter_Contains(PlayerVips, playerid)) Iter_Remove(PlayerVips, playerid);
	if(Iter_Contains(PlayerPremiums, playerid)) Iter_Remove(PlayerPremiums, playerid);
	Iter_Clear(MyVehicle[playerid]);
	if(playerObject[playerid] != 0) DestroyPlayerObject(playerid, playerObject[playerid]), playerObject[playerid] = 0;
	if(playerObject2[playerid] != 0) DestroyObject(playerObject2[playerid]), playerObject2[playerid] = 0;
	
	new string[180], query[256];
	if(TradeID[playerid] != -1) {
		new id = TradeID[playerid];
		format(string, sizeof(string), "* %s da roi game. Giao dich bi huy bo!", GetName(playerid));
		SCM(playerid, COLOR_GOLD, string);
		SCM(id, COLOR_GOLD, string);
		CancelSelectTextDraw(playerid);
		CancelSelectTextDraw(id);
		HideTradeItems(playerid);
		HideTradeTDs(id);
	}
	DeletePVar(playerid, "Santa");
	if(InExamen[playerid] == 1) FailExamen(playerid);
	new count, names[180];
	if(PlayerInfo[playerid][pWantedLevel] != 0) {
		foreach(new i: Player) {
			if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1) {
				count = 1;
				format(string, sizeof(string), "running suspect bonus!");
				GameTextForPlayer(i, string, 3000, 1);
				ConsumingMoney[i] = 1;
				GivePlayerCash(i, 1, PlayerInfo[playerid][pWantedLevel] * 2000);
				Update(i, pCashx);
				UpdateFactionRaport(i, 0);		

				format(string, sizeof(string), "Ban nhan duoc $%d tien thuong bat toi pham %s.", PlayerInfo[playerid][pWantedLevel] * 2000, GetName(playerid));
				SCM(i, COLOR_DBLUE, string);
				format(names, 256, "%s %s", names, GetName(i));
			}	
			if(count == 1) {
				if(ProxDetectorS(30.0, i, playerid)) {
					format(string, sizeof(string), "* %s is now in jail thanks to: %s", GetName(playerid), names);
					SCM(i, COLOR_PURPLE, string);
				}
			}				
		}
	}	
	if(count == 1) {	
		format(string, sizeof(string), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.", GetName(playerid), (PlayerInfo[playerid][pWantedLevel])*(150));
		SendTeamMessage(1, COLOR_LIGHTBLUE, string);
		SendTeamMessage(2, COLOR_LIGHTBLUE, string);
		SendTeamMessage(3, COLOR_LIGHTBLUE, string);			
		
		GivePlayerCash(playerid, 0, PlayerInfo[playerid][pWantedLevel] * 2000);
		PlayerInfo[playerid][pWantedDeaths] += 1;
		PlayerInfo[playerid][pJailed] = 1;
		PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(250);
		PlayCopSound();
		format(string, sizeof(string), "Because you got killed, you lost $%d and you will be taken to jail. You are no longer a criminal.", PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pWantedLevel] * 2000);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		
		TogglePlayerControllable(playerid, 0);
		SetPlayerFreeze(playerid, 2);
		PlayerInfo[playerid][pWantedLevel] = 0;
		SetPlayerWantedLevel(playerid, 0);
		Update(playerid,pWantedLevelx);
		Update(playerid,pJailedx);
		Update(playerid,pJailTimex);
		ClearCrime(playerid);					
	}

	if(Iter_Contains(LoginQueue[1], playerid)) Iter_Remove(LoginQueue[1], playerid);
	if(Iter_Contains(LoginQueue[0], playerid)) {
		Iter_Remove(LoginQueue[0], playerid);
		if(Iter_Count(LoginQueue[1]) > 0 && Iter_Count(LoginQueue[0]) <= MAX_LOGIN) {
			new last = Iter_First(LoginQueue[1]);
			Iter_Remove(LoginQueue[1], last);
			Iter_Add(LoginQueue[0], last);
			GameTextForPlayer(last,"  ", 100, 3);
			gQuery[0] = EOS;
			TogglePlayerSpectating(last, false);
			mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `name`='%s' LIMIT 1", GetName(last));
			mysql_tquery(SQL, gQuery, "CheckClassIP", "i", last);
		}
	}
	
	new playerID = GetPVarInt(playerid, "OfferBy");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(GetPVarInt(i, "OfferBy") == playerid) {
				SCM(playerid, -1, "Giao dich bi huy bo!");
				SCM(i, -1, "Giao dich bi huy bo!");
				SetPVarInt(i, "OfferBy", -1);		
			}
			if(TradePlayer[i] == playerid) {
				SCM(playerid, -1, "Giao dich bi huy bo!");
				SCM(i, -1, "Giao dich bi huy bo!");				
				TradePlayer[i] = -1;
			}
			if(AcceptedReport[i] == playerid) {
				AcceptedReport[i] = -1;
				SCM(i, COLOR_YELLOW, "Cuoc tro chuyen ket thuc! (quit)");
			}		
		}	
		if(IsPlayerConnected(Mobile[playerid])) {
			if(Mobile[playerid] < 255) {
				CellTime[Mobile[playerid]] = 0;
				CellTime[playerid] = 0;
				Mobile[Mobile[playerid]] = 255;
				SetPlayerSpecialAction(Mobile[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
				Mobile[playerid] = 255;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		if(targetfind[i] == playerid) {
			MDCOn[i] = -1;
			targetfind[i] = -1;
			UsedFind[i] = 0;
			DisablePlayerCheckpointEx(i);
			PlayerTextDrawHide(i, FindTD);
		}
		if(TaxiAccepted[i] < 999) {
			if(TaxiAccepted[i] == playerid) {
				TaxiAccepted[i] = 999;
				TaxiCallTime[i] = 0;
				PlayerTextDrawHide(i, FindTD);
				DisablePlayerCheckpointEx(i);
			}
		}
		if(HaveHelp[i] == playerid && PlayerInfo[playerid][pHelper] == 0 && HaveHelp[i] != -1) {
			format(string, sizeof(string), "(/n) %s da roi game trong khi dat mot cau hoi la %s.", GetName(playerid), GetName(i));
			if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(0xFFADADFF, string, 1);
			HaveHelp[i] = -1;
		}
		if(HaveHelp[playerid] == i && PlayerInfo[playerid][pHelper] >= 1 && HaveHelp[playerid] != -1) {
			format(string, sizeof(string), "(/n) %s da roi game trong khi dat mot cau hoi la %s.", GetName(playerid), GetName(i));
			if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(0xFFADADFF, string, 1);
			OnHelper[i] = 0;
		}
		
		if(TradePlayer[i] == playerid) {
			TradePlayer[i] = -1;
			SCM(i, -1, "Giao dich xe da bi huy");
		}
		if(playerID != -1 && i == playerID) {
			SetPVarInt(i, "OfferBy", -1);
			SCM(i, -1, "Giao dich bi huy bo!");
		}
		if(Spectate[i] == playerid) {
			TogglePlayerControllable(i, 1);
			TogglePlayerSpectating(i, 0);
			SetPlayerInterior(i,Unspec[i][sPint]);
			PlayerInfo[i][pInt] = Unspec[i][sPint];
			PlayerInfo[i][pLocal] = Unspec[i][sLocal];
			Unspec[i][sLocal] = 255;
			gTeam[i] = PlayerInfo[i][pTeam];
			SetPlayerToTeamColor(i);
			SendClientMessage(i, COLOR_LIGHTRED, "Ban khong con spec!");
			Iter_Remove(MySpec[Spectate[playerid]], playerid);
			SpawnPlayer(i);
			Spectate[i] = 255;
			LastRecon[i] = 1;
			PlayerTextDrawHide(i, SpectatorTD);
		}			
	}
	if(AcceptedService[playerid] != -1) {
		AcceptedTaxiService[0][AcceptedService[playerid]] = 0;
		format(string, sizeof(string), "* Member %s da thoat game trong khi da nhan cuoc goi taxi tu %s (%d). Hien cac thanh vien khac co the nhan cuoc goi nay.", GetName(playerid), GetName(AcceptedService[playerid]), AcceptedService[playerid]);
		SendFactionMessage(12, 0x2C6CBFFF, string);
		format(string, sizeof(string), "Ban da huy cuoc goi taxi!");
		SCM(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Taxier %s da thoat game. Hay doi mot tai xe khac chap nhan cuoc goi cua ban.", GetName(playerid));
		SCM(AcceptedService[playerid], COLOR_YELLOW, string);
		AcceptedService[playerid] = -1;
		targetfind[playerid] = -1;
		CP[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}	
	if(TaxiDriver[playerid] != -1) {
		if(TaxiMoney[playerid] != 0) {
			UpdateFactionRaport(playerid, 0);					
			AcceptedService[TaxiDriver[playerid]] = -1;
			foreach(new i: Player) {
				if(IsNearPlayer(playerid, i)) {
					format(string, sizeof(string), "* %s da tra cho tai xe %s so tien $%s chi phi taxi.", GetName(playerid), GetName(TaxiDriver[playerid]), FormatNumber(TaxiMoney[playerid]));
					SCM(i, COLOR_PURPLE, string);
				}
			}
			TaxiMoney[playerid] = 0;
		}
		TaxiDriver[playerid] = -1;
		PlayerTextDrawHide(playerid, FareTD);
		KillTimer(TaxiTimer[playerid]);
	}
	if(GetPVarInt(playerid, "InLesson") != -1) {
		new id = GetPVarInt(playerid, "InLesson");
		format(string, sizeof(string), "Buoi hoc bi huy vi %s da thoat game.", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE,string);
		SetPVarInt(id, "InLesson", -1);
		SetPVarInt(playerid, "InLesson", -1);		
	}
	if(IsPlayerLogged[playerid] == 1) SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);	
	ADeathMessage(playerid, INVALID_PLAYER_ID, 201);	
	if(ReportTimer[playerid] != 0) {
		KillTimer(ReportTimer[playerid]);
		ReportTimer[playerid] = 0;
	}	
	SetPVarInt(playerid,"KilledFlood",0);
	if(PlayerHit[playerid] != -1) {
		UsedContract[PlayerHit[playerid]] = 0;
		PlayerHit[playerid] = -1;
	}
	if(TradeTime[playerid] != 0) KillTimer(TradeTime[playerid]), TradeTime[playerid] = 0;   
	if(Contract[playerid] == 1) {
		foreach(new i: Player) {
			if(PlayerHit[i] == playerid) {
				PlayerHit[i] = -1;
				PlayerTextDrawHide(i, FindTD);
			}
		}
	}	
	if(JobWorking[playerid] == 1) {
		JobWorking[playerid] = 0;
		PlayerTextDrawHide(playerid, JobTD);
		if(JobVehicle[playerid] != 0) { DestroyVehicle(JobVehicle[playerid]); JobVehicle[playerid] = 0; }
		if(Trailer[playerid] != 0) { DestroyVehicle(Trailer[playerid]); Trailer[playerid] = 0;  }
		CP[playerid] = 0;
		JobVehicle[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 2);
	}
	if(IsPlayerInAnyVehicle(playerid)) VehicleOccupied[GetPlayerVehicleID(playerid)] --;
	if(IsPlayerLogged[playerid] != 0) {
		if(Iter_Count(MySpec[playerid]) != 0) Iter_Clear(MySpec[playerid]);
		mysql_format(SQL, query, sizeof(query),"UPDATE users SET `Muted`='0',`MuteTime`='0' WHERE `ID`='%d'", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,query, "", "");
		Update(playerid, pCarLicSx);
		Update(playerid, pGunLicSx);
		Update(playerid, pBoatLicSx);
		Update(playerid, pFlyLicSx);
		Update(playerid, pNewbieMutex);
		OnPlayerDateUpdateX2(playerid);
		Update(playerid, pPayDayHadx);
		Update(playerid, pPayDayx);
		Update(playerid, pPayCheckx);
		Update(playerid, pFpunishx);
		Update(playerid, pConnectTimex);
		UpdateVar(playerid, "MBank", PlayerInfo[playerid][pStoreAccount]);
		UpdateVar(playerid, "Bank", PlayerInfo[playerid][pAccount]);
		Update(playerid, pLawyerx);
		Update(playerid, pTowx);
		Update(playerid, pCashx);
		UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
		Update(playerid, pJailTimex);
		Update(playerid, pRobx);
		mysql_format(SQL, query,128,"UPDATE `users` SET `Seconds`='%f' WHERE `ID`='%d' LIMIT 1",PlayerInfo[playerid][pSeconds],PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, query, "", "");		
	}	
	if(StartedSpray[playerid] == 1 || ClanDuty[playerid] == 1) {
		GraffitiInfo[StartedSpray2[playerid]][gfAttacked] = 0;
		StartedSpray[playerid] = 0;
		StartedSpray2[playerid] = 0;
		GraffitiInfo[StartedSprayOn[playerid]][gfAttacked] = 0;
		StartedSprayOn[playerid] = 0;
		ClanProces[playerid] = 0;
		ClanDuty[playerid] = 0;
	}
	if(JobWorking[playerid] == 1) {
		JobWorking[playerid] = 0;
		if(JobVehicle[playerid] != 0) { DestroyVehicle(JobVehicle[playerid]); JobVehicle[playerid] = 0; }
		if(Trailer[playerid] != 0) { DestroyVehicle(Trailer[playerid]); Trailer[playerid] = 0; }
		PlayerTextDrawHide(playerid, InfosTD);
		DisablePlayerCheckpointEx(playerid);
		CP[playerid] = 0;
		JobVehicle[playerid] = 0;
	}
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		switch(reason) {
			case 0: format(string, sizeof(string), "QuitBot: Admin %s left the game (Crash)", GetName(playerid));
			case 1: format(string, sizeof(string), "QuitBot: Admin %s left the game (Quit)", GetName(playerid));
			case 2: format(string, sizeof(string), "QuitBot: Admin %s left the game (Kicked/Banned)", GetName(playerid));
		}
		SendAdminMessage(COLOR_LOGS, string, 1);
	}		
	if(PlayerInfo[playerid][pMember] != 0 && PlayerInfo[playerid][pRank] > 0) {
		if(InWar[PlayerInfo[playerid][pMember]] == 1) {
			switch(reason) {
				case 0: format(string, sizeof(string), "Thanh vien %s da roi game. War score: %d (Crash).",GetName(playerid), WarKills[playerid]-WarDeaths[playerid]);
				case 1: format(string, sizeof(string), "Thanh vien %s da roi game. War score: %d (Quit).",GetName(playerid), WarKills[playerid]-WarDeaths[playerid]);
				case 2: format(string, sizeof(string), "Thanh vien %s da roi game. War score: %d (Kicked/Banned).",GetName(playerid), WarKills[playerid]-WarDeaths[playerid]);
			}	
		}
		else {
			switch(reason) {
				case 0: format(string, sizeof(string), "Thanh vien %s da roi game. (Crash).",GetName(playerid));
				case 1: format(string, sizeof(string), "Thanh vien %s da roi game. (Quit).",GetName(playerid));
				case 2: format(string, sizeof(string), "Thanh vien %s da roi game. (Kicked/Banned).",GetName(playerid));
			}
		}
		SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, string);
	}	
	switch(reason) {
		case 0: {
			if(PaintType[playerid] == 0 && InEvent[playerid] == 0 && GetPlayerInterior(playerid) == 0) {
				format(string, sizeof(string), "%s has disconnected from the server (Crash).",GetNameEx(playerid));
				ProxDetector(20.0, playerid, string, COLOR_CLIENT);
			}	
		}	
		case 1: {
			format(string, sizeof(string), "%s has disconnected from the server (Quit).",GetNameEx(playerid));
			ProxDetector(20.0, playerid, string, COLOR_CLIENT);
		}	 
		case 2: {
			format(string, sizeof(string), "%s has disconnected from the server (Kicked/Banned).",GetNameEx(playerid));
			ProxDetector(20.0, playerid, string, COLOR_CLIENT); 
		}
	}
	
	new y,m,d,h,mi;
	getdate(y,m,d);
	gettime(h,mi);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE users SET `lastOn`='%02d.%02d.%d %02d:%02d' WHERE `ID`='%d'",d,m,y,h,mi, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");

	ResetVariables(playerid);
	return true;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid) {
   	gString[0] = EOS;
	if(clickedid == RoulettaTD[12]) {
		if(RulettStatus == 2) 
			return SCM(playerid, COLOR_LGREEN, "Ban khong the dat cuoc khi roulette dang xoay");
		if(PlaceAlerdy[playerid])
			return SCM(playerid, COLOR_LGREEN, "Ban da dat cuoc.");
		Dialog_Show(playerid, DIALOG_BETRED, DIALOG_STYLE_INPUT, "Place a bet", "{FFFFFF}Bet on {FF0000}RED (WIN 2X)\n{FFFFFF}Ban muon cuoc bao nhieu.", "Bet", "Back");
		return true;
	}
	if(clickedid == PinTD[2]) {
		PlayerTextDrawSetString(playerid, PinPTD[10], "----");
		PinInsert[playerid] = "";
		new ste[5];
		for(new i = 0; i < 10; i++) format(ste, sizeof(ste), "%d", i == 9 ? 0 : i+1), PlayerTextDrawSetString(playerid, PinPTD[i], ste);
	}
	if(clickedid == PinTD[3]) {
		if(strlen(PinInsert[playerid]) < 4) return true;
		if(PinInsert[playerid][0] == '0')
			return SCM(playerid, COLOR_LGREEN, "Error: PIN khong hop le.");

		switch(IsPin[playerid]) {
			case 1: {	
				PlayerInfo[playerid][pPin] = strval(PinInsert[playerid]);
				format(gString, 150, "(PIN): {FFFFFF}Ban da dat PIN la '%d', ban co the f8 chup man hinh phong khi quen.", PlayerInfo[playerid][pPin]);
				SCM(playerid, COLOR_LGREEN, gString);
				PlayerInfo[playerid][pPinLogged] = 1;
				UpdateVar(playerid, "Pin", PlayerInfo[playerid][pPin]);
			}
			case 2: {
				if(PlayerInfo[playerid][pPin] == strval(PinInsert[playerid])) {
					PlayerInfo[playerid][pPinLogged] = 1;	
					SendClientMessage(playerid, COLOR_YELLOW, "Chuc mung! Ban da nhap chinh xac PIN, bay gio ban co toan quyen truy cap vao tai khoan.");
				}
				else {
					new ste[5];
					SendClientMessage(playerid, COLOR_WARNING, "PIN da nhap khong hop le.");
					PlayerTextDrawSetString(playerid, PinPTD[10], "----");
					PinInsert[playerid] = "";	
					for(new i = 0; i < 10; i++) format(ste, sizeof(ste), "%d", i == 9 ? 0 : i+1), PlayerTextDrawSetString(playerid, PinPTD[i], ste);								
					return true;
				}
			}
		}
		IsPin[playerid] = 0;	
		for(new i = 0; i < 11; i++) PlayerTextDrawHide(playerid, PinPTD[i]);
		for(new i = 0; i < 7; i++) TextDrawHideForPlayer(playerid, PinTD[i]);
		CancelSelectTextDraw(playerid);
		PinInsert[playerid] = "";
		PlayerTextDrawSetString(playerid, PinPTD[10], "----");
	}
	if(clickedid == RoulettaTD[13]) {
		if(RulettStatus == 2) 
			return SCM(playerid, COLOR_LGREEN, "Ban khong the dat cuoc khi roulette dang xoay");
		if(PlaceAlerdy[playerid])
			return SCM(playerid, COLOR_LGREEN, "Ban da dat cuoc.");
		Dialog_Show(playerid, DIALOG_BETGREEN, DIALOG_STYLE_INPUT, "Place a bet", "{FFFFFF}Bet on {65ec32}GREEN (WIN 14X)\n{FFFFFF}Ban muon cuoc bao nhieu.", "Bet", "Back");
		return true;
	}
	if(clickedid == RoulettaTD[14]) {
		if(RulettStatus == 2) 
			return SCM(playerid, COLOR_LGREEN, "Ban khong the dat cuoc khi roulette dang xoay");
		if(PlaceAlerdy[playerid])
			return SCM(playerid, COLOR_LGREEN, "Ban da dat cuoc.");
		Dialog_Show(playerid, DIALOG_BETBLACK, DIALOG_STYLE_INPUT, "Place a bet", "{FFFFFF}Bet on {656665}BLACK (WIN 2X)\n{FFFFFF}Ban muon cuoc bao nhieu.", "Bet", "Back");
		return true;
	}
	if(clickedid == TradeTD[10]) {
		if(TradeItems[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Ban chua them vat pham nao");
		if(TradeReady[playerid] == 1) return SCM(playerid, COLOR_ERROR, "Ban khong the xoa hang hoa khi bo hen gio da duoc kich hoat");
		HideTradeItems(playerid);		
		new id = TradeID[playerid];
		format(gString, 100, "%s da xoa mot mon hang.", GetName(playerid));
		SCM(playerid, COLOR_GOLD, gString);
		SCM(id, COLOR_GOLD, gString);	
		return true;	
	}
	if(clickedid == RegisterTD[6]) {
		if(RegisrationStep[playerid][0] && RegisrationStep[playerid][1] && RegisrationStep[playerid][2] && RegisrationStep[playerid][3]) {
			OnPlayerRegister(playerid,MD5_Hash(RegisterPass[playerid]));
			for(new i = 0; i < 7; i++) PlayerTextDrawHide(playerid, RegisterPTD[i]);
			for(new i = 0; i < 13; i++) TextDrawHideForPlayer(playerid, RegisterTD[i]);
			Camera(playerid);
			TextDrawShowForPlayer(playerid, LoginTD[0]);
			TextDrawShowForPlayer(playerid, LoginTD[1]);
			format(gString, 100, "Welcome, %s!\nNhap mat khau cua ban de dang nhap.", GetName(playerid));
			Dialog_Show(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Account Registered", gString, "Login", "Quit");
			IsRegister[playerid] = false;
			CancelSelectTextDraw(playerid);
		}
		else return SCM(playerid, COLOR_GREY, "Ban khong dien du thong tin.");
		return true;
	}
	if(clickedid == RegisterTD[7]) return Kick(playerid);
	if(clickedid == SkinsTD[4]) {
		SkinsActions[playerid] = 0;
		IsSkins[playerid] = 0;
		CancelSelectTextDraw(playerid);
		for(new i = 0; i < 10; i++) PlayerTextDrawHide(playerid, SkinsPTD[i]);
		for(new i = 0; i < 9; i++) TextDrawHideForPlayer(playerid, SkinsTD[i]);
		return true;
	}
	if(clickedid == SkinsTD[3]) SkinsActions[playerid] = 1, SCM(playerid, COLOR_GREY, "Chon mot skin de thay doi dien mao nhan vat.");
	if(clickedid == SkinsTD[2]) SkinsActions[playerid] = 2, SCM(playerid, COLOR_GREY, "Chon mot skin de xoa.");
 	if(clickedid == TradeTD[9] && TradeReady[playerid] == 0) Dialog_Show(playerid, DIALOG_TRADE, DIALOG_STYLE_LIST, "Trade", "Money\nHouse\nBusiness\nVehicle\nRare Voucher (50 PP)\nEpic Voucher (100 PP)\nLegendary Voucher (500 PP)\nCurrent Skin\nHidden Color\nMoney (with miliards)\nTickets Rainbow\nTickets Vip", "Ok", "Cancel");
	if(clickedid == CrateTD[2]) {
		if(totalcrates(playerid) < 1) return SCM(playerid, COLOR_LGREEN, "Ban khong co du hop.");
		if(CrateModel[playerid] >= 0) return true;
		for(new j = 0; j < 6; j++) TextDrawHideForPlayer(playerid, CrateTD[j]);
		for(new j = 0; j < 2; j++) PlayerTextDrawHide(playerid, CratePTD[j]);
		format(gString, sizeof(gString), "Crates Type\tAmount\n{FFFFFF}Rare Crates\t{045AB6}%d\n{FFFFFF}Epic Crates\t{610F7D}%d\n{FFFFFF}Legendary Crates\t{eeba24}%d\nTranscendent Crates\t{e52222}%d\n{FFFFFF}Vehicle Crates\t{20F5F1}%d", PlayerInfo[playerid][pCrates][0], PlayerInfo[playerid][pCrates][1], PlayerInfo[playerid][pCrates][2], PlayerInfo[playerid][pCrates][3], PlayerInfo[playerid][pCrates][4]);
		Dialog_Show(playerid, DIALOG_CRATES, DIALOG_STYLE_TABLIST_HEADERS, "My crates", gString, "Select", "Cancel");
		return true;
	}
	if(clickedid == StageTD[0]) {
		new idd = PersonalCar(playerid);
		if(CarInfo[idd][cStage] > 2) return true;
		format(gString, sizeof(gString), "{FFFFFF}Do you want to update your {539EEA}tuning step {FFFFFF}to {539EEA}%d\n{FFFFFF}Gia phai tra la {539EEA}%d premium points{FFFFFF}.", CarInfo[idd][cStage]+1, StagePrice[0][CarInfo[idd][cStage]+1]);
		Dialog_Show(playerid, DIALOG_UPSTAGE, DIALOG_STYLE_MSGBOX, "{539EEA}Tuning {FFFFFF}Upgrade", gString, "Upgrade", "Cancel");
		return true;
	}
	if(clickedid == StageTD[1]) {
		for(new i = 0; i < 2; i++) TextDrawHideForPlayer(playerid, StageTD[i]);
		PlayerTextDrawHide(playerid, StagePTD);
		CancelSelectTextDraw(playerid);
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);
		IsStage[playerid] = 0;
		return true;
	}
	if(clickedid == CrateTD[1]) {
		if(CrateModel[playerid] >= 0) return true;
		for(new j = 0; j < 6; j++) TextDrawHideForPlayer(playerid, CrateTD[j]);
		for(new j = 0; j < 2; j++) PlayerTextDrawHide(playerid, CratePTD[j]);
		IsCrates[playerid] = 0;
		CancelSelectTextDraw(playerid);
		return true;
	}
	if(clickedid == CrateTD[0]) {
		if(CrateModel[playerid] >= 0) return true;
 		CrateModel[playerid] = 0;
 		CrateTime[playerid] = 20;
		SCM(playerid, COLOR_WHITE, "{D81B15}(Crate System){FFFFFF} Ban da mo mot hop THU NGHIEM, phan thuong se khong duoc nhan. Hay hinh dung dieu nay khi ban mo hop thuc su.");
		startcrates(playerid);
		return true;
	}	
	if(clickedid == HiddTD[0]) {
		if(pColor1[playerid] == 128) pColor1[playerid] = 256;
		pColor1[playerid] --;
		ChangeVehicleColorEx(GetPlayerVehicleID(playerid), pColor1[playerid], pColor2[playerid]);
		format(gString, 50, "Color 1: %d", pColor1[playerid]);
		PlayerTextDrawSetString(playerid, HiddTDs[0], gString);
		PlayerTextDrawShow(playerid, HiddTDs[0]);
		return true;
	}
	if(clickedid == HiddTD[1]) {
		if(pColor1[playerid] == 255) pColor1[playerid] = 127;
		pColor1[playerid] ++;
		ChangeVehicleColorEx(GetPlayerVehicleID(playerid), pColor1[playerid], pColor2[playerid]);
		format(gString, 50, "Color 1: %d", pColor1[playerid]);
		PlayerTextDrawSetString(playerid, HiddTDs[0], gString);
		PlayerTextDrawShow(playerid, HiddTDs[0]);
		return true;
	}
	if(clickedid == HiddTD[3]) {
		if(pColor2[playerid] == 128) pColor2[playerid] = 256;
		pColor2[playerid] --;
		ChangeVehicleColorEx(GetPlayerVehicleID(playerid), pColor1[playerid], pColor2[playerid]);
		format(gString, 50, "Color 2: %d", pColor2[playerid]);
		PlayerTextDrawSetString(playerid, HiddTDs[2], gString);
		PlayerTextDrawShow(playerid, HiddTDs[2]);
		return true;
	}
	if(clickedid == HiddTD[4]) {
		if(pColor2[playerid] == 255) pColor2[playerid] = 127;
		pColor2[playerid] ++;
		ChangeVehicleColorEx(GetPlayerVehicleID(playerid), pColor1[playerid], pColor2[playerid]);
		format(gString, 50, "Color 2: %d", pColor2[playerid]);
		PlayerTextDrawSetString(playerid, HiddTDs[2], gString);
		PlayerTextDrawShow(playerid, HiddTDs[2]);
		return true;
	}
	if(clickedid == HiddTD[2]) {
		new idd = pCar[playerid];
		ChangeVehicleColorEx(GetPlayerVehicleID(playerid), CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo]);
		SetCameraBehindPlayer(playerid), SetPlayerInterior(playerid, pInteriorID[playerid]), SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
		SetPlayerVirtualWorld(playerid, 0);
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
		TextDrawHideForPlayer(playerid, HiddTD[0]);
		TextDrawHideForPlayer(playerid, HiddTD[1]);
		TextDrawHideForPlayer(playerid, HiddTD[2]);
		TextDrawHideForPlayer(playerid, HiddTD[3]);
		TextDrawHideForPlayer(playerid, HiddTD[4]);
		PlayerTextDrawHide(playerid, HiddTDs[0]);
		PlayerTextDrawHide(playerid, HiddTDs[1]);
		PlayerTextDrawHide(playerid, HiddTDs[2]);
		InShop[playerid] = 0;
		CancelSelectTextDraw(playerid);
		return true;
	}
	if(clickedid == Text:INVALID_TEXT_DRAW) {
		if(IsRegister[playerid]) SelectTextDraw(playerid, 0x5AC6D5FF);
		if(Iter_Contains(IsRuletta, playerid)) {
			if(PlaceAlerdy[playerid] != 0) {
				SCM(playerid, COLOR_GREY, "Hien tai ban khong the roi khoi roulette.");
				SelectTextDraw(playerid, 0xFFFFFFFF);
				return true;
			}
			for(new i = 0; i < 19; i++) TextDrawHideForPlayer(playerid, RoulettaTD[i]);
			CancelSelectTextDraw(playerid);
			Iter_Remove(IsRuletta, playerid);
		} 
		if(ExamTime[playerid] > 0) SelectTextDraw(playerid, 0x52EF4AFF);
		if(IsPin[playerid] >= 1) {
			if(IsPin[playerid] == 2) SelectTextDraw(playerid, 0xE52C2FFF);
			else {
				new ste[5];
				for(new i = 0; i < 11; i++) {
					if(i < 10) {
						PlayerTextDrawHide(playerid, PinPTD[i]); 
						format(ste, sizeof(ste), "%d", i == 9 ? 0 : i+1);
						PlayerTextDrawSetString(playerid, PinPTD[i], ste);
					}
					else PlayerTextDrawHide(playerid, PinPTD[i]);
				}
				for(new i = 0; i < 7; i++) TextDrawHideForPlayer(playerid, PinTD[i]);
				CancelSelectTextDraw(playerid);
				PinInsert[playerid] = "";
				PlayerTextDrawSetString(playerid, PinPTD[10], "----");
				IsPin[playerid] = 0;
			}
		}
		if(IsGunShop[playerid] == 1) {
			for(new i = 0; i < 8; i++) PlayerTextDrawHide(playerid, GunTD[i]);
			CancelSelectTextDraw(playerid);
			IsGunShop[playerid] = 0;
			GunID[playerid] = 0;
			DestroyPlayerObject(playerid, GunObject[playerid]);
			TogglePlayerControllable(playerid, 1);
			TogglePlayerSpectating(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetPlayerPosEx(false, playerid, 289.9354,-79.7819,1001.5156);
		}
		if(IsDublaj[playerid] == 1) SelectTextDraw(playerid, 0xFFFFFFFF);
		if(IsPacanele[playerid] == 1) {
			if(TimerPacanele[playerid] > 0) SelectTextDraw(playerid, 0xF4E318FF);
			else {
				for(new i = 0; i < 9; i++) PlayerTextDrawHide(playerid, SlotTD[i]);
				for(new i = 0; i < 11; i++) PlayerTextDrawHide(playerid, PacaneleTD[i]);
				CancelSelectTextDraw(playerid);
				BetPacanele[playerid] = 0;
				PlayerTextDrawSetString(playerid, PacaneleTD[8], "Bet: CLICK");
				IsPacanele[playerid] = 0;
				TogglePlayerControllable(playerid, 1);
				TogglePlayerSpectating(playerid, 0);
				SetCameraBehindPlayer(playerid);
				ClearAnimations(playerid);
			}
		}
		if(IsStage[playerid] == 1) SelectTextDraw(playerid, 0xFFFFFFFF);
		if(IsSkins[playerid] == 1) {
			SkinsActions[playerid] = 0;
			IsSkins[playerid] = 0;
			CancelSelectTextDraw(playerid);
			for(new i = 0; i < 10; i++) PlayerTextDrawHide(playerid, SkinsPTD[i]);
			for(new i = 0; i < 9; i++) TextDrawHideForPlayer(playerid, SkinsTD[i]);
		}
		if(RollTime[playerid] > 0) SelectTextDraw(playerid, 0xCA3ADBFF);
		if(CrateTime[playerid] > 0) SelectTextDraw(playerid, 0xCA3ADBFF);
		else {
			if(IsCrates[playerid] == 1) {
				IsCrates[playerid] = 0;
				for(new j = 0; j < 6; j++) TextDrawHideForPlayer(playerid, CrateTD[j]);
				for(new j = 0; j < 2; j++) PlayerTextDrawHide(playerid, CratePTD[j]);
				CancelSelectTextDraw(playerid);
			}
		}
		if(GetPVarInt(playerid, "PlayMine") == 1 || GetPVarInt(playerid, "StartedGame") == 1) SelectTextDraw(playerid, 0x80FF00FF);
		if(TradeID[playerid] != -1) {
			new id = TradeID[playerid];
			format(gString, 50, "* %s da huy giao dich!", GetName(playerid));
			SCM(playerid, COLOR_GOLD, gString);
			SCM(id, COLOR_GOLD, gString);
			HideTradeItems(playerid);
			HideTradeItems(id);
			HideTradeTDs(id);
			HideTradeTDs(playerid);
			CancelSelectTextDraw(playerid);
			CancelSelectTextDraw(id);
		}
		if(InShop[playerid] == 1 || CreateHouse[playerid] == 1) SelectTextDraw(playerid, 0xFF0000FF);
		if(InDealer[playerid] >= 1 && TestingModel[playerid] == 0) {
			CancelSelectTextDraw(playerid);
			HideDealershipTextdraws(playerid);
			if(InDealer[playerid] == 1) SetPlayerPosEx(false, playerid, 1487.0498,-2287.2930,13.7529);//
			else if(InDealer[playerid] == 2) SetPlayerPosEx(false, playerid, 1487.0498,-2287.2930,13.7529);
			InDealer[playerid] = 0;
			DealerCategory[playerid] = 0;
			DealerCarColor1[playerid] = 0;
			DealerCarColor2[playerid] = 0;
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			DestroyVehicle(DealerCar[playerid]);
			DealerCar[playerid] = 0;
			DealerCarType[playerid] = -1;
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
		}
	}
	if(clickedid == ShopTD[0]) {
		if(SInterior[playerid] == 1) SInterior[playerid] = 38;
		SInterior[playerid] --;
		SetInteriorCamera(playerid);
		return true;
	}
	if(clickedid == ShopTD[1]) {
		if(SInterior[playerid] == 37) SInterior[playerid] = 0;
		SInterior[playerid] ++;
		SetInteriorCamera(playerid);
		SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
		return true;
	}
	if(clickedid == ShopTD[4]) HideShopTDs(playerid), SetCameraBehindPlayer(playerid), SetPlayerInterior(playerid, pInteriorID[playerid]), SetPlayerPosEx(false, playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]), CreateHouse[playerid] = 0;
	return true;
}	
timer HideDublaj[1000](playerid) {
	if(IsDublaj[playerid] == 0) {
		for(new i = 0; i < 7; i++) PlayerTextDrawHide(playerid, DublajTD[i]);
		IsDublaj[playerid] = 0;
		PlayerTextDrawSetString(playerid, DublajTD[4], "LD_CARD:cdback");
		for(new i = 0; i < 9; i++) PlayerTextDrawShow(playerid, SlotTD[i]);
		for(new i = 0; i < 11; i++) PlayerTextDrawShow(playerid, PacaneleTD[i]);
		IsPacanele[playerid] = 1;
		new string[300];
	 	format(string, sizeof(string), "~g~$%s", GetCashStr(playerid));
 		PlayerTextDrawSetString(playerid, PacaneleTD[9], string);
	}
	else PlayerTextDrawSetString(playerid, DublajTD[4], "LD_CARD:cdback");
	return true;
}

function ShowCarInfo(playerid, vsid) {
	gString[0] = EOS;
 	format(gString, sizeof(gString), "{A8C7DE}Vehicle name: %s (%d)\nVehicle Price: $%s\nVehcile Status: %s\nColors: {%s}%d{A8C7DE}, {%s}%d\n{A8C7DE}Vehicle odometer: %.2f km\nInsurance points: %d/10\nInsurance tax: $%s per point\nDays: %d\nVehicle Speed: %d km/h (+%dkm/h)\nOther details: %s", 
		aVehicleNames[CarInfo[vsid][cModel]-400], CarInfo[vsid][Spawned], FormatNumber(CarInfo[vsid][cValue]), CarInfo[vsid][cLock] != 1 ? ("{47F564}Unlocked{A8C7DE}") : ("{F92E2E}Locked{A8C7DE}"), GetVehicleColors[CarInfo[vsid][cColorOne]], CarInfo[vsid][cColorOne], 
		GetVehicleColors[CarInfo[vsid][cColorTwo]], CarInfo[vsid][cColorTwo], CarInfo[vsid][KM], CarInfo[vsid][cPoints], FormatNumber(CarInfo[vsid][cTax]), CarInfo[vsid][Dayss], CarInfo[vsid][cMaxSpeed], StageSpeed[0][CarInfo[vsid][cStage]], TotalUp(vsid));
	Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Vehicle info", gString, "Close", "");		
	return true;
}
#include "core/dialog"
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid) {
	new string[110];
	gString[0] = EOS;
	if(playertextid == DublajTD[3]) {
		for(new i = 0; i < 7; i++) PlayerTextDrawHide(playerid, DublajTD[i]);
		PlayerTextDrawSetString(playerid, DublajTD[4], "LD_CARD:cdback");
		IsDublaj[playerid] = 0;
		IsPacanele[playerid] = 1;
		for(new i = 0; i < 9; i++) PlayerTextDrawShow(playerid, SlotTD[i]);
		for(new i = 0; i < 11; i++) PlayerTextDrawShow(playerid, PacaneleTD[i]);
	}
	if(TradeID[playerid] != -1) {
		for(new i = 0; i < 10; i++) {
			if((playertextid != TradeIcon[i]) || CarTrade[TradeID[playerid]] == -1)
				continue;

			ShowCarInfo(playerid, CarTrade[TradeID[playerid]]);
		}
	}
	if(playertextid == ExamTD[10]) {
		switch(InExamen[playerid]) {
			case 2: {
				switch(StepExam[playerid]) {
					case 0, 1, 3: FailExam(playerid), SCM(playerid, COLOR_LIGHTRED, "Licenses:{FFFFFF} Cau tra loi sai.");
					case 2, 4: StepExam[playerid] ++, ShowExam(playerid, 0);
				}
			}
			case 3: {
				switch(StepExam[playerid]) {
					case 0, 1: FailExam(playerid), SCM(playerid, COLOR_LIGHTRED, "Licenses:{FFFFFF} Cau tra loi sai.");
					case 2, 3: StepExam[playerid] ++, ShowExam(playerid, 1);
				}				
			}
		}
	}
	if(playertextid == ExamTD[11]) {
		switch(InExamen[playerid]) {
			case 2: {
				switch(StepExam[playerid]) {
					case 2, 3, 4: FailExam(playerid), SCM(playerid, COLOR_LIGHTRED, "Licenses:{FFFFFF} Cau tra loi sai.");
					case 0, 1: StepExam[playerid] ++, ShowExam(playerid, 0);
				}
			}
			case 3: {
				switch(StepExam[playerid]) {
					case 0, 3: FailExam(playerid), SCM(playerid, COLOR_LIGHTRED, "Licenses:{FFFFFF} Cau tra loi sai.");
					case 1, 2: StepExam[playerid] ++, ShowExam(playerid, 1);
				}				
			}
		}
	}
	if(playertextid == ExamTD[12]) {
		switch(InExamen[playerid]) {
			case 2: {
				switch(StepExam[playerid]) {
					case 0, 1, 2, 4: FailExam(playerid), SCM(playerid, COLOR_LIGHTRED, "Licenses:{FFFFFF} Cau tra loi sai.");
					case 3: StepExam[playerid] ++, ShowExam(playerid, 0);
				}
			}
			case 3: {
				switch(StepExam[playerid]) {
					case 1, 2, 3: FailExam(playerid), SCM(playerid, COLOR_LIGHTRED, "Licenses:{FFFFFF} Cau tra loi sai.");
					case 0: StepExam[playerid] ++, ShowExam(playerid, 1);
				}				
			}
		}
	}
	if(playertextid == GunTD[2]) {
		for(new i = 0; i < 8; i++) PlayerTextDrawHide(playerid, GunTD[i]);
		CancelSelectTextDraw(playerid);
		IsGunShop[playerid] = 0;
		GunID[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		TogglePlayerSpectating(playerid, 0);
		SetCameraBehindPlayer(playerid);
		DestroyPlayerObject(playerid, GunObject[playerid]);
		SetPlayerPosEx(false, playerid, 289.9354,-79.7819,1001.5156);
	}
	if(playertextid == GunTD[4]) {
		new query[128];
		if(PlayerInfo[playerid][pGunLic] != 1) return SCM(playerid, COLOR_LGREEN, "Error: Ban khong co giay phep su dung sung!");
		switch(GunID[playerid]) {
			case 0: {
				ServerWeapon(playerid, 24, 50);
				GivePlayerCash(playerid, 0, 5000);
				BizzInfo[InBussines[playerid]][bBalance] += 5000;
				mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],BizzInfo[InBussines[playerid]][bProducts],InBussines[playerid]);
				mysql_tquery(SQL,query, "", "");		
				SCM(playerid, COLOR_LGREEN, "Gun Shop: {FFFFFF}Ban da thanh toan mot em Deagle voi gia $5.000");
			}
			case 1: {
				ServerWeapon(playerid, 31, 200);
				GivePlayerCash(playerid, 0, 10000);
				BizzInfo[InBussines[playerid]][bBalance] += 10000;
				mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],BizzInfo[InBussines[playerid]][bProducts],InBussines[playerid]);
				mysql_tquery(SQL,query, "", "");
				SCM(playerid, COLOR_LGREEN, "Gun Shop: {FFFFFF}Ban da thanh toan mot em M4 voi gia $10.000");
			}
			case 2: {
				ServerWeapon(playerid, 30, 200);
				GivePlayerCash(playerid, 0, 10000);
				BizzInfo[InBussines[playerid]][bBalance] += 2000;
				mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],BizzInfo[InBussines[playerid]][bProducts],InBussines[playerid]);
				mysql_tquery(SQL,query, "", "");
				SCM(playerid, COLOR_LGREEN, "Gun Shop: {FFFFFF}Ban da thanh toan mot em AK47 voi gia $10.000");
			}
			case 3: {
				ServerWeapon(playerid, 28, 200);
				GivePlayerCash(playerid, 0, 8000);
				BizzInfo[InBussines[playerid]][bBalance] += 8000;
				mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],BizzInfo[InBussines[playerid]][bProducts],InBussines[playerid]);
				mysql_tquery(SQL,query, "", "");
				SCM(playerid, COLOR_LGREEN, "Gun Shop: {FFFFFF}Ti-ai cumparat arma Micro MSG pentru suma de $8.000");
			}
			case 4: {
				ServerWeapon(playerid, 25, 20);
				GivePlayerCash(playerid, 0, 15000);
				BizzInfo[InBussines[playerid]][bBalance] += 15000;
				mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],BizzInfo[InBussines[playerid]][bProducts],InBussines[playerid]);
				mysql_tquery(SQL,query, "", "");
				SCM(playerid, COLOR_LGREEN, "Gun Shop: {FFFFFF}Ban da thanh toan mot em Shotgan voi gia $15.000");
			}
			case 5: {
				ServerWeapon(playerid, 5, 1);
				GivePlayerCash(playerid, 0, 2000);
				BizzInfo[InBussines[playerid]][bBalance] += 2000;
				mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],BizzInfo[InBussines[playerid]][bProducts],InBussines[playerid]);
				mysql_tquery(SQL,query, "", "");
				SCM(playerid, COLOR_LGREEN, "Gun Shop: {FFFFFF}Ban da thanh toan mot em Baseball voi gia $2.000");
			}
		}
	}
	if(playertextid == GunTD[5]) {
		if(GunID[playerid] == 5) GunID[playerid] = 0;
		else GunID[playerid] ++;
		switch(GunID[playerid]) {
			case 0: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 348, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 348);
				PlayerTextDrawSetString(playerid, GunTD[3], "Degle - ~g~$5.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 1: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 356, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 356);
				PlayerTextDrawSetString(playerid, GunTD[3], "M4 - ~g~$10.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 2: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 355, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 355);
				PlayerTextDrawSetString(playerid, GunTD[3], "AK47 - ~g~$10.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 3: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 352, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 352);
				PlayerTextDrawSetString(playerid, GunTD[3], "Micro SMG - ~g~$8.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 4: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 351, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 351);
				PlayerTextDrawSetString(playerid, GunTD[3], "Shotgan - ~g~$15.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 5: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 336, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 336);
				PlayerTextDrawSetString(playerid, GunTD[3], "Baseball - ~g~$2.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
		}
	}
	if(playertextid == GunTD[6]) {
		if(GunID[playerid] == 0) GunID[playerid] = 5;
		else GunID[playerid] --;
		switch(GunID[playerid]) {
			case 0: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 348, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 348);
				PlayerTextDrawSetString(playerid, GunTD[3], "Degle - ~g~$5.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 1: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 356, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 356);
				PlayerTextDrawSetString(playerid, GunTD[3], "M4 - ~g~$10.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 2: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 355, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 355);
				PlayerTextDrawSetString(playerid, GunTD[3], "AK47 - ~g~$5.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 3: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 352, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 352);
				PlayerTextDrawSetString(playerid, GunTD[3], "Micro SMG - ~g~$5.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 4: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 351, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 351);
				PlayerTextDrawSetString(playerid, GunTD[3], "Shotgan - ~g~$15.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
			case 5: {
				DestroyPlayerObject(playerid, GunObject[playerid]);
				GunObject[playerid] = CreatePlayerObject(playerid, 336, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
				PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 336);
				PlayerTextDrawSetString(playerid, GunTD[3], "Baseball - ~g~$2.000");
				PlayerTextDrawShow(playerid, GunTD[7]);
			}
		}
	}
	if(playertextid == PacaneleTD[7]) {
		if(BetPacanele[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Ban da khong dat cuoc!");
		if(PlayerMoney(playerid, BetPacanele[playerid])) return SCM(playerid, COLOR_LGREEN, "Ban khong co du tien.");
		if(TimerPacanele[playerid] > 0) return true;
		GivePlayerCash(playerid, 0, BetPacanele[playerid]);
		if(PacaneleT[playerid] != 1) repeat Pacanele(playerid), PacaneleT[playerid] = 1;
		else Pacanele(playerid);
		TimerPacanele[playerid] = 15;
		PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~g~$%s", GetCashStr(playerid));
 		PlayerTextDrawSetString(playerid, PacaneleTD[9], string);
 		OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
	}
	if(playertextid == PacaneleTD[5]) Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "INFO", "- Quy tac -\n\n{FF0000}6{00FF17}9{FFFFFF} - 10x\n{8625BD}Nho {FFFFFF} - 4x\n{EDF320}Chuong{FFFFFF} - 5x\n{CC9632}Gold x2{FFFFFF} - 6x\n{CC9632}Gold 1x{FFFFFF} - 5", "Ok", "");
	if(playertextid == PacaneleTD[10]) {
		if(TimerPacanele[playerid] > 0) SelectTextDraw(playerid, 0xF4E318FF);
		else {
			for(new i = 0; i < 9; i++) PlayerTextDrawHide(playerid, SlotTD[i]);
			for(new i = 0; i < 11; i++) PlayerTextDrawHide(playerid, PacaneleTD[i]);
			CancelSelectTextDraw(playerid);
			BetPacanele[playerid] = 0;
			PlayerTextDrawSetString(playerid, PacaneleTD[8], "Bet: CLICK");
			IsPacanele[playerid] = 0;
			TogglePlayerControllable(playerid, 1);
			TogglePlayerSpectating(playerid, 0);
			SetCameraBehindPlayer(playerid);
			ClearAnimations(playerid);
		}
	}
	if(playertextid == DublajTD[5]) {
		if(IsDublaj[playerid] == 0) return true;
		new rand = random(2);
		switch(rand) {
			case 0: {
				PlayerTextDrawSetString(playerid, DublajTD[4], "LD_CARD:cd13s");
				defer HideDublaj(playerid);
				format(string, sizeof(string), "Ban thua $%s.", FormatNumbers(TotalBet[playerid]));
				GivePlayerCash(playerid, 0, TotalBet[playerid]);
				Update(playerid, pCashx);
				TotalBet[playerid] = 0;
				IsDublaj[playerid] = 0;
			}
			case 1: {
				PlayerTextDrawSetString(playerid, DublajTD[4], "LD_CARD:cd13h");
				defer HideDublaj(playerid);
				TotalBet[playerid] = TotalBet[playerid] * 2;
				format(string, sizeof(string), "Ban thang $%s.", FormatNumbers(TotalBet[playerid]));
				SCM(playerid, COLOR_LGREEN, string);
				GivePlayerCash(playerid, 1, TotalBet[playerid]);
				Update(playerid, pCashx);
				format(string, sizeof(string), "You win: ~g~$%s~n~~w~~h~Nhan RED hoac BLACK de nhan doi chien thang cua ban.", FormatNumbers(TotalBet[playerid]));
				PlayerTextDrawSetString(playerid, DublajTD[2], string);
			}
		}
	}
	if(playertextid == DublajTD[6]) {
		if(IsDublaj[playerid] == 0) return true;
		new rand = random(2);
		switch(rand) {
			case 0: {
				PlayerTextDrawSetString(playerid, DublajTD[4], "LD_CARD:cd13h");
				defer HideDublaj(playerid);
				format(string, sizeof(string), "Ban thua $%s.", FormatNumbers(TotalBet[playerid]));
				GivePlayerCash(playerid, 0, TotalBet[playerid]);
				Update(playerid, pCashx);
				TotalBet[playerid] = 0;
				IsDublaj[playerid] = 0;
			}
			case 1: {
				PlayerTextDrawSetString(playerid, DublajTD[4], "LD_CARD:cd13s");
				defer HideDublaj(playerid);
				TotalBet[playerid] = TotalBet[playerid] * 2;
				format(string, sizeof(string), "Ban thang $%s.", FormatNumbers(TotalBet[playerid]));
				SCM(playerid, COLOR_LGREEN, string);
				format(string, sizeof(string), "You win: ~g~$%s~n~~w~~h~Nhan RED hoac BLACK de nhan doi chien thang cua ban.", FormatNumbers(TotalBet[playerid]));
				PlayerTextDrawSetString(playerid, DublajTD[2], string);
				GivePlayerCash(playerid, 1, TotalBet[playerid]);
				Update(playerid, pCashx);
			}
		}
	}
	if(playertextid == PacaneleTD[8]) if(TimerPacanele[playerid] == 0) Dialog_Show(playerid, DIALOG_BETP, DIALOG_STYLE_INPUT, "Bet:", "Nhap so tien ban muon choi.\nToi thieu $50.000 va toi da $5.000.000.", "Select", "Cancel");
	for(new i = 0; i < 10; i++) {
		if(playertextid == PinPTD[i]) {
			if(strlen(PinInsert[playerid]) == 4) break;
			gString[0] = EOS;
			format(gString, 16, "~g~~h~~h~~h~%d", i == 9 ? 0 : i+1);
			PlayerTextDrawSetString(playerid, PinPTD[i], gString);
			PlayerTextDrawShow(playerid, PinPTD[i]);
			format(gString, 2, "%d", i == 9 ? 0 : i+1);
			strcat(PinInsert[playerid], gString);
			PlayerTextDrawSetString(playerid, PinPTD[10], PinInsert[playerid]);
			if(strlen(PinInsert[playerid]) == 4) SCM(playerid, COLOR_LGREEN, "(PIN Systems): {FFFFFF}Nhan nut '{D7FFB3}ENTER{FFFFFF}' phia tren de set PIN");
			break;
		}		
	}
	if(playertextid == RegisterPTD[1]) {
		format(string, sizeof(string), "Welcome, %s!\nNhap mat khau cua ban de dang ky:",GetName(playerid));
		Dialog_Show(playerid, DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"Registration", string,"Select","Cancel");
	}
	if(playertextid == RegisterPTD[3]) Dialog_Show(playerid, DIALOG_REGISTER4, DIALOG_STYLE_INPUT, "Email:", "Nhap email cua ban:", "Select", "Cancel");
	if(playertextid == RegisterPTD[2]) Dialog_Show(playerid, DIALOG_REGISTER, DIALOG_STYLE_LIST, "Gioi tinh", "Nam\nNu", "Select", "Cancel");
	if(playertextid == RegisterPTD[4]) Dialog_Show(playerid, DIALOG_REGISTER5, DIALOG_STYLE_INPUT, "Refferal", "Nhap ID refferal (neu co):","Select", "Cancel");
	if(playertextid == RegisterPTD[5]) Dialog_Show(playerid, DIALOG_REGISTER2,DIALOG_STYLE_INPUT,"Age:","Nhap tuoi cua ban:","Select","Cancel");
	if(playertextid == DSTds[3]) Dialog_Show(playerid, DIALOG_EDITVEHICLE, DIALOG_STYLE_LIST, "Edit vehicle", "Value\nStock", "Ok", "Exit"), SetPVarInt(playerid, "VehicleID", DealerID[playerid]);
	for(new s = 0; s < 10; s++) {
		if(playertextid != SkinsPTD[s])
			continue;

		if(PlayerInfo[playerid][pSkins][s] == -1) {
			SCM(playerid, COLOR_LGREEN, "Error: Ban khong co skin tren slot nay.");
			break;
		}
		
		if(SkinsActions[playerid] == 0) {
			SCM(playerid, COLOR_LGREEN, "Error: Ban khong chon mot skin.");
			break;
		}
		if(SkinsActions[playerid] == 1)
			Dialog_Show(playerid, DIALOG_SKIN, DIALOG_STYLE_MSGBOX,  "My Skins", SkinsActions[playerid] == 1 ? "Ban co chac muon su dung skin nay?" : "Ban co chac muon xoa skin nay?",  "Co", "Khong");
		else 
			Dialog_Show(playerid, DIALOG_SKINS, DIALOG_STYLE_MSGBOX,  "My Skins", SkinsActions[playerid] == 1 ? "Ban co chac muon su dung skin nay?" : "Ban co chac muon xoa skin nay?",  "Co", "Khong");
		
		SetPVarInt(playerid, "skin", s);
		break;
	}
	if(playertextid == TradePTD[4]) {
		if(TradeAccepted[playerid] == 0) {
			new id = TradeID[playerid];
			switch(TradeReady[playerid]) {
				case 0: {
					if(TradeItems[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ban phai them it nhat mot vat pham!");
					
					if(PlayerMoney(playerid, MoneyTrade[playerid])) 
						return SCM(playerid, COLOR_LGREEN, "Error: Ban khong co du tien!");
					
					if(CarTrade[playerid] != -1 && CarTrade[id] == -1 && GetSlots(id) == Iter_Count(MyVehicle[id])) 
						return SCM(playerid, COLOR_LGREEN, "Error: Ban da het slot xe! Ban chi co the trao doi xe.");
					
					if(CarTrade[id] != -1 && CarTrade[playerid] == -1 && GetSlots(playerid) == Iter_Count(MyVehicle[playerid])) 
						return SCM(playerid, COLOR_LGREEN, "Error: Nguoi choi kia da het slot xe! Ban chi co the trao doi xe voi ho.");
					
					if(SkinTrade[playerid] != -1 && total_skins(id) == 10) 
						return SCM(playerid, COLOR_LGREEN, "Error: Ban khong con slot skin.");
					
					if(SkinTrade[id] != -1 && total_skins(playerid) == 10) 
						return SCM(playerid, COLOR_LGREEN, "Error: Nguoi choi do khong con slot skin.");

					if(CheckTradeMoney(playerid, id) != 0)
						return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the bo tien vao.");

					TradeReady[playerid] = 1;
					PlayerTextDrawSetString(playerid, TradePTD[4], "~g~da san sang");
					PlayerTextDrawSetString(id, TradePTD[4], "~g~da san sang");
					PlayerTextDrawShow(playerid, TradePTD[4]);
					PlayerTextDrawShow(id, TradePTD[4]);

					if(TradeReady[playerid] == 1 && TradeReady[id] == 1) {
						PlayerTextDrawSetString(playerid, TradePTD[6], "00:10");
						PlayerTextDrawSetString(id, TradePTD[6], "00:10");
						PlayerTextDrawShow(id, TradePTD[6]);
						PlayerTextDrawShow(playerid, TradePTD[6]);
						TradeTime[playerid] = 10;
					}
				}
				case 1: {
					PlayerTextDrawSetString(playerid, TradePTD[4], "~r~chua san sang");
					PlayerTextDrawSetString(id, TradePTD[4], "~r~chua san sang");
					PlayerTextDrawShow(playerid, TradePTD[4]);
					PlayerTextDrawShow(id, TradePTD[4]);
					TradeReady[playerid] = 0;
					if(TradeTime[id] != 0 || TradeTime[playerid] != 0) {
						PlayerTextDrawHide(id, TradePTD[6]);
						PlayerTextDrawHide(playerid, TradePTD[6]);
						TradeTime[playerid] = 0;
						TradeTime[id] = 0;
					}					
				}				
			}
		}
	}
	if(playertextid == TradePTD[5]) {
		if(TradeAccepted[playerid] == 1) {
			new id = TradeID[playerid];
			switch(TradeReady[playerid]) {
				case 0: {
					if(TradeItems[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Error: Ban phai them it nhat mot vat pham!");
					
					if(PlayerMoney(playerid, MoneyTrade[playerid])) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Ban khong co du tien!");
					
					if(CarTrade[playerid] != -1 && CarTrade[id] == -1 && GetSlots(id) == Iter_Count(MyVehicle[id])) 
						return SCM(playerid, COLOR_LGREEN, "Error: Ban da het slot xe! Ban chi co the trao doi xe.");
					
					if(CarTrade[id] != -1 && CarTrade[playerid] == -1 && GetSlots(playerid) == Iter_Count(MyVehicle[playerid])) 
						return SCM(playerid, COLOR_LGREEN, "Error: Nguoi choi kia da het slot xe! Ban chi co the trao doi xe voi ho.");
					
					if(SkinTrade[playerid] != -1 && total_skins(id) == 10) 
						return SCM(playerid, COLOR_LGREEN, "Error: Nguoi choi do khong con slot skin.");
					
					if(SkinTrade[id] != -1 && total_skins(playerid) == 10) 
						return SCM(playerid, COLOR_LGREEN, "Error: Nguoi choi do khong con slot skin.");

					if(CheckTradeMoney(playerid, id) != 0)
						return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the bo tien vao.");

					TradeReady[playerid] = 1;	
					PlayerTextDrawSetString(playerid, TradePTD[5], "~g~da san sang");
					PlayerTextDrawSetString(id, TradePTD[5], "~g~da san sang");
					PlayerTextDrawShow(playerid, TradePTD[5]);
					PlayerTextDrawShow(id, TradePTD[5]);			
					if(TradeReady[playerid] == 1 && TradeReady[id] == 1) {
						PlayerTextDrawSetString(playerid, TradePTD[6], "00:10");
						PlayerTextDrawSetString(id, TradePTD[6], "00:10");
						PlayerTextDrawShow(id, TradePTD[6]);
						PlayerTextDrawShow(playerid, TradePTD[6]);
						TradeTime[playerid] = 10;	
					}
				}
				case 1: {
					PlayerTextDrawSetString(playerid, TradePTD[5], "~r~chua san sang");
					PlayerTextDrawSetString(id, TradePTD[5], "~r~chua san sang");
					PlayerTextDrawShow(playerid, TradePTD[5]);
					PlayerTextDrawShow(id, TradePTD[5]);
					TradeReady[playerid] = 0;
					if(TradeTime[id] != 0 || TradeTime[playerid] != 0) {
						PlayerTextDrawHide(id, TradePTD[6]);
						PlayerTextDrawHide(playerid, TradePTD[6]);
						TradeTime[playerid] = 0;
						TradeTime[id] = 0;
					}				
				}				
			}
		}
	}
	if(playertextid == TradePTD[3]) {
		if(TradeItems[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Ban chua them vat pham nao");
		if(TradeReady[playerid] == 1) return SCM(playerid, COLOR_ERROR, "Ban khong the xoa hang hoa khi bo hen gio da duoc kich hoat");
		HideTradeItems(playerid);
		new id = TradeID[playerid];
		format(string, sizeof(string), "%s da xoa mot mon hang.", GetName(playerid));
		SCM(playerid, COLOR_GOLD, string);
		SCM(id, COLOR_GOLD, string);		
	}	
	if(playertextid == TradePTD[2] && TradeReady[playerid] == 0) Dialog_Show(playerid, DIALOG_TRADE, DIALOG_STYLE_LIST, "Trade", "Money\nHouse\nBusiness\nVehicle\nRare Voucher (50 PP)\nEpic Voucher (100 PP)\nLegendary Voucher (500 PP)\nCurrent Skin\nHidden Color\nMoney (with miliards)\nTickets Rainbow\nTickets Vip", "Ok", "Cancel");
	if(playertextid == BuyModel) {
		if(InDealer[playerid] == 0) return true;
		if(DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock] < 1) return SCM(playerid, COLOR_LGREEN, "Error: Xe nay da het hang.");
		if(PlayerMoney(playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice])) return SCM(playerid, COLOR_GREY, "Error: Ban khong co du tien de mua xe nay.");
		if(GetSlots(playerid) == Iter_Count(MyVehicle[playerid])) return SCM(playerid, COLOR_LGREEN, "Error: Ban da het slot xe!"); 		
		gQuery[0] = EOS;
		mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO cars (Model) VALUES (%d)", DSModels[DealerID[playerid]][dModel]);
		mysql_tquery(SQL, gQuery, "InsertDsCars", "ii", playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dModel]);

		gQuery[0] = EOS;
		DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock] --;
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `dsveh` SET `Stock`='%d' WHERE `ID`='%d'", DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock], SelectedCar[playerid][DealerID[playerid]]);
		mysql_tquery(SQL, gQuery, "", "");

		InDealer[playerid] = 0;
		CancelSelectTextDraw(playerid);
		HideDealershipTextdraws(playerid);		
	}
	if(playertextid == ExitDS) {
		CancelSelectTextDraw(playerid);
		HideDealershipTextdraws(playerid);
		if(InDealer[playerid] == 1) SetPlayerPosEx(false, playerid, 1487.0498,-2287.2930,13.7529);
		else if(InDealer[playerid] == 2) SetPlayerPosEx(false, playerid, 1487.0498,-2287.2930,13.7529);
		InDealer[playerid] = 0;
		DealerCategory[playerid] = 0;
		DealerCarColor1[playerid] = 0;
		DealerCarColor2[playerid] = 0;
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		DestroyVehicle(DealerCar[playerid]);
		DealerCar[playerid] = 0;
		DealerCarType[playerid] = -1;
		TestingModel[playerid] = 0;
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == BackCar) {
		if(DealerID[playerid] == 1) DealerID[playerid] = TotalDealerCars[playerid]+1;
		DealerID[playerid] -= 1;
		DestroyVehicle(DealerCar[playerid]);
 		DealerCar[playerid] = CreateVehicleEx(DSModels[DealerID[playerid]][dModel],1463.3318,-2299.0806,13.6845,281.2260,DealerCarColor1[playerid],DealerCarColor2[playerid], -1, 0);
		SetVehicleVirtualWorld(DealerCar[playerid],playerid+1);	
		new szText[500];
		if(InDealer[playerid] == 1) {
			if(!PlayerMoney(playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice])) format(szText, sizeof(szText), "Name: %s~n~max. speed %d km/h~n~Price: ~g~$%s~n~~w~~h~Stock: %d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], Model_TopSpeed(GetVehicleModel(DealerCar[playerid])-400), FormatNumber(DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice]), DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock]);
			else if(PlayerMoney(playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice])) format(szText, sizeof(szText), "Model: %s~n~max. speed %d km/h~n~Price: ~r~$%s~n~~w~~h~Stock: %d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], Model_TopSpeed(GetVehicleModel(DealerCar[playerid])-400), FormatNumber(DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice]), DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock]);
		}
		PlayerTextDrawSetString(playerid, InfoDS, szText);
		PlayerTextDrawShow(playerid, InfoDS);
		ShowCamera(playerid);
		PlayerTextDrawSetPreviewModel(playerid, DSTds[4], DSModels[DealerID[playerid]][dModel]);
		PlayerTextDrawShow(playerid, DSTds[4]);
	}
	if(playertextid == NextCar) {
		if(DealerID[playerid] == TotalDealerCars[playerid]) DealerID[playerid] = 0;
		DealerID[playerid] += 1;
		DestroyVehicle(DealerCar[playerid]);
		DealerCar[playerid] = CreateVehicleEx(DSModels[DealerID[playerid]][dModel],1463.3318,-2299.0806,13.6845,281.2260,DealerCarColor1[playerid],DealerCarColor2[playerid], -1, 0);
		SetVehicleVirtualWorld(DealerCar[playerid],playerid+1);	
		new szText[500];
		if(InDealer[playerid] == 1) {
			if(!PlayerMoney(playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice])) format(szText, sizeof(szText), "Name: %s~n~max. speed %d km/h~n~Price: ~g~$%s~n~~w~~h~Stock: %d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], Model_TopSpeed(GetVehicleModel(DealerCar[playerid])-400), FormatNumber(DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice]), DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock]);
			else if(PlayerMoney(playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice])) format(szText, sizeof(szText), "Model: %s~n~max. speed %d km/h~n~Price: ~r~$%s~n~~w~~h~Stock: %d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], Model_TopSpeed(GetVehicleModel(DealerCar[playerid])-400), FormatNumber(DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice]), DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock]);
		}
		PlayerTextDrawSetString(playerid, InfoDS, szText);
		PlayerTextDrawShow(playerid, InfoDS);
		ShowCamera(playerid);
		PlayerTextDrawSetPreviewModel(playerid, DSTds[4], DSModels[DealerID[playerid]][dModel]);
		PlayerTextDrawShow(playerid, DSTds[4]);
	}
	if(playertextid == TestModel) {
		SCM(playerid, COLOR_YELLOW, "Ban co 3 phut de test xe");
		SCM(playerid, COLOR_YELLOW, "Neu ban khong muon test nua, hay ra khoi xe.");
		TestingModel[playerid] = 1;
		CancelSelectTextDraw(playerid);
		HideDealershipTextdraws(playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		SetPlayerInterior(playerid, 0);
		LinkVehicleToInterior(DealerCar[playerid], 0);
		SetVehicleVirtualWorld(DealerCar[playerid], playerid+1);
		new randspawn = random(sizeof(DealerCarPos));
		if(DealerCarType[playerid] == 1) SetVehiclePosEx(playerid, DealerCar[playerid], DealerCarPos[randspawn][0], DealerCarPos[randspawn][1], DealerCarPos[randspawn][2]), SetVehicleZAngleEx(DealerCar[playerid], DealerCarPos[randspawn][0]);
		else if(DealerCarType[playerid] == 2) SetVehiclePosEx(playerid, DealerCar[playerid], 386.7731,-1520.0092,31.8887), SetVehicleZAngleEx(DealerCar[playerid], 40.7906);
		else if(DealerCarType[playerid] == 3) SetVehiclePosEx(playerid, DealerCar[playerid], 138.4441,-1901.8715,-0.2312), SetVehicleZAngleEx(DealerCar[playerid], 177.5421);
		else if(DealerCarType[playerid] == 4) SetVehiclePosEx(playerid, DealerCar[playerid], 2121.3301,-2449.9683,13.5307), SetVehicleZAngleEx(DealerCar[playerid], 146.3989);
		else if(DealerCarType[playerid] == 5) SetVehiclePosEx(playerid, DealerCar[playerid], 386.7731,-1520.0092,32.9033), SetVehicleZAngleEx(DealerCar[playerid], 40.7906);
		PutPlayerInVehicleEx(playerid, DealerCar[playerid], 0);
		defer CancelTestDrive(playerid);
	}
	if(playertextid == HiddTDs[1]) {
		if(PlayerInfo[playerid][pPremiumPoints] < 40) return SCM(playerid, COLOR_GREY, "Ban can 40 Premium Points de mua vat pham nay.");
		PlayerInfo[playerid][pPremiumPoints] -= 40;
		Update(playerid, pPremiumPointsx);
		format(string, sizeof(string), "Chuc mung! Ban da mua mau (%d, %d) tu cua hang cho phuong tien ca nhan cua ban.", pColor1[playerid], pColor2[playerid]);
		SCM(playerid, COLOR_GOLD, string);
		new idd = pCar[playerid];
		CarInfo[idd][cColorOne] = pColor1[playerid];
		CarInfo[idd][cColorTwo] = pColor2[playerid];
		ChangeVehicleColorEx(GetPlayerVehicleID(playerid), pColor1[playerid], pColor2[playerid]);
		mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorOne = %d, ColorTwo = %d WHERE ID=%d", pColor1[playerid], pColor2[playerid], CarInfo[idd][cID]);
		mysql_tquery(SQL, string, "", "");
		SetCameraBehindPlayer(playerid), SetPlayerInterior(playerid, pInteriorID[playerid]), SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
		SetPlayerVirtualWorld(playerid, 0);
  		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
		TextDrawHideForPlayer(playerid, HiddTD[0]);
		TextDrawHideForPlayer(playerid, HiddTD[1]);
		TextDrawHideForPlayer(playerid, HiddTD[2]);
		TextDrawHideForPlayer(playerid, HiddTD[3]);
		TextDrawHideForPlayer(playerid, HiddTD[4]);
		PlayerTextDrawHide(playerid, HiddTDs[0]);
		PlayerTextDrawHide(playerid, HiddTDs[1]);
		PlayerTextDrawHide(playerid, HiddTDs[2]);
		InShop[playerid] = 0;
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == ShopTDs[1]) {
		if(CreateHouse[playerid] == 0) {
			if(PlayerInfo[playerid][pPremiumPoints] < 2000) return SCM(playerid, -1, "Ban khong co du Premium Points!");
			PlayerInfo[playerid][pPremiumPoints] -= 2000;
			Update(playerid, pPremiumPointsx);			
			HideShopTDs(playerid), SetCameraBehindPlayer(playerid), SetPlayerPosEx(false, playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
			SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
			new house = PlayerInfo[playerid][pHouse], i = SInterior[playerid]-1;
			if(house != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) {		
				HouseInfo[house][hExitx] = InteriorPos[i][0];
				HouseInfo[house][hExity] = InteriorPos[i][1];
				HouseInfo[house][hExitz] = InteriorPos[i][2];
				HouseInfo[house][hInterior] = GetPlayerInterior(playerid);
				HUpdate(house, hExitxx);
				HUpdate(house, hExityx);
				HUpdate(house, hExitzx);
				HUpdate(house, hInteriorx);
				SCM(playerid, COLOR_GOLD, "Chuc mung! Ban da mua mot goi noi that nha moi.");
				foreach(new x: Player) {
					if(InHouse[x] == house && IsPlayerConnected(x)) {
						SCM(x, COLOR_YELLOW, "Ban da bi da' ra khoi nha vi chu nha mua noi that moi.");
						SpawnPlayer(x);
					}
				}
				SetPlayerInterior(playerid, pInteriorID[playerid]);
			}
			else return SCM(playerid, COLOR_GREY, "Ban khong so huu mot ngoi nha."), SetPlayerInterior(playerid, pInteriorID[playerid]);
		}
		else {
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, sizeof(gQuery),"INSERT INTO houses (`Entrancex`, `Entrancey`, `Entrancez`, `Interior`, `Level`, `Value`) VALUES ('%f', '%f', '%f', '%d', '%d', '%d')",
			pPos[playerid][0], pPos[playerid][1], pPos[playerid][2], GetPlayerInterior(playerid), pNivel[playerid], pPret[playerid]);
			mysql_tquery(SQL, gQuery, "InsertHouse", "i", playerid);
		}
	}
	return true;
}
function InsertHouse(playerid) {
	new x = SInterior[playerid]-1, idd = cache_insert_id(), i = housess+1;
	HouseInfo[i][hID] = i;
	HouseInfo[i][hExitx] = InteriorPos[x][0];
	HouseInfo[i][hExity] = InteriorPos[x][1];
	HouseInfo[i][hExitz] = InteriorPos[x][2];
	HouseInfo[i][hEntrancex] = pPos[playerid][0];
	HouseInfo[i][hEntrancey] = pPos[playerid][1];
	HouseInfo[i][hEntrancez] = pPos[playerid][2];
	HouseInfo[i][hLevel] = pNivel[playerid];
	HouseInfo[i][hVirtual] = i;
	HouseInfo[i][hSize] = pHouseType[playerid];
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `houses` SET `Virtual`='%d', `Zise`='%d', `ID`='%d' WHERE `ID`='%d'", i, pHouseType[playerid], i, idd);
 	mysql_tquery(SQL, gQuery, "", "");
	HouseInfo[i][hValue] = pPret[playerid];
	HouseInfo[i][hInterior] = GetPlayerInterior(playerid);
	HUpdate(i, hExitxx);
	HUpdate(i, hExityx);
	HUpdate(i, hExitzx);
	HUpdate(i, hInteriorx);
	HouseLabel[i] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1, -1, 100.0);
	UpdateLabel(1, i);
	format(gString, sizeof(gString), "(/createhouse) {FFFFFF}%s created house: price %s, Level: %d.", GetName(playerid), FormatNumbers(pPret[playerid]), pNivel[playerid]);
	SendAdminMessage(COLOR_GREEN, gString, 5);
	HideShopTDs(playerid), SetCameraBehindPlayer(playerid), SetPlayerPosEx(false, playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
	SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
	SetPlayerInterior(playerid, pInteriorID[playerid]);
	CreateHouse[playerid] = 0;
	housess++;
	return true;
}
function InsertDsCars(playerid, modelid) {

	new idd = Iter_Free(PersonalVehicles);
	Iter_Add(MyVehicle[playerid], idd);
	Iter_Add(PersonalVehicles, idd);
	gQuery[0] = EOS;

	CP[playerid] = 53;
	CarInfo[idd][Userid] = PlayerInfo[playerid][pSQLID];
	CarInfo[idd][cID] = cache_insert_id();
	CarInfo[idd][cModel] = modelid;
	new randspawn = random(34);
	CarInfo[idd][cLocationx] = DealerCarPos[randspawn][0];	
	CarInfo[idd][cLocationy] = DealerCarPos[randspawn][1];	
	CarInfo[idd][cLocationz] = DealerCarPos[randspawn][2];
	CarInfo[idd][cAngle] = DealerCarPos[randspawn][3];
	CarInfo[idd][cOnline] = playerid;
	
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE cars SET MaxSpeed='%d' WHERE ID=%d", Model_TopSpeed(CarInfo[idd][cModel]), CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
	CarInfo[idd][cMaxSpeed] = Model_TopSpeed(CarInfo[idd][cModel]);


	CarInfo[idd][cColorOne] = DealerCarColor1[playerid];	
	CarInfo[idd][cColorTwo] = DealerCarColor2[playerid];
	strmid(CarInfo[idd][cOwner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	CarInfo[idd][cValue] = DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice];
	strmid(CarInfo[idd][cLicense], "NewCar", 0, 6, 255);
	CarInfo[idd][cAlarm] = 0;	CarInfo[idd][cLock] = 0;	CarInfo[idd][cRainBow] = false; CarInfo[idd][cLegendary] = 0;	CarInfo[idd][cStage] = 0;
	for(new i = 0; i < 14; i++) CarInfo[idd][cMod][i] = 0;
	CarInfo[idd][paintjob] = 3;	CarInfo[idd][KM] = 0;	   CarInfo[idd][cFuel] = 100;
	CarInfo[idd][cPoints] = 5;  CarInfo[idd][cTax] = 3000;
	saveCar(idd);

	if(MyVehicleSpawn[playerid] != 5) SpawnPlayerCar(idd);
	DestroyVehicle(DealerCar[playerid]);
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPosEx(false, playerid, 1487.0498,-2287.2930,13.7529);
	SetPlayerInterior(playerid, 0);
	new LastMoney[40];
	format(LastMoney, 40, GetCashStr(playerid));
	GivePlayerCash(playerid, 0, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice]);

	gString[0] = EOS;
	format(gString, sizeof(gString), "Chuc mung! Ban da mua mot chiec %s voi gia %s$.",aVehicleNames[modelid-400],FormatNumber(CarInfo[idd][cValue]));
	SCM(playerid, COLOR_MONEY, gString);
	format(gString, sizeof(gString), "%s da mua mot chiec %s[%d], (last money: $%s / new money: $%s)", GetName(playerid), aVehicleNames[modelid-400], idd, LastMoney, GetCashStr(playerid));
	SendAdminMessage(COLOR_YELLOW, gString, 1); 
	InsertLog(playerid, gString, LOG_CAR);	
	finishAchievement(playerid, 1);	
	return true;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, "Ban khong the su dung thao tac nay khi dang trong Race Arena!");
	if(JobWorking[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pAdmin] != 0) return SCM(playerid, COLOR_WARNING, "Ban khong duoc lam dung thao tac nay!");
	if(PlayerInfo[playerid][pAdmin] > 0) {
		if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), fX, fY, fZ+5);
		else SetPlayerPosFindZ(playerid, fX, fY, fZ+5);
	}
	return true;
}



function HideHPAlert(playerid) return PlayerTextDrawHide(playerid, HPAlert);
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart) {
	if(togalert[playerid] != 0) {
		PlayerTextDrawBoxColor(playerid, HPAlert, GetHudColor2(togalert[playerid]));
		PlayerTextDrawShow(playerid, HPAlert);
		SetTimerEx("HideHPAlert", 1000, false, "i", playerid);
	}
	new Float:HP, Float:AP, Float:remainHP;
	if(issuerid != INVALID_PLAYER_ID) {
		if(amount < 0) {
			new string[64],sendername[25];
			GetPlayerName(issuerid,sendername,sizeof(sendername));
			format(string, sizeof(string), "AdmWarning: %s(%d) duoc phat hien nghi van global kill. (damage: %.2f)",sendername,issuerid,amount);
			if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WARNING, string,1);
			KickEx(issuerid);
			return true;
		}
		if(weaponid == 54 && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER) {
			if(playerDeath[issuerid] == -1) {
				
			 	GetPlayerHealthEx(issuerid,HP);
			 	GetPlayerArmourEx(issuerid,AP);
				if( AP >= amount ) {
					SetPlayerArmourEx( issuerid, AP - amount );
					SetPlayerHealthEx( issuerid, HP );
				}
				else if( AP <= 0 ) {
					remainHP = HP - amount;
					SetPlayerHealthEx( issuerid, remainHP );
					if( remainHP <= 0 && playerDeath[issuerid] == -1 ) {
						OnPlayerDeath( playerid, issuerid, weaponid );
						playerDeath[playerid] = issuerid;
					}
				}
				else {
					remainHP = HP + ( AP - amount );
					SetPlayerArmourEx( issuerid, 0.0 );
					SetPlayerHealthEx( issuerid, remainHP );
					if( remainHP <= 0 && playerDeath[issuerid] == -1 ) {
						OnPlayerDeath( playerid, INVALID_PLAYER_ID, weaponid );
						playerDeath[issuerid] = INVALID_PLAYER_ID;
					}
				}
			}
		}
		if(weaponid == 49 || weaponid == 50 || weaponid == 51 || weaponid == 52 || weaponid == 53 || weaponid == 54 || GetPlayerState(issuerid) == PLAYER_STATE_DRIVER) {
			if(playerDeath[playerid] == 0) {
				GetPlayerHealthEx(playerid,HP);
				GetPlayerArmourEx(playerid,AP);
				if(AP >= amount ) {
					SetPlayerArmourEx(playerid, AP - amount);
					SetPlayerHealthEx(playerid, HP);
				}
				else if(AP <= 0) {
					remainHP = HP - amount;
					SetPlayerHealthEx(playerid, remainHP);
					if(remainHP <= 0 && playerDeath[playerid] == -1) {
						OnPlayerDeath(playerid, issuerid, weaponid);
						playerDeath[playerid] = issuerid;
					}
				}
				else {
					remainHP = HP + (AP - amount);
					SetPlayerArmourEx(playerid, 0.0);
					SetPlayerHealthEx(playerid, remainHP);
					if( remainHP <= 0 && playerDeath[playerid] == -1) {
						OnPlayerDeath(playerid, issuerid, weaponid );
						playerDeath[playerid] = issuerid;
					}
				}
			}
		}		
	}
	else {
		if(playerDeath[playerid] == 0) {
			GetPlayerHealthEx(playerid,HP);
			GetPlayerArmourEx(playerid,AP);
			if(AP >= amount ) {
				SetPlayerArmourEx(playerid, AP - amount);
				SetPlayerHealthEx(playerid, HP);
			}
			else if(AP <= 0) {
				remainHP = HP - amount;
				SetPlayerHealthEx(playerid, remainHP);
				if(remainHP <= 0 && playerDeath[playerid] == -1) {
					OnPlayerDeath(playerid, INVALID_PLAYER_ID, weaponid);
					playerDeath[playerid] = INVALID_PLAYER_ID;
				}
			}
			else {
				remainHP = HP + (AP - amount);
				SetPlayerArmourEx(playerid, 0.0);
				SetPlayerHealthEx(playerid, remainHP);
				if( remainHP <= 0 && playerDeath[playerid] == -1) {
					OnPlayerDeath(playerid, INVALID_PLAYER_ID, weaponid );
					playerDeath[playerid] = INVALID_PLAYER_ID;
				}
			}
		}	
	}
	return true;
}

function DamageInformer(playerid) {
	PlayerTextDrawHide(playerid, DMGTD[0]);
	PlayerTextDrawHide(playerid, DMGTD[1]);
	DMGTimer[playerid] = 0;
	return true;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart) {
	new string[110];
	if(amount >= 82.50 && weaponid != 34) {
		SCM(playerid, COLOR_WHITE, "Stop cheating (Global kill #2).");
		KickEx(playerid);
		return true;
	}
	if(damagedid != INVALID_PLAYER_ID) {
		if(togding[playerid] == 0) PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
	 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
		if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID) return true;
		
		if(playerDeath[damagedid] == -1) {
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
					if(Spectate[i] == damagedid || Spectate[i] == playerid) {
						new victim[MAX_PLAYER_NAME], attacker[MAX_PLAYER_NAME];
						new weaponname[24];
						GetPlayerName(playerid, attacker, sizeof (attacker));
						GetPlayerName(damagedid, victim, sizeof (victim));
					 
						GetWeaponName(weaponid, weaponname, sizeof (weaponname));
						if(weaponid == 0) weaponname = "Fist";
						format(string, sizeof(string), "[DMG] %s did %.0f damage to %s using weapon %s.", attacker, amount, victim, weaponname);
						SCM(i, 0xFFADADFF, string);				
					}
				}	
			}	
		}
		if(amount < 0) {
			SCM(playerid, COLOR_WHITE, "Stop cheating (Global kill #1).");
			KickEx(playerid);
			return true;
		}
		for(new sf = 0; sf < MAX_SAFEZONES; sf++) {
			if(SafeZone[sf][szRange] >= 15) {
				if(PlayerToPoint(SafeZone[sf][szRange], playerid, SafeZone[sf][szX], SafeZone[sf][szY], SafeZone[sf][szZ])) {
					if(!IsPlayerInAnyVehicle(playerid) && !IsACop(playerid) && PlayerHit[playerid] != damagedid && PaintType[playerid] == 0 && InWar[PlayerInfo[playerid][pMember]] == 0) {
						SCM(playerid, COLOR_LIGHTRED, "Ban da bi dung hinh mat 5 giay vi tan cong nguoi choi khac trong safezone.");
						TogglePlayerControllable(playerid, 0);
						SetPlayerFreeze(playerid, 5);
						SetPlayerArmedWeapon(playerid, 0);
					}
				}
			}	
		}	
		if(playerDeath[damagedid] == -1) {
			if(tazer[playerid] == 1 && IsACop(playerid) && weaponid == 24) {
				if(IsACop(damagedid)) return SCM(playerid, COLOR_WHITE, "Nguoi choi do la mot canh sat..");
				if(PlayerCuffed[damagedid] == 1) return SCM(playerid, COLOR_WHITE, "Nguoi choi do bi giat dien.");
				if(PlayerInfo[damagedid][pSleeping] == 1) return SCM(playerid, COLOR_WHITE, "Nguoi choi dang ngu.");
				if(GetDistanceBetweenPlayers(playerid, damagedid) < 15) {
					format(string, sizeof(string), "* %s tazed %s for 8 seconds.", GetName(playerid), GetNameEx(damagedid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE);
					TogglePlayerControllable(damagedid, 0);
					PlayerCuffed[damagedid] = 1;
					PlayerCuffedTime[damagedid] = 8;
					return true;
				}
			}	
		
			if(PlayerInfo[playerid][pMember] == PlayerInfo[damagedid][pMember] && InWar[PlayerInfo[playerid][pMember]] == 1) {
				new Float: HP;
				GetPlayerHealthEx(damagedid,HP);
				SetPlayerHealthEx(damagedid, HP);
				return true;				
			}				
			if(weaponid == 34) {
				SetPlayerHealthEx(damagedid, 0.0);
				SetPlayerArmourEx(damagedid, 0.0);
				OnPlayerDeath(damagedid,playerid,weaponid);
				playerDeath[damagedid] = playerid;
				return true;
			}
		 	new Float: HP, Float: AP ;
			GetPlayerHealthEx(damagedid,HP);
			GetPlayerArmourEx(damagedid,AP);
			if(AP >= amount) SetPlayerArmourEx (damagedid, AP - amount);
			else if(AP <= 0) {
				new const Float: remainHP = HP - amount;
				SetPlayerHealthEx(damagedid, remainHP);
				if( remainHP <= 0 ) {
					OnPlayerDeath(damagedid, playerid, weaponid);
					playerDeath[damagedid] = playerid;
					return true;
				}
			}
			else {
				new const Float: remainHP = HP + (AP - amount);
				SetPlayerArmourEx(damagedid, 0.0);
				SetPlayerHealthEx(damagedid, remainHP);
				if( remainHP <= 0 )
				{
					OnPlayerDeath(damagedid, playerid, weaponid);
					playerDeath[damagedid] = playerid;
					return true;
				}
			}
			if(PlayerCuffed[damagedid] == 1) SetPlayerHealthEx(damagedid,99);
			if(PlayerInfo[damagedid][pSleeping] == 1) SetPlayerHealthEx(damagedid, 99);
		
			if(DMGTimer[damagedid] != 0) {
				Combo[playerid] ++; 
				KillTimer(DMGTimer[damagedid]);
				KillTimer(DMGTimer[playerid]);
			}
			else Combo[playerid] = 0;
			new weapon[180];
			if(GetPlayerWeapon(playerid) == 0) weapon ="Fist";
			else GetWeaponName(weaponid, weapon, sizeof (weapon));			
			if(PlayerInfo[damagedid][pShowDMG] == 1 && GetPVarInt(playerid, "Undercover") == 0) {
				if(Combo[playerid] != 0) format(string, sizeof(string), "%s~n~-%0.1f HP with %s (%dx)", GetName(playerid), amount, weapon, Combo[playerid]+1);
				else format(string, sizeof(string), "%s~n~-%0.1f HP with %s", GetName(playerid), amount, weapon);			
				PlayerTextDrawSetString(damagedid, DMGTD[0], string);
				PlayerTextDrawShow(damagedid, DMGTD[0]);				
			}
			DMGTimer[damagedid] = SetTimerEx("DamageInformer", 2000, false, "i", damagedid);
			if(PlayerInfo[playerid][pShowDMG] == 1) {	
				if(Combo[playerid] != 0) format(string, sizeof(string), "%s~n~+%0.1f HP with %s (%dx)", GetName(damagedid), amount, weapon, Combo[playerid]+1);
				else format(string, sizeof(string), "%s~n~+%0.1f HP with %s", GetName(damagedid), amount, weapon);			
				PlayerTextDrawSetString(playerid, DMGTD[1], string);
				PlayerTextDrawShow(playerid, DMGTD[1]);
				DMGTimer[playerid] = SetTimerEx("DamageInformer", 2000, false, "i", playerid);
			}			
		}	
	}
	return true;
}

public OnPlayerDeath(playerid, killerid, reason) {	
	playerDeath[playerid] = killerid == INVALID_PLAYER_ID ? INVALID_PLAYER_ID : playerDeath[playerid];

	//if(playerDeath[playerid] != INVALID_PLAYER_ID && playerDeath[playerid] != killerid) return KickEx(playerid);

 	if(IsRentCar[playerid] == 1) { DestroyVehicle(VehicleRent[playerid]), VehicleRent[playerid] = 0, IsRentCar[playerid] = 0, SCM(playerid, COLOR_WHITE, "Ai pierdut vehiculul inchiriat."); }
	Update3DTextLabelText(deathLabel[playerid], COLOR_LIGHTRED, "[dead]");
	Attach3DTextLabelToPlayer(deathLabel[playerid], playerid, 0.0, 0.0, 0.3);
	new string[110];
	if(SpawnedCarYT[playerid] == 1) { DestroyDynamicObject(nameobject[YouTuberCar[playerid]]), DestroyVehicle(YouTuberCar[playerid]), SpawnedCarYT[playerid] = 0; }


	InEvent[playerid] = 0;
	if(InRob[playerid] == 1) FailRob(playerid, "Chet");
	
	if(killerid == INVALID_PLAYER_ID) ADeathMessage(INVALID_PLAYER_ID, playerid, 47);
	else ADeathMessage(playerid, killerid, reason);
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	
	
	if(PlayerInfo[playerid][pWantedLevel] != 0) {
		new count, names[180];	
		foreach(new i: Player) {
			if(IsACop(i) && CrimInRange(75.0, playerid,i) && OnDuty[i] == 1) {
				count = 1;
				GameTextForPlayer(i, "running suspect bonus!", 3000, 1);
				ConsumingMoney[i] = 1;
				GivePlayerCash(i, 1, PlayerInfo[playerid][pWantedLevel] * 2000);
				Update(i, pCashx);
				UpdateFactionRaport(i, 0);			

				format(string, sizeof(string), "Ban nhan duoc $%d tien thuong bat toi pham %s.", PlayerInfo[playerid][pWantedLevel] * 2000, GetName(playerid));
				SCM(i, COLOR_DBLUE, string);
				format(names, 256, "%s %s", names, GetName(i));
			}	
			if(count == 1) {
				if(ProxDetectorS(30.0, i, playerid)) {
					format(string, sizeof(string), "* %s is now in jail thanks to: %s", GetName(playerid), names);
					SCM(i, COLOR_PURPLE, string);
				}
			}				
		}	
		if(count == 1) {	
			if(killerid == INVALID_PLAYER_ID) format(string, sizeof(string), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.", GetName(playerid), (PlayerInfo[playerid][pWantedLevel])*(150));
			else format(string, sizeof(string), "Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.", GetName(playerid), GetName(killerid), (PlayerInfo[playerid][pWantedLevel])*(150));
			SendTeamMessage(1, 0x2e64feFF, string);
			SendTeamMessage(2, 0x2e64feFF, string);
			SendTeamMessage(3, 0x2e64feFF, string);		
			SendTeamMessage(14, 0x2e64feFF, string);
			GivePlayerCash(playerid, 0, PlayerInfo[playerid][pWantedLevel] * 2000);
			PlayerInfo[playerid][pWantedDeaths] += 1;
			PlayerInfo[playerid][pJailed] = 1;
			PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(250);
			PlayCopSound();
			format(string, sizeof(string), "Because you got killed, you lost $%d and you will be taken to jail. You are no longer a criminal.", PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pWantedLevel] * 2000);
			SCM(playerid, COLOR_LIGHTRED, string);
			
			TogglePlayerControllable(playerid, 0);
			SetPlayerFreeze(playerid, 1);
			PlayerInfo[playerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(playerid, 0);
			Update(playerid,pWantedLevelx);
			Update(playerid,pJailedx);
			Update(playerid,pJailTimex);
			ClearCrime(playerid);					
		}
	}				

	if(killerid != INVALID_PLAYER_ID) {	
		if(IsACop(playerid)) finishAchievement(killerid, 14);
	
		SetPVarInt(playerid,"KilledFlood", GetPVarInt(playerid,"KilledFlood") + 1);
		if(GetPVarInt(playerid,"KilledFlood") >= 3 && PlayerInfo[playerid][pAdmin] == 0) return KickEx(playerid);	
		
		if(PaintType[killerid] != 0 && PaintType[playerid] != 0) {
			if(PaintText[PaintType[playerid]-1] > 1) return true;
			if(PaintTime[PaintType[playerid]-1] < 1) return true;		
			
			for(new m; m < 2; m++) {
				if(PlayerInfo[killerid][pDailyMission][m] == 0) CheckMission(killerid, m);
			}	
			
			PlayerInfo[killerid][pPaintKills][PaintType[killerid]-1] ++;
			switch(PaintType[killerid]-1) {
				case 0: UpdateVar(killerid, "PaintKills1", PlayerInfo[killerid][pPaintKills][PaintType[killerid]-1]);
				case 1: UpdateVar(killerid, "PaintKills2", PlayerInfo[killerid][pPaintKills][PaintType[killerid]-1]);
				case 2: UpdateVar(killerid, "PaintKills3", PlayerInfo[killerid][pPaintKills][PaintType[killerid]-1]);				
			}	
			
			PlayerInfo[playerid][pPaintDeaths][PaintType[playerid]-1] ++;		
			switch(PaintType[playerid]-1) {
				case 0: UpdateVar(playerid, "PaintDeaths1", PlayerInfo[playerid][pPaintDeaths][PaintType[playerid]-1]);
				case 1: UpdateVar(playerid, "PaintDeaths2", PlayerInfo[playerid][pPaintDeaths][PaintType[playerid]-1]);
				case 2:	UpdateVar(playerid, "PaintDeaths3", PlayerInfo[playerid][pPaintDeaths][PaintType[playerid]-1]);			
			}	
			PKills[killerid] ++;
			PDeaths[playerid] ++;
			if(PaintType[killerid] == 3 && PaintType[playerid] == 3) {
				if(GetPaintLevel(playerid) == 8) {
					foreach(new i: Player) {
						if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
							if(PaintType[i] == PaintType[killerid]) {
								new pp = PaintType[killerid]-1;
								for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(i, 1001, 1001, 200);
								format(string, sizeof(string), "* %s chien thang ngay khi ha guc %s.", GetName(killerid), GetName(playerid));
								SendPaintMessage(PaintType[i]-1, COLOR_YELLOW, string);
								PaintTime[pp] = 300;
								PKills[i] = 0, PDeaths[i] = 0;
								PaintballWinner[pp] = i;
								PaintballWinnerScore[pp] = 0;
								SpawnPlayer(i);
							}
						}
					}
				}
				else GiveSkillWeapon(killerid);
			}
			foreach(new i: Player) if(PaintType[i] == PaintType[playerid] && PlayerInfo[i][pAdmin] == 0) SendDeathMessageToPlayer(i, killerid, playerid, reason);
			if(PKills[killerid] > PaintballWinnerScore[PaintType[playerid]-1]) {
				PaintballWinner[PaintType[playerid]-1]  = killerid;
				PaintballWinnerScore[PaintType[playerid]-1] = PKills[killerid];
			}
		}
		if(PlayerInfo[killerid][pJailTime] != 0 && PlayerInfo[playerid][pJailTime] != 0) {
			PlayerInfo[killerid][pJailTime] += 120;
			SCM(killerid, COLOR_WARNING, "Ban o tu them 2 phut vi giet mot nguoi choi.");
		}
		if(GetDistanceBetweenPlayers(killerid,playerid) > 100 && reason != 34) {
			new gunname[50];
		   	GetWeaponNameEx(reason,gunname,sizeof(gunname));
			format(string, sizeof(string), "AdmWarning: %s giet %s tu khoang cach %dm bang con %s.",GetName(killerid),GetName(playerid),GetDistanceBetweenPlayers(killerid,playerid),gunname);
			if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WARNING, string,1);
		}

		gPlayerUsingLoopingAnim[playerid] = 0;
		gPlayerSpawned[playerid] = 0;
		PlayerEnterTime[playerid]+=221;
		
		if(CP[playerid] == 50) {
			CP[playerid] = 0;
			RemovePlayerAttachedObject(playerid,0);
			DisablePlayerCheckpointEx(playerid);
			RemovePlayerAttachedObject(playerid,1);
		}
		if(PlayerCuffed2[playerid] == 1) {
			PlayerCuffed2[playerid] = 0;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid,1);
		}
		if(gPlayerUsingLoopingAnim[playerid]) gPlayerUsingLoopingAnim[playerid] = 0;
		if(IsAMember(playerid) && IsAMember(killerid)) {
			for(new turf = 1; turf < sizeof(TurfInfo); turf++) {
				if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(killerid, turf)) { 
					if(WarInfo[turf][wFaction] == PlayerInfo[playerid][pMember] && WarInfo[turf][wAttacker] == PlayerInfo[killerid][pMember] || WarInfo[turf][wFaction] == PlayerInfo[killerid][pMember] && WarInfo[turf][wAttacker] == PlayerInfo[playerid][pMember]) {
						foreach(new i: Player) {
							if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
								if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember] || PlayerInfo[i][pMember] == PlayerInfo[killerid][pMember]) {
									if(PlayerInfo[i][pAdmin] == 0) SendDeathMessageToPlayer(i, killerid, playerid, reason);
								}
							}
						}
						if(PlayerInfo[killerid][pMember] == WarInfo[turf][wAttacker] || PlayerInfo[killerid][pMember] == WarInfo[turf][wFaction]) WarScoreF[PlayerInfo[killerid][pMember]][turf] += 1.0;
						ucideri[killerid][turf] ++; decese[playerid][turf] ++;
						
						UpdateVar(killerid, "WarKills", ucideri[killerid][turf]);
						UpdateVar(playerid, "WarDeaths", decese[playerid][turf]);
						
						WarKills[killerid] = ucideri[killerid][turf];
						WarDeaths[playerid] = decese[playerid][turf];
						
					 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wAttacker]) {
						 	if(ucideri[killerid][turf] > bestscoreat[turf]) {
							 	bestscoreat[turf] = ucideri[killerid][turf];
							 	bestmemberat[turf] = killerid;
						 	}
					 	}
					 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wFaction]) {
						 	if(ucideri[killerid][turf] > bestscoredf[turf]) {
							 	bestscoredf[turf] = ucideri[killerid][turf];
							 	bestmemberdf[turf] = killerid;
						 	}
					 	}
					 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wAttacker]) {
					 		if(decese[playerid][turf] > worstscoreat[turf]) {
								worstscoreat[turf] = decese[playerid][turf];
								worstmemberat[turf] = playerid;
							}
						}
					 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wFaction]) {
					 		if(decese[playerid][turf] > worstscoredf[turf]) {
								worstscoredf[turf] = decese[playerid][turf];
								worstmemberdf[turf] = playerid;
							}
						}
						new wname[32];
						GetWeaponNameEx(GetPlayerWeapon(killerid), wname, sizeof(wname));
						format(string, sizeof(string), "War: Ban da giet %s bang con %s tu khoang cach.",GetName(playerid), wname, DistanceToPlayer(killerid, playerid));
						SCM(killerid, 0x00E5FFFF, string);
						format(string, sizeof(string), "War: Ban da bi giet boi %s bang con %s tu khoang cach %dm.",GetName(killerid),wname, DistanceToPlayer(killerid, playerid));
						SCM(playerid, 0x00E5FFFF, string);
						if(PaintType[playerid] == 0 && PaintType[killerid] == 0) {	
							new Float: Pos[3], sweapon, sammo, idd;
							GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
							for(new i = 0; i < 12; i++) {
								GetPlayerWeaponData(playerid, i, sweapon, sammo); 
								if(sweapon != 0) {
									idd = CheckIDEmpty();
									Pickups[idd][psID] = CreateDynamicPickup(WeaponObject(sweapon), 23, Pos[0]+random(4), Pos[1]+random(4), Pos[2], GetPlayerVirtualWorld(playerid));
									Pickups[idd][psWar] = turf;
									Pickups[idd][psType] = 1;
									Pickups[idd][psWeapon] = sweapon;
									Pickups[idd][psAmmo] = sammo;
								}
							}
							idd = CheckIDEmpty();
							Pickups[idd][psID] = CreateDynamicPickup(1240, 23, Pos[0]+random(4), Pos[1]+random(4), Pos[2], GetPlayerVirtualWorld(playerid));
							Pickups[idd][psType] = 0;
							Pickups[idd][psWar] = turf;
							Pickups[idd][psWeapon] = 0;
							Pickups[idd][psAmmo] = 0;
							Pickups[idd][psWar] = turf;
							idd = CheckIDEmpty();
							Pickups[idd][psID] = CreateDynamicPickup(1212, 23, Pos[0]+random(4), Pos[1]+random(4), Pos[2], GetPlayerVirtualWorld(playerid));
							Pickups[idd][psType] = 2;
							Pickups[idd][psWar] = turf;
							Pickups[idd][psWeapon] = 0;
							Pickups[idd][psAmmo] = 0;
							Pickups[idd][psWar] = turf;	
							Pickups[idd][psAmount] = 10+random(50);			
						}	
						return true;
					}
				}
			}
		}	
		if(gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11) {
			DisablePlayerCheckpointEx(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		}
		if(Mobile[playerid] != 255) {
			if(Mobile[playerid] < 255) {
				SCM(Mobile[playerid],  COLOR_GRAD2, "Tut tut tut...");
				CellTime[Mobile[playerid]] = 0;
				CellTime[playerid] = 0;
				Mobile[Mobile[playerid]] = 255;
			}
			Mobile[playerid] = 255;
			CellTime[playerid] = 0;
		}
		if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[killerid][pClan] != 0) {
			for(new h = 0; h < MAX_SAFEZONES; h++) {
				if(PlayerToPoint(20.0, playerid, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ])) return true;
			}	
		}	
		if(PlayerHit[killerid] == playerid) {
			PlayerPlaySound(killerid,17802,0.0,0.0,0.0);
			
			new wname[30];
			GetWeaponName(reason, wname, sizeof(wname));
			if(reason == 0) wname = "Pumn";
			
			GivePlayerCash(killerid, 1, HeadValue[playerid]);
			UsedContract[playerid] = 0;
			PlayerHit[killerid] = -1;
			Contract[playerid] = 0;
			
			if(DistanceToPlayer(killerid, playerid) >= 100 || reason == 4) {
				if(DistanceToPlayer(killerid, playerid) >= 200) GivePlayerCash(killerid, 1, HeadValue[playerid]);
				format(string, sizeof(string), "* Ban da hoan thanh hop dong tren %s(%d). Ban nhan duoc:$%s.", GetName(playerid), playerid, FormatNumber(HeadValue[playerid]));
				SCM(killerid, COLOR_MONEY, string);
				format(string, sizeof(string), "(!) %s[rank: %d] cham dut hop dong len %s [khoang cach: %dm][vu khi: %s][fail]", GetName(killerid), PlayerInfo[killerid][pRank], GetName(playerid), DistanceToPlayer(killerid, playerid), wname);
				if(PhoneOnline[killerid] == 0) FailRaport(killerid, 0);
				if(GetPVarInt(killerid, "Undercover") == 0) FailRaport(killerid, 1);
				if(PhoneOnline[killerid] == 1 && GetPVarInt(killerid, "Undercover") == 1) {
					UpdateFactionRaport(killerid, 0);
					format(string, sizeof(string), "(!) %s[rank: %d] cham dut hop dong len %s [khoang cach: %dm][vu khi: %s][success]", GetName(killerid), PlayerInfo[killerid][pRank], GetName(playerid), DistanceToPlayer(killerid, playerid), wname);
					for(new m; m < 2; m++) {
						if(PlayerInfo[killerid][pDailyMission][m] == 15 || PlayerInfo[killerid][pDailyMission][m] == 16) CheckMission(killerid, m);
					}						
				}	
			}	
			else {
				FailRaport(killerid, 3);
				format(string, sizeof(string), "(!) %s[rank: %d] cham dut hop dong len %s [khoang cach: %dm][vu khi: %s][fail]", GetName(killerid), PlayerInfo[killerid][pRank], GetName(playerid), DistanceToPlayer(killerid, playerid), wname); 
			}	
			SendFactionMessage(11, COLOR_LIGHTBLUE, string);				
			HeadValue[playerid] = 0;
			return true;
		}		
		if(IsAMember(playerid) && InWar[PlayerInfo[playerid][pMember]] == 1) return true;		
		if(InEvent[killerid] == 1) return true;
		if(PaintType[killerid] == 0 && PaintType[killerid] == 0 && InEvent[killerid] == 0 && PlayerInfo[killerid][pJailed] == 0 && !IsACop(killerid) && !IsACop(playerid)) {
			if(PlayerInfo[killerid][pMember] == 0 && PlayerInfo[playerid][pMember] == 0 || PlayerInfo[playerid][pMember] != PlayerInfo[killerid][pMember]) {
				format(WantedName[playerid], 256, GetName(killerid));
				WantedReason[playerid] = reason;
				SCM(playerid,COLOR_WARNING,"Ban da bi giet boi mot nguoi choi. Ban co 1 phut de goi cho canh sat '/call 112'.");
				WantedTimer[playerid] = SetTimerEx("ClearWanted",60000, false,"d", playerid);
			}
		}
		if(PlayerInfo[playerid][pAdmin] < 1) {
			new Float: Pos[3], idd;
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			idd = CheckIDEmpty();
			Pickups[idd][psID] = CreateDynamicPickup(1212, 23, Pos[0]+random(4), Pos[1]+random(4), Pos[2], GetPlayerVirtualWorld(playerid));
			Pickups[idd][psType] = 4;
		}
		killerid = INVALID_PLAYER_ID;
	}
	return true;
}
public OnVehicleMod(playerid, vehicleid, componentid) {
	if(GetPlayerInterior(playerid) == 0 && PlayerInfo[playerid][pAdmin] < 1) {
		RemoveVehicleComponent(vehicleid,componentid);
		NightBot(playerid, "Mods-Hack");
		return true;
	}
	new modok = islegalcarmod(GetVehicleModel(vehicleid), componentid);
	if(!modok) {
		RemoveVehicleComponent(vehicleid,componentid);
		NightBot(playerid, "Mods Invalids");
		return true;
	}
	if(FindSpawnID(vehicleid) != 0) saveTuning(playerid, vehicleid);
	SetVehicleHealth(vehicleid, 999);
	return true;
}
function RandomEx(minim, max) return random(max-minim) + minim;

YCMD:addpin(playerid, params[], help) {
	if(PlayerInfo[playerid][pPinLogged] == 1) return true;
	if(IsPin[playerid] >= 1) return true;
	IsPin[playerid] = 1;
	new ste[5];
	for(new i = 0; i < 11; i++) {
		PlayerTextDrawShow(playerid, PinPTD[i]);
		if(i < 10) format(ste, sizeof(ste), "%d", i == 9 ? 0 : i+1), PlayerTextDrawSetString(playerid, PinPTD[i], ste);
  	}
  	for(new i = 0; i < 7; i++) TextDrawShowForPlayer(playerid, PinTD[i]);
  	SelectTextDraw(playerid, 0xE52C2FFF);
	return true;
}
YCMD:changepin(playerid, params[], help) {
	if(strlen(PlayerInfo[playerid][pPin]) == 0 || PlayerInfo[playerid][pPinLogged] != 1)
		return true;

	new vpin, npin;
	if(sscanf(params, "ii", vpin, npin))
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/changepin [pin actual] [new pin]");

	if(vpin != PlayerInfo[playerid][pPin] || (npin < 1000 && npin != 0))
		return SCM(playerid, COLOR_LGREEN, "Error: PIN sai.");

	PlayerInfo[playerid][pPin] = npin;
	UpdateVar(playerid, "Pin", npin);

	if(npin == 0) PlayerInfo[playerid][pPinLogged] = 0;

	gString[0] = EOS;
	format(gString, 25, "PIN moi la: %d.", npin);
	SCM(playerid, COLOR_YELLOW, npin != 0 ? gString : "PIN da duoc go bo.");
	return true;
}

YCMD:server(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SCM(playerid, COLOR_LGREEN, "Khong du quyen han!");
	Dialog_Show(playerid, DIALOG_SERVER, DIALOG_STYLE_LIST, "Server menu",
		"Unban all\nRestart ngay khi Payday\nBao tri may chu\nDat mat khau\nThay doi ten server\nReset nha khong hoat dong\nReset biz khong hoat dong\nReset quest",
		"Ok", "Exit");
	return true;
}

function saveTuning(playerid, vehicleid) {
	new idd = FindSpawnID(vehicleid);
	if(idd != 0) {
		for(new i = 0; i < 14; i++) {
			CarInfo[idd][cMod][i] = GetVehicleComponentInSlot(vehicleid, i);
		} 
		update_mods(idd);
	}	
	BizzInfo[29][bBalance] += 500;
	return true;
}

update_mods(idd) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `Mods`='%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `ID`='%d'", CarInfo[idd][cMod][0], CarInfo[idd][cMod][1], CarInfo[idd][cMod][2],
		CarInfo[idd][cMod][3], CarInfo[idd][cMod][4], CarInfo[idd][cMod][5], CarInfo[idd][cMod][6], CarInfo[idd][cMod][7], CarInfo[idd][cMod][8], CarInfo[idd][cMod][9],
		CarInfo[idd][cMod][10], CarInfo[idd][cMod][11], CarInfo[idd][cMod][12], CarInfo[idd][cMod][13], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid) {
	new idd = FindSpawnID(vehicleid);
	if(idd != 0) {
		gQuery[0] = EOS;
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `paintjob`='%d' WHERE `ID`='%d'", paintjobid, CarInfo[idd][cID]);
		mysql_tquery(SQL, gQuery, "", "");
		CarInfo[idd][paintjob] = paintjobid;
	}
	return true;
}
stock iswheelmodel(modelid) {
	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
	for(new I = 0, b = sizeof(wheelmodels); I != b; ++I) {
		if(modelid == wheelmodels[I]) return true;
	}
	return false;
}
stock IllegalCarNitroIde(carmodel) {
	new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
	for(new I = 0, b = sizeof(illegalvehs); I != b; ++I) {
		if(carmodel == illegalvehs[I]) return true;
	}
	return false;
}
stock illegal_nos_vehicle(PlayerID) {
	new carid = GetPlayerVehicleID(PlayerID);
	new playercarmodel = GetVehicleModel(carid);
	return IllegalCarNitroIde(playercarmodel);
}
stock islegalcarmod(vehicleide, componentid) {
	new modok = false;
	if( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {
		new nosblocker = IllegalCarNitroIde(vehicleide);
		if(!nosblocker) modok = true;
	} else {
		for(new I = 0, b = sizeof(legalmods); I != b; ++I) {
			if(legalmods[I][0] == vehicleide) {
				for(new J = 1; J < 22; J++) { 
					if(legalmods[I][J] == componentid) modok = true;
				}
			}
		}
	}
	return modok;
}
public OnPlayerSpawn(playerid) {
	new string[150];
	if(SpawnedCarYT[playerid] == 1) { DestroyDynamicObject(nameobject[YouTuberCar[playerid]]), DestroyVehicle(YouTuberCar[playerid]), SpawnedCarYT[playerid] = 0; }
	if(PlayerInfo[playerid][pShowBanca] == 1) {
		format(string, sizeof(string), "$%s", GetBankMoney(playerid));
		PlayerTextDrawSetString(playerid, BancaTD, string);
		PlayerTextDrawShow(playerid, BancaTD);
	}
   	Update3DTextLabelText(vipLabel[playerid], -1, "");
   	if(PlayerInfo[playerid][pVip] != 0) {
	   	switch(PlayerInfo[playerid][pVip]) {
	   		case 1: Update3DTextLabelText(vipLabel[playerid], 0x7DE41BFF, "VIP USER");
	   		case 2: Update3DTextLabelText(vipLabel[playerid], 0xF28036FF, "VIP USER");
	   		case 3: Update3DTextLabelText(vipLabel[playerid], 0xDF2626FF, "VIP USER");
	   	}
		Attach3DTextLabelToPlayer(vipLabel[playerid], playerid, 0.0, 0.0, 0.4);
	}
	TextDrawShowForPlayer(playerid, DataT[0]);
	TextDrawShowForPlayer(playerid, DataT[1]);
	TextDrawShowForPlayer(playerid, DataT[2]);
	if(Escape[playerid] == 1) FailEscape(playerid);
	playerKills[playerid] = 0;
	for(new i = 0; i < 3; i++) PlayerTextDrawHide(playerid, SpeedometerPTD[i]);
	Update3DTextLabelText(deathLabel[playerid], -1, "");
	SetPlayerWeather(playerid, 0);
	Undita[playerid] = 0;
	Momeala[playerid] = 0;
	ResetWeapons(playerid);
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	StopAudioStreamForPlayer(playerid);
	SetPlayerHealthEx(playerid, 99);
	SetPlayerArmourEx(playerid, 0);
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	SetPlayerToTeamColor(playerid);	
	SetPlayerTeam(playerid,4);
	InTraining[playerid] = 0;
	SetPVarInt(playerid,"KilledFlood",0);
	Armour[playerid] = 0;
	SetPVarInt(playerid, "Armour", 0);
	DisableRemoteVehicleCollisions(playerid, 0);
	TurfTime[playerid] = 0;
	HaveBag[playerid] = 0;
	Freezed[playerid] = 0;	
	PlayRadio[playerid] = 0;
	InEvent[playerid] = 0;
	playerDeath[playerid] = -1;
	//AntiDeAMX();
	if(InExamen[playerid] == 1) FailExamen(playerid);
	if(PlayerInfo[playerid][pPetStatus] == 1) {
		SetPlayerAttachedObject(playerid, 6, 19078, 17, 0.021065, -0.100726, 0.143000, 357.120239, 1.712298, 349.232513, 1.000000, 1.000000, 1.120420);
		if(petstatusv[playerid] == 0) {
			format(string, sizeof(string), "{F08A23}Pet level.{EA2323}%d - %s",PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pPetName]);
			Pet[playerid] = CreateDynamic3DTextLabel(string, 0xFFFFFF00, 357.120239, 1.712298, 349.232513, 20, playerid);
			petstatusv[playerid] ++;
		}
	}
	if(FreezeTime[playerid] != 0) TogglePlayerControllable(playerid, 0);
	if(GetPVarInt(playerid, "InLesson") != -1) {
		new id = GetPVarInt(playerid, "InLesson");
		format(string, sizeof(string), "Bai hoc bi huy vi %s da chet.", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE,string);
		SCM(playerid, COLOR_LIGHTBLUE, "Bai hoc bi huy!");
		SetPVarInt(id, "InLesson", -1);
		SetPVarInt(playerid, "InLesson", -1);		
	}
	foreach(new i: Player) {
		if(Spectate[i] == playerid) {
			TogglePlayerSpectating(i, 1);
			SetPlayerInterior(i, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			PlayerSpectatePlayer(i, playerid);		
		}
	}	
	if(gDice[playerid] == 1) SCM(playerid, -1, "Ban mat xuc xac."), gDice[playerid] = 0;
	if(PlayerInfo[playerid][pGlasses] > 0 && PlayerInfo[playerid][pShowGlasses] == 1) {
		new skin = PlayerInfo[playerid][pChar];
		if(skin < 300) SetPlayerHoldingObject(playerid, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
	}	
	if(InRob[playerid] == 1) FailRob(playerid, "Chet");	
	if(JobWorking[playerid] == 1) {
		JobWorking[playerid] = 0;
		PlayerTextDrawHide(playerid, JobTD);
		if(JobVehicle[playerid] != 0) { DestroyVehicle(JobVehicle[playerid]); JobVehicle[playerid] = 0; }
		if(Trailer[playerid] != 0) { DestroyVehicle(Trailer[playerid]); Trailer[playerid] = 0; }
		PlayerTextDrawHide(playerid, InfosTD);
		DisablePlayerCheckpointEx(playerid);
		CP[playerid] = 0;
		JobVehicle[playerid] = 0;
		DisablePlayerRaceCheckpointEx(playerid);
		RemovePlayerAttachedObject(playerid, 2);
	}
	if(CP[playerid] == 51) {
		SCM(playerid, -1, "Ban mat tui bot");
		CP[playerid] = 0;
		KG[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}
	if(HaveFish[0][playerid] != 0) {
		SCM(playerid, -1, "Ban mat con ca!");
		HaveFish[0][playerid] = 0;
		HaveFish[1][playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}	
	if(PlayerInfo[playerid][pShowHud] == 0) {
		show_logo(playerid);	
	}	
	
	if(UsedFly[playerid] == 1) {
		StopFly(playerid);
		UsedFly[playerid] = 0;
	}
	if(InShop[playerid] == 1) {
		new carid = pCarID[playerid];
		SetCameraBehindPlayer(playerid), SetPlayerInterior(playerid, pInteriorID[playerid]), SetVehiclePosEx(playerid, carid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
		SetPlayerVirtualWorld(playerid, 0);
		SetVehicleVirtualWorld(carid, 0);
		TextDrawHideForPlayer(playerid, HiddTD[0]);
		TextDrawHideForPlayer(playerid, HiddTD[1]);
		TextDrawHideForPlayer(playerid, HiddTD[2]);
		TextDrawHideForPlayer(playerid, HiddTD[3]);
		TextDrawHideForPlayer(playerid, HiddTD[4]);
		PlayerTextDrawHide(playerid, HiddTDs[0]);
		PlayerTextDrawHide(playerid, HiddTDs[1]);
		PlayerTextDrawHide(playerid, HiddTDs[2]);
		CancelSelectTextDraw(playerid);
		InShop[playerid] = 0;
	}
	if(InDealer[playerid] >= 1) {
		stop CancelTestDrive(playerid);
		CancelDriveTest(playerid);
	}
	if(StartedSpray[playerid] == 1 || ClanDuty[playerid] == 1) {
		SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Ban khong o trong!");
		GraffitiInfo[StartedSpray2[playerid]][gfAttacked] = 0;
		StartedSpray[playerid] = 0;
		StartedSpray2[playerid] = 0;
		StartedSprayOn[playerid] = 0;
		ClanProces[playerid] = 0;
		ClanDuty[playerid] = 0;
		GraffitiInfo[StartedSprayOn[playerid]][gfAttacked] = 0;
	}
	if(!gPlayerAnimLibsPreloaded[playerid]) {
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
		PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
		PreloadAnimLib(playerid,"FOOD");
		PreloadAnimLib(playerid,"ON_LOOKERS");
		PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"MISC");
		PreloadAnimLib(playerid,"SWEET");
		PreloadAnimLib(playerid,"RIOT");
		PreloadAnimLib(playerid,"PED");
		PreloadAnimLib(playerid,"POLICE");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	gTeam[playerid] = PlayerInfo[playerid][pTeam];
	if(gTeam[playerid] == 4) gTeam[playerid] = 4;
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3) {
		gTeam[playerid] = 2;
		PlayerInfo[playerid][pTeam] = 2;
	}
	if(IsPlayerLogged[playerid] == 0) {
		SCM(playerid, COLOR_WARNING, "* Ban da bi kick vi chua dang nhap.");
		KickEx(playerid);
		return true;
 	}	
	if(PaintType[playerid] != 0) return PaintSpawn(playerid);
	if(OnDuty[playerid] == 1 && IsACop(playerid)) {
		ServerWeapon(playerid, 24, 500);
		ServerWeapon(playerid, 3, 0);
		ServerWeapon(playerid, 41, 500);
		ServerWeapon(playerid, 29, 1000);
		ServerWeapon(playerid, 31, 1000);
		SetPlayerArmourEx(playerid, 99);
		SetPlayerHealthEx(playerid, 99);	
	}	
	if(PlayerInfo[playerid][pBackpack] == 2) SetPlayerAttachedObject(playerid, 8, 3026, 1, -0.172813, -0.112569, -0.022387, 0.000000, 0.000000, 3.390071, 1.000000, 1.000000, 1.130721);
	SetPlayerSpawn(playerid);
	if(GetPVarInt(playerid, "Cover") == 1) {
		SetPlayerColor(playerid, -1);
		SetPlayerColor(playerid, COLOR_WHITE);
		SetPlayerScore(playerid, 1+random(2));
		SetPlayerSkinEx(playerid, 1+random(100));
		SCM(playerid, COLOR_YELLOW, "Ban dang cai trang (undercover)!");
	}
	return true;
}

public OnPlayerEnterRaceCheckpoint(playerid) {
	if(CP[playerid] == 99) {
	   DisablePlayerCheckpointEx(playerid);
	   CP[playerid] = 0;
	}
	if(CP[playerid] == 669) {
		gString[0] = EOS;
		new i = playerid, money = random(20000000) + 50000000, pp = random(20) + 50, plp = random(500) + 1000, gp = random(200) + 100;
		format(gString, sizeof(gString), "(( {31d6e4}Winter Quest{A9C4E4} - %s da tim ra tat ca qua tang va hoan tat quest. ))", GetName(i));
		SCMTA(COLOR_CLIENT, gString);
		SCM(i, COLOR_WHITE,  "Xin chuc mung! Ban da hoan tat Winter Quest va nhan duoc:");
		format(gString, sizeof(gString), "- $%s, %d Premium Points, %s Red-Points, %d Gift Points.", FormatNumbers(money), pp, FormatNumbers(plp), gp);
		SCM(i, COLOR_WHITE, gString);
		GivePlayerCash(i, 1, money);
		PlayerInfo[i][pPremiumPoints] += pp;
		PlayerInfo[i][pHpoints] += plp;
		PlayerInfo[i][pGiftPoints] += gp;
		Update(i, pCashx);
		Update(i, pPremiumPointsx);
		Update(i, pHpointsx);
		Update(i, pGiftPointsx);
		UpdateVar(playerid, "QuestFinish", 1);
		PlayerInfo[playerid][pQuestFinish] = 1;
		StartQuest[i] = 0;
		DestroyVehicle(QuestVehicle[i]);
	}

	if(InExamen[playerid]) {
		if(!IsPlayerInAnyVehicle(playerid)) return true;
		if(CP[playerid] == 116) {
			CP[playerid] = 0;
			DisablePlayerRaceCheckpointEx(playerid);
   			PlayerInfo[playerid][pCarLic] = 1;
			PlayerInfo[playerid][pCarLicT] = 100;
			DisableRemoteVehicleCollisions(playerid, 0);
			SCM(playerid, COLOR_LIGHTBLUE, "Ban nhan duoc giay phep lay xe 100 gio. Chuc mung!");
			DestroyVehicle(ExamCar[playerid]);
			ExamCar[playerid] = 0;
			GivePlayerCash(playerid, 0, 1000);
			InExamen[playerid] = 0;
			DestroyDynamicObject(GetPVarInt(playerid, "ObjExam"));
			UpdateVar(playerid, "CarLic", 1);
			UpdateVar(playerid, "CarLicT", 100);
			finishAchievement(playerid, 6);
			return true;
		}
		CP[playerid] ++;
		SetPlayerRaceCheckpointEx(playerid, CP[playerid] < 116 ? 0 : 1, DMVCP[CP[playerid]-100][0], DMVCP[CP[playerid]-100][1], DMVCP[CP[playerid]-100][2], DMVCP[CP[playerid]-99][0], DMVCP[CP[playerid]-99][1], DMVCP[CP[playerid]-99][2],8.0);
	}
	new vehicleid = GetPlayerVehicleID(playerid), Float: health;
   	GetVehicleHealth(vehicleid, health);
	switch(CP[playerid]) {
		case 120..132: {
			if(!IsPlayerInAnyVehicle(playerid))
				return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 0, DMVBOAT[CP[playerid]-120][0], DMVBOAT[CP[playerid]-120][1], DMVBOAT[CP[playerid]-120][2], DMVBOAT[CP[playerid]-119][0], DMVBOAT[CP[playerid]-119][1], DMVBOAT[CP[playerid]-119][2], 10.0);
		}
		case 133: {
			CP[playerid] = 0;
			DisablePlayerRaceCheckpointEx(playerid);
   			PlayerInfo[playerid][pBoatLic] = 1;
			PlayerInfo[playerid][pBoatLicT] = 100;
			SCM(playerid, COLOR_LIGHTBLUE, "Ban nhan duoc giay phep lay thuyen 100 gio. Chuc mung!");
			DestroyVehicle(ExamCar[playerid]);
			ExamCar[playerid] = 0;
			InExamen[playerid] = 0;
			gQuery[0] = EOS;
			SetPlayerPosEx(false, playerid, 2639.8896,-970.0893,39.8281);
			mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, gQuery, "", "");		
		}
		case 159: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1337.7225,-2458.1738,52.1955,1068.9011,-1998.5757,110.3633, 5.0);
		}
		case 160: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1068.9011,-1998.5757,110.3633,1248.2017,-1089.9178,126.1693, 5.0);
		}	
		case 161: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1248.2017,-1089.9178,126.1693,1262.6804,-359.7021,125.8077, 5.0);
		}	
		case 162: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1262.6804,-359.7021,125.8077,1354.6277,185.5372,126.3102, 5.0);
		}	
		case 163: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1354.6277,185.5372,126.3102,1469.2338,856.8419,73.3954, 5.0);
		}	
		case 164: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1469.2338,856.8419,73.3954,1477.5388,1444.2805,11.7513, 5.0);
		}	

		case 165: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1477.5388,1444.2805,11.7513,1389.3634,1615.9071,11.7527, 5.0);
		}	
		case 166: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1389.3634,1615.9071,11.7527,1381.7755,1238.9287,35.4809, 5.0);
		}	
		case 167: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1381.7755,1238.9287,35.4809,1350.0398,829.1030,91.8478, 5.0);
		}	
		case 168: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1350.0398,829.1030,91.8478,1251.3011,235.3953,113.0084, 5.0);
		}	
		case 169: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1251.3011,235.3953,113.0084,1161.8298,-439.5165,142.3422, 5.0);
		}	

		case 170: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1161.8298,-439.5165,142.3422,1033.0001,-918.2105,146.7412, 5.0);
		}	
		case 171: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1033.0001,-918.2105,146.7412,817.0712,-1571.2627,105.0100, 5.0);
		}	
		case 172: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 817.0712,-1571.2627,105.0100,854.5660,-2107.3997,73.8536, 5.0);
		}	
		case 173: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 854.5660,-2107.3997,73.8536,1156.9110,-2464.0076,51.5708, 5.0);
		}	
		case 174: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 4, 1156.9110,-2464.0076,51.5708,1691.7114,-2592.8950,14.4685, 5.0);
		}	
		case 175: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			CP[playerid] ++;
			SetPlayerRaceCheckpointEx(playerid, 3,1691.7114,-2592.8950,14.4685,1691.7114,-2592.8950,14.4685, 5.0);
		}	
				
		case 176: {
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			DisablePlayerCheckpointEx(playerid);
			DisablePlayerRaceCheckpointEx(playerid);
			CP[playerid] = 0;
			GiveJobSalary(playerid);
			PlayerInfo[playerid][pPilotSkill] ++;
			Update(playerid, pPilotSkillx);
			DestroyVehicle(JobVehicle[playerid]);
			JobVehicle[playerid] = 0, JobWorking[playerid] = 0;
			PlayerTextDrawHide(playerid, JobTD);
		}
	}
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);	
	if(JobWorking[playerid] == 1 && PlayerInfo[playerid][pShowJob] == 1 && PlayerInfo[playerid][pShowHud] == 0) UpdateJobStats(playerid);
	return true;
}
public OnPlayerEnterCheckpoint(playerid) {
	gString[0] = EOS;
	if(!PlayerToPoint(50, playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]))
		return NightBot(playerid, "Teleport to checkpoint.");
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999) {
		TaxiAccepted[playerid] = 999;
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}
	else if(MedicCallTime[playerid] > 0) {
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}
	else if(MechanicCallTime[playerid] > 0) {
		MechanicCallTime[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}
	else if(CP[playerid] == 34)  {
		if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return true;
		DisablePlayerCheckpointEx(playerid);
		CP[playerid] = 0;
		new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		new idd = FindSpawnID(towedcar);
		//if(idd == 0) return true;

		new Float: Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);		
		if(idd == -1) format(gString, sizeof(gString), "**(( TTC Dispatch: Tow Truck Member %s (%d) keo xe %d. [hp: %0.2f] ))**", GetName(playerid), playerid, towedcar, GetPVarFloat(playerid, "VehHP"));
		else format(gString, sizeof(gString), "**(( TTC Dispatch: Tow Truck Member %s (%d) keo xe %d. [veh: %d][hp: %0.2f] ))**", GetName(playerid), playerid, towedcar, idd, GetPVarFloat(playerid, "VehHP"));
		SendFactionMessage(8, COLOR_LIGHTBLUE, gString);
		
		if(idd != 0) {		
			DestroyVehicle(CarInfo[idd][Spawned]);
			if(strlen(CarInfo[idd][cText]) >= 3) DestroyDynamicObject(nameobject[CarInfo[idd][Spawned]]);
			if(CarInfo[idd][cNeon]) {
				DestroyDynamicObject(NeonObj[0][CarInfo[idd][Spawned]]);
				DestroyDynamicObject(NeonObj[1][CarInfo[idd][Spawned]]);
			}
			CarInfo[idd][Spawned] = 0;
			CarInfo[idd][Confiscated] = 1;
			new query[256];
			mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Confiscated`='1' WHERE `ID`='%d'", CarInfo[idd][cID]);
			mysql_tquery(SQL, query, "", "");
			foreach(new i: Player) {
				if(IsPlayerConnected(i)) {
					if(PlayerInfo[i][pSQLID] == CarInfo[idd][Userid]) SCM(i, COLOR_YELLOW, "SMS from TTC: Mot trong nhung chiec xe cua ban da bi keo di vi dau trai phep. Ban co the khoi phuc no ban viec su dung /v - [vehicle] - Dong phat");
				}
			}				
		}
		else SetVehicleToRespawn(towedcar);
		
		new money = 1000 + random(100);
		GivePlayerCash(playerid, 1, money);
		format(gString, sizeof(gString), "Ban da nhan duoc $%s cho xe da keo!", FormatNumber(money));
		SCM(playerid,COLOR_MONEY,gString);
		Update(playerid, pCashx);
		
		UpdateFactionRaport(playerid, 0);
		
		for(new m; m < 2; m++) {
			if(PlayerInfo[playerid][pDailyMission][m] == 15 || PlayerInfo[playerid][pDailyMission][m] == 16) CheckMission(playerid, m);
		}			
	}
	else if(CP[playerid] == 43 || CP[playerid] == 53) {	
		CP[playerid] = 0;
		PlayerTextDrawHide(playerid, FindTD);
		PlayerTextDrawHide(playerid, FindSkinTD);
		targetfind[playerid] = -1;
		AcceptedService[playerid] = -1;
		DisablePlayerCheckpointEx(playerid);
	}
	else if(CP[playerid] == 50) {
		new cashr = 100000 + random(100000);
		PlayerInfo[playerid][pRobSkill] += 1;
		DisablePlayerCheckpointEx(playerid);
		GivePlayerCash(playerid, 1, cashr);
		format(gString, sizeof(gString), "Ban nhan duoc $%s!", FormatNumber(cashr));
		SCM(playerid, COLOR_YELLOW, gString);
		CP[playerid] = 0;
		Update(playerid, pCashx);
		Update(playerid, pRobSkillx);
		RemovePlayerAttachedObject(playerid,0);
		RemovePlayerAttachedObject(playerid,1);
	}
	else {
		switch (gPlayerCheckpointStatus[playerid]) {
			case CHECKPOINT_LOCATE: {
				DisablePlayerCheckpointEx(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			}
		}
	}
	switch(CP[playerid]) {
		case 51: {
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
			new rand = KG[playerid] * 14 + 82 * GetPlayerSkill(playerid);
			format(gString, sizeof(gString), "Chuc mung! Ban nhan duoc $%s cho cong suc da bo ra.", FormatNumber(rand));
			SCM(playerid, COLOR_MONEY, gString);
			GivePlayerCash(playerid, 1, rand);
			PlayerInfo[playerid][pFarmerSkill] ++;
			Update(playerid, pFarmerSkillx);
			if(PlayerInfo[playerid][pFarmerSkill] == 50)
			{ SCM(playerid, COLOR_YELLOW, "* Cong viec Fermier da dat Skill Level 2. Ban se nhan duoc nhieu tien hon. "); }
			else if(PlayerInfo[playerid][pFarmerSkill] == 100)
			{ SCM(playerid, COLOR_YELLOW, "* Cong viec Fermier da dat Skill Level 3. Ban se nhan duoc nhieu tien hon. "); }
			else if(PlayerInfo[playerid][pFarmerSkill] == 200)
			{ SCM(playerid, COLOR_YELLOW, "* Cong viec Fermier da dat Skill Level 4. Ban se nhan duoc nhieu tien hon. "); }
			else if(PlayerInfo[playerid][pFarmerSkill] == 400)
			{ SCM(playerid, COLOR_YELLOW, "* Cong viec Fermier da dat Skill Level 5. Ban se nhan duoc nhieu tien hon. "); }
			DestroyVehicle(JobVehicle[playerid]);
			JobVehicle[playerid] = 0, JobWorking[playerid] = 0;
			PlayerTextDrawHide(playerid, JobTD);
			KG[playerid] = 0;
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 4) CheckMission(playerid, m);
			}			
		}
		case 52: {
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) 
				return SCM(playerid, COLOR_GREY, "Xe khong tai theo hang.");

			DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
			Trailer[playerid] = 0;
			DisablePlayerCheckpointEx(playerid);
			new szDialog2[1024];				
			strcat(szDialog2, "Category\tType\tSkill\n");
			strcat(szDialog2, "Clothes\t{35DE1F}Hop phap\t1+\n");
			strcat(szDialog2, "Food\t{35DE1F}Hop phap\t1+\n");
			strcat(szDialog2, "Furniture\t{35DE1F}Hop phap\t1+\n");
			strcat(szDialog2, "Explosible\t{35DE1F}Hop phap\t2+\n");
			strcat(szDialog2, "Guns\t{F21313}Bat hop phap\t3+\n");
			strcat(szDialog2, "Stolen cars\t{F21313}Bat hop phap\t3+\n");
			Dialog_Show(playerid, DIALOG_TRUCKER, DIALOG_STYLE_TABLIST_HEADERS, "Choose destination", szDialog2, "Select", "Cancel");	
				
			PlayerInfo[playerid][pTruckerSkill] ++;
			Update(playerid, pTruckerSkillx);
			GiveJobSalary(playerid);
		}
		case 60: {
			PlayerInfo[playerid][pJackerSkill] ++;
			Update(playerid, pJackerSkillx);
			GiveJobSalary(playerid);
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
			JobWorking[playerid] = 0;			
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));	
			JobDeelay[playerid][PlayerInfo[playerid][pJob]] = 180;	
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 5) CheckMission(playerid, m);
			}			
		}
		case 373: {
			format(gString, sizeof(gString), "Den cua hang 24/7 gan nhat de ban %d kilogram ca ban vua cau.", GetPlayerSkill(playerid)*15);
			SCM(playerid, COLOR_YELLOW, gString);		
			DestroyVehicle(JobVehicle[playerid]);
			JobVehicle[playerid] = 0, JobWorking[playerid] = 0;	
			SetPlayerPosEx(false, playerid, 842.0929,-2131.5725,1.9931);
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
		}
		case 56: {
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
			new salar = Farming[playerid]*14+82*GetPlayerSkill(playerid);
			if(PlayerInfo[playerid][pPremiumAccount] == 1) salar += salar/2;
			format(gString, sizeof(gString), "%s da nhan duoc $%s cho cong suc da bo ra cho cong viec %s.", GetName(playerid), FormatNumber(salar), JobInfo[PlayerInfo[playerid][pJob]][jName]);
			InsertLog(playerid, gString, LOG_MONEY);			
			format(gString, sizeof(gString), "(+) Ban nhan duoc $%s cho cong suc da bo ra.", FormatNumber(salar));
			SCM(playerid, COLOR_MONEY, gString);
			GivePlayerCash(playerid, 1, salar);
			GunoiKG[playerid] = 0;
			Farming[playerid] = 0;
			PlayerInfo[playerid][pFarmerSkill] ++;
			Update(playerid, pFarmerSkillx);
			DestroyVehicle(JobVehicle[playerid]);
			JobVehicle[playerid] = 0, JobWorking[playerid] = 0;
			PlayerTextDrawHide(playerid, JobTD);
		}
		case 57: {
			PlayerTextDrawSetString(playerid, InfosTD, "Loading...");
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);	
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation2", 7000, false, "i", playerid);
			DisablePlayerCheckpointEx(playerid);
			StartingWork[playerid] = 0;
			CurseFacute[playerid] = 0;
			MoneyEarned[playerid] = 0;	
			WorkingTime[playerid] = 0;
		}
		case 58: {
			if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: {FFFFFF}Ban khong the giao buu kien khi o trong xe!");
			if(GetPVarInt(playerid, "InHand") == 0) return SCM(playerid, COLOR_LGREEN, "Error: {FFFFFF}Ban khong co buu kien tren tay! De lay no hay ra sau xe va bam Y.");
			SetPVarInt(playerid, "InHand", 0);
			new j = random(housess)+1;
			if(j == 0) j = 1;
			SetPlayerCheckpointEx(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez], 7.0);
			CP[playerid] = 58;
			format(gString, sizeof(gString), "Den diem mau ~r~~h~do~w~~h~ tren ban do de giao buu kien.~n~De lay goi hang, ra sau xe va bam Y!~n~khoang cach: ~y~%0.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]));
			PlayerTextDrawSetString(playerid, InfosTD, gString);
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);	
			PlayerInfo[playerid][pCurierSkill] ++;
			Update(playerid, pCurierSkillx);
			GiveJobSalary(playerid);
			RemovePlayerAttachedObject(playerid, 6);
			SetPlayerSpecialAction(playerid, 0);
			ClearAnimations(playerid);			
		}
		case 169: {	
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return FailRob(playerid, "Ban khong o tren xe");
			if(!IsPlayerInAnyVehicle(playerid)) return FailRob(playerid, "Khong o trong xe");
			if(LastRVehicle[playerid] != GetPlayerVehicleID(playerid)) return FailRob(playerid, "Xe khong chua tui tien");
			new cash = Bags[playerid] * 45000 + random(1000);
			GivePlayerCash(playerid, 1, cash);
			format(gString, sizeof(gString), "* Tien da duoc rua. Ban nhan duoc $%s.", FormatNumber(cash));
			SCM(playerid, COLOR_MONEY, gString);
			InRob[playerid] = 0;
			BizRobbed[playerid] = 0;
			HaveBag[playerid] = 0;
			Bags[playerid] = 0;
			SafeRTime[playerid] = 0;
			RemovePlayerAttachedObject(playerid,0);
			RemovePlayerAttachedObject(playerid,1);	
			BagTime[playerid] = 0;			
		}	
		case 155: {
			new j = random(housess)+1;
			if(j == 0) j = 1;
			SetPlayerCheckpointEx(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez], 7.0);
			format(gString, sizeof(gString), "Den diem ~r~~h~rosu~w~~h~ tren ban do de giao pizza.~n~khoang cach: ~y~%0.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]));
			PlayerTextDrawSetString(playerid, InfosTD, gString);
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);
			PlayerInfo[playerid][pPizzaSkill] ++;
			Update(playerid, pPizzaSkillx);
			GiveJobSalary(playerid);
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 1) CheckMission(playerid, m);
			}			
		}
		case 156: {		
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
			DestroyVehicle(JobVehicle[playerid]);
			JobVehicle[playerid] = 0, JobWorking[playerid] = 0;		
			PlayerInfo[playerid][pMatSkill] ++;
			UpdateVar(playerid, "MatSkill", PlayerInfo[playerid][pMatSkill]);
			GiveJobSalary(playerid);
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 3) CheckMission(playerid, m);
			}			
		}
		
		case 170: {
			if(playerObject[playerid] != 0) DestroyPlayerObject(playerid, playerObject[playerid]);
			playerObject2[playerid] = CreateObject( 1271,0,0,0,0,0,0,80);
			AttachObjectToVehicle(playerObject2[playerid], GetPlayerVehicleID(playerid), 0.000000, 0.599999, 0.499999, 0.000000, 0.000000, 0.000000 );	
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] ++;
			PlayerTextDrawSetString(playerid, InfosTD, "Den diem ~r~~h~checkpoint~w~~h~ tren ban do de tai hang hoa!");
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);		
			new rand = random(2);
			switch(rand) {
				case 0: SetPlayerCheckpointEx(playerid,1053.4596,2087.4233,10.8203,2.0); // cp
				case 1: SetPlayerCheckpointEx(playerid,967.8466,2160.6555,10.8203,2.0); // cp
			}
		}
		case 171: {
			if(playerObject2[playerid] != 0) DestroyObject(playerObject2[playerid]), playerObject2[playerid] = 0;
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] --;	
			PlayerTextDrawSetString(playerid, InfosTD, "Den diem ~r~~h~checkpoint~w~~h~ tren ban do de lay hang!");
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);			
			DisablePlayerCheckpointEx(playerid);
			playerObject[playerid] = CreatePlayerObject(playerid, 1271, 925.8871,2069.3081,10.8203,   0.00000, 0.00000, 45.00000);
			SetPlayerCheckpointEx(playerid, 925.8871,2069.3081,10.8203, 2.0);			
			PlayerInfo[playerid][pStivuitorSkill] ++;
			UpdateVar(playerid, "StivuitorSkill", PlayerInfo[playerid][pStivuitorSkill]);
			GiveJobSalary(playerid);
		}
		case 306: CP[playerid] = 299, SetPlayerCheckpointEx(playerid, 1872.9749,-1405.3937,14.0581, 2.0);
		case 309: {
			CP[playerid] = 0;
			DisablePlayerCheckpointEx(playerid);
			for(new i = 0; i < 50; i++) SCM(playerid, COLOR_WHITE, "");
			SCM(playerid, COLOR_LIGHTGOLD, "..Tutorial Step 4/5..");
			format(gString, sizeof(gString), "Ban da hoan thanh cong viec %s.", JobInfo[listitemm[playerid]][jName]);
			SCM(playerid, COLOR_LIGHTGOLD, gString);
			SCM(playerid, COLOR_LIGHTGOLD, "Bam phim Y de nhan cong viec nay hoac ban co the su dung lenh (/getjob).");
			SCM(playerid, COLOR_LIGHTGOLD, "De nghi viec, ban co the su dung phim N khi o gan NPC hoac lenh (/quitjob).");
			SCM(playerid, COLOR_LIGHTGOLD, "Sau khi hoan thanh Huong dan Cong viec ban se duoc chuyen ve Virtual World 0.");
			SCM(playerid, COLOR_LIGHTGOLD, "..");
		}	
	}
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);	
	if(JobWorking[playerid] == 1 && PlayerInfo[playerid][pShowJob] == 1 && PlayerInfo[playerid][pShowHud] == 0) UpdateJobStats(playerid);
	CheckSeconds(playerid);
	JobTime[playerid] = GetTickCount();
	return true;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {
	if(!ispassenger) {
		new vehicle = GetVehicleID(vehicleid), string[128];
		if(ServerVehicles[vehicle][vID] != 0 && JobWorking[playerid] == 0) {
			if(ServerVehicles[vehicle][vFaction] == 1 || ServerVehicles[vehicle][vFaction] == 2 || ServerVehicles[vehicle][vFaction] == 3 || ServerVehicles[vehicle][vFaction] == 14) {
				if(!IsACop(playerid)) {
					format(string, sizeof(string), "Ban khong thuoc %s.", FactionName(ServerVehicles[vehicle][vFaction]));
					SCM(playerid, COLOR_GREY, string);
					SlapPlayer(playerid);
				}
				else if(OnDuty[playerid] == 0 && IsACop(playerid)) {
					SCM(playerid, COLOR_LGREEN, "Ban khong the su dung xe thuoc to chuc khi ban khong lam nhiem vu (onduty)!");
					SlapPlayer(playerid);
					return true;
				}
				else if(ServerVehicles[vehicle][vRank] > PlayerInfo[playerid][pRank]) {
					format(string, sizeof(string), "Ban can rank %d de su dung phuong tien nay.", ServerVehicles[vehicle][vRank]);
					SCM(playerid, COLOR_GREY, string);
					SlapPlayer(playerid);
				}
			}
			else if(ServerVehicles[vehicle][vFaction] != PlayerInfo[playerid][pMember] && ServerVehicles[vehicle][vFaction] != 0) {
				format(string, sizeof(string), "Ban khong thuoc %s.", FactionName(ServerVehicles[vehicle][vFaction]));
				SCM(playerid, COLOR_GREY, string);
				SlapPlayer(playerid);
			}
			else {
				if(OnDuty[playerid] == 0 && IsACop(playerid) && Copcar2(vehicle)) {
					SCM(playerid, COLOR_LGREEN, "Ban khong the su dung xe thuoc to chuc khi ban khong lam nhiem vu (onduty)!");
					SlapPlayer(playerid);
					return true;
				}			
			}
		}
		if(IsABoat(vehicleid) && GetPVarInt(playerid, "InLesson") == -1) {
			if(PlayerInfo[playerid][pBoatLic] < 1 && InDealer[playerid] == 0 && InExamen[playerid] == 0) {
				SCM(playerid,COLOR_GREY, "Ban khong co giay phep su dung thuyen.");
				SlapPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
			}
		}
		else if(IsAPlane(vehicleid) && GetPVarInt(playerid, "InLesson") == -1) {
			if(PlayerInfo[playerid][pFlyLic] < 1 && InDealer[playerid] == 0) {
				SCM(playerid, COLOR_GREY, "Ban khong co giay phep bay.");
				SlapPlayer(playerid);
				TogglePlayerControllable(playerid, 1); 
			}
		}
		else {
			if(PlayerInfo[playerid][pCarLic] < 1 && !IsABike2(vehicleid) && InExamen[playerid] != 1 && GetVehicleModel(vehicleid) != 471) {
			 	SCM(playerid,COLOR_GREY, "Ban khong co giay phep lai xe.");
				SlapPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				SetPlayerFreeze(playerid, 1);
			}
		}
	}
	return true;
}

function show_logo(playerid) {
	new string[30];
	format(string, sizeof(string), "%s (id: %d)", GetName(playerid), playerid);
	PlayerTextDrawSetString(playerid, LogoPlayer, string);
	PlayerTextDrawShow(playerid, LogoPlayer);
	TextDrawShowForPlayer(playerid, Logo);
	return true;
}

function AttachNeon(carid) {
	if(CarInfo[carid][cNeon] == 0)
		return true;

	new vehicleid = CarInfo[carid][Spawned];
	switch(CarInfo[carid][cNeon]) {
		case 1: {
			NeonObj[0][vehicleid] = CreateDynamicObject(18652,0,0,0,0,0,0);
			NeonObj[1][vehicleid] = CreateDynamicObject(18652,0,0,0,0,0,0);
		}
		case 2: {
			NeonObj[0][vehicleid] = CreateDynamicObject(18651,0,0,0,0,0,0);
			NeonObj[1][vehicleid] = CreateDynamicObject(18651,0,0,0,0,0,0);
		}
		case 3: {
			NeonObj[0][vehicleid] = CreateDynamicObject(18650,0,0,0,0,0,0);
			NeonObj[1][vehicleid] = CreateDynamicObject(18650,0,0,0,0,0,0);
		}
		case 4: {
			NeonObj[0][vehicleid] = CreateDynamicObject(18649,0,0,0,0,0,0);
			NeonObj[1][vehicleid] = CreateDynamicObject(18649,0,0,0,0,0,0);
		}
		case 5: {
			NeonObj[0][vehicleid] = CreateDynamicObject(18648,0,0,0,0,0,0);
			NeonObj[1][vehicleid] = CreateDynamicObject(18648,0,0,0,0,0,0);
		}
		case 6: {
			NeonObj[0][vehicleid] = CreateDynamicObject(18647,0,0,0,0,0,0);
			NeonObj[1][vehicleid] = CreateDynamicObject(18647,0,0,0,0,0,0);					
		}
	}
	AttachDynamicObjectToVehicle(NeonObj[0][vehicleid], CarInfo[carid][Spawned], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachDynamicObjectToVehicle(NeonObj[1][vehicleid], CarInfo[carid][Spawned], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	return true;
}

function hide_logo(playerid) {
	PlayerTextDrawHide(playerid, LogoPlayer);
	TextDrawHideForPlayer(playerid, Logo);
	return true;
}

task OneTimer[300]() {
	foreach(new i : Rainbows[1]) ChangeRainbowColors(i);
	if(RulettStatus == 2) UpdateRuletta();
	foreach(new i : IsSpeed) GiveVehicleSpeed(i);
	return true;
}

task TwoTimer[600]() {
	foreach(new i : Rainbows[2]) ChangeRainbowColors(i);
	if(RulettStatus == 3) UpdateRuletta();
	return true;
}



public OnPlayerStateChange(playerid, newstate, oldstate) {
	new string[128];
	new vehicleid = GetPlayerVehicleID(playerid), lastcar = gLastCar[playerid], carid = FindSpawnID(gLastCar[playerid]), idd = FindSpawnID(vehicleid);
	switch(newstate) {
		case PLAYER_STATE_DRIVER: {
			gString[0] = EOS;
			format(gString, 20, "~g~%s", aVehicleNames[GetVehicleModel(vehicleid)-400]);
			GameTextForPlayer(playerid, gString, 5000, 1);
			VehicleOccupied[vehicleid] ++;
			if(IsVehicleOccupied(CarInfo[idd][Spawned])) CarInfo[idd][cTime] = -1;
		}
		case PLAYER_STATE_PASSENGER: {
			VehicleOccupied[vehicleid] ++;
			if(IsVehicleOccupied(CarInfo[idd][Spawned])) CarInfo[idd][cTime] = -1;
		}
	}
	switch(oldstate) {
		case PLAYER_STATE_PASSENGER: {
			VehicleOccupied[lastcar] --;
			if(!IsVehicleOccupied(CarInfo[carid][Spawned])) CarInfo[carid][cTime] = gettime()+600;
			if(InExamen[playerid] == 1) FailExamen(playerid);
		}
		case PLAYER_STATE_DRIVER: {
			VehicleOccupied[lastcar] --;
			if(!IsVehicleOccupied(CarInfo[carid][Spawned])) CarInfo[carid][cTime] = gettime()+600;
		}
	}
	if(TaxiDriver[playerid] != -1) {
		if(TaxiMoney[playerid] != 0) {
			if(TaxiMoney[playerid] >= 100) {
				for(new m; m < 2; m++) {
					if(PlayerInfo[TaxiDriver[playerid]][pDailyMission][m] == 15 || PlayerInfo[TaxiDriver[playerid]][pDailyMission][m] == 16) CheckMission(TaxiDriver[playerid], m);
				}						
				UpdateFactionRaport(TaxiDriver[playerid], 0);				
			}	
			AcceptedService[TaxiDriver[playerid]] = -1;	
			foreach(new i: Player) {
				if(IsNearPlayer(playerid, i)) {
					format(string, sizeof(string), "* %s da tra cho tai xe %s so tien $%s chi phi taxi.", GetName(playerid), GetName(TaxiDriver[playerid]), FormatNumber(TaxiMoney[playerid]));
					SCM(i, COLOR_PURPLE, string);
	
				}
			}
			TaxiMoney[playerid] = 0;
		}
		TaxiDriver[playerid] = -1;
		PlayerTextDrawHide(playerid, FareTD);
		KillTimer(TaxiTimer[playerid]);
		PlayerTextDrawHide(playerid, FareTD);
	}
	
	if(TaxiDuty[playerid] == 1) {
		Fare[playerid] = 0;
		TaxiDriver[playerid] = -1;
		TaxiDuty[playerid] = 0;
		PlayerTextDrawHide(playerid, FareTD);
		foreach(new i: Player) {
			if(IsPlayerConnected(i) && TaxiDriver[i] == playerid) {
				PlayerTextDrawHide(i, FareTD);
				TaxiDriver[i] = -1;
				TaxiMoney[i] = 0;
			}
		}
		format(string, sizeof(string), "Bay gio ban khong con lam nhiem vu (onduty) nua, ban nhan duoc $%s, la so tien ban kiem duoc.", FormatNumber(TaxiMoney[playerid]));
		SCM(playerid, COLOR_WHITE, string);
		GivePlayerCash(playerid, 1, TaxiMoney[playerid]);
		TaxiMoney[playerid] = 0;
	}		
	
	if(Helmet[playerid] == 1) {
		Helmet[playerid] = 0;
		format(string, sizeof(string), "* %s keo non bao hiem ra khoi dau.", GetName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		RemovePlayerAttachedObject(playerid, 3);
	}

	if(InDealer[playerid] >= 1 && TestingModel[playerid] == 1) {
		stop CancelTestDrive(playerid);
		CancelDriveTest(playerid);
	}
	   
	if(oldstate == PLAYER_STATE_DRIVER) {
		if(IsPlayerInAnyVehicle(playerid) && InEvent[playerid] == 1 && EventType == 2) {
			SpawnPlayer(playerid);
			SCM(playerid, COLOR_WARNING, "Ban da bi loai khoi su kien vi su dung phuong tien!");
		}		
		if(PlayerRainbow[playerid] != 0) {
			if(Iter_Contains(Rainbows[PlayerRainbow[playerid]], playerid)) Iter_Remove(Rainbows[PlayerRainbow[playerid]], playerid);
			idd = FindSpawnID(masinaRainbow[playerid]);
			if(idd == 0) {
				ChangeVehicleColor(masinaRainbow[playerid], 1, 1);
				PlayerRainbow[playerid] = false;
				masinaRainbow[playerid] = false;
				return true;
			}
			ChangeVehicleColor(masinaRainbow[playerid], idd != 0 ? CarInfo[idd][cColorOne] : 1, idd != 0 ? CarInfo[idd][cColorTwo] : 1);
			PlayerRainbow[playerid] = false;
			masinaRainbow[playerid] = false;
		}
	} 
	
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) {
		foreach(new i: Player) {
			if(Spectate[i] == playerid) {
				if(IsPlayerInAnyVehicle(playerid)) {
					PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
				}
				else PlayerSpectatePlayer(i, playerid);	
			}
		}		
	 	StopAudioStreamForPlayer(playerid);
	 	for(new i = 0; i < 3; i++) PlayerTextDrawHide(playerid, SpeedometerPTD[i]);
		PlayerTextDrawHide(playerid, FareTD);
	}
	
	if(JobWorking[playerid] == 1 && gLastCar[playerid] == JobVehicle[playerid]) {
		if(PlayerInfo[playerid][pJob] == 1) {
			SCM(playerid, COLOR_GREY, "Cong viec that bai! Ban da roi khoi xe.");
			if(playerObject[playerid] != 0) DestroyPlayerObject(playerid, playerObject[playerid]), playerObject[playerid] = 0;
			if(playerObject2[playerid] != 0) DestroyObject(playerObject2[playerid]), playerObject2[playerid] = 0;
			JobWorking[playerid] = 0;
			PlayerTextDrawHide(playerid, JobTD);
			if(JobVehicle[playerid] != 0) { DestroyVehicle(JobVehicle[playerid]); JobVehicle[playerid] = 0; }
			if(Trailer[playerid] != 0) { DestroyVehicle(Trailer[playerid]); Trailer[playerid] = 0;  }
			PlayerTextDrawHide(playerid, InfosTD);
			DisablePlayerCheckpointEx(playerid);
			DisablePlayerRaceCheckpointEx(playerid);
			CP[playerid] = 0;
			JobVehicle[playerid] = 0;
			RemovePlayerAttachedObject(playerid, 2);
			RemovePlayerAttachedObject(playerid, 6);
			JobDeelay[playerid][PlayerInfo[playerid][pJob]] = 180;	
		}
		else JobLeftTime[playerid] = 120;	
	}
	if(newstate == PLAYER_STATE_PASSENGER) {
		foreach(new i: Player) {
			if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TaxiDuty[i] == 1) {
				
				if(IsInBlacklist(playerid, 11) || IsInBlacklist(playerid, 12))
					return SCM(playerid, -1, "Ban nam trong danh sach den cua to chuc nay, vi vay ban khong the su dung dich vu to chuc cung cap!"), SlapPlayer(playerid);
					
				if(PlayerMoney(playerid, Fare[i])) {
					format(string, sizeof(string), "Ban khong co so tien $%d de vao taxi nay.", Fare[i]);
			 		SCM(playerid, COLOR_GREY, string);
			 		RemovePlayerFromVehicle(playerid);
				}
				else {
					TaxiDriver[playerid] = i;
					TaxiMoney[playerid] = 0;
					SetPVarInt(playerid, "TaxiVeh", vehicleid);
					TaxiTimer[playerid] = SetTimerEx("UpdateFare", 10000, true, "i", playerid);
					UpdateTaxiTextdraw(playerid);
				}
			}
		}
		
		if(OnDuty[playerid] == 0) SetPlayerArmedWeapon(playerid,0);
		if(CarRadio[GetPlayerVehicleID(playerid)] != 0) {
			PlayRadio[playerid] = CarRadio[GetPlayerVehicleID(playerid)];
			if(CarRadio[GetPlayerVehicleID(playerid)] == sizeof(RadioLink)) YoutubeStreamForPlayer(playerid, CarLink[GetPlayerVehicleID(playerid)]);
			else PlayAudioStreamForPlayer(playerid, RadioLink[CarRadio[GetPlayerVehicleID(playerid)]]);
		}	
		
		foreach(new i: Player) {
			if(Spectate[i] == playerid) {
				TogglePlayerSpectating(i, 1);
				if(IsPlayerInAnyVehicle(playerid))
				{
					carid = GetPlayerVehicleID(playerid);
					PlayerSpectateVehicle(i, carid);
				}
				else
				{
					PlayerSpectatePlayer(i, playerid);
				}		
			}
		}	
		
		new gun,tmp;
		GetPlayerWeaponData(playerid,5,gun,tmp);
		#pragma unused tmp
		if(gun)SetPlayerArmedWeapon(playerid,gun);
		else SetPlayerArmedWeapon(playerid,0);
		gLastCar[playerid] = vehicleid;
		return true;
	}
	if(newstate == PLAYER_STATE_DRIVER) {	
		new vehicle = GetVehicleID(GetPlayerVehicleID(playerid)), result;
		if(JobWorking[playerid] == 1 && JobVehicle[playerid] == GetPlayerVehicleID(playerid)) JobLeftTime[playerid] = 0;
		
		if(OnDuty[playerid] == 0) SetPlayerArmedWeapon(playerid,0);
		if(CarRadio[GetPlayerVehicleID(playerid)] != 0) {
			PlayRadio[playerid] = CarRadio[GetPlayerVehicleID(playerid)];
			if(CarRadio[GetPlayerVehicleID(playerid)] == sizeof(RadioLink)) YoutubeStreamForPlayer(playerid, CarLink[GetPlayerVehicleID(playerid)]);
			else PlayAudioStreamForPlayer(playerid, RadioLink[CarRadio[GetPlayerVehicleID(playerid)]]);
		}	
		
		if(PlayerInfo[playerid][pHudGen] != 0) {
			Checkvehinfo(playerid);
			for(new i = 0; i < 3; i++) PlayerTextDrawShow(playerid, SpeedometerPTD[i]);
		}
		foreach(new i: Player) {
			if(Spectate[i] == playerid) {
				TogglePlayerSpectating(i, 1);
				if(IsPlayerInAnyVehicle(playerid)) PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
				else PlayerSpectatePlayer(i, playerid);
			}
		}
		carid = FindSpawnID(vehicleid);
		if(JobWorking[playerid] == 1 && PlayerInfo[playerid][pJob] == 3 && CP[playerid] == 0) {
			new x = GetPlayerSkill(playerid), newcar = GetPlayerVehicleID(playerid);
			if(x == 1 && CarInfo[carid][Spawned] == 0 && !IsAFLYCar(newcar) && !IsABOATCar(newcar)) {
				SetCheckpoint(playerid);
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Den diem checkpoint de nhan tien!");
				PlayerTextDrawShow(playerid, InfosTD);
				defer HideTextdraw(playerid);
				result = 0;
			}
			else if(x == 2 && CarInfo[carid][Spawned] != 0 && !IsAFLYCar(newcar) && !IsABOATCar(newcar)) {
				if(CarInfo[carid][Userid] == PlayerInfo[playerid][pSQLID]) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Nu iti poti fura propria masina!");
				else {
					SetCheckpoint(playerid);
					PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Den diem checkpoint de nhan tien!");
					PlayerTextDrawShow(playerid, InfosTD);
					defer HideTextdraw(playerid);
					result = 1;
					format(string, sizeof(string), "%s (%d) cuop xe cua ban.", GetName(playerid), playerid);
					SendUserMessage(COLOR_LIGHTBLUE, string, CarInfo[carid][Userid]);
				}	
			}
			else if(x == 3 && IsAGangCar(newcar)) {
				SetCheckpoint(playerid);
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Den diem checkpoint de nhan tien!");
				PlayerTextDrawShow(playerid, InfosTD);
				defer HideTextdraw(playerid);
				result = 1;
				format(string, sizeof(string), "%s (%d) cuop mot xe thuoc so huu to chuc.", GetName(playerid), playerid);
				SendFactionMessage(4, COLOR_LIGHTBLUE, string);
				SendFactionMessage(5, COLOR_LIGHTBLUE, string);
				SendFactionMessage(6, COLOR_LIGHTBLUE, string);
				SendFactionMessage(10, COLOR_LIGHTBLUE, string);				
			}
			else if(x == 4) {
				SetCheckpoint(playerid);
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Den diem checkpoint de nhan tien!");
				defer HideTextdraw(playerid);
				PlayerTextDrawShow(playerid, InfosTD);
				result = 1;
				format(string, sizeof(string), "%s (%d) cuop xe cua ban.", GetName(playerid), playerid);
				SendUserMessage(COLOR_LIGHTBLUE, string, CarInfo[carid][Userid]);				
			}
			else if(x == 5 && Copcar2(newcar)) {
				SetCheckpoint(playerid);
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Den diem checkpoint de nhan tien!");
				PlayerTextDrawShow(playerid, InfosTD);
				defer HideTextdraw(playerid);
				result = 1;
				PlayerInfo[playerid][pWantedLevel] += 3;
				SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
				SetPlayerCriminal(playerid,255, "cuop xe canh sat");
				WantedTime[playerid] = 0;
				Update(playerid,pWantedLevelx);
				ShowWanted[playerid] = 1;	

				format(string, sizeof(string), "%s (%d) cuop mot xe thuoc so huu to chuc.", GetName(playerid), playerid);
				SendFactionMessage(1, COLOR_LIGHTBLUE, string);
				SendFactionMessage(2, COLOR_LIGHTBLUE, string);
				SendFactionMessage(3, COLOR_LIGHTBLUE, string);
			}
		}
		
		if(ServerVehicles[vehicle][vID] != 0 && result == 0) {
			if(vehicle >= 130 && vehicle <= 135) {
				if(GetPVarInt(playerid, "InLesson") == -1) return SCM(playerid, COLOR_GREY, "Ban khong trong mot bai giang (lesson)!"), SlapPlayer(playerid);
			}
			else if(ServerVehicles[vehicle][vFaction] == 1 || ServerVehicles[vehicle][vFaction] == 2 || ServerVehicles[vehicle][vFaction] == 3 || ServerVehicles[vehicle][vFaction] == 14) {
				if(ServerVehicles[vehicle][vRank] > PlayerInfo[playerid][pRank]) {
					format(string, sizeof(string), "Ban can rank %d de su dung phuong tien nay.", ServerVehicles[vehicle][vRank]);
					SCM(playerid, COLOR_GREY, string);
					SlapPlayer(playerid);
				}
				else if(OnDuty[playerid] == 0 && IsACop(playerid)) {
					SCM(playerid, COLOR_LGREEN, "Ban khong the su dung xe thuoc to chuc khi ban khong lam nhiem vu (onduty)!");
					SlapPlayer(playerid);
					return true;
				}
				else if(!IsACop(playerid)) {
					format(string, sizeof(string), "Ban khong thuoc %s.", FactionName(ServerVehicles[vehicle][vFaction]));
					SCM(playerid, COLOR_GREY, string);
					SlapPlayer(playerid);				
				}
			}
			else if(ServerVehicles[vehicle][vFaction] != PlayerInfo[playerid][pMember] && ServerVehicles[vehicle][vFaction] != 0) {
				format(string, sizeof(string), "Ban khong thuoc %s.", FactionName(ServerVehicles[vehicle][vFaction]));
				SCM(playerid, COLOR_GREY, string);
				SlapPlayer(playerid);
			}
			else {
				if(OnDuty[playerid] == 0 && IsACop(playerid) && Copcar2(vehicle)) {
					SCM(playerid, COLOR_LGREEN, "Ban khong the su dung xe thuoc to chuc khi ban khong lam nhiem vu (onduty)!");
					SlapPlayer(playerid);
					return true;
				}			
				if(ServerVehicles[vehicle][vRank] > PlayerInfo[playerid][pRank]) {
					format(string, sizeof(string), "Ban can rank %d de su dung phuong tien nay.", ServerVehicles[vehicle][vRank]);
					SCM(playerid, COLOR_GREY, string);
					SlapPlayer(playerid);
				}
			}
		}
		if(GetPlayerWeapon(playerid) == 29) {
			SetPlayerArmedWeapon(playerid, 0);
		}
		new vip[30], legendar[25], str1[300], stage[50], rainbow[20], temporar[70], neon[20];
		if(CarInfo[carid][cVip] != 0) { vip = " {FFE802}[VIP PLUS]"; }
		else if(strlen(CarInfo[carid][cText]) > 3) { vip = " {E3DE31}[VIP]"; }
		if(CarInfo[carid][cLegendary] == 1) { legendar = " {F28644}[PREMIUM]"; }
		if(CarInfo[carid][cStage] > 0) format(stage, sizeof(stage), " {509AE4}[stage: %d/3]", CarInfo[carid][cStage]);
		if(CarInfo[carid][cRainBow]) { rainbow = " {791DD5}[RAINBOW]"; }
		if(CarInfo[carid][cTemporar] == 1) 
			format(temporar, sizeof(temporar), "[Xe dung ngay]: {FFFFFF}Xe het han sau: %d ngay", GetTimeEx(CarInfo[carid][cTemporarTime]));
		
		if(CarInfo[carid][cNeon] != 0) 
			format(neon, sizeof(neon), " {%s}[NEON]", NeonColor[CarInfo[carid][cNeon]-1]);

		if(CarInfo[carid][Userid] == PlayerInfo[playerid][pSQLID]) {
			if(CarInfo[carid][cStage] > 0 || CarInfo[carid][cLegendary] == 1) Iter_Add(IsSpeed, playerid);
			format(str1, sizeof(str1), "This %s (ID %d) is owned by %s | days %d | Odometer: %.0f km | Insurance: $%s (%d points) | Colors: %d, %d",aVehicleNames[CarInfo[carid][cModel]-400], CarInfo[carid][Spawned], CarInfo[carid][cOwner], CarInfo[carid][Dayss], CarInfo[carid][KM], FormatNumber(CarInfo[carid][cTax]), CarInfo[carid][cPoints], CarInfo[carid][cColorOne], CarInfo[carid][cColorTwo]);
			MesajLung(playerid, COLOR_WHITE, str1);
			if(CarInfo[carid][cStage] > 0 || CarInfo[carid][cLegendary] == 1 || strlen(CarInfo[carid][cText]) > 3 || CarInfo[carid][cRainBow]) {
				format(str1, sizeof(str1), "Other:%s%s%s%s%s", legendar, vip, stage, rainbow, neon);
				SCM(playerid, COLOR_WHITE, str1);
			}
			if(CarInfo[carid][cTemporar] == 1) SCM(playerid, COLOR_GREEN, temporar);
			if(tograinbow[playerid] > 0 && CarInfo[carid][cRainBow] && PlayerRainbow[playerid] == 0) {
				masinaRainbow[playerid] = CarInfo[carid][Spawned];
			   	PlayerRainbow[playerid] = tograinbow[playerid];
			   	Iter_Add(Rainbows[tograinbow[playerid]], playerid);
			}
			if(CarInfo[carid][cPoints] == 0) {
				SCM(playerid, COLOR_GREY, "Ban chua thanh toan tien bao hiem! De thanh toan, su dung /cars -> [Phuong tien] > Bao hiem.");
				new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	  			SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
				vehEngine[vehicleid] = 0;				
			}
		}
		else if(CarInfo[carid][cID] != 0 && carid != 0) {
			if(CarInfo[carid][cStage] > 0 || CarInfo[carid][cLegendary] == 1) Iter_Add(IsSpeed, playerid);

			format(str1, sizeof(str1), "This %s (ID %d) is owned by %s | days %d | Odometer: %.0f km | Insurance: $%s (points %d) | Colors: %d, %d",aVehicleNames[CarInfo[carid][cModel]-400], CarInfo[carid][Spawned], CarInfo[carid][cOwner], CarInfo[carid][Dayss], CarInfo[carid][KM], FormatNumber(CarInfo[carid][cTax]), CarInfo[carid][cPoints], CarInfo[carid][cColorOne], CarInfo[carid][cColorTwo]);
			MesajLung(playerid, COLOR_WHITE, str1);
		   	if(CarInfo[carid][cStage] > 0 || CarInfo[carid][cLegendary] == 1 || strlen(CarInfo[carid][cText]) > 3 || CarInfo[carid][cRainBow]) {
				format(str1, sizeof(str1), "Other:%s%s%s%s", legendar, vip, stage, rainbow, neon);
				SCM(playerid, COLOR_WHITE, str1);
			}
			if(CarInfo[carid][cTemporar] == 1) SCM(playerid, COLOR_GREEN, temporar);
			if(CarInfo[carid][cRainBow]) {
				if(PlayerRainbow[playerid] == 0) {
					masinaRainbow[playerid] = CarInfo[carid][Spawned];
				   	PlayerRainbow[playerid] = 1;
				   	Iter_Add(Rainbows[1], playerid);
				}
			}
			if(CarInfo[carid][cPoints] == 0) {
				SCM(playerid, COLOR_GREY, "Chiec xe nay chua thanh toan phi bao hiem");
				new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	  			SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);		
				vehEngine[vehicleid] = 0;
			}
		}			
		
		if(!IsABoat(vehicleid)) PlayerEnterTime[playerid] = GetTickCount();
		new engine,lights,alarm,doors,bonnet,boot,objective;
		if(vehEngine[vehicleid] == 0) {
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		}
		else if(vehEngine[vehicleid] == 1) {
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(Gas[vehicleid] == 0) {
			TogglePlayerControllable(playerid, 0);
			NoFuel[playerid] = 1;
		}
		if(IsABoat(vehicleid) && GetPVarInt(playerid, "InLesson") == -1) {
			if(PlayerInfo[playerid][pBoatLic] < 1 && InDealer[playerid] == 0 && InExamen[playerid] == 0) {
				SCM(playerid,COLOR_GREY, "Ban khong co giay phep su dung thuyen.");
				SlapPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
			}
		}
		else if(IsAPlane(vehicleid) && GetPVarInt(playerid, "InLesson") == -1) {
			if(PlayerInfo[playerid][pFlyLic] < 1 && InDealer[playerid] == 0) {
				SCM(playerid, COLOR_GREY, "Ban khong co giay phep bay.");
				SlapPlayer(playerid);
				TogglePlayerControllable(playerid, 1); 
			}
		}
		else {
			if(PlayerInfo[playerid][pCarLic] < 1 && InExamen[playerid] != 1 && !IsABike2(vehicleid) && GetVehicleModel(vehicleid) != 471) {
			  	SCMf(playerid, COLOR_GREY, "%d", InExamen[playerid]);

			 	SCM(playerid,COLOR_GREY, "Ban khong co giay phep lai xe.");
				SlapPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				SetPlayerFreeze(playerid, 1);
			}
		}
		if(IsABike2(vehicleid)) {
			TogglePlayerControllable(playerid, 1);
			vehEngine[vehicleid] = 1;
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		gLastCar[playerid] = vehicleid;
		gLastDriver[vehicleid] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED) {
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000, playerid, -1041.9,-1868.4,79.1))  SetPlayerSpawn(playerid);
		PlayerInfo[playerid][pWantedDeaths] += 1;
		if(PlayerInfo[playerid][pPremiumAccount] == 1) SetPlayerHealthEx(playerid, 99.0);
		gPlayerSpawned[playerid] = 1;
	}		
	return true;
}

task CarCheck[30000]() {
	foreach(new j: Player) {
		if(IsPlayerConnected(j)) {
			new Float:health;
			GetPlayerHealthEx(j, health);
			if(AFKSeconds[j] < 30) SetPlayerHealthEx(j, health - 1);
		}
	}
	return true;
}
public OnPlayerExitVehicle(playerid, vehicleid) {
	if(InExamen[playerid] == 1) FailExamen(playerid);
	PlayRadio[playerid] = 0;
	DisableRemoteVehicleCollisions(playerid, 0);
	LastCar[playerid] = 0;
	Speedlimit[playerid] = 0;
	if(InEvent[playerid] == 1 && LastCar[playerid] == vehicleid) SpawnPlayer(playerid);
	if(InDealer[playerid] >= 1) {
		stop CancelTestDrive(playerid);
		CancelDriveTest(playerid);
	}
	
	if(TakingLesson[playerid] == 1) {
		new engine,lights,alarm,doors,bonnet,boot,objective;	
		TakingLesson[playerid] = 0;
		DisablePlayerRaceCheckpointEx(playerid);
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		SCM(playerid, COLOR_LIGHTRED, "Test failed!");
		vehEngine[GetPlayerVehicleID(playerid)] = 0;
		GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		SetPVarInt(playerid, "Engine", 0);
	}
	return true;
}

public OnPlayerRequestSpawn(playerid) {
	return true;
}

public OnPlayerRequestClass(playerid, classid) {
	if(IsPlayerLogged[playerid] == 1) SpawnPlayer(playerid);
	return true;
}

public OnEnterExitModShop(playerid, enterexit, interiorid) {
	if(enterexit == 0) {
		if(IsPlayerInRangeOfPoint(playerid,1,617.536071, -1.990000, 1000.657775)) {
			if(!PlayerMoney(playerid, BizzInfo[29][bFee])) {
				GivePlayerCash(playerid, 0,BizzInfo[29][bFee]);
				Update(playerid, pCashx);
				BizzInfo[29][bBalance] += BizzInfo[29][bFee];
			}
		}			
	}
	return true;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ) {
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	return true;
}

function IsStageUpgrade(playerid, vehicleid) {
	new idd = GetPersonalCar(playerid, vehicleid);
	if(idd == -1)
		return true;

	IsStage[playerid] = 1;
	new x = CarInfo[idd][cStage]; gString[0] = EOS;
	format(gString, sizeof(gString), "Your vehicle is~y~ %s~n~~w~~h~Max. speed:~y~ %d km/h~n~~w~~h~Current stage:~y~ %d/3~w~~h~~n~boost: ~y~+%d km/h~w~~h~ / ~b~ %d km/h"
	,aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cMaxSpeed], x, StageSpeed[0][x], ((StageSpeed[0][x]) + (CarInfo[idd][cMaxSpeed])));
	PlayerTextDrawSetString(playerid, StagePTD, gString);
	for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, StageTD[i]);
	PlayerTextDrawShow(playerid, StagePTD);
	SelectTextDraw(playerid, 0xFFFFFFFF);
	return true;
}

function EnterFunction(playerid) {
	new i = PickupInfo[PlayerPickup[playerid]][pkID];

	switch(PickupInfo[PlayerPickup[playerid]][pkType]) {
		case 1: {
			if(!PlayerToPoint(2, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				return true;

			if(GetPlayerVirtualWorld(playerid) != 0)
				return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the vao nha, vi ban dang o mot the gioi ao khac.");

			if(HouseInfo[i][hLock] != 0) 
				return GameTextForPlayer(playerid, "~r~~h~Khoa", 1000, 1);
			
			SetPlayerFreeze(playerid, 3);
			SetPlayerPosEx(true, playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
			PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
			PlayerInfo[playerid][pLocal] = i;
			SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
			InHouse[playerid] = i;
			DeelayCommand[playerid][13] = 5;
			HouseRadio(playerid, i);
		}
		case 2: {
			if(!PlayerToPoint(2, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || BizzInfo[i][bStatic] != 0)
				return true;
			
			if(PlayerMoney(playerid, BizzInfo[i][bFee])) 
				return GameTextForPlayer(playerid, "~r~~h~Ban khong du tien", 1000, 1);
			
			if(BizzInfo[i][bLocked] == 1) 
				return GameTextForPlayer(playerid, "~r~~h~Khoa", 1000, 1);
			
			if(BizzInfo[i][bType] == 1) SCM(playerid,COLOR_WHITE,"Lenh co san: /withdraw, /transfer, /deposit");
			if(BizzInfo[i][bType] == 9) SCM(playerid,COLOR_WHITE,"Lenh co san: /dice.");
			if(BizzInfo[i][bType] == 8) {
				if(KG[playerid] != 0) {
					GiveJobSalary(playerid);
					DisablePlayerCheckpointEx(playerid);
					CP[playerid] = 0;
					GunoiKG[playerid] = 0;
					KG[playerid] = 0;
					PlayerInfo[playerid][pFarmerSkill] ++;
					Update(playerid, pFarmerSkillx);				
					for(new m; m < 2; m++) {
						if(PlayerInfo[playerid][pDailyMission][m] == 4) CheckMission(playerid, m);
					}				
					DestroyVehicle(JobVehicle[playerid]);
					JobVehicle[playerid] = 0, JobWorking[playerid] = 0;
					PlayerTextDrawHide(playerid, JobTD);
				}	
			}		   
			if(BizzInfo[i][bType] == 3) SCM(playerid,COLOR_WHITE,"Lenh co san: /drink.");
			if(BizzInfo[i][bType] == 5) SCM(playerid,COLOR_WHITE,"Lenh co san: /buydildo,");
			if(BizzInfo[i][bType] == 6 || BizzInfo[i][bType] == 20) SCM(playerid,COLOR_WHITE,"Lenh co san: /buy.");
			if(BizzInfo[i][bType] == 7) SCM(playerid,COLOR_WHITE,"Lenh co san: /clothes, /glasses, /buyhat, /accs.");
			GivePlayerCash(playerid, 0,BizzInfo[i][bFee]);
			BizzInfo[i][bBalance] += BizzInfo[i][bFee];
			BizzRadio(playerid, i);							   
			SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
			PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
			SetPlayerFreeze(playerid, 3);
			SetPlayerPosEx(true, playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
			PlayerInfo[playerid][pLocal] = i+99;
			SetPlayerVirtualWorld(playerid,BizzInfo[i][bVirtual]);
			InBussines[playerid] = i;
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[i][bBalance], BizzInfo[i][bID]);
			mysql_tquery(SQL, gQuery, "", "");
		}
		case 3: {
			if(!PlayerToPoint(2, playerid, DynamicFactions[i][extX], DynamicFactions[i][extY], DynamicFactions[i][extZ]))
				return true;

			if(PlayerInfo[playerid][pMember] == i || i < 3 || DynamicFactions[i][fLock] == 1 || OnDuty[playerid] == 1) {
				SetPlayerPosEx(true, playerid, DynamicFactions[i][fcX], DynamicFactions[i][fcY], DynamicFactions[i][fcZ]);
				SetPlayerFreeze(playerid, 3);
				SetPlayerInterior(playerid, DynamicFactions[i][fInterior]);
				SetPlayerVirtualWorld(playerid, DynamicFactions[i][fID]);
				InHQ[playerid] = i;
			}
		}
		case 4: {
			if(!PlayerToPoint(2, playerid, ClanHQInfo[i][cPosX], ClanHQInfo[i][cPosY], ClanHQInfo[i][cPosZ])) 
				return true;

			if(GetPlayerVirtualWorld(playerid) != 0)
				return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the vao nha, vi ban dang o mot the gioi ao khac.");

			if(ClanHQInfo[i][cClan] != PlayerInfo[playerid][pClan] && ClanHQInfo[i][cClan] != 0) return SCMf(playerid, COLOR_GREY, "Nu esti in clan-ul cu id %d.", ClanHQInfo[i][cClan]);
			else if(ClanHQInfo[i][cClan] == 0) return 1;
			
			SetPlayerInterior(playerid, 1);
			InClanHQ[playerid] = i;
			SetPlayerFreeze(playerid, 3);
			SetPlayerPosEx(false, playerid, ClanHQInfo[i][cEnterX], ClanHQInfo[i][cEnterY], ClanHQInfo[i][cEnterZ]);
			SetPlayerVirtualWorld(playerid, ClanHQInfo[i][cVirtualWorld]);
			SCM(playerid, COLOR_WHITE, "Welcome to clan HQ.");	
		}
	}		   
	return true;
}

function ExitFunction(playerid) {
	new i;
	if(InHouse[playerid] != -1) {
		i = InHouse[playerid];
		if(PlayerInfo[playerid][pSleeping] == 1) 
			return true;	
		
		if(!PlayerToPoint(2, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
			return true;

		SetPlayerPosEx(false, playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
		SetPlayerFreeze(playerid, 3);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);
		PlayRadio[playerid] = 0;
		StopAudioStreamForPlayer(playerid);
		return true;
	}
	if(InBussines[playerid] != -1) {
		i = InBussines[playerid];
		if(!PlayerToPoint(2, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
			return true;

		SetPlayerInterior(playerid, 0);
		SetPlayerPosEx(false, playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
		SetPlayerFreeze(playerid, 3);
		PlayerInfo[playerid][pLocal] = 255;
		PlayRadio[playerid] = 0;
		StopAudioStreamForPlayer(playerid);
		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pTutorial] < 10 ? playerid + 10 : 0);
		return true;
	}
	if(InHQ[playerid] != -1) {
		i = InHQ[playerid];
		if(!PlayerToPoint(2, playerid, DynamicFactions[i][fcX], DynamicFactions[i][fcY], DynamicFactions[i][fcZ]))
			return true;

		SetPlayerPosEx(false, playerid, DynamicFactions[i][extX], DynamicFactions[i][extY], DynamicFactions[i][extZ]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		return true;
	}
	if(InClanHQ[playerid] != -1) {
		if(!PlayerToPoint(2, playerid, ClanHQInfo[i][cEnterX], ClanHQInfo[i][cEnterY], ClanHQInfo[i][cEnterZ])) 
			return true;

		SetPlayerInterior(playerid, 0);
		SetPlayerFreeze(playerid, 3);
		SetPlayerPosEx(false, playerid, ClanHQInfo[i][cPosX], ClanHQInfo[i][cPosY], ClanHQInfo[i][cPosZ]);
		SetPlayerVirtualWorld(playerid, 0);
	}
	return true;
}

function PutVehicleInPNS(playerid, idd) {
	LastPns[playerid] = idd;
	SetVehiclePos(GetPlayerVehicleID(playerid), PutVehiclePNS[idd][0], PutVehiclePNS[idd][1], PutVehiclePNS[idd][2]);
	SetVehicleZAngle(GetPlayerVehicleID(playerid), PutVehiclePNS[idd][3]);
	GetVehicleHealth(GetPlayerVehicleID(playerid), VehicleHealth[playerid]);
	TogglePlayerControllable(playerid, false);
	PnsTimer[playerid] = gettime()+5;
	return true;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
	new string[180];
	new engine,lights,alarm,doors,bonnet,boot,objective;
	if(newkeys & KEY_SECONDARY_ATTACK) {
	   if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	   	   new car = GetClosestVehicle(playerid);
		   if(car != INVALID_VEHICLE_ID && IsPlayerNearVehicle(playerid,car,5)) {
		   	   if(Iter_Count(MyVehicle[playerid]) != 0) {
				   foreach(new idd: MyVehicle[playerid]) {
						if(CarInfo[idd][Spawned] == car) SetVehicleParamsForPlayer(car, playerid, 0, 0);	
				   }
			   }
			   if(car == VehicleRent[playerid]) SetVehicleParamsForPlayer(car, playerid, 0, 0);
		   }
		   if(IsPacanele[playerid] == 0) {
		   	 	if(PlayerToPoint(2, playerid, 2000.1082,1004.1124,994.4688) || PlayerToPoint(2, playerid, 1997.1176,1004.0360,994.4688) || PlayerToPoint(2, playerid, 1993.9604,1003.7517,994.4688)
		   	 	|| PlayerToPoint(2, playerid, 1990.5704,1003.8429,994.4688) || PlayerToPoint(2, playerid, 1990.4048,1031.7026,994.4688) || PlayerToPoint(2, playerid, 1993.9966,1031.7703,994.4688)
		   	 	|| PlayerToPoint(2, playerid, 1997.0112,1031.7742,994.4688) || PlayerToPoint(2, playerid, 1999.6885,1031.8649,994.4688)) {
					if(IsPacanele[playerid] == 1) return true;
					IsPacanele[playerid] = 1;
					for(new i = 0; i < 11; i++) PlayerTextDrawShow(playerid, PacaneleTD[i]);
					for(new i = 0; i < 9; i++) PlayerTextDrawShow(playerid, SlotTD[i]), PlayerTextDrawSetString(playerid, SlotTD[i], "LD_SLOT:r_69");
				 	SelectTextDraw(playerid, 0xF4E318FF);
				 	format(string, sizeof(string), "~g~$%s", GetCashStr(playerid));
				 	PlayerTextDrawSetString(playerid, PacaneleTD[9], string);
				 	SetPlayerCameraPos(playerid, 1977.502563, 1017.839538, 1003.468811);
				 	SetPlayerCameraLookAt(playerid, 1982.321289, 1017.836791, 1002.134826);
		   	 	}
		   }
		   if(PlayerToPoint(10, playerid, 1961.2900,1017.7888,993.4105)) {
				for(new i = 0; i < 19; i++) TextDrawShowForPlayer(playerid, RoulettaTD[i]);
				SelectTextDraw(playerid, 0xFFFFFFFF);
				Iter_Add(IsRuletta, playerid);
		   }
		   if(UsedFly[playerid] == 1) {
				StopFly(playerid);
				UsedFly[playerid] = 0;
				SetPlayerHealthEx(playerid, 99);
				ClearAnimations(playerid);
				SCM(playerid, 0xFFADADFF, "Fly mode off.");
		   }	 
		   EnterFunction(playerid);
		   ExitFunction(playerid);
		   if(IsGunShop[playerid] == 0) {	
			   if(PlayerToPoint(2, playerid, 295.3407,-80.4899,1001.5156)) {
			   		if(PlayerInfo[playerid][pGunLic] == 0) return SCM(playerid, COLOR_LGREEN, "Ban khong co giay phep su dung sung.");
			   		if(GetPlayerWantedLevel(playerid) > 1) return SCM(playerid, COLOR_GREY, "Ban khong the mua vu khi' khi bi truy na.");
			   		for(new i = 0; i < 8; i++) PlayerTextDrawShow(playerid, GunTD[i]);
			   	 	SelectTextDraw(playerid, 0xFFFFFFFF);
			   		IsGunShop[playerid] ++;
			   		GunObject[playerid] = CreatePlayerObject(playerid, 348, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
					PlayerTextDrawSetPreviewModel(playerid, GunTD[7], 348);
					PlayerTextDrawSetString(playerid, GunTD[3], "Deagle - ~g~$5.000");
					PlayerTextDrawShow(playerid, GunTD[7]);
					SetPlayerCameraPos(playerid, 295.541564, -79.985206, 1002.954528);
					SetPlayerCameraLookAt(playerid, 295.551116, -83.520729, 999.419006);
					SetPlayerPosEx(false, playerid, 307.9167,-67.3289,1004.6016);
			   }
		   }
		   if(PlayerToPoint(3, playerid, 2337.1826, 2458.7441, 14.9921) && GetPlayerVirtualWorld(playerid) == 0) {
				if(IsACop(playerid)) SetPlayerPosEx(false, playerid, 2280.0898, 2458.7939, 38.6871), SetPlayerInterior(playerid, 0);
		   }
		   else if(PlayerToPoint(3, playerid, 2280.0898, 2458.7939, 38.6871) && GetPlayerVirtualWorld(playerid) == 0) {
				if(IsACop(playerid)) SetPlayerPosEx(false, playerid, 2337.1826, 2458.7441, 14.9921), SetPlayerInterior(playerid, 0);
		   }
		   else if(PlayerToPoint(3, playerid, 1630.2462, 1793.0410, 10.8156) && GetPlayerVirtualWorld(playerid) == 0) {
				if(PlayerInfo[playerid][pMember] == 13) SetPlayerPosEx(false, playerid, 1606.6693, 1786.6062, 30.4599), SetPlayerInterior(playerid, 0);
		   }
		   else if(PlayerToPoint(3, playerid, 1606.6693, 1786.6062, 30.4599) && GetPlayerVirtualWorld(playerid) == 0) {
				if(PlayerInfo[playerid][pMember] == 13) SetPlayerPosEx(false, playerid, 1630.2462, 1793.0410, 10.8156), SetPlayerInterior(playerid, 0);
		   }
		   else if(PlayerToPoint(2, playerid, -1482.8976,289.4904,57.5473)) {
		   		new house = PlayerInfo[playerid][pHouse];
		   		GameTextForPlayer(playerid, "welcome home", 400, 1);
		   		TogglePlayerControllable(playerid, false);
		   		ClearAnimations(playerid);
		   		SetPlayerFreeze(playerid, 2);
		   		SetPlayerPosEx(false, playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity], HouseInfo[house][hExitz]);
				SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInterior];
				PlayerInfo[playerid][pLocal] = house;
				SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
				InHouse[playerid] = house;
				HouseRadio(playerid, house);
		   }
		   else if(PlayerToPoint(2, playerid, 2333.3345,-17.7633,26.4844)) {
		   		if(PlayerInfo[playerid][pTutorial] < 10) SetPlayerVirtualWorld(playerid, playerid + 10);
		   		else SetPlayerVirtualWorld(playerid, 0);
		   		SetPlayerInterior(playerid, 5);
		   		SCM(playerid, -1, "Wellcome to Shop Licenses");
		   		TogglePlayerControllable(playerid, false);
		   		ClearAnimations(playerid);
		   		SetPlayerFreeze(playerid, 2);
		   		SetPlayerPosEx(false, playerid, 2631.5857,-969.9482,39.8281);
		   }
		   else if(PlayerToPoint(2, playerid, 2631.5857,-969.9482,39.8281) || PlayerToPoint(2.0, playerid, 2639.4746,-969.6747,39.8281)) {
		   		SetPlayerPosEx(false, playerid, 2333.3345,-17.7633,26.4844);
		   		if(PlayerInfo[playerid][pTutorial] < 10) SetPlayerVirtualWorld(playerid, playerid + 10);
		   		else SetPlayerVirtualWorld(playerid, 0);
		   		SetPlayerInterior(playerid, 0);
		   }
		   else if(PlayerToPoint(2, playerid, -649.0270,759.7439,1417.8715)) {
		   		if(HaveFish[0][playerid] != 0) {
					new fishing;
					if(HaveFish[0][playerid] != 0 && HaveFish[1][playerid] != 0) fishing = HaveFish[0][playerid] + HaveFish[1][playerid];
					else fishing = HaveFish[0][playerid];
					new skin = GetPlayerSkin(playerid), totalmony;
					if(PlayerInfo[playerid][pPremiumAccount] != 0) {
						format(string, sizeof(string), "Tai khoan Premium: +$%s [25%s].", FormatNumber(fishing/3), "%%");
						SendClientMessage(playerid, COLOR_YELLOW, string);
						totalmony += fishing/3;
					}
					if(skin == 170 || skin == 188 || skin == 249 || skin == 159 || skin == 260) {
						format(string, sizeof(string), "Skin Hiem: +$%s [10%s].", FormatNumber(fishing/4), "%%");
						SendClientMessage(playerid, COLOR_YELLOW, string);
						totalmony += fishing/4;
					}
					else if(skin == 228 || skin == 248 || skin == 264 || skin == 189 || skin == 185 || skin == 146) {
						format(string, sizeof(string), "Skin Su thi: +$%s [25%s].", FormatNumber(fishing/3), "%%");
						SendClientMessage(playerid, COLOR_YELLOW, string);
						totalmony += fishing/3;
					}
					else if(skin == 0 || skin == 104 || skin == 116 || skin == 149 || skin == 164 || skin == 285 || skin == 289 || skin == 294 || skin == 293 || skin == 306) {
						format(string, sizeof(string), "Skin Huyen thoai: +$%s [50%s].", FormatNumber(fishing/2), "%%");
						SendClientMessage(playerid, COLOR_YELLOW, string);
						totalmony += fishing/2;
					}
					else if(skin == 124 || skin == 181 || skin == 187 || skin == 241 || skin == 242 || skin == 292 || skin == 309) {
						format(string, sizeof(string), "Skin Magic: +$%s [75%s].", FormatNumber(fishing - 10000), "%%");
						SendClientMessage(playerid, COLOR_YELLOW, string);
						totalmony += fishing - 10000;
					}
					if(PlayerInfo[playerid][pClan] != 0) {
						format(string, sizeof(string), "Clan money: +$%s [10%s].", FormatNumber(fishing/4), "%%");
						ClanInfo[PlayerInfo[playerid][pClan]][ClanBank] += fishing/4;
					}
					format(string, sizeof(string), "Ban nhan duoc $%s!", FormatNumber(fishing + totalmony));
					SendClientMessage(playerid, COLOR_MONEY, string);
					UpdateJobGoal(totalmony + fishing);
					GivePlayerCash(playerid, 1, fishing + totalmony);
					format(string, sizeof(string), "%s da nhan duoc $%s cho cong suc da bo ra cho cong viec %s.", GetName(playerid), FormatNumber(fishing + totalmony), JobInfo[PlayerInfo[playerid][pJob]][jName]);
					InsertLog(playerid, string, LOG_MONEY);
					if(HaveFish[0][playerid] != 0 && HaveFish[1][playerid] != 0) PlayerInfo[playerid][pFishSkill] += 2;
					else PlayerInfo[playerid][pFishSkill] ++;
					Update(playerid, pFishSkillx);
					HaveFish[0][playerid] = 0;
					HaveFish[1][playerid] = 0;
					if(PlayerInfo[playerid][pFishSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Skill Fisherman cua ban da dat Level 2, ban se nhan duoc nhieu tien hon."); }
					else if(PlayerInfo[playerid][pFishSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Skill Fisherman cua ban da dat Level 3, ban se nhan duoc nhieu tien hon."); }
					else if(PlayerInfo[playerid][pFishSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Skill Fisherman cua ban da dat Level 4, ban se nhan duoc nhieu tien hon."); }
					else if(PlayerInfo[playerid][pFishSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Skill Fisherman cua ban da dat Level 5, ban se nhan duoc nhieu tien hon."); }
					if(togjob[playerid] == 0) JobProgress(playerid);
					if(GetPlayerSkill(playerid) == 6) finishAchievement(playerid, 0);
					if(PlayerInfo[playerid][pMember] == 0) {
						for(new m; m < 2; m++) {
							if(PlayerInfo[playerid][pDailyMission][m] == 15 || PlayerInfo[playerid][pDailyMission][m] == 16) CheckMission(playerid, m);
						}
					}
					for(new m; m < 2; m++) {
						if(PlayerInfo[playerid][pDailyMission][m] == 2) CheckMission(playerid, m);
					}
				}
		   }
		   if(PlayerToPoint(2, playerid,1062.1185, 2077.5059, 10.8352)) {
				InTraining[playerid] = 0;
				FactionsSpawns(playerid);
				new i = GetPVarInt(playerid, "Training");
				SetPlayerPosEx(false, playerid, Training[i][0], Training[i][1], Training[i][2]);
				DeletePVar(playerid, "Training");
				ResetPlayerWeapons(playerid);
				SCM(playerid, COLOR_YELLOW, "Ban roi khoi Training Room.");
		   }
		   if(PlayerToPoint(2, playerid,1918.2250,-1619.8477,1770.7469)) {
				if(IsACop(playerid)) Dialog_Show(playerid, DIALOG_TELEPORT, DIALOG_STYLE_LIST, "Teleport", "Enter Yard\nExit jail", "Select", "Cancel");
				else {
					SetPlayerVirtualWorld(playerid, 1339);
					SetPlayerPosEx(false, playerid, 1772.0298,-1548.0693,9.9068);
					SetPlayerInterior(playerid, 0);
				}	
		   }			   
		   if(IsPlayerInRangeOfPoint(playerid,2,1798.5109,-1578.3337,14.0848) || IsPlayerInRangeOfPoint(playerid,2,1771.7123,-1547.5963,9.9116)) {
				if(PlayerInfo[playerid][pJailTime] >= 1 || IsACop(playerid)) {
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPosEx(false, playerid, 1918.2250,-1619.8477,1770.7469);
					SetPlayerInterior(playerid, 0);
					TogglePlayerControllable(playerid, 0);
					ClearAnimations(playerid);
					SetPlayerFreeze(playerid, 2);					
				}	
		   }		
		   if(IsPlayerInRangeOfPoint(playerid,2,2050.3245,1218.4463,547.9710) && IsACop(playerid)) {
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPosEx(false, playerid, 1798.5109,-1578.3337,14.0848);
				SetPlayerInterior(playerid, 0);
		   }					   
		   else if(PlayerToPoint(2, playerid, 2166.4771,-1671.7883,15.0743)) {
			   SetPlayerInterior(playerid,5);
			   SetPlayerPosEx(false, playerid,318.5867,1115.4735,1083.8828);
		   }
		   else if(PlayerToPoint(2, playerid, 318.5867,1115.4735,1083.8828)) {
			   SetPlayerInterior(playerid, 0);
			   SetPlayerPosEx(false, playerid, 2166.4771,-1671.7883,15.0743);			   	
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,1095.3142,-1451.3650,22.7504)) {
			   SetPlayerInterior(playerid,14);
			   SetPlayerPosEx(false, playerid,204.2205,-168.3091,1000.5234);
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,2229.3289,-1722.0793,13.5625)) {
			   SetPlayerInterior(playerid,5);
			   SetPlayerPosEx(false, playerid,772.111999,-3.898649,1000.728820);
		   }		   
		   else if(PlayerToPoint(2,playerid,-2455.4001,504.1149,30.0781)) {
			   SetPlayerPosEx(false, playerid,238.5496,139.3451,1003.0234);
			   SetPlayerInterior(playerid,3);
			   SetPlayerVirtualWorld(playerid, 0);
			   return true;
		   }
		   else if(PlayerToPoint(2,playerid,201.5580,1869.3890,13.1406) && IsACop(playerid)) {
			   SetPlayerPosEx(false, playerid,288.7645,167.7334,1007.1719);
			   SetPlayerInterior(playerid,3);
			   SetPlayerVirtualWorld(playerid, 1);
			   return true;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,1671.9180,-1328.6810,17.4482))  {
			   if(areape == 1) {
				   SetPlayerInterior(playerid,15);
				   SetPlayerPosEx(false, playerid,-1423.5153,935.8321,1036.4756);
			   }
			   else return SCM(playerid,COLOR_WHITE,"Event Arena da dong.");
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,204.2205,-168.3091,1000.5234)) {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(false, playerid,1095.3142,-1451.3650,22.7504);
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,-204.439987,-26.453998,1002.273437)) {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(false, playerid,1090.7542,-1476.3380,22.7465);
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,1,304.5868,-141.9874,1004.0625)) SetPlayerPosEx(false, playerid,305.7950,-141.8203,1004.0547);
		   else if(IsPlayerInRangeOfPoint(playerid,1,298.8386,-141.9191,1004.0547)) SetPlayerPosEx(false, playerid,300.1631,-141.8074,1004.0625);
		   else if(IsPlayerInRangeOfPoint(playerid,2,772.111999,-3.898649,1000.728820)) {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(false, playerid,2229.3289,-1722.0793,13.5625);
			   PlayerInfo[playerid][pLocal] = 255;
		   }   
		   else if(PlayerToPoint(5,playerid,387.7978,173.8582,1008.3828)) {
			   SetPlayerPosEx(false, playerid,1481.1063,-1771.2532,18.7958);
			   SetPlayerInterior(playerid,0);
			   GameTextForPlayer(playerid, string, 1000, 1);
		   }		   
		   else if(IsPlayerInRangeOfPoint(playerid,2,761.412963,1440.191650,1102.703125)) {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(false, playerid,387.7978,173.8582,1008.3828);
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,-1423.5153,935.8321,1036.4756)) {
			   if(areape == 1) {
				   SetPlayerInterior(playerid,0);
				   SetPlayerPosEx(false, playerid,1671.9180,-1328.6810,17.4482);
			   }
		   }
		   if(NoFuel[playerid] == 1) {
			   TogglePlayerControllable(playerid, 1);
			   NoFuel[playerid] = 0;
		   }
	   }
	}
	if(newkeys == KEY_SPRINT) {
		if(StartFish[playerid] != 0) {
			if(HavePestele[playerid] > 0) {
				Fish(playerid);
				HavePestele[playerid] = 0;
				DestroyDynamicPickup(PickUpFish[playerid]);
			}
		}
		if(Spectate[playerid] != 255) {
			new players[200], totalplayers, giveplayer[MAX_PLAYER_NAME];
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] == 0 && i != Spectate[playerid] && IsPlayerLogged[i] == 1) {
					players[totalplayers] = i;
					totalplayers++;
				}
			}
			if(totalplayers == 0) return SCM(playerid, COLOR_GREY, "Khong co du nguoi choi!");	
			new rand = random(totalplayers);
			new id = players[rand];
			if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
			if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len nguoi choi do.");
			Iter_Remove(MySpec[Spectate[playerid]], playerid);
			Iter_Add(MySpec[id], playerid);
			Spectate[playerid] = id;
			SpecPlayers[playerid] ++;
			if(SpecPlayers[playerid] == 1) {
				GetPlayerPos(playerid, SpecPos[playerid][0], SpecPos[playerid][1], SpecPos[playerid][2]);
				IsPlayerSpec[playerid] = 1;
				pInteriorID[playerid] = GetPlayerInterior(playerid);
				pVirtual[playerid] = GetPlayerVirtualWorld(playerid);
			}
			new Float:health;
			GetPlayerHealthEx(Spectate[playerid], health);
			GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
			new rank[50];
			if(PlayerInfo[playerid][pAdmin] != 0) rank = "Admin";
			else rank = "Helper";

			format(string, sizeof(string), "[SPEC] (%d) %s | Level: %d | Health: %.2f | AFK Time: %d | Seconds: %.0f | Duty: %d | Ping: %d",id,GetName(id),PlayerInfo[id][pLevel], health, AFKSeconds[id], PlayerInfo[id][pSeconds], OnDuty[id], GetPlayerPing(id));
			SCM(playerid, 0xFFADADFF, string);
			
			new Player_Weapons[13], Player_Ammos[13], i, guns;
			string = "Weapons:";	
			for(i = 1;i <= 12;i++)
			{
				GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
				if(Player_Weapons[i] != 0)
				{
					new weaponName[180];
					GetWeaponName(Player_Weapons[i],weaponName,255);
					format(string,255,"%s %s(%d)", string, weaponName,Player_Ammos[i]);
					guns ++;
				}
			}
			if(guns > 0) SCM(playerid, -1, string);


			TogglePlayerSpectating(playerid, 1);
			SetPlayerInterior(playerid, GetPlayerInterior(id));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
			
			if(IsPlayerInAnyVehicle(Spectate[playerid])) {
				new carid = GetPlayerVehicleID(Spectate[playerid]);
				PlayerSpectateVehicle(playerid, carid);
			}
			else PlayerSpectatePlayer(playerid, Spectate[playerid]);

			PlayerTextDrawSetString(playerid, SpectatorTD, "Loading...");
			PlayerTextDrawShow(playerid, SpectatorTD);					
		}
	}
	if(newkeys & KEY_FIRE) {
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) TTCFunction(playerid); 
		if(EnableBoast[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			new Float:vx,Float:vy,Float:vz;
			GetVehicleVelocity(GetPlayerVehicleID(playerid),vx,vy,vz);
			SetVehicleVelocity(GetPlayerVehicleID(playerid), vx * 1.8, vy *1.8, vz * 1.8);
		}		
	}
	if(newkeys == KEY_YES) {
		new bool: x = false;
		if(StartQuest[playerid] != 0) {
			new i = playerid;
			for(new q = 0; q < sizeof(QuestPos); q++) {
				if(!PlayerToPoint(2, i, QuestPos[q][0], QuestPos[q][1], QuestPos[q][2]))
					continue;

				if(PlayerInfo[i][pSpecialQuest][q] != 0)
					continue;

				if(DeelayCommand[i][9] != 0 || HaveGift[playerid] != -1) break;
				DeelayCommand[i][9] = 10;
				HaveGift[i] = q;
				DestroyPlayerObject(i, PlayerInfo[i][pObjectQuest][q]);
				RemovePlayerMapIcon(i, 70+q);
				SetPlayerAttachedObject(playerid, 0, 19057, 3, 0.19, -0.26, -0.11, 57.60, -84.60, -18.19, 0.30, 0.34, 0.26);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SCM(playerid, -1, "{31d6e4}(Winter Quest): {FFFFFF}Bay gio hay den phia truoc xe va nhan 'Y'.");
				x = true;
				break;
			}
			if(HaveGift[playerid] != -1) {
				new Float: Pos[3];
				GetVehiclePos(QuestVehicle[playerid], Pos[0], Pos[1], Pos[2]);
				if(!PlayerToPoint(5, playerid, Pos[0], Pos[1], Pos[2]))
					return SCM(playerid, COLOR_LGREEN, "Error: Ban khong o gan xe.");

				RemovePlayerAttachedObject(playerid, 0);
				SetPlayerSpecialAction(playerid, 0);
				PlayerInfo[playerid][pSpecialQuest][HaveGift[playerid]] = 1;
				SaveQuest(i);
				HaveGift[playerid] = -1;
				SCMEx(i, -1, "{31d6e4}(Winter Quest): {FFFFFF}progress %d/25.", CheckObjects(i));

				if(CheckObjects(i) == 25) {
					SetPlayerRaceCheckpoint(playerid, 1, 2257.2080,-1340.5638,23.9833, 0.0, 0.0, 0.0, 5.0);
					CP[playerid] = 669;
					SCM(playerid, COLOR_WHITE, "{31d6e4}(Winter Quest): {FFFFFF}Hay giao phan qua tai cac checkpoint tren ban do.");
				}
			}
		}

		if(x) 
			return true;

		gString[0] = EOS;
		for(new i = 1; i <= garage; i++) {
   	   		if(PlayerToPoint(2, playerid, GarageInfo[i][gEnterX], GarageInfo[i][gEnterY], GarageInfo[i][gEnterZ])) {
   	   			if(GetPlayerVirtualWorld(playerid) != 0) return true;
   	   			if(PlayerInfo[playerid][pHouse] != GarageInfo[i][gHouses]) return SCMEx(playerid, COLOR_GREY, "Chi nhung nguoi choi thue house id %d moi co the vao garage.", GarageInfo[i][gHouses]);
   	   			if(IsPlayerInAnyVehicle(playerid)) {
   	   				new idd = PersonalCar(playerid), car = GetPlayerVehicleID(playerid);
	   	   			if(CarInfo[idd][Spawned] != car) return SCM(playerid, COLOR_GREY, "Ban chi co the gui vao garage xe thuoc so huu ca nhan ban.");
	   	   			SetVehiclePos(car, GarageInfo[i][gExitX], GarageInfo[i][gExitY], GarageInfo[i][gExitZ]);
	   	   			SetVehicleZAngle(car, GarageInfo[i][gExitR]);
	   	   			SetPlayerVirtualWorld(playerid, GarageInfo[i][gVirtualWorld]);
	   	   			SetVehicleVirtualWorld(car, GarageInfo[i][gVirtualWorld]);
		   	   	} else {
			   		SetPlayerPosEx(false, playerid, GarageInfo[i][gExitX], GarageInfo[i][gExitY], GarageInfo[i][gExitZ]);
			   		SetPlayerFacingAngle(playerid, GarageInfo[i][gExitR]);
			   		SetPlayerVirtualWorld(playerid, GarageInfo[i][gVirtualWorld]);
	   	   		}
	   	   		GameTextForPlayer(playerid, "welcome to garage", 1000, 1);
   	   			break;
   	   		}
   		}
   		for(new i = 1; i <= garage; i++) {
   			if(PlayerToPoint(5, playerid, GarageInfo[i][gExitX], GarageInfo[i][gExitY], GarageInfo[i][gExitZ]) && GarageInfo[i][gVirtualWorld] == GetPlayerVirtualWorld(playerid)) {
				if(DeelayCommand[playerid][10] != 0) return DeelayTime(playerid, 10);
				DeelayCommand[playerid][10] = 5;
				if(IsPlayerInAnyVehicle(playerid)) {
					new idd = PersonalCar(playerid), car = GetPlayerVehicleID(playerid);
					if(CarInfo[idd][Spawned] != car) return true;
	   	   			SetVehiclePos(car, GarageInfo[i][gEnterX], GarageInfo[i][gEnterY], GarageInfo[i][gEnterZ]); 
	   	   			SetVehicleZAngle(car, GarageInfo[i][gEnterR]);
	   	   			SetPlayerVirtualWorld(playerid, 0);
	   	   			SetVehicleVirtualWorld(car, 0);	 
	   	   		} else {
			   		SetPlayerPosEx(false, playerid, GarageInfo[i][gEnterX], GarageInfo[i][gEnterY], GarageInfo[i][gEnterZ]);
			   		SetPlayerFacingAngle(playerid, GarageInfo[i][gEnterR]);
			   		SetPlayerVirtualWorld(playerid, 0);   	   			
	   	   		}
   	   			break;  			
   	   		}
   		}
		if(PlayerInfo[playerid][pJob] == 0) {
			for(new j = 1; j < MAX_JOBS; j++) {
				if(IsPlayerInAnyVehicle(playerid)) 
					return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the thuc hien hanh dong nay khi dang o trong mot phuong tien!");
				
				if(PlayerToPoint(3, playerid, JobInfo[j][jPosX], JobInfo[j][jPosY], JobInfo[j][jPosZ])) {
				   if(PlayerInfo[playerid][pLevel] < JobInfo[j][jLevel]) {
					   format(gString, sizeof(gString), "Ban can level %d de nhan cong viec %s.",  JobInfo[j][jLevel], JobInfo[j][jName]);
					   SCM(playerid, COLOR_WHITE, gString);
					   return true;
   				   }

				   format(gString, sizeof(gString), "*Chuc mung! Cong viec moi cua ban la %s.", JobInfo[j][jName]);
				   SCM(playerid, COLOR_LIGHTBLUE, gString);
				   switch(j) {
				   	  	case 6: SCM(playerid, COLOR_LIGHTBLUE, "De truy tim mot nguoi choi, su dung lenh /find.");	
				   	   	case 9: SCM(playerid, COLOR_LIGHTBLUE, "De cau ca, den dia diem cau ca va su dung /fish.");
			   	   		default: SCM(playerid, COLOR_LIGHTBLUE, "De bat dau lam viec, su dung lenh /work.");
			   	   }
				   PlayerInfo[playerid][pJob] = j;
				   gQuery[0] = EOS;
				   mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Job`='%d' WHERE `ID`='%d' LIMIT 1",PlayerInfo[playerid][pJob],PlayerInfo[playerid][pSQLID]);
				   mysql_tquery(SQL, gQuery, "", "");
				   break;
			  	}
			}
		} 
		//-----------rob-------
		if(InRob[playerid] == 1 && HaveBag[playerid] == 1) { 
			new car = GetClosestVehicle(playerid);
			if(!IsPlayerNearVehicle(playerid, car, 5) && !IsABoat(car)) return true;
			else if(!IsPlayerNearVehicle(playerid, car, 10) && IsABoat(car)) return true;				
			if(LastRVehicle[playerid] != car && LastRVehicle[playerid] != 0) return SCM(playerid, -1, "Xe khong co tui tien da cuop.");
			if(IsABike2(car)) return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the de bao tien len tren mot xe dap/motor!");
			LastRVehicle[playerid] = car;
			HaveBag[playerid] = 0;
			RemovePlayerAttachedObject(playerid,0);
			RemovePlayerAttachedObject(playerid,1);	
			BagTime[playerid] = 0;
			Bags[playerid] ++;
			if(Bags[playerid] >= GetBags(BizRobbed[playerid])) {
				new rand = random( sizeof(RobPos) );
				SetPlayerCheckpointEx(playerid, RobPos[rand][0], RobPos[rand][1], RobPos[rand][2], 8.0);
				format(string, sizeof(string), "* Den checkpoint tren ban do de rua tien. khoang cach: %0.1fm", GetPlayerDistanceFromPoint(playerid, RobPos[rand][0], RobPos[rand][1], RobPos[rand][2]));
				SCM(playerid, COLOR_YELLOW, string);
				SCM(playerid, COLOR_YELLOW, "Neu ban khong o tren xe / khong o tren chiec xe ma ban da bo tui tien thi rob fail.");
				CP[playerid] = 169;
			}
			else {
				format(string, sizeof(string), "* Ban van phai co the lay them %d tui, quay lai bizz %d %d.", GetBags(BizRobbed[playerid])-Bags[playerid], BizRobbed[playerid]);
				SCM(playerid, COLOR_YELLOW, string);
			}
			BagTime[playerid] = 0;	
		}	
		//---curier----
		if(JobWorking[playerid] == 1 && PlayerInfo[playerid][pJob] == 8) {
			new car = GetClosestVehicle(playerid);
			if(!IsPlayerNearVehicle(playerid, car, 5) && !IsABoat(car)) return true;
			else if(!IsPlayerNearVehicle(playerid, car, 10) && IsABoat(car)) return true;							
			if(GetPVarInt(playerid, "InHand") == 1) return true;
			if(JobVehicle[playerid] != car) return SCM(playerid, COLOR_LGREEN, "Error: Ban khong o gan phuong tien lam viec cua ban!");
			if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the lay goi hang khi dang o tren xe!");
			if(!PlayerToPoint(15, playerid, CheckpointPos[playerid][0], CheckpointPos[playerid][1], CheckpointPos[playerid][2])) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti ridica coletul deoarece nu esti aproape de destinatie!");
			SetPVarInt(playerid, "InHand", 1);
			SCM(playerid, COLOR_LGREEN, "Da lay buu kien!");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject( playerid, 6, 1220, 1, 0.299822, 0.663485, -0.036337, 184.311355, 90.004089, 0.000000, 1.000000, 1.000000, 1.000000 );
		}
	} 
	if(newkeys == KEY_CTRL_BACK && GetPlayerState(playerid)==PLAYER_STATE_DRIVER) {
		if(!IsPlayerInAnyVehicle(playerid)) return true;
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
		new szDialog[1024], szDialog2[1024];
		strcat(szDialog2, "Nume\tNguoi nghe\n");
		for(new i = 0; i < sizeof(RadioNames); i++) {
			if(i == 0) format(szDialog, sizeof(szDialog), "%s\n", RadioNames[i]);
			else format(szDialog, sizeof(szDialog), "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
			strcat(szDialog2, szDialog);
		}
		strcat(szDialog2, "Youtube custom URL");
		Dialog_Show(playerid, DIALOG_CARRADIO, DIALOG_STYLE_TABLIST_HEADERS, "Car Radio", szDialog2, "Ok", "Close");
	}
	if(newkeys == KEY_WALK) {
		if(IsPlayerSpec[playerid] == 1) {
			TogglePlayerControllable(playerid, 1);
			TogglePlayerSpectating(playerid, 0);
			SetPlayerInterior(playerid,Unspec[playerid][sPint]);
			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
			PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
			Unspec[playerid][sLocal] = 255;
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
			SCM(playerid, -1, "Ban khong con spec!");
			SpawnPlayer(playerid);
			Iter_Remove(MySpec[Spectate[playerid]], playerid);
			IsPlayerSpec[playerid] = 0;
			Spectate[playerid] = 255;
			SpecPlayers[playerid] = 0;
			LastRecon[playerid] = 1;
			PlayerTextDrawHide(playerid, SpectatorTD);
		}	
	}	
	if(newkeys & KEY_NO) {
		for(new j = 1; j < MAX_JOBS; j++) {
			if(PlayerToPoint(5, playerid, JobInfo[j][jPosX], JobInfo[j][jPosY], JobInfo[j][jPosZ])) {
				if(IsPlayerInAnyVehicle(playerid)) 
					return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the thuc hien hanh dong nay khi dang o trong mot phuong tien!");
				
				if(PlayerInfo[playerid][pJob] == 0) 
					return SCM(playerid, COLOR_LGREEN, "Ban khong co mot cong viec.");

				SCM(playerid, COLOR_LIGHTBLUE, "Ban da nghi viec");
				PlayerInfo[playerid][pJob] = 0; UsedFind[playerid] = 0; targetfind[playerid] = -1; CP[playerid] = 0; JobWorking[playerid] = 0; JobLeftTime[playerid] = 0; BagTime[playerid] = 0;
				
				if(JobVehicle[playerid] != 0) 
					DestroyVehicle(JobVehicle[playerid]), JobVehicle[playerid] = 0;

				if(IsPlayerInVehicle(playerid, JobVehicle[playerid])) 
					DestroyVehicle(JobVehicle[playerid]);

				if(playerObject[playerid] != 0) 
					DestroyPlayerObject(playerid, playerObject[playerid]), playerObject[playerid] = 0;

				if(playerObject2[playerid] != 0) 
					DestroyObject(playerObject2[playerid]), playerObject2[playerid] = 0;

				if(Trailer[playerid] != 0) { 
					DestroyVehicle(Trailer[playerid]); Trailer[playerid] = 0;  
				}
				DisablePlayerRaceCheckpointEx(playerid); 
				UpdateVar(playerid, "Job", 0); DisablePlayerCheckpointEx(playerid); PlayerTextDrawHide(playerid, FindTD); PlayerTextDrawHide(playerid, FindSkinTD); PlayerTextDrawHide(playerid, JobTD);
				break;
			}
		}
		LockCarFunction(playerid);
	}
		
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH) {
	   ApplyAnimation ( playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0 ) ;
	   SCM(playerid,COLOR_WARNING,"Server cam' C-BUG, ban co the bi banned neu tiep tuc!");
	}
	if(newkeys & KEY_HANDBRAKE) {
	   if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 1) {
		   format(string, sizeof(string), "AdmWarning: %s(%d) da bi kick vi su dung jetpack.",GetName(playerid),playerid);
		   if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WARNING, string,1);
		   KickEx(playerid);
	   }
	}
	if(newkeys & KEY_CROUCH) {
	   if(PlayerInfo[playerid][pMember] == 8) {
			if(PlayerToPoint(13, playerid, 2423.8899, -2090.3191, 12.5429)) {
				if(GateStatus == 0) {
					GateStatus = 1;
					MoveDynamicObject(ttcgate[0], 2423.8462, -2074.8150, 15.3476, 3.0);
					MoveDynamicObject(ttcgate[1], 2423.8462, -2103.9908, 15.3476, 3.0);
					SetTimer("ResetGates", 3000, false);
				}
			}
	   }

	   if(IsACop(playerid)) {
		   if(PlayerToPoint(15, playerid,1588.6552, -1637.9025, 15.0358)) {
			   MoveObject(gatelspd,1596.7352,-1637.9025, 15.0358,2);
			   SetTimer("lspdgateclose" ,9000 ,false);
			   return true;
		   }
		   if(PlayerToPoint(15, playerid,135.2833, 1941.3331, 21.6932)) {
			   MoveObject(gateng,122.0023, 1941.4100, 21.6932,2);
			   SetTimer("nggateclose" ,9000 ,false);
			   return true;
		   }
		   if(PlayerToPoint(15, playerid,1544.7007, -1630.7527, 13.2983)) {
			   MoveObject(lspdbar,1544.7007, -1630.7527, 13.2983,1,0.0000, 0.0000, 90.0000);
			   SetTimer("lspdbarclose" ,9000 ,false);
			   return true;
		   }
		   if(PlayerToPoint(15, playerid,2293.8513, 2497.67554, 4.53215)) {
			   MoveDynamicObject(gatelvpd[0], 2293.8513, 2497.6755, -2, 5.0);
			   SetTimerEx("LVPDGates", 5000, false, "i", 1);
			   return true;
		   }		   
		   if(PlayerToPoint(15, playerid,2335.2009, 2443.6992, 1.8997)) {
			   MoveDynamicObject(gatelvpd[1], 2335.2009, 2443.6992, 1.8997, 5.0);
			   SetTimerEx("LVPDGates", 5000, false, "i", 2);
			   return true;
		   }	   
		   if(PlayerToPoint(15, playerid, 2238.2146, 2450.2695, 10.6961)) {
			   MoveDynamicObject(gatelvpd[2], 2238.21460, 2450.26953, 10.69610, 1, 0.00000, 0.00000, 90.00000);
			   SetTimerEx("LVPDGates", 5000, false, "i", 3);
			   return true;
		   }			   
	   }
	   if(IsPlayerInAnyVehicle(playerid)) {
	   	   new idd = PersonalCar(playerid), bool: cc = false;
	   	   if(idd == -1) goto next;
	   	   for(new i = 0; i < 4; i++) {
	   		  	if(PlayerToPoint(3, playerid, TunningPos[i][0], TunningPos[i][1], TunningPos[i][2])) {
	   		  		if(i < 2) {
	   		  			IsStageUpgrade(playerid, GetPlayerVehicleID(playerid));
	   		  			SetPlayerCameraPos(playerid, TunningCameraPos[i][0], TunningCameraPos[i][1], TunningCameraPos[i][2]);
	   		  			SetPlayerCameraLookAt(playerid, TunningCameraPosLook[i][0], TunningCameraPosLook[i][1], TunningCameraPosLook[i][2]);
	   		  			break;
	   		  		} else {
	   		  			if(CarInfo[idd][cVip] != 1) 
	   		  				return SCM(playerid, COLOR_LGREEN, "Error: Ban phai nang cap xe len VIP PLUS.");

	   		  			if(CarInfo[idd][cNeon] != 0) SCM(playerid, COLOR_LIGHTGREEN, "ATENITE: {FFFFFF}Ban da so huu mot bo neon, neu mua cai moi ban se mat cai hien tai");
	   		  			Dialog_Show(playerid, DIALOG_NEON, DIALOG_STYLE_TABLIST_HEADERS, "Buy neon", "Neon Type\tValue\n{FFFFFF}White\t169\n{ff00c9}Pink\t269\n{fff000}Yellow\t369\n{64ff00}Green\t469\n{0046ff}Blue\t569\n{ff0400}Red\t669", "Select", "Close");
	   		  			break;
	   		  		}
	   		  	}
	   	   }
	   	   next:
	   	   if(PnsTimer[playerid] != -1) return true;
	   	   for(new i = 1; i <= GpsBizzType[14]; i++) {
	   	   		idd = BizzTypeID[14][i];
	   	   		if(!PlayerToPoint(3, playerid, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]))
	   	   			continue;

	   	   		PutVehicleInPNS(playerid, i-1);
	   	   		cc = true;
	   	   		break;
	   	   }
	   	   if(cc) return true;
		   for(new i = 1; i <= GpsBizzType[12]; i++) {
				idd = BizzTypeID[12][i];
				if(PlayerToPoint(20, playerid, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ])) {
					new idcar = GetPlayerVehicleID(playerid);
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) 
						return true;

					if(GetPVarInt(playerid, "Engine") == 1) 
						return SCM(playerid,COLOR_GREY,"* Dong co dang ban, hay tat no.");

					if(Gas[idcar] == 100) 
						return SCM(playerid, COLOR_LGREEN, "Error: Day xang.");

					TogglePlayerControllable(playerid, 0);
					GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~dang do xang~n~~w~~h~Wait...",RefuelWait,3);
					defer Fillup(playerid);
					Refueling[playerid] = 1;
					break;
				}
		   }
		   return true;
	   }
	}
	if(newkeys == KEY_LOOK_BEHIND) {
	   if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		   new idcar = GetPlayerVehicleID(playerid),sendername[25];
		   if(IsABike(idcar)) return true;
		   new carid = FindSpawnID(idcar);
		   if(carid != 0) {
				if(CarInfo[carid][cPoints] == 0) return SCM(playerid, COLOR_GREY, "Chiec xe nay chua thanh toan tien bao hiem");
		   }
		   if(Refueling[playerid] != 0) return SCM(playerid,COLOR_LGREEN,"* Vui long doi cho den khi xang duoc do day binh!");
		   new vehicle = GetVehicleModel(idcar) - 400;		   
		   if(vehEngine[idcar] == 0) {
		   	   if(IsEditVip[playerid] != 0)
		   	   		return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the khoi dong dong co khi dang edit vip");
			   vehEngine[idcar] = 1;
			   GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
			   SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
			   GetPlayerName(playerid, sendername, sizeof(sendername));
			   SetPVarInt(playerid, "Engine", 1);
			   if(GetPVarInt(playerid, "Undercover") == 1) format(string, sizeof(string), "* Unknown starts the engine of his %s.",aVehicleNames[vehicle]);
			   else format(string, sizeof(string), "* %s starts the engine of his %s.",sendername,aVehicleNames[vehicle]);				   
			   ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		   }
		   else if(vehEngine[idcar] == 1) {
			   vehEngine[idcar] = 0;
			   GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
			   SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			   GetPlayerName(playerid, sendername, sizeof(sendername));
			   SetPVarInt(playerid, "Engine", 0);
			   if(GetPVarInt(playerid, "Undercover") == 1) format(string, sizeof(string), "* Unknown stops the engine of his %s.",aVehicleNames[vehicle]);
			   else format(string, sizeof(string), "* %s stops the engine of his %s.",sendername,aVehicleNames[vehicle]);				   
			   ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		   }
	   }
	}
	if(newkeys & KEY_SPRINT) {
		if(gPlayerUsingLoopingAnim[playerid] == 1) StopLoopingAnim(playerid);
	}
	if(newkeys & KEY_ANALOG_DOWN) {
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			new veh = GetPlayerVehicleID(playerid);
			if(GetPVarInt(playerid, "Boot") == 0) {
				 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
				 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
				 SetPVarInt(playerid, "Boot", 1);
			}
			else if(GetPVarInt(playerid, "Boot") == 1) {
				 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
				 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
				 SetPVarInt(playerid, "Boot", 0);
			}
		}
		return true;
	}
	if(newkeys & KEY_ACTION) {
	  if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		 new veh = GetPlayerVehicleID(playerid);
		 if(GetPVarInt(playerid, "Lights") == 0) {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 1);
		 }
		 else if(GetPVarInt(playerid, "Lights") == 1) {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 0);
		 }
	  }
	  return true;
	}
	if(newkeys & KEY_ANALOG_UP) {
	  if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		 new veh = GetPlayerVehicleID(playerid);
		 if(GetPVarInt(playerid, "Bonnet") == 0) {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 1);
		 }
		 else if(GetPVarInt(playerid, "Bonnet") == 1) {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 0);
		 }
	  }
	  return true;
	}
	return false;
}
YCMD:getjob(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 0) 
		return SendClientMessage(playerid, COLOR_GREY, "Ban da co mot cong viec, ban co the nghi viec voi lenh /quitjob.");
	
	new job;
	for(new j = 1; j < MAX_JOBS; j++) {
		if(PlayerToPoint(3, playerid, JobInfo[j][jPosX], JobInfo[j][jPosY], JobInfo[j][jPosZ])) {
			if(PlayerInfo[playerid][pLevel] < JobInfo[j][jLevel]) {
				gString[0] = EOS;
				format(gString, sizeof(gString), "Error: Ban can dat level %d de nhan cong viec %s.",  JobInfo[j][jLevel], JobInfo[j][jName]);
				SCM(playerid, COLOR_LGREEN, gString);
				return true;
			}
			gString[0] = EOS;
			format(gString, sizeof(gString), "* Chuc mung! Cong viec moi cua ban la %s.", JobInfo[j][jName]);
			SCM(playerid, COLOR_LIGHTBLUE, gString);
			switch(j) {
				case 6: SCM(playerid, -1, "De truy tim mot nguoi choi, su dung lenh /find.");	
				case 9: SCM(playerid, -1, "De cau ca, den dia diem cau ca va su dung /fish.");
				default: SCM(playerid, -1, "De bat dau lam viec, su dung lenh /work.");
			}
			PlayerInfo[playerid][pJob] = j;
			job = 1;
		}
	}
	if(job == 0) 
		return SCM(playerid, COLOR_GREY, "Ban khong o dia diem nhan viec.");
	
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Job`='%d' WHERE `ID`='%d' LIMIT 1", PlayerInfo[playerid][pJob], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}
YCMD:quitjob(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] == 0) 
		return SCM(playerid, COLOR_LGREEN, "Error: Ban khong co mot cong viec");
	
	SCM(playerid, COLOR_LIGHTBLUE, "* Ban da nghi viec.");

	PlayerInfo[playerid][pJob] = 0;
	UsedFind[playerid] = 0;
	DisablePlayerCheckpointEx(playerid);
	PlayerTextDrawHide(playerid, FindTD);
	targetfind[playerid] = -1;
	CP[playerid] = 0;
	JobWorking[playerid] = 0;
	if(JobVehicle[playerid] != 0) 
		DestroyVehicle(JobVehicle[playerid]), JobVehicle[playerid] = 0;
	
	if(Trailer[playerid] != 0) 
		{ DestroyVehicle(Trailer[playerid]); Trailer[playerid] = 0; }

	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Job`='0' WHERE `ID`='%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");

	if(playerObject[playerid] != 0) 
		DestroyPlayerObject(playerid, playerObject[playerid]), playerObject[playerid] = 0;
	
	if(playerObject2[playerid] != 0) 
		DestroyObject(playerObject2[playerid]), playerObject2[playerid] = 0;

	DisablePlayerRaceCheckpointEx(playerid);
	JobLeftTime[playerid] = 0;
	BagTime[playerid] = 0;
	return true;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid) {
	PlayerPickup[playerid] = pickupid;
	new str[180];
	
	for(new i = 0; i < MAX_COBJECTS; i++) {
		if(ObjectInfo[i][oID] != 0) {
			if(pickupid == ObjectInfo[i][oID]) {
				new id = GetObjects();
				if(PlayerInfo[playerid][pAdmin] != 0) return true;
				GivePlayerCash(playerid, 1, ObjectInfo[i][oMoney]);				
				if(id == 1) {
					format(str, 256, "NR AdmBot: Evenimentul a fost incheiat! %s a gasit obiectul si a castigat $%s.", GetName(playerid), FormatNumber(ObjectInfo[i][oMoney]));
					SCMTA(COLOR_ORANGE, str);
				}
				else {
					format(str, 256, "NR AdmBot: %s a gasit unul dintre obiecte si a castigat $%s.", GetName(playerid), FormatNumber(ObjectInfo[i][oMoney]));
					SCMTA(COLOR_ORANGE, str);
					format(str, 256, "NR AdmBot: In acest moment, mai sunt %d obiecte!", id-1);
					SCMTA(COLOR_ORANGE, str);
				}
				RemoveObject(i);
			}
		}
	}

	for(new i = 0; i < MAX_PICKUPSW; i++) {		
	
		if(pickupid == Pickups[i][psID]) {
			if(Pickups[i][psWar] != 1337) {
				if(Pickups[i][psType] == 0) {
					SCM(playerid, COLOR_LIGHTBLUE, "Ai gasit o trusa medicala pe jos. (+40 HP)");
					new Float:HP;
					GetPlayerHealthEx(playerid,HP);
					if(HP < 89) SetPlayerHealthEx(playerid, HP+40);
					else SetPlayerHealthEx(playerid, 99);
				}
				else if(Pickups[i][psType] == 1) {
					new gunname[32];
					GetWeaponName(Pickups[i][psWeapon], gunname, sizeof(gunname));
					format(str, sizeof(str), "Ai gasit un %s cu %d gloante pe jos.", gunname, Pickups[i][psAmmo]);
					SCM(playerid, COLOR_LIGHTBLUE, str);
					ServerWeapon(playerid, Pickups[i][psWeapon], Pickups[i][psAmmo]);
				}			
				else if(Pickups[i][psType] == 2) {
					format(str, sizeof(str), "Ai gasit $%d pe jos.", Pickups[i][psAmount]);
					SCM(playerid, COLOR_LIGHTBLUE, str);
					GivePlayerCash(playerid, 1, Pickups[i][psAmount]);
				}			
			}
			else if(Pickups[i][psType] == 4) {
				new money = 15000 + random(5000);
				GivePlayerCash(playerid, 1, money);
			}
			DestroyDynamicPickup(Pickups[i][psID]);
			Pickups[i][psType] = 0;
			Pickups[i][psID] = 0;
			Pickups[i][psWar] = 0;
			Pickups[i][psAmount] = 0;
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 10.0);	
		}	
	}
	return true;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid) {
	foreach(new i: Player) {
		if(Spectate[i] == playerid) {
			TogglePlayerSpectating(i, 1);
			SetPlayerInterior(i, newinteriorid);
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			if(IsPlayerInAnyVehicle(playerid)) PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			else PlayerSpectatePlayer(i, playerid);	
		}
	}
	if(newinteriorid == 0) InHQ[playerid] = -1;
	return true; 
}					

public OnPlayerText(playerid, text[]) {
	if(IsPlayerLogged[playerid] == 0) 
		return false;	

	if(FaceReclama(text)) {
		Reclama(playerid, text);
		return false;
	}
	static Text[MAX_PLAYERS][128]; 
	if(Text[playerid][0] != '\0' && !strcmp(text,Text[playerid],true)) return false;
	strcat((Text[playerid][0]='\0', Text[playerid]), text, 128);		
		
	new string[180];
	
	if(TrivalEvent != 0) {
		if(strcmp(text, TrivalText, true) == 0) {
			format(string, sizeof(string), "Trival Event: {FFFFFF}%s a scris primu '{339DDD}%s{FFFFFF}' si a castigat {38F549}$%s{FFFFFF}.", GetName(playerid), TrivalText, FormatNumbers(TrivalPremium));
			SendClientMessageToAll(COLOR_LGREEN, string);
			GivePlayerCash(playerid, 1, TrivalPremium);
			TrivalEvent = 0;
			return false;
		}
	}
	if(PlayerInfo[playerid][pMuted] == 1)  {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return false;
	}
	assert(AntiFlood_Check(playerid));
	if(TalkingLive[playerid] != 255) {
		if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9) format(string, sizeof(string), "Reporter %s: %s", GetNameEx(playerid), text);
		else format(string, sizeof(string), "Jucator %s: %s", GetNameEx(playerid), text);
		OOCNews(COLOR_LIGHTGREEN, string);
		return false;
	}
	if(Mobile[playerid] != 255) {
		new idx, tmp[180];
		tmp = strtok(text, idx);
		format(string, sizeof(string), "%s spune (telefon): %s", GetNameEx(playerid), text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1);
		if(IsPlayerConnected(Mobile[playerid])) {
			if(Mobile[Mobile[playerid]] == playerid) {
				if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1) ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1);
				else  SCM(Mobile[playerid], COLOR_YELLOW,string);
			}
		}
		InsertLog(playerid, string, LOG_CHAT);	
		return false;
	}
	if(PaintType[playerid] != 0) format(string, sizeof(string), "{5088BF}%s [%d kills]: {FFFFFF}%s", GetNameEx(playerid), PKills[playerid], text);
	else if(PlayerInfo[playerid][pColor] != 0) format(string, sizeof(string), "{%s}%s: {FFFFFF}%s", PlayerColors(PlayerInfo[playerid][pColor]), GetNameEx(playerid), text);
	else format(string, sizeof(string), "{%s}%s: {FFFFFF}%s", PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1 && GetPVarInt(playerid, "Cover") != 1 ? ("BA0404") : ("AFAFAF"), GetNameEx(playerid), text);
	if(PaintType[playerid] != 0) {
		SendPaintMessage(PaintType[playerid], -1, string);
		return false;
	}	
	ProxDetector(20.0, playerid, string,COLOR_WHITE);
	format(string, sizeof(string), "(chat) %s", text);
	ChatLog(GetName(playerid), playerid, string);
	
	format(string, sizeof(string), "\"%s\"", text);
	SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000);
	return false;
}


YCMD:createclanzone(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7)
		return SCM(playerid, COLOR_GREY, AdminOnly);

	new Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	new i = SQL_clanzone;

	GraffitiInfo[i][gfObject] = CreateDynamicObject(19327, Pos[0], Pos[1]+3, Pos[2], 0, 0, 0);
	SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, "None\n[None]", OBJECT_MATERIAL_SIZE_256x128, "Arial", 30, 1, 0xFFFFFFFF, 0, 1);
	EditDynamicObject(playerid, GraffitiInfo[i][gfObject]);
	EditObject3D[playerid] = true;
	return true;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2) {
	SetVehicleColor(vehicleid);
	SetVehicleHealth(vehicleid, 999);
	return true;
}

public OnVehicleDeath(vehicleid) {
	if(FindSpawnID(vehicleid) != 0) {
		new carid = FindSpawnID(vehicleid);
		CarInfo[carid][cLastPos][0] = CarInfo[carid][cLocationx];
		CarInfo[carid][cLastPos][1] = CarInfo[carid][cLocationy];
		CarInfo[carid][cLastPos][2] = CarInfo[carid][cLocationz];						
		if(CarInfo[carid][cPoints] >= 1) CarInfo[carid][cPoints] -= 1;
		CarInfo[carid][cTax] += 30 + random(10);
		new query[256];
		mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Points`='%d', `Tax`='%d' WHERE `ID`='%d'", CarInfo[carid][cPoints], CarInfo[carid][cTax], CarInfo[carid][cID]);
		mysql_tquery(SQL, query, "", "");
	}

	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(LastCar[i] == vehicleid && InEvent[i] == 1) SpawnPlayer(i), InEvent[i] = 0, LastCar[i] = 0;
			if(HireCar[i] == vehicleid) return SCM(i, -1, "Ai pierdut vehiculul inchiriat."), HireCar[i] = -1;
	 }
	}

 	new engine,lights,alarm,doors,bonnet,boot,objective;
 	vehEngine[vehicleid] = 0;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
 	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	StopAudioStreamForPlayersInCar(vehicleid);
 	return true;
}
Save_VipCoordonat(idd) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `Cordonate`='%f|%f|%f|%f|%f|%f' WHERE `ID`='%d'", CarInfo[idd][cVipPos][0], CarInfo[idd][cVipPos][1], CarInfo[idd][cVipPos][2], CarInfo[idd][cVipPos][3], CarInfo[idd][cVipPos][4], CarInfo[idd][cVipPos][5], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
}

YCMD:crateforall(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6)
		return SCM(playerid, COLOR_LGREEN, AdminOnly);

	new type, value;
	if(sscanf(params, "ii", type, value)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/crateforall [crate type] [value]");
		SCM(playerid, COLOR_WHITE, "Rare (0) | Epic (1) | Legendary (2) | Transcendent (3) | Vehicle (4)");
		return true;
	}

	foreach(new i: Player) PlayerInfo[i][pCrates][type] += value, save_crates(i);

	gString[0] = EOS;
	format(gString, 75, "Admin %s a dat %d crate %s.", GetName(playerid), value, CrateName[type]);
	SCMTA(COLOR_YELLOW, gString);
	return true;
}
YCMD:setslot(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces la aceasta comanda.");
	new id, slot;
	if(sscanf(params, "ui", id, slot))
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setslot <playerid/name> <slot>");

	gString[0] = EOS;
	format(gString, sizeof(gString), "(/setslot) %s set %s slot %d");
	SendAdminMessage(COLOR_RED, gString, 5);
	return true;
}
function SQL_CheckPlayer(playerid, id) {
	if(cache_num_rows() == 0) 
		return Dialog_Show(playerid, DIALOG_REGISTER5, DIALOG_STYLE_INPUT, "Referral:", "Insert referral:\nInvalid id.", "Select", "Close");
	
	new ORM:ormid = orm_create("users"); gString[0] = EOS;
	orm_addvar_string(ormid, gString, MAX_PLAYER_NAME, "name");
	orm_apply_cache(ormid, 0);
	SetPVarInt(playerid, "Referral", id);
	format(RegisterReferral[playerid], MAX_PLAYER_NAME, gString);
	format(gString, 100, "Esti sigur ca %s te-a adus pe comunitate?", gString);
	Dialog_Show(playerid, DIALOG_REGISTER6, DIALOG_STYLE_MSGBOX, "Referral:", gString, "Ok", "Back");
	return true;
}

function PlaceGarage(playerid) {
	new house = PlayerInfo[playerid][pHouse];
	if(!PlayerToPoint(30, playerid, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey], HouseInfo[house][hEntrancez])) return SCM(playerid, COLOR_LGREEN, "Error: Nu te afli in zona casei tale");
	HouseInfo[house][hGarage] = 1;
	new idd = garage+1, Float: PosX, Float: PosY, Float: PosZ, Float: PosR;
	GetPlayerPos(playerid, PosX, PosY, PosZ);
	GetPlayerFacingAngle(playerid, PosR);
	GarageInfo[idd][gID] = idd;
	GarageInfo[idd][gEnterX] = PosX;
	GarageInfo[idd][gEnterY] = PosY;
	GarageInfo[idd][gEnterZ] = PosZ;
	GarageInfo[idd][gEnterR] = PosR;
	GarageInfo[idd][gExitX] = -1516.4685;
	GarageInfo[idd][gExitY] = 321.0001;
	GarageInfo[idd][gExitZ] = 53.1891;
	GarageInfo[idd][gExitR] = 179.3129;
	GarageInfo[idd][gVirtualWorld] = idd;
	GarageInfo[idd][gHouses] = PlayerInfo[playerid][pHouse];
	format(GarageInfo[idd][gOwner], 32, GetName(playerid));
	if(SelectedItem[playerid] == 0) PlayerInfo[playerid][pPremiumPoints] -= 1600, Update(playerid, pPremiumPointsx);
	else if(SelectedItem[playerid] == 1) StoreMoney[playerid] -= 2, ArataMoney(playerid, 1, 2000000000), Update(playerid, pCashx);
	GarageInfo[idd][gPickup] = CreateDynamicPickup(1318, 23, GarageInfo[idd][gEnterX], GarageInfo[idd][gEnterY], GarageInfo[idd][gEnterZ]);
	GarageLabel[idd] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, GarageInfo[idd][gEnterX], GarageInfo[idd][gEnterY], GarageInfo[idd][gEnterZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	UpdateLabel(3, idd);
	gQuery[0] = EOS;
	gString[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO `garages` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `Owner`, `EnterR`, `ExitR`, `Virtual`, `House`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%s', '%f', '%f', '%d', '%d')", 
		PosX, PosY, PosZ, -1516.4685, 321.0001, 53.1891, GetName(playerid), PosR, 179.3129, GarageInfo[idd][gVirtualWorld], GarageInfo[idd][gHouses]);
	mysql_tquery(SQL, gQuery, "", "");
	format(gString, sizeof(gString), "Garajul a fost plasat cu succes. Ai platit suma de %s.", SelectedItem[playerid] == 0 ? ("1600 Premium Points") : ("$2.000.000.000"));
	SCM(playerid, COLOR_YELLOW, gString);
	garage++;
	return true;
}
YCMD:movegarage(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_LGREEN, AdminOnly);
	if(GetPlayerVirtualWorld(playerid) != 0) return SCM(playerid, COLOR_LGREEN, "Error: nu poti folosi acesta comanda dintr-un virtual world.");
	new id;
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/movegarage <id>");
	new Float: X, Float: Y, Float: Z, Float: Rotation;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Rotation);
	GarageInfo[id][gEnterX] = X;
	GarageInfo[id][gEnterY] = Y;
	GarageInfo[id][gEnterZ] = Z;
	GarageInfo[id][gEnterR] = Rotation;
	DestroyDynamicPickup(GarageInfo[id][gPickup]);
	DestroyDynamic3DTextLabel(GarageLabel[id]);
	GarageLabel[id] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, GarageInfo[id][gEnterX], GarageInfo[id][gEnterY], GarageInfo[id][gEnterZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	GarageInfo[id][gPickup] = CreateDynamicPickup(1318, 23, GarageInfo[id][gEnterX], GarageInfo[id][gEnterY], GarageInfo[id][gEnterZ]);
	UpdateLabel(3, GarageInfo[id][gID]);
	SCMEx(playerid, COLOR_YELLOW, "Pozitia garajului cu ID %d a fost modificat cu succes.", id);
	return true;
}
YCMD:buycrate(playerid, params[], help) {
	new x;
	if(PlayerToPoint(3, playerid, 165.0543,-1945.3003,3.7734)) x = 0;
	else if(PlayerToPoint(3, playerid, 164.0389,-1959.0319,3.7734)) x = 1;
	else if(PlayerToPoint(3, playerid, 154.4973,-1964.2090,3.7734)) x = 2;
	else if(PlayerToPoint(3, playerid, 144.3501,-1957.6387,3.7734)) x = 3;
	else if(PlayerToPoint(3, playerid, 144.2511,-1945.6802,3.7734)) x = 4;
	else return SCM(playerid, COLOR_ERROR, "You're not at the box stand");
	AlegeCrates[playerid] = x;
	gString[0] = EOS;
	format(gString, sizeof(gString), "{A0C4D3}Doresti sa cumperi un %s Crate?\nAcest crate costa {1A79A2}(%d RPoints / %d Premium Points){A0C4D3}.", CrateName[x], CratePrice[x][0], CratePrice[x][1]);
	Dialog_Show(playerid, DIALOG_BUYCRATES, DIALOG_STYLE_MSGBOX, "Buy Crate", gString, "Co", "Khong");
	return true;
}
YCMD:vouchers(playerid, params[], help) {
	if(PlayerInfo[playerid][pVoucher][0] == 0 && PlayerInfo[playerid][pVoucher][1] == 0 && PlayerInfo[playerid][pVoucher][2] == 0) return SCM(playerid, COLOR_LIGHTGREEN, "Nu ai un vouchers");
	new string[190];
	format(string, sizeof(string), "#\tModel\tAmount\tInfo\n1.\t{045AB6}Rare Voucher\t{FFFFFF}%d\t50 Premium Points\n2.\t{610F7D}Epic Voucher\t{FFFFFF}%d\t100 Premium Points\n1.\t{F44343}Legendary Voucher\t{FFFFFF}%d\t500 Premium Points", PlayerInfo[playerid][pVoucher][0], PlayerInfo[playerid][pVoucher][1], PlayerInfo[playerid][pVoucher][2]);
	Dialog_Show(playerid, DIALOG_VOUCHERS, DIALOG_STYLE_TABLIST_HEADERS, "Vocuhers", string, "Select", "Cancel");
	return true;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{	

	if(GetPlayerAmmo(playerid) == 1) {
		SetPlayerArmedWeapon(playerid, 0);
		WeaponAmmo[playerid][GetWeaponSlot(weaponid)] = 0;
		Weapons[playerid][weaponid] = 0;
	}
	else WeaponAmmo[playerid][GetWeaponSlot(weaponid)] --;
	
	if(weaponid == 24)
	{
		if((gettime() - shotTime[playerid]) < 1) shot[playerid] += 1;
		else shot[playerid] = 0;
		if(PlayerInfo[playerid][pAdmin] < 7 && shot[playerid] > 10) {
			new string[184];
			format(string, sizeof(string), "AdmWarning: %s(%d) a primit kick pentru rapid fire.",GetName(playerid),playerid);
			SendAdminMessage(COLOR_WARNING, string,1);
			KickEx(playerid);
		}
		shotTime[playerid] = gettime();
	}
	return true;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	print( "====================================================================" );
	printf( "Error ID: %d, Error: %s", errorid, error );
	printf( "Callback: %s", callback );
	printf( "gQuery: %s", query );
	print( "====================================================================" );
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
					SCM(i, COLOR_CLIENT, "SERVER: Ban nhan duoc kick deoarece sunt probleme tehnice cu baza de date!");
					SCM(i, COLOR_CLIENT, "SERVER: Revenim cat mai repede posibil. Nu exista un termen anume.");
					KickEx(i);
				}	
			}
			SendRconCommand("password boss");
			SendRconCommand("hostname "SERVER_NAME" RPG - Probleme tehnice (0.3.7)");
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s",query);
		}
	}
	return true;
}
function GetPersonalCar(playerid, vehicleid) return CarInfo[FindSpawnID(vehicleid)][Userid] == PlayerInfo[playerid][pSQLID] ? FindSpawnID(vehicleid) : -1;
function PersonalCar(playerid) return !IsPlayerInAnyVehicle(playerid) || FindSpawnID(GetPlayerVehicleID(playerid)) == 0 ? -1 : CarInfo[FindSpawnID(GetPlayerVehicleID(playerid))][Userid] == PlayerInfo[playerid][pSQLID] ? FindSpawnID(GetPlayerVehicleID(playerid)) : -1;
YCMD:opencrate(playerid, params[], help) {
	if(IsCrates[playerid] == 1) return true;
	if(CrateTime[playerid] > 0) return true;
	ShowCrates(playerid);
	return true;
}
YCMD:park(playerid, params[], help) {
	new car = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) 
		return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Nu esti in vehiculul tau.");
	
	if(Iter_Count(MyVehicle[playerid]) == 0) 
		return SCM(playerid, COLOR_ERROR, "erorr: {FFFFFF}Nu ai un vehicul personal!");
	
	if(PersonalCar(playerid) == -1) 
		return SCM(playerid, COLOR_ERROR, "erorr: {FFFFFF} Nu esti in unul dintre vehiculele tale personale!");
	
	if(GetPlayerState(playerid) != 2) 
		return SCM(playerid, COLOR_GREEN, "* Trebuie sa fii la volan pentru a putea folosi aceasta comanda!");
	new idd = PersonalCar(playerid);
	new Float: vhp;
	GetVehicleHealth(car, vhp);
	if(vhp < 800) return SCM(playerid, COLOR_GREY, "Nu poti parca masina cand are sub 800 'viata'!");
	if(PlayerToPoint(150, playerid, 1716.9065,-1902.4526,13.5661)) return SCM(playerid, COLOR_ERROR, "INFO: {FFFFFF}Nu poti parca o masina in jurul spawn-ului.");
	new Float:x, Float:y, Float:z, Float:a;
	saveTuning(playerid, CarInfo[idd][Spawned]);
	GetVehiclePos(car, x, y, z);
	GetVehicleZAngle(car, a);
	CarInfo[idd][cLocationx] = x;
	CarInfo[idd][cLocationy] = y;
	CarInfo[idd][cLocationz] = z;
	CarInfo[idd][cTime] = gettime()+600;
	CarInfo[idd][cAngle] = a;
	CarInfo[idd][cVirtual] = GetPlayerVirtualWorld(playerid);


	DestroyVehicle(car);

	if(strlen(CarInfo[idd][cText]) >= 3) {
		DestroyDynamicObject(nameobject[CarInfo[idd][Spawned]]);
	}
	CarInfo[idd][Spawned] = CreateVehicleEx(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],CarInfo[idd][cColorOne],CarInfo[idd][cColorTwo], -1, 0);
	SetVehicleVirtualWorld(CarInfo[idd][Spawned], CarInfo[idd][cVirtual]);
	attach_vip_text(idd);

	SetVehicleHealth(CarInfo[idd][Spawned], CarInfo[idd][cVip] ? 2000 : 1000);
	SetTunning(idd);
	SetVehicleNumberPlate(CarInfo[idd][Spawned], CarInfo[idd][cLicense]);
	saveCar(idd);
	new Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	CarInfo[idd][cLastPos][0] = Pos[0];
	CarInfo[idd][cLastPos][1] = Pos[1];
	CarInfo[idd][cLastPos][2] = Pos[2];
	return true;
}
YCMD:petmenu(playerid, params[], help) {
	if(PlayerInfo[playerid][pLevel] < 3) 
		return SCM(playerid, COLOR_GREY, "Poti detine un pet la level 3!");
	
	new 
		petname[53],
		nxtlevel = PlayerInfo[playerid][pPetLevel],
		expamount = nxtlevel*PetLevelExp
	;

	if(PlayerInfo[playerid][pPetLevel] >= 21) 
		format(petname, sizeof(petname), "{5AD34E}%s", PlayerInfo[playerid][pPetName]);
	
	else format(petname, sizeof(petname), "{D81C1C}Your pet needs to be level 21 to set a name.");

	gString[0] = EOS;
	if(PlayerInfo[playerid][pPetStatus] == 0) 
		format(gString, sizeof(gString),"function\tResult\nBuy Level\t%d/%d pet points for level %d\nPet Appearance\tParrot\nTog Pet\t{D81C1C}Disable{FFFFFF}\nPet Name\t%s\nPet Benefits\tPet Informations", PlayerInfo[playerid][pPetPoints],expamount, PlayerInfo[playerid][pPetLevel], petname);
	
	else format(gString, sizeof(gString), "function\tResult\nBuy Level\t%d/%d pet points for level %d\nPet Appearance\tParrot\nTog Pet\t{5AD34E}Enable{FFFFFF}\nPet Name\t%s\nPet Benefits\tPet Informations", PlayerInfo[playerid][pPetPoints],expamount, PlayerInfo[playerid][pPetLevel], petname);
	Dialog_Show(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, "Pet Menu", gString, "Select", "Cancel");
	return true;
}
function Checkstatuspet(playerid) {
	new
		nxtlevel = PlayerInfo[playerid][pPetLevel],
		expamount = nxtlevel*PetLevelExp;
		
	SCMEx(playerid, COLOR_GREY, "------------------Parrot Level.%d------------------------------",PlayerInfo[playerid][pPetLevel]);
	SCM(playerid, COLOR_WHITE, "");
	SCMEx(playerid, COLOR_WHITE, "Pentru a anvansa acest pet ai nevoie %d/%d", PlayerInfo[playerid][pPetPoints], expamount);
	SCMEx(playerid, COLOR_WHITE, "Cu ecest pet vei primi la PayDay $%s money, acesta va creste odata cu level-ul acestui pet.", FormatNumber(PetMoney*PlayerInfo[playerid][pPetLevel]));
	SCM(playerid, COLOR_WHITE, "");
	SCM(playerid, COLOR_GREY, "------------------------------------------------------------");
	return true;
}
function RemovePet(playerid) {
	DestroyDynamic3DTextLabel(Pet[playerid]);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
	return true;
}
YCMD:aduty(playerid, params[], help) {
	new string[120];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(Aduty[playerid] == 0) {
		Aduty[playerid] = 1;
		format(string, sizeof(string), "[INFO]: {FFFFFF}Admin %s is now on administrative duty", GetName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, string,1);
		SetPlayerArmourEx(playerid, 1000);
		SetPlayerHealthEx(playerid, 1000);
	}	
	else if(Aduty[playerid] == 1) {
		Aduty[playerid] = 0;
		format(string, sizeof(string), "[INFO]: {FFFFFF}Admin %s is now off administrative duty", GetName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, string,1);

		SetPlayerArmourEx(playerid, 0);
		SetPlayerHealthEx(playerid, 100);
	}
	return true;	
}
YCMD:swapcolors(playerid, params[], help) {
	new string[128], color1,color2;
	if(Iter_Count(MyVehicle[playerid]) == 0) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Nu ai un vehicul personal!");
	if(PlayerMoney(playerid, 5000)) return SCM(playerid, COLOR_GREY, "Nu ai $5,000!");
	if(PersonalCar(playerid) == -1) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Nu esti in unul dintre vehiculele tale personale!");
	if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_LGREEN, "* Trebuie sa fii la volan pentru a putea folosi aceasta comanda!");
	new idd = PersonalCar(playerid);
	color1 = CarInfo[idd][cColorOne];
	color2 = CarInfo[idd][cColorTwo];
	CarInfo[idd][cColorOne] = color2;
	CarInfo[idd][cColorTwo] = color1;
	ChangeVehicleColorEx(GetPlayerVehicleID(playerid), CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo]);
	SCM(playerid, COLOR_WHITE, "Ti-ai inversat culorile pentru $5,000.");
	GivePlayerCash(playerid, 0, 5000);
	BizzInfo[16][bBalance] += 5000;
	mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET Till = %d WHERE ID = %d",BizzInfo[16][bBalance],5);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorOne='%d', ColorTwo='%d' WHERE ID=%d", color2, color1, CarInfo[idd][cID]);
	mysql_tquery(SQL, string, "", "");	
	return true;
}

YCMD:debugmoney(playerid, params[], help) {
	new money;
	if(sscanf(params, "i", money)) return SCM(playerid, COLOR_RED, "usage /debugmoney <money>");
	ClanInfo[PlayerInfo[playerid][pClan]][ClanBank] = money;
	SCM(playerid, COLOR_RED, "Success");
	return true;
}
YCMD:carplate(playerid, params[], help) {
	new string[128], plate[10];
	if(Iter_Count(MyVehicle[playerid]) == 0) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Nu ai un vehicul personal!");
	if(sscanf(params, "s[10]", plate)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/carplate <Car Plate>");
	if(PersonalCar(playerid) == -1) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Nu esti in unul dintre vehiculele tale personale!");
	new idd = PersonalCar(playerid);
	if(strfind(plate, "'", true) != -1 || strfind(plate, "Model", true) != -1 || strfind(plate, "`", true) != -1) return SCM(playerid, -1, "Caractere invalide!");
	if(strlen(plate) > 10) return SCM(playerid, -1, "Numarul de inmatriculare poate avea maxim 10 caractere!");
	if(idd == 0) return SCM(playerid, -1, "Acest vehicul nu iti apartine!");
	if(CarInfo[idd][Spawned] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Vehiculul tau nu este spawnat!");
	if(PlayerMoney(playerid, 5000)) return SCM(playerid, COLOR_GREY, "Nu ai $5,000!");
	SetVehicleNumberPlate(CarInfo[idd][Spawned], plate);
	GivePlayerCash(playerid, 0, 5000);
	BizzInfo[16][bBalance] += 5000;
	format(string, sizeof(string), "Numarul de inmatriculare a fost salvat. Acesta se va pune automat la urmatorul respawn al vehiculului");
	SCM(playerid, COLOR_LGREEN, string);
	format(string, sizeof(string), "%s", plate);
	if(PlayerInfo[playerid][pPremiumAccount] != 0) format(CarInfo[idd][cLicense], 100, "{FF0000}%s", plate);
	if(PlayerInfo[playerid][pVip] != 0) format(CarInfo[idd][cLicense], 100, "{F0B548}%s", plate);
	else format(CarInfo[idd][cLicense], 100, "%s", plate);
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET License='%s' WHERE ID=%d", plate, CarInfo[idd][cID]);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET Till = %d WHERE ID = %d",BizzInfo[16][bBalance],5);
	mysql_tquery(SQL, string, "", "");
	return true;
}
YCMD:lock(playerid, params[], help) return LockCarFunction(playerid);
function saveFuel(dbid) {
	CarInfo[dbid][cFuel] = Gas[CarInfo[dbid][Spawned]];
	new query[256];
	mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Fuel`='%d' WHERE `ID`='%d'", CarInfo[dbid][cFuel], CarInfo[dbid][cID]);
	mysql_tquery(SQL, query, "", "");
	return true;
}
function CancelTrade(playerid) {
	new playerID = GetPVarInt(playerid, "OfferBy");
	if(playerID != -1 && IsPlayerConnected(playerID)){
		SCM(playerid, -1, "Giao dich bi huy bo deoarece a expirat timpul!");
		SCM(playerID, -1, "Giao dich bi huy bo deoarece a expirat timpul!");
		SetPVarInt(playerid, "OfferBy", -1);
	}
	return true;
}
function UpdateVar(playerid, varname[], amount) {
	if(playerid == INVALID_PLAYER_ID) return true;
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `%s`='%d' WHERE `id`='%d'", varname, amount, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}	
YCMD:carcolor(playerid, params[], help) {
	new string[128],part,color;
	if(Iter_Count(MyVehicle[playerid]) == 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai un vehicul personal!");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti in vehiculul tau.");
	if(sscanf(params, "ii",part,color)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/carcolor <part (1/2)> <color>"), SCM(playerid, -1, "Foloseste /colors pentru a vedea o lista cu culorile existente.");
	if(PlayerMoney(playerid, 2500)) return SCM(playerid, COLOR_WHITE, "Your don't have $2,500!");
	new car = GetPlayerVehicleID(playerid);
	if(PersonalCar(playerid) == -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti in unul dintre vehiculele tale personale!");
	if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_LGREEN, "* Trebuie sa fii la volan pentru a putea folosi aceasta comanda!");
	new idd = PersonalCar(playerid);
	if(part < 1 || part > 2) return true;
	switch(part) {
		case 1: {
			if(color > 127) {
				if(PlayerInfo[playerid][pHidden] == 0) return SCM(playerid, -1, "Nu ai o culoare hidden, pentru a cumpara una '/shop'.");
				SCM(playerid, COLOR_GOLD, "Ti-ai schimbat culoarea in una hidden!");	
				PlayerInfo[playerid][pHidden] --;
				UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
			}
			if(color < 0 || color > 255) return SCM(playerid, -1, "Culori invalide!");
			SCM(playerid, COLOR_MONEY, "Ti-ai schimbat culorea la vehicul pentru $2,500.");
			CarInfo[idd][cColorOne] = color;
			ChangeVehicleColorEx(car, color, CarInfo[idd][cColorTwo]);
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorOne = %d WHERE ID=%d", color, CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");			
		}
		case 2: {
			if(color < 0 || color > 255) return SCM(playerid, -1, "Culori invalide!");
			if(color > 127) {
				if(PlayerInfo[playerid][pHidden] == 0) return SCM(playerid, -1, "Nu ai o culoare hidden, pentru a cumpara una '/shop'.");
				SCM(playerid, COLOR_GOLD, "Ti-ai schimbat culoarea in una hidden!");	
				PlayerInfo[playerid][pHidden] --;
				UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
			}
			else SCM(playerid, COLOR_MONEY, "Ti-ai schimbat culorea la vehicul pentru $2,500.");
			CarInfo[idd][cColorTwo] = color;
			ChangeVehicleColorEx(car, CarInfo[idd][cColorOne], color);
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorTwo = %d WHERE ID=%d", color, CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");						
		}
	}
	
	
	GivePlayerCash(playerid, 0, 2500);
	BizzInfo[19][bBalance] += 2500;
	mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET Till = %d WHERE ID = %d",BizzInfo[19][bBalance],19);
	mysql_tquery(SQL, string, "", "");
	return true;
}
YCMD:alock(playerid, params[], help) {
	new
		string[50],
		vehicle = GetPlayerVehicleID(playerid),
		carid = FindSpawnID(vehicle),
		engine,lights,alarm,doors,bonnet,boot,objective;
	
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_RED, "Nu esti admin");
	if(sscanf(params, "i", carid)) return SCM(playerid, COLOR_ERROR, "Ex: /alock <carid>");

	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(doors == 1) {
		format(string, sizeof(string), "~w~%s~n~~g~Deschis",aVehicleNames[GetVehicleModel(carid)-400]);
		GameTextForPlayer(playerid, string, 3000, 4);
		SetVehicleParamsEx(carid,engine,lights,alarm,0,bonnet,boot,objective);
	}
	else {
		format(string, sizeof(string), "~w~%s~n~~r~Khoa",aVehicleNames[GetVehicleModel(carid)-400]);
		GameTextForPlayer(playerid, string, 3000, 4);
		SetVehicleParamsEx(carid,engine,lights,alarm,1,bonnet,boot,objective);
	}
	return true;
}
function LockCarFunction(playerid) {

	new 
		string[64],
		engine,lights,alarm,doors,bonnet,boot,objective,
		idd, car;
		
	if(IsPlayerInAnyVehicle(playerid)) car = GetPlayerVehicleID(playerid);
	else car = GetClosestVehicle(playerid);
	if(car == INVALID_VEHICLE_ID) return true;//SCM(playerid, COLOR_LGREEN, "Error: Nu au fost gasite vehicule in jur care pot fi descuiate/incuiate!");
	else if(!IsPlayerNearVehicle(playerid, car, 5) && !IsABoat(car)) return true;//SCM(playerid, COLOR_LGREEN, "Error: Nu au fost gasite vehicule in jur care pot fi descuiate/incuiate!");
	else if(!IsPlayerNearVehicle(playerid, car, 10) && IsABoat(car)) return true;//SCM(playerid, COLOR_LGREEN, "Error: Nu au fost gasite vehicule in jur care pot fi descuiate/incuiate!");
	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	
	// job
	if(JobWorking[playerid] == 1 && JobVehicle[playerid] == car) {
		if(doors == 1) {
			format(string, sizeof(string), "~w~%s~n~~g~Deschis",aVehicleNames[GetVehicleModel(car)-400]);
			GameTextForPlayer(playerid, string, 3000, 4);
			SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
		}
		else {
			format(string, sizeof(string), "~w~%s~n~~r~Khoa",aVehicleNames[GetVehicleModel(car)-400]);
			GameTextForPlayer(playerid, string, 3000, 4);				
			SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
		}		
		return true;
	}
	
	if(IsRentCar[playerid] == 1 && VehicleRent[playerid] == car) {
		if(doors == 1) {
			format(string, sizeof(string), "~w~%s~n~~g~Deschis",aVehicleNames[GetVehicleModel(car)-400]);
			GameTextForPlayer(playerid, string, 3000, 4);
			SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
		}
		else {
			format(string, sizeof(string), "~w~%s~n~~r~Khoa",aVehicleNames[GetVehicleModel(car)-400]);
			GameTextForPlayer(playerid, string, 3000, 4);
			SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
		}
		return true;
	}
	
	// rent
	if(HireCar[playerid] == car) {
		if(doors == 0) {
			SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
			format(string, sizeof(string), "~w~%s~n~~r~Khoa",aVehicleNames[GetVehicleModel(HireCar[playerid])-400]);
			GameTextForPlayer(playerid, string, 5000, 4);
		}
		else if(doors == 1) {
			SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
			format(string, sizeof(string), "~w~%s~n~~g~Deschis",aVehicleNames[GetVehicleModel(HireCar[playerid])-400]);
			GameTextForPlayer(playerid, string, 5000, 4);
		}
		return true;
	}
	
	// personal
	if(Iter_Count(MyVehicle[playerid]) == 0) return true; 
	idd = GetPersonalCar(playerid, car);
	if(idd == -1) return true;

	if(CarInfo[idd][cLock] == 0) {
		CarInfo[idd][cLock] = 1;	
		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
		format(string, sizeof(string), "~w~%s~n~~r~Khoa",aVehicleNames[GetVehicleModel(car)-400]);
		GameTextForPlayer(playerid, string, 5000, 4);
	}
	else {
		CarInfo[idd][cLock] = 0;
		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
		format(string, sizeof(string), "~w~%s~n~~g~Deschis",aVehicleNames[GetVehicleModel(car)-400]);
		GameTextForPlayer(playerid, string, 5000, 4);
	}
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], CarInfo[idd][cID]);
	mysql_tquery(SQL, string, "", "");	
	return true;
}
stock IsPlayerNearVehicle(playerid, vehicleid, Float:range) {
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(vehicleid, X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid, range, X, Y, Z)) return true;
	else return false;
}
function IsVehicleOccupied(vehicleid) return VehicleOccupied[vehicleid] != 0 ? (true) : (false);

YCMD:enter(playerid, params[], help) {
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(IsPlayerInRangeOfPoint(playerid,2,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) && BizzInfo[i][bStatic] == 1) {
		   if(InWar[PlayerInfo[playerid][pMember]] == 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti intra intr-o afacere in timpul war-ului!");
		   if(PlayerMoney(playerid, BizzInfo[i][bFee])) return GameTextForPlayer(playerid, "~r~~h~Ban khong du tien", 1000, 1);
		   if(OnDuty[playerid] == 1 || PlayerHit[playerid] != -1) { }
		   else if(BizzInfo[i][bLocked] == 1) return GameTextForPlayer(playerid, "~r~~h~Khoa", 1000, 1);
		   else if(i == 22) {
				if(OnDuty[playerid] == 1) return SCM(playerid, COLOR_WHITE, "Esti la datorie, nu poti intra.");
				if(PlayerInfo[playerid][pCarLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de o licenta de condus pentru a participa la o cursa!");
				if(CP[playerid] != 0 || targetfind[playerid] != -1) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");								
		   }
		   else return true;
		   GivePlayerCash(playerid, 0,BizzInfo[i][bFee]);
		   BizzInfo[i][bBalance] += BizzInfo[i][bFee];	
		   new query[128];
		   mysql_format(SQL, query,sizeof(query),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'", BizzInfo[i][bBalance], i);
		   mysql_tquery(SQL,query, "", "");
		}			   
	}				   
	return true;
}
YCMD:paint(playerid, params[], help) {
	if(IsPlayerInRangeOfPoint(playerid,2,BizzInfo[19][bEntranceX], BizzInfo[19][bEntranceY], BizzInfo[19][bEntranceZ]) && BizzInfo[19][bStatic] == 1) {
		if(InWar[PlayerInfo[playerid][pMember]] == 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti intra intr-o afacere in timpul war-ului!");
		if(PlayerMoney(playerid, BizzInfo[22][bFee])) return GameTextForPlayer(playerid, "~r~~h~Ban khong du tien", 1000, 1);
		if(OnDuty[playerid] == 1 || PlayerHit[playerid] != -1) { }
		else if(BizzInfo[22][bLocked] == 1) return GameTextForPlayer(playerid, "~r~~h~Khoa", 1000, 1);
		if(OnDuty[playerid] == 1) return SCM(playerid, COLOR_WHITE, "Esti la datorie, nu poti intra.");
		if(PlayerInfo[playerid][pWantedLevel] > 0) return SCM(playerid, -1, "Ai wanted, nu poti intra!");
		if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, COLOR_LGREEN, "Ai nevoie de 5 ore jucate pentru a putea intra in paintball!");
		if(PlayerInfo[playerid][pGunLic] == 0) return SCM(playerid, COLOR_LGREEN, "Ai nevoie de o licenta de arme pentru a putea intra in arena CS!");
		new szDialog[1024], szDialog2[1024];
		strcat(szDialog2, "Mod\tJucatori\tMapa\tStatus\n");
		if(PaintTime[0] > 0) format(szDialog, 1024, "Clasic\t%d jucatori\t%s\t{FFE203}In desfasurare (%s)\n", PlayersOnPaint(0), MapName(0), CalculeazaTimp2(PaintTime[0]));
		else format(szDialog, 1024, "Clasic\t%d jucatori\t%s\t{2BAD2B}In asteptare...\n", PlayersOnPaint(0), MapName(0));
		strcat(szDialog2, szDialog);
		if(PaintTime[1] > 0) format(szDialog, 1024, "Clasic cu armura\t%d jucatori\t%s\t{FFE203}In desfasurare (%s)\n", PlayersOnPaint(1), MapName(1), CalculeazaTimp2(PaintTime[1]));
		else format(szDialog, 1024, "Clasic cu armura\t%d jucatori\t%s\t{2BAD2B}In asteptare...\n", PlayersOnPaint(1), MapName(1));
		strcat(szDialog2, szDialog);
		if(PaintTime[2] > 0) format(szDialog, 1024, "Gun Game\t%d jucatori\t%s\t{FFE203}In desfasurare (%s)\n", PlayersOnPaint(2), MapName(2), CalculeazaTimp2(PaintTime[2]));
		else format(szDialog, 1024, "Gun Game\t%d jucatori\t%s\t{2BAD2B}In asteptare...\n", PlayersOnPaint(2), MapName(2));
		strcat(szDialog2, szDialog);
		Dialog_Show(playerid, DIALOG_MODE, DIALOG_STYLE_TABLIST_HEADERS, "Paintball:", szDialog2, "Ok", "Exit");								
	}
	else return SCM(playerid, COLOR_GREY, "Nu esti la paintball. Foloseste /gps pentru a vedea unde este.");
	return true;
}
YCMD:enterrc(playerid, params[], help) {
	if(!IsPlayerInAnyVehicle(playerid)){
		new Float:x, Float:y, Float:z, car, idd;
		GetPlayerPos(playerid, x, y, z);
		car = GetClosestVehicle(playerid);
		if(!IsPlayerNearVehicle(playerid, car, 5)) {
			SCM(playerid, COLOR_GREY, "Nu detii niciun vehicul RC sau esti prea departe de ele.");
			return true;
		}
		idd = FindSpawnID(car);
		if(IsVehicleRc(car) && CarInfo[idd][Userid] == PlayerInfo[playerid][pSQLID]) PutPlayerInVehicleEx(playerid, car, 0);
	}
	return true;
}
function TotalSlots(playerid) {
	new x = 8;
	if(PlayerInfo[playerid][pPremiumAccount] != 0) x += 2;
	switch(PlayerInfo[playerid][pVip]) {
		case 2: x += 5;
		case 3: x += 10;
	}
	return x;
}

function GetSlots(playerid) {
	new x;
	x = PlayerInfo[playerid][pSlot];
	if(PlayerInfo[playerid][pPremiumAccount] == 0) x -= 2;
	switch(PlayerInfo[playerid][pVip]) {
		case 0: x -= 10;
		case 1: x -= 5;
	}
	return x;
}	
function UpdateSlots(playerid) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Slot`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pSlot], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}
YCMD:towcar(playerid, params[], help) {
	if(Iter_Count(MyVehicle[playerid]) == 0)
		return SCM(playerid, COLOR_LGREEN, "Error: Nu ai masini personale.");

	gString[0] = EOS;
	new x;
	foreach(new idd: MyVehicle[playerid]) {
		if(CarInfo[idd][Spawned] == 0)
			continue;

		format(gString, sizeof(gString), "%s%s{FFFFFF} %s\n", gString, IsVehicleOccupied(CarInfo[idd][Spawned]) ? ("{FFFF00}(Occupied)") : ("{26B309}(Spawned)"), aVehicleNames[CarInfo[idd][cModel]-400]);
		PlayerInfo[playerid][pCarKey][x] = idd;
		x++;
	}
	Dialog_Show(playerid, DIALOG_TOWCAR, DIALOG_STYLE_LIST, "Tow car", gString, "Ok", "Exit");
	return true;
}

YCMD:findcar(playerid, params[], help) {
	if(Iter_Count(MyVehicle[playerid]) == 0)
		return SCM(playerid, COLOR_LGREEN, "Error: Nu ai masini personale.");

	gString[0] = EOS;
	new x;
	foreach(new idd: MyVehicle[playerid]) {
		if(CarInfo[idd][Spawned] == 0)
			continue;

		format(gString, sizeof(gString), "%s%s{FFFFFF} %s\n", gString, IsVehicleOccupied(CarInfo[idd][Spawned]) ? ("{FFFF00}(Occupied)") : ("{26B309}(Spawned)"), aVehicleNames[CarInfo[idd][cModel]-400]);
		PlayerInfo[playerid][pCarKey][x] = idd;
		x++;
	}
	Dialog_Show(playerid, DIALOG_FINDCAR, DIALOG_STYLE_LIST, "Find car", gString, "Ok", "Exit");
	return true;
}

YCMD:cars(playerid, params[], help) return ShowPlayerVehicle(playerid, false);
YCMD:v(playerid, params[], help) return ShowPlayerVehicle(playerid, false);
YCMD:vehicles(playerid, params[], help) return ShowPlayerVehicle(playerid, false);
YCMD:respawnthiscar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(!IsPlayerInAnyVehicle(playerid)) return true;
   	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s respawned vehicle %d.", GetName(playerid), GetPlayerVehicleID(playerid));
	SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:nearplayers(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	new range, Float:rPos[4], x, string[180];
	if(sscanf(params, "ii", range)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/nearplayers <range>");
	GetPlayerPos(playerid, rPos[0], rPos[1], rPos[2]);
	foreach(new i: Player) {
		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2])) x ++;
	}
	format(string, sizeof(string), "Au fost gasiti %d jucatori in raza de %dm.", x, range);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}
YCMD:nearskin(playerid, params[], help) {
	new range, skin, Float:rPos[4], x, string[180];
	if(PlayerInfo[playerid][pAdmin] < 2) return true;
	if(sscanf(params, "ii", skin, range)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/nearskin <skin> <range>");
	GetPlayerPos(playerid, rPos[0], rPos[1], rPos[2]);
	foreach(new i: Player) {
		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2])) {
			SetPlayerSkinEx(i, skin);
			x++;
		}
	}
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a dat skinul %d la %d jucatori pe o raza de %dm.", GetName(playerid), skin, x, range);
	SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:areagun(playerid, params[], help) {
	new range, gun, ammo, Float:rPos[4], x, string[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "iii", gun, ammo, range)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/neargun <gun> <ammo> <range>");
	GetPlayerPos(playerid, rPos[0], rPos[1], rPos[2]);
	foreach(new i: Player) {
		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2])) {
			ServerWeapon(i, gun, ammo);
			x++;
		}
	}
	new wname[32];
	GetWeaponName(gun, wname, 32);
	format(string, sizeof(string), "(/areagun) {FFFFFF}%s a dat arma %s la %d playeri pe o raza de %dm.", GetName(playerid), wname, x, range);
	SendAdminMessage(COLOR_DARKNICERED, string, 1);
	return true;
}
YCMD:editraport(playerid, params[], help) {
	new fid , string[180];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces la aceasta comanda!");
	if(sscanf(params, "i", fid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/editraport <faction>");
	if(fid < 1 || fid > 15) return SCM(playerid, COLOR_GREY, "Invalid faction! (1-15)");
	format(string, sizeof(string), "Rank 1\t%d\nRank 2\t%d\nRank 3\t%d\nRank 4\t%d\nRank 5\t%d\nRank 6\t%d", FactionInfo[fid][fRank1], FactionInfo[fid][fRank2],
	FactionInfo[fid][fRank3], FactionInfo[fid][fRank4], FactionInfo[fid][fRank5], FactionInfo[fid][fRank6]);
	new title[180];
	format(title, 256, "%s (%d)", FactionName(fid), fid);
	Dialog_Show(playerid, DIALOG_FACTION, DIALOG_STYLE_TABLIST, title, string, "Select", "Iesire");
	SetPVarInt(playerid, "Faction", fid);
	return true;
}
YCMD:setrankname(playerid, params[], help) {
	new string[180], name[180], fid, rank;
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces la aceasta comanda!");
	if(sscanf(params, "iis[180]", fid, rank, name)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setrankname <faction> <rank (1-7)> <name>");
	if(rank < 1 || rank > 7) return SCM(playerid, -1, "Rank invalid! (1-7)");
	if(fid < 1 || fid > 16) return SCM(playerid, COLOR_GREY, "Invalid faction! (1-15)");
	format(fRankNames[fid][rank-1], 256, name); 
	format(string, sizeof(string), "* Ai setat numele la rankul %d pentru factiunea %s in %s.", rank, FactionName(fid), name);
	SCM(playerid, COLOR_LGREEN, string);
	SaveRankNames(fid);
	return true;
}	
function SaveRankNames(fid) {
	new query[2048];
	mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Name1`='%s', `Name2`='%s', `Name3`='%s', `Name4`='%s', `Name5`='%s', `Name6`='%s', `Name7`='%s' WHERE `ID`='%d'",
	fRankNames[fid][0], fRankNames[fid][1], fRankNames[fid][2], fRankNames[fid][3], fRankNames[fid][4], fRankNames[fid][5],
	fRankNames[fid][6], fid);
	mysql_tquery(SQL, query, "", "");
	return true;
}	
stock GetRankName(playerid) {
	new name[180];
	format(name, 256, fRankNames[PlayerInfo[playerid][pMember]][PlayerInfo[playerid][pRank]-1]);
	return name;
}
new Countnr;
YCMD:count(playerid, params[], help) {
	new number;
	if(sscanf(params, "i", number)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/count <nr>");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "Nu ai acces la aceasta comanda.");
	if(number < 2 && number >= 360) return SCM(playerid, COLOR_LGREEN, "Error: Numar invalid. (1-360)");
	TextDrawShowForAll(CountTD);
	Countnr = number;
	Count();
	return true;
}
function Count() {
	new string[30];
	format(string, sizeof(string), "~w~Countdown: ~y~%d", Countnr);
	TextDrawSetString(CountTD, string);	
	if(Countnr >= -1) SetTimer("Count", 1000, 0);	
	Countnr --;
	if(Countnr == -1) TextDrawSetString(CountTD, "~r~GO! ~y~GO! ~b~GO!");
	if(Countnr == -2) TextDrawHideForAll(CountTD);
	return true;
}
YCMD:area(playerid, params[], help) {
	new range, Float:rPos[4], string[180], item[50], players = 0;
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, "Ban khong the su dung thao tac nay khi dang trong Race Arena!");
	if(sscanf(params, "s[50]i", item, range)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/area <name> <range>");
		if(PlayerInfo[playerid][pAdmin] >= 7) SCM(playerid, COLOR_WHITE, "freeze, unfreeze, disarm, respawn, despawn (personal cars).");
  		if(PlayerInfo[playerid][pAdmin] >= 1) SCM(playerid, COLOR_WHITE, "heal, armor, repair.");
		return true;
	}
	gString[0] = EOS;
	GetPlayerPos(playerid, rPos[0], rPos[1], rPos[2]);
	if(strcmp(item, "freeze", true) == 0) {
		foreach(new i: Player) {
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && i != playerid && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
		  		TogglePlayerControllable(i, 0);
		  		Freezed[i] = 1;
				players++;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s ti-a dat freeze.", GetName(playerid));
				SCM(i, COLOR_YELLOW, string);
			}
		}
	}
	else if(strcmp(item, "unfreeze", true) == 0) {
		foreach(new i: Player) {
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && i != playerid && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
	 			Freezed[playerid] = 0;
			  	TogglePlayerControllable(i, 1);
				players++;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s ti-a dat unfreeze.", GetName(playerid));
				SCM(i, COLOR_YELLOW, string);
			}
		}
	}
	else if(strcmp(item, "heal", true) == 0) {
		foreach(new i: Player) {
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
				SetPlayerHealthEx(i, 99);
				players++;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s ti-a dat viata.", GetName(playerid));
				SCM(i, COLOR_YELLOW, string);
			}
		}
	}
	else if(strcmp(item, "armor", true) == 0) {
		foreach(new i: Player) {
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
				SetPlayerArmourEx(i, 99);
				players++;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s ti-a dat armura.", GetName(playerid));
				SCM(i, COLOR_YELLOW, string);
			}
		}
	}
	else if(strcmp(item, "repair", true) == 0) {
		foreach(new i: Player) {
			if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
				if(IsPlayerInVehicle(i, GetPlayerVehicleID(i))) {
					RepairVehicle(GetPlayerVehicleID(i));
					SetVehicleHealth(GetPlayerVehicleID(i), 999.0);
					format(string, sizeof(string), "* %s ti-a reparat masina.", GetName(playerid));
					SCM(i, COLOR_YELLOW, string);
					players++;
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
			}
		}
	}
	else if(strcmp(item, "disarm", true, strlen(item)) == 0) {
 		foreach(new i: Player) {
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && i != playerid && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
	 			ResetWeapons(i);
				format(string, sizeof(string), "* %s ti-a confiscat armele.", GetName(playerid));
				SCM(i, COLOR_YELLOW, string);
				players++;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			}
		}
	}
	else if(strcmp(item, "respawn", true, strlen(item)) == 0) {
 		foreach(new i: Player) {
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && i != playerid && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
	 			SpawnPlayer(i);
				format(string, sizeof(string), "* %s te-a respawnat.", GetName(playerid));
				SCM(i, COLOR_YELLOW, string);
				players++;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			}
		}
	}	
	else if(strcmp(item, "despawn", true, strlen(item)) == 0) {
		foreach(new idd: PersonalVehicles) {
			if(CarInfo[idd][Spawned] == 0 || IsVehicleOccupied(CarInfo[idd][Spawned]))
				continue;

			GetVehiclePos(CarInfo[idd][Spawned], rPos[0], rPos[1], rPos[2]);
			if(!PlayerToPoint(range, playerid, rPos[0], rPos[1], rPos[2]))
				continue;

			players ++;

			DestroyPlayerCar(idd);
		}
		format(gString, 150, "{E562A9}(/area){FFFFFF} %s a despawnat %d vehicule personale pe o raza de %dm.", GetName(playerid), players, range);
		SendAdminMessage(COLOR_WHITE, gString, 5);
		return true;
	}	
	else return SCM(playerid, COLOR_WHITE, "freeze, unfreeze, heal, armor, fixveh, disarm, respawn, respawncar, despawn (personal car).");
		
	format(gString, 150, "{E562A9}(/area) {FFFFFF}%s a dat %s pe %d playeri.", GetName(playerid), item, players);
	SendAdminMessage(COLOR_WHITE, gString, 5);
	return true;
}
YCMD:va(playerid, params[], help) {
	new range;
	if(sscanf(params, "i", range))
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/va <range>");
	if(range > 100)
		return SCM(playerid, COLOR_GREY, "range maxim 100.");

	RespawnCarRange(playerid, range);
	return true;
}
function RespawnCarRange(playerid, range) {
	for(new i; i != MAX_VEHICLES; i++)  {
		new Float:PosX,Float:PosY,Float:PosZ;
		GetVehiclePos(i,PosX,PosY,PosZ);
		if(!IsPlayerInRangeOfPoint(playerid, range, PosX,PosY,PosZ) || IsVehicleOccupied(i))
			continue;

		SetVehicleToRespawn(i);
	}
	return true;
}
YCMD:cspec(playerid, params[], help) {
	new cid, string[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "i", cid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/cspec <clan id (0=off)>");
	if(cid < 0 && cid > 500) return SCM(playerid, COLOR_GREY, "ID Invalid! (0-500)");
	if(PlayerInfo[playerid][pClan] == cid && cid != 0) return SCM(playerid, COLOR_GREY, "Faci parte din acea factiune!");
	SpecClan[playerid] = cid;
	if(cid == 0) return SCM(playerid, COLOR_YELLOW, "Optiune dezactivata!");
	else {
		format(string, sizeof(string), "Acum vei vedea ce se scrie pe chatul clanului %d.", cid);
		SCM(playerid, COLOR_YELLOW, string);
	}
	return true;
}
YCMD:fspec(playerid, params[], help) {
	new fid, string[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "i", fid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/fspec <fid (0=off)>");
	if(fid < 0 && fid > 15) return SCM(playerid, COLOR_GREY, "ID Invalid! (0-15)");
	if(PlayerInfo[playerid][pMember] == fid && fid != 0) return SCM(playerid, COLOR_GREY, "Faci parte din acea factiune!");
	SpecFaction[playerid] = fid;
	if(fid == 0) return SCM(playerid, COLOR_YELLOW, "Optiune dezactivata!");
	else {
		format(string, sizeof(string), "Acum vei vedea ce se scrie pe chatul factiunii %s (%d)!", FactionName(fid), fid);
		SCM(playerid, COLOR_YELLOW, string);
	}
	return true;
}

YCMD:despawncarid(playerid, params[], help) {
	new carid;
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "i", carid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/vre <car id>");
	SetVehicleToRespawn(carid);
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s respawned vehicle %d.", GetName(playerid), carid);
	SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}

stock CheckDespawnCar(carid) {
	new x[15];
	format(x, 15, "%s", CarInfo[carid][cTime] != -1 ? CalculateTime(CarInfo[carid][cTime]-gettime()) : ("none"));
	return x;
}
YCMD:checkv(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_RED, "Syntax: {FFFFFF}/chekcv <playerid/name>");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Acel player nu este connectat!");
	if(Iter_Count(MyVehicle[id]) == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are un vehicul!");

	new szTitle[60], szDialog[3000], x;
	format(szTitle, sizeof(szTitle), "%s's Vehicles {E3DE31}(%d/%d)", GetName(id), Iter_Count(MyVehicle[id]), GetSlots(id));
	strcat(szDialog, "Vehicul\tStatus\tDespawn Time\tOthers details\n");
	foreach(new car: MyVehicle[id]) {
		format(szDialog, sizeof(szDialog), "%s%s\t%s\t%s\t%s\n", szDialog, aVehicleNames[CarInfo[car][cModel]-400], CarInfo[car][Spawned] > 0 ? IsVehicleOccupied(CarInfo[car][Spawned]) ? ("{FFFF00}[occupied]") : ("{26B309}[spawned]") : ("{FF0000}[despawned]"), CheckDespawnCar(car), TotalUp(car)); 
		PlayerInfo[playerid][pCarKey][x] = car;
		x++;
	}
	CarEID[playerid] = id;
	Dialog_Show(playerid, DIALOG_EDITCARS, DIALOG_STYLE_TABLIST_HEADERS, szTitle, szDialog, "Ok", "Exit");
	return true;
}
ShowPlayerVehicle(playerid, bool:type) {
	new szTitle[60], szDialog[3000], x = 0;
	if(Iter_Count(MyVehicle[playerid]) == 0) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu ai un vehicul personal!");
	
	format(szTitle, sizeof(szTitle), "Your Vehicles {E3DE31}%d/%d", Iter_Count(MyVehicle[playerid]), GetSlots(playerid));
	strcat(szDialog, "Vehicul\tStatus\tDespawn Time\tOthers details\n");
	foreach(new car: MyVehicle[playerid]) {
		format(szDialog, sizeof(szDialog), "%s%s\t%s\t%s\t%s\n", szDialog, aVehicleNames[CarInfo[car][cModel]-400], CarInfo[car][Spawned] != 0 ? IsVehicleOccupied(CarInfo[car][Spawned]) ? ("{FFFF00}[occupied]") : ("{26B309}[spawned]") : ("{FF0000}[despawned]"), CheckDespawnCar(car), TotalUp(car)); 
		PlayerInfo[playerid][pCarKey][x] = car;
		x++;
	}
	if(type) 
		Dialog_Show(playerid, DIALOG_STICKET, DIALOG_STYLE_TABLIST_HEADERS, szTitle, szDialog, "Ok", "Exit");		
	else
		Dialog_Show(playerid, DIALOG_GARAGE, DIALOG_STYLE_TABLIST_HEADERS, szTitle, szDialog, "Ok", "Exit");

	return true;
}
stock TotalUp(carid) {
	new up, stage[20], neon[20];
	gString[0] = EOS;

	if(CarInfo[carid][cLegendary] == 1) up ++;
	if(CarInfo[carid][cVip] != 0) up ++;
	else if(strlen(CarInfo[carid][cText]) > 3) up ++;
	if(CarInfo[carid][cNeon]) up++;
	if(CarInfo[carid][cRainBow]) up ++;
	if(CarInfo[carid][cStage] > 0) up ++;
	
	format(stage, sizeof(stage), "{509AE4}[S: %d/3] ", CarInfo[carid][cStage]);
	if(CarInfo[carid][cNeon]) format(neon, sizeof(neon), "{%s}[N] ", NeonColor[CarInfo[carid][cNeon]-1]);

	format(gString, 100, "%s%s%s%s%s", CarInfo[carid][cLegendary] ? ("{F28644}[P] ") : (""), CarInfo[carid][cVip] ? ("{FFE802}[VP] ") : strlen(CarInfo[carid][cText]) > 3 ? ("{E3DE31}[V] ") : (""), CarInfo[carid][cRainBow] ? ("{791DD5}[R] ") : (""), CarInfo[carid][cStage] ? stage : (""), CarInfo[carid][cNeon] ? neon : (""));
	return up != 0 ? gString : ("none");
}

YCMD:closestcar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_LGREEN, AdminOnly);

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_WHITE, "You're already in a car.");

	new vehicleid = GetClosestVehicle(playerid);
	if(GetVehicleVirtualWorld(vehicleid) == GetPlayerVirtualWorld(playerid)) {
		PutPlayerInVehicleEx(playerid, vehicleid, 0);
		gString[0] = EOS;
		format(gString, 45, "You teleported to the vehicle %d.", vehicleid);
		SCM(playerid, COLOR_GREY, gString);
	}
	return true;
}

timer CancelTestDrive[180000](playerid) return CancelDriveTest(playerid), SCM(playerid, COLOR_YELLOW, "Timpul disponibil pentru test-drive a expirat.");
function CancelDriveTest(playerid) {
	if(TestingModel[playerid] == 0) return true;  
	SetPlayerPosEx(false, playerid, 1487.0498,-2287.2930,13.7529);
	SetPlayerInterior(playerid, 0);
	ShowCamera(playerid);	
	TestingModel[playerid] = 0;
	DestroyVehicle(DealerCar[playerid]);
	DealerCar[playerid] = CreateVehicleEx(DSModels[DealerID[playerid]][dModel],1463.3318,-2299.0806,13.6845,281.2260,DealerCarColor1[playerid],DealerCarColor2[playerid], -1, 0);
	SetVehicleVirtualWorld(DealerCar[playerid],playerid+1);
	LinkVehicleToInterior(DealerCar[playerid], 0);
	ShowDealershipTextdraws(playerid);
	SelectTextDraw(playerid, 0xFF0000FF);
	TogglePlayerControllable(playerid, 0);
	SetPlayerVirtualWorld(playerid, playerid+1);
	new e,l,a,d,b,bo,o;
	GetVehicleParamsEx(DealerCar[playerid],e,l,a,d,b,bo,o);
	SetVehicleParamsEx(DealerCar[playerid],0,l,a,d,b,bo,o);
	return true;
}
function ShowDealershipTextdraws(playerid) {
	new szText[300];
	if(!PlayerMoney(playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice])) format(szText, sizeof(szText), "Name: %s~n~max. speed %d km/h~n~Price: ~g~$%s~n~~w~~h~Stock: %d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], Model_TopSpeed(GetVehicleModel(DealerCar[playerid])), FormatNumber(DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice]), DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock]);
	else if(PlayerMoney(playerid, DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice])) format(szText, sizeof(szText), "Model: %s~n~max. speed %d km/h~n~Price: ~r~$%s~n~~w~~h~Stock: %d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], Model_TopSpeed(GetVehicleModel(DealerCar[playerid])), FormatNumber(DSModels[SelectedCar[playerid][DealerID[playerid]]][dPrice]), DSModels[SelectedCar[playerid][DealerID[playerid]]][dStock]);
	PlayerTextDrawSetString(playerid, InfoDS, szText);
	PlayerTextDrawShow(playerid, InfoDS);
	PlayerTextDrawShow(playerid, BuyModel), PlayerTextDrawShow(playerid, TestModel),
	PlayerTextDrawShow(playerid, ExitDS), PlayerTextDrawShow(playerid, BackCar), PlayerTextDrawShow(playerid, NextCar);
	for(new i = 0; i < 5; i++) PlayerTextDrawShow(playerid, DSTds[i]);
	if(PlayerInfo[playerid][pAdmin] < 7) PlayerTextDrawHide(playerid, DSTds[3]);
	return true;
}

function HideDealershipTextdraws(playerid) {
	PlayerTextDrawHide(playerid, InfoDS),
	PlayerTextDrawHide(playerid, CarsCategory), PlayerTextDrawHide(playerid, BikesCategory),
	PlayerTextDrawHide(playerid, BoatsCategory), PlayerTextDrawHide(playerid, AirCategory), PlayerTextDrawHide(playerid, SpecialCategory),
	PlayerTextDrawHide(playerid, BuyModel), PlayerTextDrawHide(playerid, TestModel),
	PlayerTextDrawHide(playerid, ExitDS), PlayerTextDrawHide(playerid, BackCar), PlayerTextDrawHide(playerid, NextCar);
	for(new i = 0; i < 5; i++) PlayerTextDrawHide(playerid, DSTds[i]);
	return true;
}
stock DestroyPlayerCar(dbid) {
	if(CarInfo[dbid][Spawned] == 0) return true;
	
	VehicleOwned[CarInfo[dbid][Spawned]] = 0;
	VehicleSQL[CarInfo[dbid][Spawned]] = 0;
	CarInfo[dbid][cTime] = -1;
		
	new Float: Pos[3];
	GetVehiclePos(CarInfo[dbid][Spawned], Pos[0], Pos[1], Pos[2]);
	if(strlen(CarInfo[dbid][cText]) >= 3) DestroyDynamicObject(nameobject[CarInfo[dbid][Spawned]]);
	if(CarInfo[dbid][cNeon]) {
		DestroyDynamicObject(NeonObj[0][CarInfo[dbid][Spawned]]);
		DestroyDynamicObject(NeonObj[1][CarInfo[dbid][Spawned]]);
	}
	Iter_Remove(PersonalVSpawned, dbid);
	MyVehicleSpawn[CarInfo[dbid][cOnline]] --;
	CarInfo[dbid][cFuel] = Gas[CarInfo[dbid][Spawned]];
	new query[256];
	mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Fuel`='%d' WHERE `ID`='%d'", CarInfo[dbid][cFuel], CarInfo[dbid][cID]);
	mysql_tquery(SQL, query, "", "");

	CarInfo[dbid][cLastPos][0] = Pos[0];
	CarInfo[dbid][cLastPos][1] = Pos[1];
	CarInfo[dbid][cLastPos][2] = Pos[2];	
		
	DestroyVehicle(CarInfo[dbid][Spawned]);
	CarInfo[dbid][Spawned] = 0;
	return true;
}
function SetTunning(idd) {
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(CarInfo[idd][Spawned],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(CarInfo[idd][Spawned],0,lights,alarm,CarInfo[idd][cLock],bonnet,boot,objective);
	for(new i = 0; i < 14; i++) if(CarInfo[idd][cMod][i] != 0) AddVehicleComponent(CarInfo[idd][Spawned], CarInfo[idd][cMod][i]);
	SetVehicleNumberPlate(CarInfo[idd][Spawned], CarInfo[idd][cLicense]);
	ChangeVehiclePaintjob(CarInfo[idd][Spawned], CarInfo[idd][paintjob]);
	return true;
}

FormatNumber(number) {
   new Str[15];
   format(Str, 15, "%d", number);
   if(strlen(Str) < sizeof(Str)) {
	  if(number >= 1000 && number < 10000) strins( Str, ",", 1, sizeof(Str));
	  else if(number >= 10000 && number < 100000) strins(Str, ",", 2, sizeof(Str));
	  else if(number >= 100000 && number < 1000000) strins(Str, ",", 3, sizeof(Str));
	  else if(number >= 1000000 && number < 10000000) strins(Str, ",", 1, sizeof(Str)),strins(Str, ",", 5, sizeof(Str));
	  else if(number >= 10000000 && number < 100000000) strins(Str, ",", 2, sizeof(Str)),strins(Str, ",", 6, sizeof(Str));
	  else if(number >= 100000000 && number < 1000000000) strins(Str, ",", 3, sizeof(Str)),strins(Str, ",", 7, sizeof(Str));
	  else if(number >= 1000000000)
		   strins(Str, ",", 1, sizeof(Str)),
		   strins(Str, ",", 5, sizeof(Str)),
		   strins(Str, ",", 9, sizeof(Str));
	  else format(Str, 10, "%d", number);
   }
   return Str;
}

FormatNumbers(number) {

   new Str[15];
   format(Str, 15, "%d", number);
   if(strlen(Str) < sizeof(Str)) {
	  if(number >= 1000 && number < 10000) strins( Str, ".", 1, sizeof(Str));
	  else if(number >= 10000 && number < 100000) strins(Str, ".", 2, sizeof(Str));
	  else if(number >= 100000 && number < 1000000) strins(Str, ".", 3, sizeof(Str));
	  else if(number >= 1000000 && number < 10000000) strins(Str, ".", 1, sizeof(Str)),strins(Str, ".", 5, sizeof(Str));
	  else if(number >= 10000000 && number < 100000000) strins(Str, ".", 2, sizeof(Str)),strins(Str, ".", 6, sizeof(Str));
	  else if(number >= 100000000 && number < 1000000000) strins(Str, ".", 3, sizeof(Str)),strins(Str, ".", 7, sizeof(Str));
	  else if(number >= 1000000000)
		   strins(Str, ".", 1, sizeof(Str)),
		   strins(Str, ".", 5, sizeof(Str)),
		   strins(Str, ".", 9, sizeof(Str));
	  else format(Str, 10, "%d", number);
   }
   return Str;
}

FormatNumberss(number[]) {
	new Str[25];
	format(Str, 25, "%s", number);
	switch(strlen(number)) {
		case 4: strins(Str, ".", 1, sizeof(Str));
		case 5: strins(Str, ".", 2, sizeof(Str));
		case 6: strins(Str, ".", 3, sizeof(Str));
		case 7: strins(Str, ".", 1, sizeof(Str)), strins(Str, ".", 5, sizeof(Str));
		case 8: strins(Str, ".", 2, sizeof(Str)), strins(Str, ".", 6, sizeof(Str));
		case 9: strins(Str, ".", 3, sizeof(Str)), strins(Str, ".", 7, sizeof(Str));
		case 10: strins(Str, ".", 1, sizeof(Str)), strins(Str, ".", 5, sizeof(Str)), strins(Str, ".", 9, sizeof(Str));
		case 11: strins(Str, ".", 2, sizeof(Str)), strins(Str, ".", 6, sizeof(Str)), strins(Str, ".", 10, sizeof(Str));
		case 12: strins(Str, ".", 3, sizeof(Str)), strins(Str, ".", 7, sizeof(Str)), strins(Str, ".", 11, sizeof(Str));
		case 13: strins(Str, ".", 1, sizeof(Str)), strins(Str, ".", 5, sizeof(Str)), strins(Str, ".", 9, sizeof(Str)), strins(Str, ".", 14, sizeof(Str));
		case 14: strins(Str, ".", 2, sizeof(Str)), strins(Str, ".", 6, sizeof(Str)), strins(Str, ".", 10, sizeof(Str)), strins(Str, ".", 15, sizeof(Str));
		case 15: strins(Str, ".", 3, sizeof(Str)), strins(Str, ".", 7, sizeof(Str)), strins(Str, ".", 11, sizeof(Str)), strins(Str, ".", 16, sizeof(Str));
		case 16: strins(Str, ".", 1, sizeof(Str)), strins(Str, ".", 5, sizeof(Str)), strins(Str, ".", 9, sizeof(Str)), strins(Str, ".", 14, sizeof(Str)), strins(Str, ".", 18, sizeof(Str));
		case 17: strins(Str, ".", 2, sizeof(Str)), strins(Str, ".", 6, sizeof(Str)), strins(Str, ".", 10, sizeof(Str)), strins(Str, ".", 15, sizeof(Str)), strins(Str, ".", 19, sizeof(Str));
		case 18: strins(Str, ".", 3, sizeof(Str)), strins(Str, ".", 7, sizeof(Str)), strins(Str, ".", 11, sizeof(Str)), strins(Str, ".", 16, sizeof(Str)), strins(Str, ".", 20, sizeof(Str));
		case 19: strins(Str, ".", 1, sizeof(Str)), strins(Str, ".", 5, sizeof(Str)), strins(Str, ".", 9, sizeof(Str)), strins(Str, ".", 14, sizeof(Str)), strins(Str, ".", 18, sizeof(Str)), strins(Str, ".", 22, sizeof(Str));
		case 20: strins(Str, ".", 2, sizeof(Str)), strins(Str, ".", 6, sizeof(Str)), strins(Str, ".", 10, sizeof(Str)), strins(Str, ".", 15, sizeof(Str)), strins(Str, ".", 19, sizeof(Str)), strins(Str, ".", 23, sizeof(Str));
		case 21: strins(Str, ".", 3, sizeof(Str)), strins(Str, ".", 7, sizeof(Str)), strins(Str, ".", 11, sizeof(Str)), strins(Str, ".", 16, sizeof(Str)), strins(Str, ".", 20, sizeof(Str)), strins(Str, ".", 24, sizeof(Str));
		case 22: strins(Str, ".", 1, sizeof(Str)), strins(Str, ".", 5, sizeof(Str)), strins(Str, ".", 9, sizeof(Str)), strins(Str, ".", 14, sizeof(Str)), strins(Str, ".", 18, sizeof(Str)), strins(Str, ".", 22, sizeof(Str)), strins(Str, ".", 26, sizeof(Str));
		case 23: strins(Str, ".", 2, sizeof(Str)), strins(Str, ".", 6, sizeof(Str)), strins(Str, ".", 10, sizeof(Str)), strins(Str, ".", 15, sizeof(Str)), strins(Str, ".", 19, sizeof(Str)), strins(Str, ".", 23, sizeof(Str)), strins(Str, ".", 27, sizeof(Str));
		case 24: strins(Str, ".", 3, sizeof(Str)), strins(Str, ".", 7, sizeof(Str)), strins(Str, ".", 11, sizeof(Str)), strins(Str, ".", 16, sizeof(Str)), strins(Str, ".", 20, sizeof(Str)), strins(Str, ".", 24, sizeof(Str)), strins(Str, ".", 28, sizeof(Str));
		default: format(Str, 25, "%s", number);
	}
	return Str;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp) {
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

function FindSpawnID(car) {
	if(VehicleOwned[car] != 0) return VehicleSQL[car];
	return false;
}
function GetDistanceBetweenPlayers(p1,p2) {
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2)) return -1;
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatround(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
stock GetDistance2( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 ) return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) );
forward Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
public Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));

stock GetClosestVehicle(playerid) {
	new closestdist = 999999999, closestvehicle = -1;
	new Float:x[2],Float:y[2],Float:z[2],distance;
	for(new i; i < MAX_VEHICLES; i++) {
		GetVehiclePos(i,x[0],y[0],z[0]);
		GetPlayerPos(playerid,x[1],y[1],z[1]);
		distance = floatround(GetDistanceBetweenPoints(x[0],y[0],z[0],x[1],y[1],z[1]));
		if(distance < closestdist) {
			closestdist = distance;
			closestvehicle = i;
		}
	}
	return closestvehicle;
}
stock GetClosestVehicle2(playerid) {
	new Float: Distance;
	if(!Distance) Distance = 200.0;
	new Float:X[2], Float:Y[2], Float:Z[2], Float:NearestPos = floatabs(Distance), NearestVehicle = INVALID_VEHICLE_ID;
	GetPlayerPos(playerid, X[0], Y[0], Z[0]);
	for(new i; i < MAX_VEHICLES; i++) {
		if(!IsVehicleStreamedIn(i, playerid) || IsPlayerInVehicle(playerid, i)) continue;
		GetVehiclePos(i, X[1], Y[1], Z[1]);
		if(NearestPos > GetDistanceBetweenPoints(X[0], Y[0], Z[0], X[1], Y[1], Z[1])) NearestPos = GetDistanceBetweenPoints(X[0], Y[0], Z[0], X[1], Y[1], Z[1]), NearestVehicle = i;
	}
	return NearestVehicle;
}
function CarPriceValid(model) {
	for(new i = 0; i < 150; i ++) {
		if(DSModels[i][dModel] == model) return DSModels[i][dPrice];
	}
	return false;
}
function LoadPlayerCars(playerid) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `cars` WHERE `Userid`='%d' LIMIT %d", PlayerInfo[playerid][pSQLID], MAX_PLAYER_VEHICLE);
	mysql_tquery(SQL, gQuery, "SQL_LoadVehicles", "i", playerid);
	return true;
}
function SQL_LoadVehicles(playerid) {
	new componenets[20], coordonate[50], Mods[50];
	if(cache_num_rows() == 0) 
		return true;

	for(new i = 0; i < cache_num_rows(); i++) {
		new id = Iter_Free(PersonalVehicles);

		new ORM:ormid = orm_create("cars");
		
		orm_addvar_string(ormid, CarInfo[id][cOwner], 32, "Owner");																	   
		orm_addvar_string(ormid, CarInfo[id][cText], 32, "Text");																	   
		orm_addvar_string(ormid, CarInfo[id][cLicense], 32, "License");

		orm_addvar_int(ormid, CarInfo[id][cID], "ID");
		orm_addvar_int(ormid, CarInfo[id][cModel], "Model");	 
		orm_addvar_int(ormid, CarInfo[id][cNeon], "Neon");																   			
		orm_addvar_float(ormid, CarInfo[id][cLocationx], "Locationx");																	  		
		orm_addvar_float(ormid, CarInfo[id][cLocationy], "Locationy");																	  		
		orm_addvar_float(ormid, CarInfo[id][cLocationz], "Locationz");																	  		
		orm_addvar_float(ormid, CarInfo[id][cAngle], "Angle");		 
		orm_addvar_float(ormid, CarInfo[id][KM], "KM");															  			
		orm_addvar_int(ormid, CarInfo[id][cTemporarTime], "TemporarTime");																		
		orm_addvar_int(ormid, CarInfo[id][cTemporar], "Temporar");																					
		orm_addvar_int(ormid, CarInfo[id][cVirtual], "Virtual");																					
		orm_addvar_int(ormid, CarInfo[id][cColorOne], "ColorOne");																					
		orm_addvar_int(ormid, CarInfo[id][cColorTwo], "ColorTwo");																		 		
		orm_addvar_int(ormid, CarInfo[id][cTextColor], "ColorText");																				
		orm_addvar_int(ormid, CarInfo[id][cValue], "Value");																					
		orm_addvar_int(ormid, CarInfo[id][cAlarm], "Alarm");																					
		orm_addvar_int(ormid, CarInfo[id][cLock], "Lockk");																	   																					   				
		orm_addvar_int(ormid, CarInfo[id][paintjob], "paintjob");																	   																			  				
		orm_addvar_int(ormid, CarInfo[id][Userid], "Userid");
		orm_addvar_int(ormid, CarInfo[id][cTimeGoto], "TimeGoto");																	   			
		orm_addvar_int(ormid, CarInfo[id][Confiscated], "Confiscated");																	   	
		orm_addvar_int(ormid, CarInfo[id][cSpecial], "Special");																					
		orm_addvar_int(ormid, CarInfo[id][cTax], "Tax");																						
		orm_addvar_int(ormid, CarInfo[id][cPoints], "Points");																					
		orm_addvar_int(ormid, CarInfo[id][cFuel], "Fuel");																						
		orm_addvar_int(ormid, CarInfo[id][cVip], "VIP");																						
		orm_addvar_int(ormid, CarInfo[id][cRainBow], "RainBow");																					
		orm_addvar_int(ormid, CarInfo[id][cLegendary], "Legendary");																				
		orm_addvar_int(ormid, CarInfo[id][cStage], "Stage");																																						 			
		orm_addvar_int(ormid, CarInfo[id][Dayss], "Days");																						
		orm_addvar_string(ormid, componenets, 20, "Components");
		orm_addvar_string(ormid, Mods, 50, "Mods");
		orm_addvar_string(ormid, coordonate, 50, "Cordonate");

		orm_apply_cache(ormid, i);

		CarInfo[id][cMaxSpeed] = Model_TopSpeed(CarInfo[id][cModel]);
		CarInfo[id][cTime] = -1;
		CarInfo[id][cOnline] = playerid;

		sscanf(Mods, "p<|>iiiiiiiiiiiiii", CarInfo[id][cMod][0], CarInfo[id][cMod][1], CarInfo[id][cMod][2], CarInfo[id][cMod][3], CarInfo[id][cMod][4], CarInfo[id][cMod][5], CarInfo[id][cMod][6],
			CarInfo[id][cMod][7], CarInfo[id][cMod][8], CarInfo[id][cMod][9], CarInfo[id][cMod][10], CarInfo[id][cMod][11], CarInfo[id][cMod][12], CarInfo[id][cMod][13]);
		sscanf(coordonate, "p<|>ffffff", CarInfo[id][cVipPos][0], CarInfo[id][cVipPos][1], CarInfo[id][cVipPos][2], CarInfo[id][cVipPos][3], CarInfo[id][cVipPos][4], CarInfo[id][cVipPos][5]);

		Iter_Add(MyVehicle[playerid], id);
		Iter_Add(PersonalVehicles, id);
	}
	return true;
}
function LoadStuffs() {
	if(cache_num_rows() > 0) {
		cache_get_value_name_int(0, "Tax", Tax);
		cache_get_value_name_int(0, "TaxValue", TaxValue);
		cache_get_value_name_int(0, "MaxPlayers", MaxPlayers); 
		cache_get_value_name(0, "MaxPlayersDate", MaxPlayersDate, 32); 
		cache_get_value_name(0, "StaffMotd", StaffMotd, 64); 	
		cache_get_value_name_int(0, "goal", ServerGoal);
		new stocks[30];
		cache_get_value_name(0, "ServerStock", stocks);
		sscanf(stocks, "p<|>iiiii", ServerStock[0], ServerStock[1], ServerStock[2], ServerStock[3], ServerStock[4]);
		if(ServerGoal >= MAXGOAL) TerminatJobGoal = 1;
		gString[0] = EOS;
		format(gString, sizeof(gString), "{597F9C}(Stock: %d)\n{20F5F1}Vehicle Crate{FFFFFF}\nUse {20F5F1}/buycrate{FFFFFF} to buy crate\n{FFFFFF}Crate Price: {20F5F1}7000  RPoints {FFFFFF} / {20F5F1}700 Premium Points", ServerStock[1]);
		LabelCrates = CreateDynamic3DTextLabel(gString, 0xFFFFFFFF, 144.2511,-1945.6802,3.7734, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		printf("Stuff Loaded");
	}
}
function LoadFaction() {
	new x;
 	for(new i, j = cache_num_rows(); i != j; ++i) {
	   	cache_get_value_name_int(i, "ID", x); 
	   	FactionInfo[x][fID] = x;
	   	cache_get_value_name_int(i, "Rank1", FactionInfo[x][fRank1]); 
	   	cache_get_value_name_int(i, "Rank2", FactionInfo[x][fRank2]); 
	   	cache_get_value_name_int(i, "Rank3", FactionInfo[x][fRank3]); 
	   	cache_get_value_name_int(i, "Rank4", FactionInfo[x][fRank4]); 
	   	cache_get_value_name_int(i, "Rank5", FactionInfo[x][fRank5]); 
	   	cache_get_value_name_int(i, "Rank6", FactionInfo[x][fRank6]); 
	}	
	return false;
}
function LoadDSVeh() {
	dsvehs = cache_num_rows();
	for(new i = 1; i <= dsvehs; i++) {
		new j = i - 1;
		cache_get_value_name_int(j, "ID", DSModels[i][dID]);				
		cache_get_value_name_int(j,	"Model", DSModels[i][dModel]);			 
		cache_get_value_name_int(j, "Price", DSModels[i][dPrice]);			 
		cache_get_value_name_int(j, "Stock", DSModels[i][dStock]);		  	
	}
	printf("[MySQL] Dealership models: %d", dsvehs);
}

function LoadDsVehs(playerid) {
	for(new i = 0; i <= dsvehs; i++) SelectedCar[playerid][i] = DSModels[i][dID];
	TotalDealerCars[playerid] = dsvehs;
	return true;
}
YCMD:movehouse(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new house;
	if(sscanf(params, "i", house)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/movehouse <house id>");
	if(house < 1 || house > housess) return SCM(playerid, COLOR_GREY, "Invalid house!");
	SetPVarInt(playerid, "MoveID", house);
	Dialog_Show(playerid, DIALOG_MOVEHOUSE, DIALOG_STYLE_LIST, "Move house", "Interior\nExterior", "Ok", "Exit");
	return true;	
}
YCMD:movebiz(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new house;
	if(sscanf(params, "i", house)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/movebiz <biz id>");
	if(house < 1 || house > sizeof(BizzInfo)) return SCM(playerid, COLOR_GREY, "Invalid biz!");
	SetPVarInt(playerid, "MoveID", house);
	Dialog_Show(playerid, DIALOG_MOVEBIZ, DIALOG_STYLE_LIST, "Move biz", "Interior\nExterior", "Ok", "Exit");
	return true;	
}
function UpdateLabel(update, h) {
	gString[0] = EOS;
	new pret[70];
	switch(update) {
		case 1: {
			//DestroyDynamicMapIcon(MapIconHouse[h]);
			switch(HouseInfo[h][hValue]) {
				case 0: {
					switch(HouseInfo[h][hOwned]) {
						case 0: MapIconHouse[h] = CreateDynamicMapIcon(HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 31, 0,-1,-1,-1,1000.0);
						case 1: MapIconHouse[h] = CreateDynamicMapIcon(HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 32, 0, -1,-1,-1,1000.0);
					}
				}
				default: {
					//MapIconHouse[h] = CreateDynamicMapIcon(HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 31, 0, -1,-1,-1,1000.0);
					format(pret, sizeof(pret), "\n{FFFFFF}Price: {C31F1F}$%s {FFFFFF}(/buyhouse)", FormatNumbers(HouseInfo[h][hValue]));
				}
			}
			new size[30];
			switch(HouseInfo[h][hSize]) {
				case 1: size = "Small";
				case 2: size = "Medium";
				case 3: size = "Big";
			}
			switch(HouseInfo[h][hOwned]) {
				case 0: {
					DestroyDynamicPickup(HouseInfo[h][hPickupID]);
					HouseInfo[h][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
					format(gString, sizeof(gString), "{FFFFFF}House: {C31F1F}%d\n{FFFFFF}Size: {C31F1F}%s\n{FFFFFF}Owner: {C31F1F}The State\n{FFFFFF}Level: {C31F1F}%d%s", HouseInfo[h][hID], size, HouseInfo[h][hLevel], pret);
					UpdateDynamic3DTextLabelText(HouseLabel[h], 0x0053CFD1, gString);
				}
				case 1: {
					switch(HouseInfo[h][hRentabil]) {
						case 0: format(gString, sizeof(gString), "{C31F1F}%s\n{FFFFFF}House: {C31F1F}%d\n{FFFFFF}Size: {C31F1F}%s\n{FFFFFF}Owner: {C31F1F}%s\n{FFFFFF}Level: {C31F1F}%d%s", HouseInfo[h][hDiscription], HouseInfo[h][hID], size, HouseInfo[h][hOwner], HouseInfo[h][hLevel], pret);				
						case 1: format(gString, sizeof(gString), "{C31F1F}%s\n{FFFFFF}House: {C31F1F}%d\n{FFFFFF}Size: {C31F1F}%s\n{FFFFFF}Owner: {C31F1F}%s\n{FFFFFF}Rent: {C31F1F}$250{FFFFFF} per level (/rentroom)\n{FFFFFF}Level: {C31F1F}%d%s", HouseInfo[h][hDiscription], HouseInfo[h][hID], size, HouseInfo[h][hOwner], HouseInfo[h][hLevel], pret);
					}
					UpdateDynamic3DTextLabelText(HouseLabel[h], 0x0053CFD1, gString);
					DestroyDynamicPickup(HouseInfo[h][hPickupID]);
					HouseInfo[h][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
				}
			}
			PickupInfo[HouseInfo[h][hPickupID]][pkID] = h;
			PickupInfo[HouseInfo[h][hPickupID]][pkType] = 1;
		}
		case 2: {
			if(BizzInfo[h][bBuyPrice] != 0) format(pret, sizeof(pret), "\n{FFFFFF}Price: {32A3E7}$%s {FFFFFF}(/buybiz)", FormatNumbers(BizzInfo[h][bBuyPrice]));
			if(BizzInfo[h][bType] != 19) format(gString, sizeof(gString), "{32A3E7}%s\n{FFFFFF}Business: {32A3E7}%d\n{FFFFFF}Owner: {32A3E7}%s\n{FFFFFF}Fee: {32A3E7}$%d%s", BizzInfo[h][bMessage], h, BizzInfo[h][bOwner], BizzInfo[h][bFee], pret);
			else format(gString, sizeof(gString), "Pay 'n' Spray\n{FFFFFF}Owner: {38b61a}%s\n{FFFFFF}Press ('{38b61a}H{FFFFFF}' key) to enter", BizzInfo[h][bOwner]);
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			BizzLabel[h] = CreateDynamic3DTextLabel(gString, 0x38b61aFF,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
		case 3: {
			format(gString, sizeof(gString),"Garages\nID: {F3ED27}%d\n{FFFFFF}Owner: {F3ED27}%s\n\nPress {F3ED27}Y {FFFFFF}to enter the garage", GarageInfo[h][gID], GarageInfo[h][gOwner]);
			UpdateDynamic3DTextLabelText(GarageLabel[h], 0xFFFFFF00, gString);
		}
		case 4: {
			DestroyDynamic3DTextLabel(ClanHqLabel[h]);
			DestroyDynamicPickup(ClanHQInfo[h][cPickup]);
			ClanHQInfo[h][cPickup] = CreateDynamicPickup(1314, 23, ClanHQInfo[h][cPosX], ClanHQInfo[h][cPosY], ClanHQInfo[h][cPosZ]);
			if(ClanHQInfo[h][cClan] != 0) {
				new clanid = ClanHQInfo[h][cClan];
				format(gString, sizeof(gString),"ID: {%s}%d\n{FFFFFF}Clans: {%s}%s{FFFFFF} (ID: {%s}%d{FFFFFF})", ClanInfo[clanid][clColor], ClanHQInfo[h][cID], ClanInfo[clanid][clColor], ClanInfo[ClanHQInfo[h][cClan]][clName], ClanInfo[clanid][clColor], ClanInfo[ClanHQInfo[h][cClan]][cID]);
				ClanHqLabel[h] = CreateDynamic3DTextLabel(gString, 0xFFFFFF00, ClanHQInfo[h][cPosX], ClanHQInfo[h][cPosY], ClanHQInfo[h][cPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 30.0);	
			}
			else {
				format(gString, sizeof(gString),"ID: {ADDB5D}%d\n{FFFFFF}Price: {ADDB5D}%s Premium Points\n{FFFFFF}To buy this hq clan ({ADDB5D}/buyclanhq{FFFFFF})", ClanHQInfo[h][cID], FormatNumber(ClanHQInfo[h][cPrice]));
				ClanHqLabel[h] = CreateDynamic3DTextLabel(gString, 0xFFFFFF00, ClanHQInfo[h][cPosX], ClanHQInfo[h][cPosY], ClanHQInfo[h][cPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 30.0);			
			}
			PickupInfo[ClanHQInfo[h][cPickup]][pkID] = h;
			PickupInfo[ClanHQInfo[h][cPickup]][pkType] = 4;
		}
	}
	return true;
}
stock DecimalNumber(playerid) {
	new str[30];
	new money = PlayerInfo[playerid][pPhone];
	if(money >= 0) {
		format(str, sizeof(str), "%d", money);
		if(1000000 <= money < 10000000) strins(str, "-", 3, sizeof(str));
	}
	return str;
}
function WeaponObject(wid) {
	switch(wid) {
		case 1: return 331; 
		case 2: return 332; 
		case 3: return 333; 
		case 5: return 334; 
		case 6: return 335; 
		case 7: return 336; 
		case 10: return 321; 
		case 11: return 322; 
		case 12: return 323; 
		case 13: return 324; 
		case 14: return 325; 
		case 15: return 326; 
		case 23: return 347; 
		case 24: return 348; 
		case 25: return 349; 
		case 26: return 350; 
		case 27: return 351; 
		case 28: return 352; 
		case 29: return 353; 
		case 30: return 355; 
		case 31: return 356; 
		case 33: return 357; 
		case 4: return 335; 
		case 34: return 358; 
		case 41: return 365; 
		case 42: return 366; 
		case 43: return 367; 
	}
	return false;
}						
function DestroyPickups(turfid) {
	for(new i = 0; i < MAX_PICKUPSW; i++) {
		if(Pickups[i][psWar] == turfid && Pickups[i][psID] != 0) {
			DestroyDynamicPickup(Pickups[i][psID]);
			Pickups[i][psType] = 0;
			Pickups[i][psID] = 0;
			Pickups[i][psWar] = 0;	
		}
	}
	return true;
}
function CheckIDEmpty() {
	for(new i = 0; i < MAX_PICKUPSW; i++) {
		if(Pickups[i][psID] == 0) return i;
	}
	return false;
}
function IsAFLYCar(carid) {
	if(GetVehicleModel(carid) == 592 || GetVehicleModel(carid) == 577 || GetVehicleModel(carid) == 511 || GetVehicleModel(carid) == 512 || GetVehicleModel(carid) == 593 || GetVehicleModel(carid) == 520 || GetVehicleModel(carid) == 553 || GetVehicleModel(carid) == 476 || GetVehicleModel(carid) == 519 || GetVehicleModel(carid) == 460 || GetVehicleModel(carid) == 513 || GetVehicleModel(carid) == 487) return true;
	return false;
}
function IsABOATCar(carid) {
	new modelid = GetVehicleModel(carid);
	if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595) return true;
	return false;
}
function WantedTime2() {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pWantedLevel] >= 1) {
			if(PlayerInfo[i][pWantedLevel] >= 1) WantedTime[i] ++, UpdateVar(i, "WantedTime", WantedTime[i]);
		}
	}
	return true;
}
function SendJobMessage(job, color, string[]) {
	foreach(new i: Player) {
		if(PlayerInfo[i][pJob] == job) SCM(i, color, string);
	}
	return true;
}
YCMD:emails(playerid, params[], help) return ShowEmails(playerid, 0);
YCMD:achivemets(playerid, params[], help) return ShowAchivemets(playerid);

function ShowAchivemets(playerid) {
	new szDialog[164], szDialog2[4000], culori[10];
	strcat(szDialog2, "Achievement\tStatus\n");
	for(new i = 0; i < 32; i++) {
		if(PlayerInfo[playerid][pAchievementStatus][i] == 1) { culori = "{3DBF0A}"; }
		else if(PlayerInfo[playerid][pAchievementStatus][i] == 0) { culori = "{CC0E0E}"; }
		format(szDialog, sizeof(szDialog), "%s%s\t%s\n", culori, achievementNames(i), (PlayerInfo[playerid][pAchievementStatus][i] == 1) ? ("{3DBF0A}Realizare completa") : ("{CC0E0E}Realizare incompleta"));
		strcat(szDialog2, szDialog);
	}
	Dialog_Show(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Achievements", szDialog2, "Select", "Cancel");
	return true;
}

function CategoryEmails(playerid) {
	new string[256], query[256], send, read, emails;

	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `Name`='%s' ORDER BY `emails`.`ID` DESC LIMIT 10", GetName(playerid));
	new Cache: result = mysql_query(SQL, query);	
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name(i, "Read", string); read = strval(string);
		if(read == 0) emails++;
	}	
	cache_delete(result);	
	
	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `Type`='1' AND `By`='%s'", GetName(playerid));
	new Cache: result2 = mysql_query(SQL, query);
	send = cache_num_rows();
	cache_delete(result2);			
	
	format(string, sizeof(string), "{FCBF4C}(+) Send email{FFFFFF}\nInbox (%d necitite)\nMesaje trimise (%d mesaje)", emails, send);
	Dialog_Show(playerid, DIALOG_EMAILS, DIALOG_STYLE_LIST, "Emails", string, "Ok", "Close"); 
	return true;
}
function InsertEmail(playername[], by[], text[], type) {
	new 
		szQuery[1024], szDate[180], Year, Month, Day, Hour, Minute, Second;
		
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);

	format(szDate, sizeof(szDate), "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second); 
	format(szQuery, sizeof(szQuery), "INSERT INTO `emails` (`Name`, `Text`, `By`, `Date`, `Type`) VALUES ('%s', '%s', '%s', '%s', '%d')", playername, text, by, szDate, type);
	mysql_query(SQL, szQuery);	
	
	new userid = GetPlayerID(playername);
	if(userid != INVALID_PLAYER_ID) SCM(userid, COLOR_YELLOW, "* Ban nhan duoc un nou email! Foloseste comanda /emails pentru a vedea email-ul primit."), PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);	
	return true;
}
function ShowEmails(playerid, type) {
	SetPVarInt(playerid, "Type", 0);
	
	new 
		szDialog[1200], szDialog2[256], string[256], text[64], email[50], szQuery[256], qresult[5][256], s;
	
	if(GetPVarInt(playerid, "Type") == 0) format(szQuery, sizeof(szQuery), "SELECT * FROM `emails` WHERE `Name`='%s' ORDER BY `emails`.`ID` DESC LIMIT 10", GetName(playerid), type);
	else format(szQuery, sizeof(szQuery), "SELECT * FROM `emails` WHERE `By`='%s' ORDER BY `emails`.`ID` DESC LIMIT 10", GetName(playerid), type);
	new Cache: result = mysql_query(SQL, szQuery);	
	
	if(GetPVarInt(playerid, "Type") == 0) strcat(szDialog, "Email\tBy\tDate\n");
	else strcat(szDialog, "Email\tTo\tDate\n");
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name(i, "Text", string); format(qresult[0], 256, string);
		if(GetPVarInt(playerid, "Type") == 0) cache_get_value_name(i, "By", string), format(qresult[1], 256, string);
		else cache_get_value_name(i, "Name", string), format(qresult[1], 256, string);
		cache_get_value_name(i, "Date", string); format(qresult[2], 256, string);	
		cache_get_value_name(i, "Read", string); format(qresult[3], 256, string);
		cache_get_value_name(i, "ID", string); format(qresult[4], 256, string);
		EmailID[playerid][s] = strval(qresult[4]);
		if(strval(qresult[3]) == 0) text = "(Necitit) ";
		else text= "";
		format(email, 45, "%s", qresult[0]);
		strcat(email, "...");
		if(GetPVarInt(playerid, "Type") == 0) format(szDialog2, sizeof(szDialog2), "%s%s\t%s\t%s\n", text, email, qresult[1], qresult[2]);
		else format(szDialog2, sizeof(szDialog2), "%s\t%s\t%s\n", email, qresult[1], qresult[2]);
		strcat(szDialog, szDialog2);
		s++;
	}	
	cache_delete(result);
	new title[64];
	if(GetPVarInt(playerid, "Type") == 0) title = "Inbox";
	else title = "Mesaje trimise";	
	
	Dialog_Show(playerid, DIALOG_EMAILS1, DIALOG_STYLE_TABLIST_HEADERS, title, szDialog, "Select", "Exit");
	return true;
}
function CalculateEmails(playerid) {
	new szQuery[256], emails, read, string[256];
	format(szQuery, sizeof(szQuery), "SELECT * FROM `emails` WHERE `Name`='%s' ORDER BY `emails`.`ID` DESC LIMIT 10", GetName(playerid));
	new Cache: result = mysql_query(SQL, szQuery);	
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name(i, "Read", string); read = strval(string);
		if(read == 0) emails++;
	}	
	cache_delete(result);
	if(emails > 0) {	
		format(string, sizeof(string), "(Emails) Ai %d email-uri necitite. Foloseste /emails pentru a le vedea!", emails);
		SCM(playerid, COLOR_YELLOW, string);
	}
	return true;
}
YCMD:dp(playerid, params[], help) {
	new id;
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	if(sscanf(params, "i", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/dp <punish id>");
	new szQuery[256];
	format(szQuery, sizeof(szQuery), "SELECT * FROM `sanctions` WHERE `ID`='%d'", id);
	new Cache: result = mysql_query(SQL, szQuery);
	new test = cache_num_rows();
	cache_delete(result);
	if(test == 0) return SCM(playerid, COLOR_GREY, "Punish id invalid!");
	format(szQuery, sizeof(szQuery), "DELETE FROM `sanctions` WHERE `ID`='%d'", id);
	mysql_query(SQL, szQuery);
	return true;
}
YCMD:lp(playerid, params[], help) {
	new id;
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/lastpunish <playerid/name>");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	ShowPunish(playerid, id);
	return true;
}
YCMD:mylp(playerid, params[], help) return ShowPunish(playerid, playerid);
function ShowPunish(playerid, targetid) {
	new 
		szDialog2[4000], szResult[180], id, szQuery[256], string[180], Cache: result, b, k, j, m, w,
		by[180], time[180], reason[180];
		
	format(szQuery, sizeof(szQuery), "SELECT * FROM `sanctions` WHERE `Userid`='%d' AND `Type`='%d' ORDER BY `sanctions`.`ID` DESC LIMIT 10", PlayerInfo[targetid][pSQLID], BAN);
	result = mysql_query(SQL, szQuery);	
	strcat(szDialog2, "Ban-uri:\n");	
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name(i, "ID", szResult); id = strval(szResult);
		cache_get_value_name(i, "By", szResult); format(by, 256, szResult);
		cache_get_value_name(i, "Time", szResult); format(time, 256, szResult);	
		cache_get_value_name(i, "Reason", szResult); format(reason, 256, szResult);
		format(string, sizeof(string), "(#%d) [%s] Ban primit de la adminul %s, motiv: %s.\n", id, time, by, reason);
		strcat(szDialog2, string);		
		b ++;
	}
	if(b == 0) strcat(szDialog2, "Nicio sanctiune.\n\n");
	else strcat(szDialog2, "\n");
	cache_delete(result);
	
	format(szQuery, sizeof(szQuery), "SELECT * FROM `sanctions` WHERE `Userid`='%d' AND `Type`='%d' ORDER BY `sanctions`.`ID` DESC LIMIT 10", PlayerInfo[targetid][pSQLID], KICK);
	result = mysql_query(SQL, szQuery);
	strcat(szDialog2, "Kick-uri:\n");	
	for(new i, x = cache_num_rows(); i < x; i++) {	
		cache_get_value_name(i, "ID", szResult); id = strval(szResult);
		cache_get_value_name(i, "By", szResult); format(by, 256, szResult);
		cache_get_value_name(i, "Time", szResult); format(time, 256, szResult);	
		cache_get_value_name(i, "Reason", szResult); format(reason, 256, szResult);
		format(string, sizeof(string), "(#%d) [%s] Kick primit de la adminul %s, motiv: %s.\n", id, time, by, reason);
		strcat(szDialog2, string);		
		k ++;
	}
	if(k == 0) strcat(szDialog2, "Nicio sanctiune.\n\n");
	else strcat(szDialog2, "\n");	
	cache_delete(result);

	format(szQuery, sizeof(szQuery), "SELECT * FROM `sanctions` WHERE `Userid`='%d' AND `Type`='%d' ORDER BY `sanctions`.`ID` DESC LIMIT 10", PlayerInfo[targetid][pSQLID], WARN);
	result = mysql_query(SQL, szQuery);
	strcat(szDialog2, "Warn-uri:\n");	
	for(new i, x = cache_num_rows(); i < x; i++) {	
		cache_get_value_name(i, "ID", szResult); id = strval(szResult);
		cache_get_value_name(i, "By", szResult); format(by, 256, szResult);
		cache_get_value_name(i, "Time", szResult); format(time, 256, szResult);	
		cache_get_value_name(i, "Reason", szResult); format(reason, 256, szResult);
		format(string, sizeof(string), "(#%d) [%s] Warn primit de la adminul %s, motiv: %s.\n", id, time, by, reason);
		strcat(szDialog2, string);		
		w ++;
	}
	if(w == 0) strcat(szDialog2, "Nicio sanctiune.\n\n");
	else strcat(szDialog2, "\n");	
	cache_delete(result);	
	
	format(szQuery, sizeof(szQuery), "SELECT * FROM `sanctions` WHERE `Userid`='%d' AND `Type`='%d' ORDER BY `sanctions`.`ID` DESC LIMIT 10", PlayerInfo[targetid][pSQLID], JAIL);
	result = mysql_query(SQL, szQuery);
	strcat(szDialog2, "Jail-uri:\n");	
	for(new i, x = cache_num_rows(); i < x; i++) {	
		cache_get_value_name(i, "ID", szResult); id = strval(szResult);
		cache_get_value_name(i, "By", szResult); format(by, 256, szResult);
		cache_get_value_name(i, "Time", szResult); format(time, 256, szResult);	
		cache_get_value_name(i, "Reason", szResult); format(reason, 256, szResult);
		format(string, sizeof(string), "(#%d) [%s] Jail primit de la adminul %s, motiv: %s.\n", id, time, by, reason);
		strcat(szDialog2, string);		
		j ++;
	}
	if(j == 0) strcat(szDialog2, "Nicio sanctiune.\n\n");
	else strcat(szDialog2, "\n");
	cache_delete(result);	

	format(szQuery, sizeof(szQuery), "SELECT * FROM `sanctions` WHERE `Userid`='%d' AND `Type`='%d' ORDER BY `sanctions`.`ID` DESC LIMIT 10", PlayerInfo[targetid][pSQLID], MUTE);
	result = mysql_query(SQL, szQuery);
	strcat(szDialog2, "Mute:\n");	
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name(i, "ID", szResult); id = strval(szResult);
		cache_get_value_name(i, "By", szResult); format(by, 256, szResult);
		cache_get_value_name(i, "Time", szResult); format(time, 256, szResult);	
		cache_get_value_name(i, "Reason", szResult); format(reason, 256, szResult);
		format(string, sizeof(string), "(#%d) [%s] Mute primit de la adminul %s, motiv: %s.\n", id, time, by, reason);
		strcat(szDialog2, string);		
		m ++;
	}
	if(m == 0) strcat(szDialog2, "Nicio sanctiune.\n");
	cache_delete(result);	
	Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Sanctiuni", szDialog2, "Ok", "");
	return true;
}
function InsertLog(playerid, text[], type) {
	new 
		szQuery[1024], szDate[180], Year, Month, Day, Hour, Minute, Second, ip[180];
		
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(szDate, sizeof(szDate), "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second); 
	mysql_format(SQL, szQuery, sizeof(szQuery), "INSERT INTO `logs` (`Userid`, `Text`, `Date`, `Type`, `IP`) VALUES ('%d', '%s', '%s', '%d', '%s')", PlayerInfo[playerid][pSQLID], text, szDate, type, ip);
	mysql_tquery(SQL, szQuery, "", "");				
	return true;
}
function InsereazaSanctiune(playerid, by, type, reason[]) {
	new 
		szQuery[1024], name[180], aname[180],
		szDate[180], Year, Month, Day, Hour, Minute, Second;
		
	format(name, 256, "%s (%d)", GetName(playerid), PlayerInfo[playerid][pSQLID]);
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(szDate, sizeof(szDate), "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	
	if(by == AdmBot) aname = "AdmBot";
	else format(aname, 256, "%s (%d)", GetName(by), PlayerInfo[by][pSQLID]);
	mysql_format(SQL, szQuery, sizeof(szQuery), "INSERT INTO `sanctions` (`Player`, `By`, `Time`, `Userid`, `Type`, `Reason`) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')", name, aname, szDate, PlayerInfo[playerid][pSQLID], type, reason);
	mysql_tquery(SQL, szQuery, "", "");	
	return true;
}
function InsereazaSanctiune2(playerid, pname[], by, bname[], type, reason[]) {
	new 
		szQuery[1024], name[180], aname[180],
		szDate[180], Year, Month, Day, Hour, Minute, Second;
		
	format(name, 256, "%s (%d)", pname, playerid);
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(szDate, sizeof(szDate), "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	
	if(by == AdmBot) aname = "AdmBot";
	else format(aname, 256, "%s (%d)", bname, by);
	mysql_format(SQL, szQuery, sizeof(szQuery), "INSERT INTO `sanctions` (`Player`, `By`, `Time`, `Userid`, `Type`, `Reason`) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')", name, aname, szDate, playerid, type, reason);
	mysql_tquery(SQL, szQuery, "", "");
	return true;
}
stock serverColors(id) {
	new string[180];
	switch(id) {
		case 0: string = "FFFFFF";
		case 1: string = "0BA10B"; 
		case 2: string = "D1FF99";
		case 3: string = "FF3D98";
		case 4: string = "F9FF3D";
		case 5: string = "FFEF85";			
		case 6: string = "3DE5FF";			
		case 7: string = "FFAB3D";			
		case 8: string = "A13DFF";			
		case 9: string = "FFC27D";			
		case 10: string = "FFA3A3";			
		case 11: string = "C5A3FF";							
	}
	return string;
}

stock PlayerColors(id) {
	new x[10];
	switch(id) {
		case 0: x = "CECECE";
		case 1: x = "0087FE";
		case 2: x = "4700C2";
		case 3: x = "EBFF00";
		case 4: x = "EF00FF";
		case 5: x = "40FF00";
		case 6: x = "9CFF29";
		case 7: x = "0E7F03";
		case 8: x = "FF9A00";
		case 9: x = "6E6E6E";
		case 10: x = "FF4C9D";
		case 11: x = "F4FA58";
		case 12: x = "00BFFF";
		case 13: x = "819FF7";
		case 14: x = "FE9A2E";
		case 15: x = "FA8258";
		case 16: x = "00FF40";
		case 17: x = "D358F7";
		case 18: x = "4169E1";
		case 19: x = "9ACD32";
		case 20: x = "F0E68C";
		case 21: x = "BDB76B";
		case 22: x = "FF1493";
		case 23: x = "9966CC";
		case 24: x = "F0B2B2";
		case 25: x = "DB7093";
		case 26: x = "E70031";
		case 27: x = "AB0000";
		case 28: x = "FF6347";
	}
	return x;
}
function OnPlayerUseVending(playerid) {
	SetPlayerHealthEx(playerid, 99);
	GivePlayerCash(playerid, 0, 250);
	return true;
}

function DeAMXI(playerid) return AntiDeAMX();
stock IsKeyJustDown(key, newkeys, oldkeys) {
	if((newkeys & key) && !(oldkeys & key)) return true;
	return false;
}

YCMD:puthat(playerid, params[], help) {
	if(PlayerInfo[playerid][pHat] == 0) return SCM(playerid, -1, "Nu ai o palarie!");
	if(PlayerInfo[playerid][pShowHat] == 1) return SCM(playerid, -1, "Ai deja palaria pe cap!");
	PlayerInfo[playerid][pShowHat] = 1;
	UpdateVar(playerid, "ShowHat", 1);
	PutHat(playerid);
	new string[180];
	format(string, sizeof(string), "%s si-a pus palaria pe cap.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	return true;
}

YCMD:removehat(playerid, params[], help) {
	if(PlayerInfo[playerid][pHat] == 0) return SCM(playerid, -1, "Nu ai o palarie!");
	if(PlayerInfo[playerid][pShowHat] == 0) return SCM(playerid, -1, "Nu ai palaria pe cap!");
	PlayerInfo[playerid][pShowHat] = 0;
	UpdateVar(playerid, "ShowHat", 0);
	RemovePlayerAttachedObject(playerid, 0);
	new string[180];
	format(string, sizeof(string), "%s si-a scos palaria de pe cap.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	return true;
}

function CheckPaintball() {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1 && GetPlayerScore(i) != 0) {
			for(new x = 3; x < 3; x++) {
				if(PlayersOnPaint(x) < 2 && PaintTime[x] != -1) {
					PaintTime[x] = -1;
					if(PaintType[i] == i+1) {
						new pp = PaintType[i]-1;
						ResetPlayerWeapons(i);
						SCM(i, COLOR_YELLOW, "Runda a fost intrerupta deoarece ai ramas singur.");
						PlayerTextDrawHide(i, PaintTD);

						PKills[i] = 0, PDeaths[i] = 0;
						PKills[PaintballWinner[pp]] = 0; PDeaths[PaintballWinner[pp]] = 0;
						//SpawnPlayer(PaintballWinner[pp]);
						PaintballWinner[pp] = i;
						ResetWeapons(i);
						ResetWeapons(PaintballWinner[pp]);					
						PaintballWinnerScore[pp] = 0;
						
						for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(i, 1001, 1001, 200);
					}
				}		
			}	
		}	
	}	
	return true;
}
YCMD:paintleave(playerid, params[], help) {
	if(PaintType[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu esti la paintball.");
	new string[180];
	format(string, sizeof(string), "%s a iesit din paintball.", GetName(playerid));
	SendPaintMessage(PaintType[playerid], COLOR_YELLOW, string);
	PaintType[playerid] = 0;
	SetPlayerPosEx(false, playerid, 2185.8247,1113.8379,12.6484);
	ResetWeapons(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerArmourEx(playerid, 0);
	if(IsACop(playerid) && OnDuty[playerid] == 0) SetPlayerSkinEx(playerid, 305);
	else if(PlayerInfo[playerid][pChar] > 0) SetPlayerSkinEx(playerid, PlayerInfo[playerid][pChar]);
	else SetPlayerSkinEx(playerid, PlayerInfo[playerid][pModel]);
	for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(playerid, 1001, 1001, 200);
	CheckPaintball();
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	return true;
}
YCMD:paintstats(playerid, params[], help) {
	SCM(playerid, -1, "----------------------------- Statistici paintball -----------------------------");
	new string[180];
	format(string, sizeof(string), "[Clasic] %d ucideri, %d decese. Statistica: %s", PlayerInfo[playerid][pPaintKills][0], PlayerInfo[playerid][pPaintDeaths][0], PaintRank(playerid, 0));
	SCM(playerid, -1, string);
	format(string, sizeof(string), "[Clasic cu armura] %d ucideri, %d decese. Statistica: %s", PlayerInfo[playerid][pPaintKills][1], PlayerInfo[playerid][pPaintDeaths][1], PaintRank(playerid, 1));
	SCM(playerid, -1, string);
	format(string, sizeof(string), "[Gun Game] %d ucideri, %d decese. Statistica: %s", PlayerInfo[playerid][pPaintKills][2], PlayerInfo[playerid][pPaintDeaths][2], PaintRank(playerid, 2));
	SCM(playerid, -1, string);			
	SCM(playerid, -1, "-----------------------------------------------------------------------------------");
	return true;
}
YCMD:racestats(playerid, params[], help) {
	SCM(playerid, -1, "---------------- Statistici Race Arena ----------------");
	new string[180];
	format(string, sizeof(string), "[Locul 1] %d curse castigate", PlayerInfo[playerid][pRacePlace][0]);
	SCM(playerid, -1, string);		
	format(string, sizeof(string), "[Locul 2] %d curse castigate", PlayerInfo[playerid][pRacePlace][1]);
	SCM(playerid, -1, string);			
	format(string, sizeof(string), "[Locul 3] %d curse castigate", PlayerInfo[playerid][pRacePlace][2]);
	SCM(playerid, -1, string);				
	format(string, sizeof(string), "[Peste locul 3] %d curse castigate", PlayerInfo[playerid][pRacePlace][3]);
	SCM(playerid, -1, string); 
	SCM(playerid, -1, "-------------------------------------------------------------");
	return true;
}

stock PaintRank(playerid, paintid) {
	new kills = PlayerInfo[playerid][pPaintKills][paintid] -  PlayerInfo[playerid][pPaintDeaths][paintid];
	new rank[64];
	if(kills < 0) rank = "Foarte rea";
	if(kills >= 0 && kills < 25) rank = "Incepator";	
	if(kills >= 25 && kills < 100) rank = "Avansat";	
	if(kills >= 100) rank = "Profesionist";		
	return rank;
}

YCMD:votemap(playerid, params[], help) {
	if(PaintType[playerid] != 0) {
		if(Voted[playerid] == 1) return SCM(playerid, -1, "Nu poti vota de mai multe ori.");
		if(PaintVote[PaintType[playerid]-1] == 0) return SCM(playerid, -1, "Nu se poate vota acum.");
		Dialog_Show(playerid, DIALOG_VOTE, DIALOG_STYLE_LIST, "Voteaza mapa", "rc_arena\nfarm\nisland\ndesert\nbeach\nforest", "Ok", "Exit");
	}
	return true;
}

function PaintSpawn(playerid) {
	RemovePlayerAttachedObject(playerid, 8);
	SetPlayerArmourEx(playerid, 0);
	SetPlayerHealthEx(playerid, 99);	
	new rand = random(sizeof(PaintballSpawns));
	SetPlayerInterior(playerid, 0);
	switch(PaintMap[PaintType[playerid]-1]) {
		case 0: {
			SetPlayerPosEx(false, playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
			SetPlayerInterior(playerid, 10);
			SetPlayerSkin(playerid, 291);
		}
		case 1: {
			SetPlayerPosEx(false, playerid, PaintballSpawns2[rand][0], PaintballSpawns2[rand][1], PaintballSpawns2[rand][2]);
			SetPlayerWorldBounds(playerid, 93.423, -245.2354, 186.846, -175.1681);
			SetPlayerSkin(playerid, 158);
		}	
		case 2: {
			SetPlayerPosEx(false, playerid, PaintballSpawns3[rand][0], PaintballSpawns3[rand][1], PaintballSpawns3[rand][2]);
			SetPlayerWorldBounds(playerid, 1400.3, 1099.627, 2854.154, 2711.035);	
			SetPlayerSkin(playerid, 154);	
		}	
		case 3: {
			SetPlayerPosEx(false, playerid, PaintballSpawns4[rand][0], PaintballSpawns4[rand][1], PaintballSpawns4[rand][2]);
			SetPlayerWorldBounds(playerid, -712.3504, -852.4849, 1611.547, 1424.701);
			SetPlayerSkin(playerid, 146);
		}	
		case 4: {
			SetPlayerPosEx(false, playerid, PaintballSpawns5[rand][0], PaintballSpawns5[rand][1], PaintballSpawns5[rand][2]);
			SetPlayerWorldBounds(playerid, 724.0283, 408.7256, -1775.037, -1915.172);
			SetPlayerSkin(playerid, 45);	
		}	
		case 5: {
			SetPlayerPosEx(false, playerid, PaintballSpawns6[rand][0], PaintballSpawns6[rand][1], PaintballSpawns6[rand][2]);
			SetPlayerWorldBounds(playerid, -420.4035, -595.5717, -35.03363, -198.5239);
			SetPlayerSkin(playerid, 27);	
		}			
	}
	SetPlayerVirtualWorld(playerid, PaintType[playerid]);
	if(PaintText[PaintType[playerid]-1] > 1) return true;
	if(PaintTime[PaintType[playerid]-1] < 1) return true;
	switch(PaintType[playerid]) {
		case 1: {
			ServerWeapon(playerid, 24, 999); ServerWeapon(playerid, 31, 999);
			ServerWeapon(playerid, 16, 1);
		}
		case 2: {
			SetPlayerArmourEx(playerid, 99);
			ServerWeapon(playerid, 24, 999); ServerWeapon(playerid, 31, 999);
			ServerWeapon(playerid, 16, 1);
		}
		case 3: {
			GiveSkillWeapon2(playerid);
		}
	}
	return true;
}

function GiveSkillWeapon(playerid) {
	switch(PKills[playerid]-PDeaths[playerid]) {
		case 0: ResetWeapons(playerid), ServerWeapon(playerid, 22, 999);
		case 3: ResetWeapons(playerid), ServerWeapon(playerid, 24, 999);
		case 6: ResetWeapons(playerid), ServerWeapon(playerid, 25, 999);
		case 9: ResetWeapons(playerid), ServerWeapon(playerid, 32, 999);
		case 12: ResetWeapons(playerid), ServerWeapon(playerid, 33, 999);
		case 15: ResetWeapons(playerid), ServerWeapon(playerid, 30, 999);
		case 18: ResetWeapons(playerid), ServerWeapon(playerid, 34, 999);
		case 21: ResetWeapons(playerid), ServerWeapon(playerid, 4, 999);
	}
	if(PKills[playerid]-PDeaths[playerid] < 0) ResetWeapons(playerid), ServerWeapon(playerid, 22, 999);
	return true;
}

function GiveSkillWeapon2(playerid) {
	switch(PKills[playerid]-PDeaths[playerid]) {
		case 0..2: ResetWeapons(playerid), ServerWeapon(playerid, 22, 999);
		case 3..5: ResetWeapons(playerid), ServerWeapon(playerid, 24, 999);
		case 6..8: ResetWeapons(playerid), ServerWeapon(playerid, 25, 999);
		case 9..11: ResetWeapons(playerid), ServerWeapon(playerid, 32, 999);
		case 12..14: ResetWeapons(playerid), ServerWeapon(playerid, 33, 999);
		case 15..17: ResetWeapons(playerid), ServerWeapon(playerid, 30, 999);
		case 18..20: ResetWeapons(playerid), ServerWeapon(playerid, 34, 999);
		case 21: ResetWeapons(playerid), ServerWeapon(playerid, 4, 999);
	}
	if(PKills[playerid]-PDeaths[playerid] < 0) ResetWeapons(playerid), ServerWeapon(playerid, 22, 999);
	return true;
}

function GetPaintLevel(playerid) {
	new level;
	switch(PKills[playerid]-PDeaths[playerid]) {
		case 0..2: level = 1;
		case 3..5: level = 2;
		case 6..8: level = 3;
		case 9..11: level = 4;
		case 12..14: level = 5;
		case 15..17: level = 6;
		case 18..20: level = 7;
		case 21..24: level = 8;
	}
	return level;
}

function SendPaintMessage(paintid, color, text[]) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PaintType[i] == paintid) {
			SCM(i, color, text);
		}
	}
	return true;
}

function PlayersOnPaint(paintid) {
	new x;
	foreach(new i: Player) {
		switch(paintid) {
			case 0: if(PaintType[i] == 1) x++; // classic
			case 1: if(PaintType[i] == 2) x++; // armour
			case 2: if(PaintType[i] == 3) x++; // gungame
		}
	}
	return x;
}
YCMD:sstats(playerid, params[], help) {
	new string[180];
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	SCM(playerid, COLOR_SERVER, "--------------------------------------------------------------------------------------------------------------------------");	
	format(string, sizeof(string), "Server start on %s", StartDate);
	SCM(playerid, COLOR_WHITE, string);
	new ticks = GetServerTickRate(), color[64];
	if(ticks >= 150) color = "{AAFF82}";
	else if(ticks < 150 && ticks >= 100) color = "{FFBFBF}";
	else color = "{FFBFBF}";
	format(string, sizeof(string), "Server tick rate: %s%d{FFFFFF} | Queries: %d | Players online: %d/100 | Players AFK: %d", color, GetServerTickRate(), mysql_unprocessed_queries(), GetPlayers(), GetAFKPlayers());
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Players online today: %d | Record players: %d on %s", PlayersLoggedDay(), MaxPlayers, MaxPlayersDate);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Registered accounts: %s | Houses: %d/%d | Businesses: %d/%d", FormatNumber(Accounts()), FreeHouses(), housess, FreeBusinesses(), bussines, sbiss);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Admins online: %d (%d afk) | Helpers online: %d (%d afk) | Leaders online: %d (%d afk)", CheckAdmins(0), CheckAdmins(1), CheckHelpers(0), CheckHelpers(1), CheckLeaders(0), CheckLeaders(1));
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Players in paintball: %d, %d, %d | Players in event: %d", PlayersOnPaint(0), PlayersOnPaint(1), PlayersOnPaint(2), GetPlayersOnEvent());
	SCM(playerid, COLOR_WHITE, string);
	SCM(playerid, COLOR_SERVER, "--------------------------------------------------------------------------------------------------------------------------");	
	return true;
}
YCMD:fupdate(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return true;
	new szQuery[256], Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `factions` SET `IntX`='%f', `IntY`='%f', `IntZ`='%f', `VW`='%d', `Interior`='%d' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL, szQuery, "", "");
	SCM(playerid, COLOR_RED, szQuery);
	return true;
}
YCMD:gotojob(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) 
		return true;

	new id;
	if(sscanf(params, "i", id)) 
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gotojob <jobid>");
	
	if(10 > id < 1) 
		return SCM(playerid, -1, "ID invalid! (1-10)");

	SetPlayerPosEx(false, playerid, JobInfo[id][jPosX], JobInfo[id][jPosY], JobInfo[id][jPosZ]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	gString[0] = EOS;
	format(gString, sizeof(gString), "Te-ai teleportat cu success la job-ul cu id %d.", id);
	SCM(playerid, -1, gString);
	return true;
}
YCMD:gotohq(playerid, params[], help) {
	new id;
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gotohq <hq id>");
	if(id < 1 || id > 16) return SCM(playerid, -1, "ID invalid! (1-16)");
	SetPlayerPosEx(false, playerid, DynamicFactions[id][extX], DynamicFactions[id][extY], DynamicFactions[id][extZ]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s s-a teleportat la HQ-ul factiunii %s (%d).", GetName(playerid), FactionName(id), id);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:so(playerid, params[], help) {
	new userid, string[180];
	if(!IsACop(playerid)) return true;
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(PlayerTime[playerid][0] != 0) {
		format(string, sizeof(string), "Poti folosi aceasta comanda peste %d secunde.", PlayerTime[playerid][0]);
		SCM(playerid, -1, string);
		return true;
	}
	if(OnDuty[playerid] != 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti la datorie!");
	if(sscanf(params,"u",userid)) return SCM(playerid, COLOR_GREY, "{4CA27A}USAGE:{FFFFFF} /so <ID-ul playerului/Numele>");
	if(!ProxDetectorS(30.0, playerid, userid)) return SCM(playerid, COLOR_GREY, "Acel player nu se afla in raza ta!");
	if(userid == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(PlayerInfo[userid][pWantedLevel] != 0) format(string, sizeof(string), "> %s: {4F90FF}%s{FFFF00}, esti cautat de politie. Opreste-te imediat sau risti wanted! <", GetName(playerid), GetName(userid));
	else if(PlayerInfo[userid][pWantedLevel] == 0 && IsPlayerInAnyVehicle(userid)) format(string, sizeof(string), "> %s: {4F90FF}%s{FFFF00}, trage pe dreapta imediat! <", GetName(playerid), GetName(userid));
	else format(string, sizeof(string), "> %s: {4F90FF}%s{FFFF00}, esti cautat de politie. Opreste-te imediat sau risti wanted! <", GetName(playerid), GetName(userid));
	ProxDetector(30.0, playerid, string, COLOR_YELLOW);
	PlayerTime[playerid][0] = 3;
	return true;
}
YCMD:editbizz(playerid, params[], help) {
	new id, code[180], list;
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(sscanf(params, "iis[180]", id,list,code)) {
 		SCM(playerid, COLOR_GREY, "{4CA27A}USAGE:{FFFFFF} /editbizz <biz id> <code> <result>");
 		SCM(playerid, 0xFFFFFFFF, "(1) Level, (2) Nume, (3) Pret");
 		return true;
 	}
 	if(BizzInfo[id][bID] == 0) return SCM(playerid, COLOR_GOLD, "Aceasta afacere nu exista!");
 	new result = strval(code), string[180], str[180];
 	switch(list) {
 		case 1: {
 			format(string, sizeof(string), "Ai editat nivelul la afacerea %d in %d.", id, result);
 			SCM(playerid, COLOR_WHITE, string);
 			BizzInfo[id][bLevel] = result;
			mysql_format(SQL, str,sizeof(str),"UPDATE bizz SET Level='%d' WHERE ID='%d'",BizzInfo[id][bLevel], BizzInfo[id][bID]);
			mysql_tquery(SQL,str, "", "");
 		}
 		case 2: {
 			format(string, sizeof(string), "Ai editat numele la afacerea %d in %s.", id, code);
 			SCM(playerid, COLOR_WHITE, string);
 			format(BizzInfo[id][bMessage],256,code);
			mysql_format(SQL,str,sizeof(str),"UPDATE bizz SET Message='%s' WHERE ID='%d'",BizzInfo[id][bMessage], BizzInfo[id][bID]);
			mysql_tquery(SQL,str, "", "");
		 }
 		case 3: {
 			format(string, sizeof(string), "Ai editat pretul la afacerea %d in $%s.", id, FormatNumber(result));
 			SCM(playerid, COLOR_WHITE, string);
			BizzInfo[id][bBuyPrice] = result;
			mysql_format(SQL,string, sizeof(string), "UPDATE bizz SET `Value`='%d' WHERE ID=%d",result, BizzInfo[id][bID]);
			mysql_tquery(SQL,str, "", "");
 		}
 	}
 	UpdateLabel(2, id);
	return true;
}
YCMD:edithouse(playerid, params[], help) {
	new id, code[180], list;
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(sscanf(params, "iis[180]", id,list,code)) {
 		SCM(playerid, COLOR_GREY, "{4CA27A}USAGE:{FFFFFF} /edithouse <house id> <code> <result>");
 		SCM(playerid, 0xFFFFFFFF, "(1) Level, (2) Nume, (3) Pret, (4) Owned");
 		return true;
 	}
 	if(HouseInfo[id][hID] == 0) return SCM(playerid, COLOR_GOLD, "Aceasta casa nu exista!");
 	new result = strval(code), string[180], str[180];
 	switch(list) {
 		case 1: {
 			format(string, sizeof(string), "Ai editat nivelul la casa %d in %d.", id, result);
 			SCM(playerid, COLOR_GOLD, string);
			mysql_format(SQL,str,sizeof(str),"UPDATE houses SET Level='%d' WHERE ID='%d'",HouseInfo[id][hLevel], HouseInfo[id][hID]);
			mysql_tquery(SQL,str, "", "");
 		}
 		case 2: {
 			format(string, sizeof(string), "Ai editat numele la casa %d in %s.", id, code);
 			SCM(playerid, COLOR_GOLD, string);
 			format(HouseInfo[id][hDiscription],256,code);
			mysql_format(SQL,str,sizeof(str),"UPDATE houses SET Discription='%s' WHERE ID='%d'",HouseInfo[id][hDiscription],HouseInfo[id][hID]);
			mysql_tquery(SQL,str, "", "");
		 }
 		case 3: {
 			format(string, sizeof(string), "Ai editat pretul la casa %d in $%s.", id, FormatNumber(result));
 			SCM(playerid, COLOR_GOLD, string);
			HouseInfo[id][hValue] = result;
			mysql_format(SQL,string, sizeof(string), "UPDATE houses SET `Value`='%d' WHERE ID=%d",result,HouseInfo[id][hID]);
			mysql_tquery(SQL,str, "", "");
 		}
 		case 4: {
 			format(string, sizeof(string), "Ai editat detinatorul la casa %d in %d.", id, result);
 			SCM(playerid, COLOR_GOLD, string);
			HouseInfo[id][hOwned] = result;
			mysql_format(SQL,string, sizeof(string), "UPDATE houses SET `Owned`='%d' WHERE ID=%d",result,HouseInfo[id][hID]);
			mysql_tquery(SQL,str, "", "");
 		}		
 	}
 	UpdateLabel(1, id);
	return true;
}
YCMD:free(playerid, params[], help) {
	new id,moneyfree,string[100];
	if(!IsACop(playerid)) return true;
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(sscanf(params, "ui", id,moneyfree)) return SCM(playerid, 0xFFFFFFFF,"Syntax: /free <playerid/name> <amount>");
	if(PlayerInfo[id][pJailed] < 1) return SCM(playerid,COLOR_WHITE, "Acel player nu este in inchisoare.");
	if(playerid == id) return true;
	if(PlayerInfo[playerid][pLawyer] < 1) return SCM(playerid,-1, "Nu ai puncte de accept.");
	if(!ProxDetectorS(10.0, playerid, id)) return SCM(playerid,COLOR_GREY, "Acel player nu se afla in raza ta!");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(moneyfree < 1000 || moneyfree > 10000) return SCM(playerid, -1, "Suma invalida! ($1000-$10000)");
	FreeOffer[id] = playerid;
	FreePrice[id] = moneyfree;
	format(string, sizeof(string), "* I-ai oferit lui %s un free pentru %s$.",GetName(id),FormatNumber(moneyfree));
	SCM(playerid, COLOR_MONEY, string);
	format(string, sizeof(string), "* %s ti-a oferit un free pentru %s$, (scrie /accept free %d) pentru a accepta.",GetName(playerid),FormatNumber(moneyfree),playerid);
	SCM(id, COLOR_MONEY, string);
	return true;
}
YCMD:escape(playerid, params[], help) {
	if(PlayerInfo[playerid][pAJail] == 1) return true;
	if(PlayerInfo[playerid][pEscapePoints] < 10) return SCM(playerid, -1, "Ai nevoie de 10 puncte de evadare pentru a putea evada!");
	if(Escape[playerid] == 1) return SCM(playerid, -1, "Deja incerci sa evadezi!");
	if(PlayerToPoint(5, playerid, 1812.8346,-1536.1892,13.2090) && PlayerInfo[playerid][pJailTime] >= 1 || PlayerToPoint(5, playerid, 1754.0898,-1582.2433,12.5121) && PlayerInfo[playerid][pJailTime] >= 1) {
		if(PlayerInfo[playerid][pJailTime] < 60*10) return SCM(playerid, COLOR_LGREEN, "Nu mai poti evada deoarece mai ai de stat 10 minute.");
		PlayerInfo[playerid][pEscapePoints] -= 10;
		UpdateVar(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
		Escape[playerid] = 1;
		EscapeProces[playerid] = 0;
		PlayerTextDrawSetString(playerid, InfosTD, "Foloseste comanda ~y~/hit~w~~h~ pentru a sparge gardul.");
		PlayerTextDrawShow(playerid, InfosTD);		
	}
	else SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta coamanda deoarece nu esti la unul dintre garduri.");
	return true;
}
YCMD:hit(playerid, params[], help) {
	if(PlayerInfo[playerid][pAJail] == 1) return true;
	if(GetPlayerVirtualWorld(playerid) == 0) return true;
	if(Escape[playerid] == 0 || Escape2[playerid] == 1) return true;
	if(!PlayerToPoint(5, playerid, 1812.8346,-1536.1892,13.2090) && !PlayerToPoint(5, playerid, 1754.0898,-1582.2433,12.5121)) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta coamanda deoarece nu esti la unul dintre garduri.");
	ApplyAnimation(playerid, "SWORD", "sword_4", 4.0, 1, 1, 1, 0, 0);
	SetTimerEx("EscapePlayer", 5000, 0, "d", playerid);	
	Escape2[playerid] = 1;
	PlayerTextDrawHide(playerid, InfosTD);
	SetPlayerAttachedObject(playerid, 5, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
	return true;
}

function EscapePlayer(playerid) {
	if(!IsPlayerConnected(playerid)) return true;
   	new test = 7 + random(6), string[180];
	EscapeProces[playerid] += test;
	if(EscapeProces[playerid] < 100) {
		format(string, sizeof(string), "Continua sa lovesti gardul! (%d%s)", EscapeProces[playerid], "%%");
		SCM(playerid, 0xFFB870FF, string);
	}
	else {
		SCM(playerid, COLOR_YELLOW, "Ai reusit sa evadezi. Pentru ca politia sa-ti piarda urma dute la un magazin de haine si schimba-ti hainele.Succes!");
		SetPlayerPosEx(false, playerid, 1824.9187,-1537.7224,13.5469);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pJailed] = 0;
		PlayerInfo[playerid][pJailTime] = 0;
		Update(playerid,pJailedx);
		Update(playerid,pJailTimex);		
		Escape2[playerid] = 0;	
		EscapeProces[playerid] = 0;
		TextDrawHideForPlayer(playerid, Jailtime[playerid]);
		SetTimerEx("GiveWanted", 15000, false, "i", playerid);		
	}
	Escape2[playerid] = 0;
	ClearAnimations(playerid);
	ClearAnimations(playerid);
	RemovePlayerAttachedObject(playerid, 5);
	return true;
}

function GiveWanted(playerid) {
	if(Escape[playerid] == 0) return true;
	SetPlayerWantedLevel(playerid, 6);
	PlayerInfo[playerid][pWantedLevel] = 6;
	SetPlayerCriminal(playerid,255, "escape");	
	return true;
}

function FailEscape(playerid) {
	PlayerTextDrawHide(playerid, CpTD);
	Escape2[playerid] = 0;
	Escape[playerid] = 0;
	EscapeProces[playerid] =0;
	SCM(playerid, COLOR_YELLOW, "Incercarea ta de a evada a esuat!");
	return true;
}
YCMD:deletead(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid,COLOR_WHITE,AdminOnly);
	new id, reason[120], string[180];
	if(sscanf(params, "us[120]", id, reason)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/deletead <playerid/name> <reason>");
	if(AdTimer[id] == 0) return SCM(playerid,COLOR_WHITE, "Acel player nu are un anunt.");
	format(string, sizeof(string), "(/da) Anuntul lui %s a fost sters de %s, motiv: %s.", GetName(playerid), GetName(id), reason);
	SendStaffMessage(0xFFADADFF, string);
	format(string, sizeof(string), "Anuntul tau a fost sters de %s, motiv: %s", GetName(playerid), reason);
	SCM(id, COLOR_YELLOW, string);
	AdTimer[id] = 0;
	KillTimer(GetPVarInt(playerid, "AdTimer"));
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	return true;
}
YCMD:removead(playerid, params[], help) {
	if(AdTimer[playerid] == 0) return SCM(playerid,COLOR_GREY, "Nu ai un anunt.");
	AdText[playerid] = "";
	AdTimer[playerid] = 0;	
	SCM(playerid, COLOR_WHITE, "Anuntul tau a fost sters.");
	return true;
}
YCMD:myad(playerid, params[], help) {
	new string[184];
	if(AdTimer[playerid] == 0) return SCM(playerid,COLOR_GREY, "Nu ai un anunt.");
	format(string,256,"Anunt: %s", AdText[playerid]);
	SCM(playerid, COLOR_MONEY, string);
	return true;
}
YCMD:tickets(playerid, params[], help) {
	if(Iter_Count(MyVehicle[playerid]) == 0)
		return SCM(playerid, COLOR_GREY, "Nu ai nici o masina.");

	if(PlayerInfo[playerid][pTickete][0] == 0 && PlayerInfo[playerid][pTickete][1] == 0)
		return SCM(playerid, COLOR_GREY, "Nu ai nici un ticket");

	ShowPlayerVehicle(playerid, true);
	return true;
}
YCMD:showmotd(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid,COLOR_GREY, "Nu esti intr-o factiune.");
	if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) == 0) return true;
	new string[180];
	format(string,sizeof(string), "(FMOTD): %s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	MesajLung(playerid,COLOR_YELLOW,string);
	return true;
}
YCMD:smotd(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	new string[180];
	if(sscanf(params, "s[180]",string)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/staffmotd <text>");
	format(StaffMotd, sizeof(StaffMotd), string);
	format(string, sizeof(string), "(Staff MOTD): {FFFFFF}%s",string);
	SendStaffMessage(0x87E32BFF, string);
	mysql_format(SQL, string, sizeof(string), "UPDATE `stuff` SET `StaffMotd`='%s' WHERE `ID`='1'",StaffMotd);
	mysql_tquery(SQL ,string, "", "");
	return true;
}
YCMD:cmotd(playerid, params[], help) {
	if(PlayerInfo[playerid][pClan] == 0) return true;
	new clanid = PlayerInfo[playerid][pClan], string[180];
	if(clanid != 0) {
		format(string, sizeof(string), "{%s}(CMOTD): %s.", ClanInfo[PlayerInfo[playerid][pClan]][clColor], ClanInfo[PlayerInfo[playerid][pClan]][clMotd]);
		MesajLung(playerid, -1, string);
	}	
	return true;
}
YCMD:fmotd(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid,COLOR_GREY, "Nu esti intr-o factiune.");
	if(PlayerInfo[playerid][pRank] < 5) return SCM(playerid,COLOR_GREY, "Nu ai rank 5.");
	new string[180];
	if(sscanf(params, "s[180]",string)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/fmotd <text>");
	strmid(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], string, 0, strlen(string), 255);
	format(string, sizeof(string), "(FMOTD): %s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendFactionMessage(PlayerInfo[playerid][pMember],COLOR_YELLOW,string);
	mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `Anunt`='%s' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL ,string, "", "");
	return true;
}
YCMD:managearea(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_WHITE,AdminOnly);
	new x_nr[10];
	if(sscanf(params, "s[10]",x_nr)) SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/managearea <Deschide/Inchide>");
	if(strcmp(x_nr,"deschide",true) == 0) {
		Update3DTextLabelText(areap, 0xFFFFFFFF, "Arena de event este deschisa\nApasa pe tasta F pentru a intra");
		areape = 1;
	}
	if(strcmp(x_nr,"inchide",true) == 0) {
		Update3DTextLabelText(areap, 0xFFFFFFFF, "Arena de event este inchisa\nAsteapta...");
		areape = 0;
 	}
	return true;
}
YCMD:leaders(playerid, params[], help) {
	if(IsPlayerConnected(playerid)) {
		new count, string[184];
		SCM(playerid, COLOR_WHITE, "---------------- Lideri conectati ----------------");
		foreach(new i: Player) {
			if(PlayerInfo[i][pLeader] > 0 && GetPVarInt(i, "Cover") == 0) {
				format(string, sizeof(string), "%s: %s(%d)", FactionName(PlayerInfo[i][pLeader]), GetName(i),i);
				SCM(playerid, COLOR_WHITE, string);
				count++;			
			}
		}
		if(count == 0) return SCM(playerid,COLOR_GREY, "No leaders online at the moment.");
		SCM(playerid, COLOR_WHITE, "--------------------------------------------------------");
	}
	return true;
}
YCMD:top(playerid, params[], help) {
	new p=0,t=0,s=0,r=0,string[184];
	for(new i = 0; i < sizeof(Turfs); i++) {
		if(TurfInfo[i][zOwned] == 4) t++;
		if(TurfInfo[i][zOwned] == 5) p++;
		if(TurfInfo[i][zOwned] == 6) s++;
		if(TurfInfo[i][zOwned] == 10) r++;
	}
	SCM(playerid,COLOR_WHITE,"---------- Top Gangs ----------");
	format(string, sizeof(string), "{0CAB3C}%s {FFFFFF}- %d turfs",FactionName(4), t);
	SCM(playerid,COLOR_WHITE,string);
	format(string, sizeof(string), "{11F2F2}%s {FFFFFF}- %d turfs",FactionName(5),p);
	SCM(playerid,COLOR_WHITE,string);
	format(string, sizeof(string), "{FAD400}%s {FFFFFF}- %d turfs",FactionName(6),s);
	SCM(playerid,COLOR_WHITE,string);
	format(string, sizeof(string), "{AB00FA}%s {FFFFFF}- %d turfs",FactionName(10),r);
	SCM(playerid,COLOR_WHITE,string);
	SCM(playerid,COLOR_WHITE,"-------------------------------------");
	return true;
}

YCMD:buydildo(playerid, params[], help) {
	if(!IsPlayerInRangeOfPoint(playerid,10,-104.0826,-21.9337,1000.7188)) return SCM(playerid,-1, "You're not in the place where you can get dildo.");
	Dialog_Show(playerid, DIALOG_DILDO, DIALOG_STYLE_LIST, "Buy dildo", "Double-ended Dildo ($500)\nDildo ($500)\nVibrator ($500)\nSilver Vibrator ($500)\nFlowers ($1,000)", "Ok", "Close");
	return true;
}

YCMD:music(playerid, params[],help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa ai admin level +6");
	new link[128];
	if(sscanf(params, "s[128]", link))
		return SCM(playerid, COLOR_WHITE, "{008080}Usage: {FFFFFF}/music [link]");
	foreach(new i : Player) {
		StopAudioStreamForPlayer(i);
		PlayAudioStreamForPlayer(i, link);
	}
	return true;
}
function ListenThisRadio(id) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayRadio[i] == id) x++;
	}
	return x;
}
YCMD:hradio(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");
YCMD:bradio(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /bizmenu!");
	
function HouseRadio(playerid, hid) {
	if(HouseInfo[hid][hRadio] != -1) {
		if(HouseInfo[hid][hRadio] == 0) StopAudioStreamForPlayer(playerid);
		else PlayAudioStreamForPlayer(playerid, RadioLink[HouseInfo[hid][hRadio]]);
		PlayRadio[playerid] = HouseInfo[hid][hRadio];
	}
	return true; 
}

function StopHouseRadio(hid) {
	foreach(new i: Player) {
		if(InHouse[i] == hid) {
			StopAudioStreamForPlayer(i);
			PlayRadio[i] = 0;
		}
	}
	return true;
}

function BizzRadio(playerid, hid) {
	if(BizzInfo[hid][bRadio] != -1) {
		if(BizzInfo[hid][bRadio] == 0) StopAudioStreamForPlayer(playerid);
		else PlayAudioStreamForPlayer(playerid, RadioLink[BizzInfo[hid][bRadio]]);
	}
	return true; 
}

function StopBizRadio(hid) {
	foreach(new i: Player) {
		if(InBussines[i] == hid) {
			StopAudioStreamForPlayer(i);
			PlayRadio[i] = 0;
		}
	}
	return true;
}

YCMD:dice2(playerid, params[], help) {
	new rand = 1 + random(5), string[128];
	format(string, sizeof(string), "* %s a aruncat zarul %d.", GetName(playerid), rand);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE);
	return true;
}
YCMD:carradio(playerid, params[], help) {
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
	new szDialog[1024], szDialog2[1024];
	strcat(szDialog2, "Nume\tNguoi nghe\n");
	for(new i = 0; i < sizeof(RadioNames); i++) {
		if(i == 0) format(szDialog, sizeof(szDialog), "%s\n", RadioNames[i]);
		else format(szDialog, sizeof(szDialog), "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
		strcat(szDialog2, szDialog);
	}
	strcat(szDialog2, "Youtube custom URL");
	Dialog_Show(playerid, DIALOG_CARRADIO, DIALOG_STYLE_TABLIST_HEADERS, "Car Radio", szDialog2, "Ok", "Close");
	return true;
}
YCMD:mp3(playerid, params[], help) {
	if(PlayerInfo[playerid][pMP3] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai un MP3 Player!");
	new szDialog[1024], szDialog2[1024];
	strcat(szDialog2, "Nume\tNguoi nghe\n");
	for(new i = 0; i < sizeof(RadioNames); i++) {
		if(i == 0) format(szDialog, sizeof(szDialog), "%s\n", RadioNames[i]);
		else format(szDialog, sizeof(szDialog), "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
		strcat(szDialog2, szDialog);
	}
	strcat(szDialog2, "Youtube custom URL");
	Dialog_Show(playerid, DIALOG_MP3, DIALOG_STYLE_TABLIST_HEADERS, "MP3 Player", szDialog2, "Ok", "Close");
	return true;
}	
function ShowTradeTDs(playerid) {
	PlayerTextDrawSetString(playerid, TradePTD[4], "~r~chua san sang");
	PlayerTextDrawSetString(playerid, TradePTD[5], "~r~chua san sang");
	for(new i = 0; i < sizeof(TradePTD); i++) if(i < 6) PlayerTextDrawShow(playerid, TradePTD[i]);
	for(new i = 0; i < sizeof(TradeTD); i++) if(i < 11) TextDrawShowForPlayer(playerid, TradeTD[i]);
	SelectTextDraw(playerid, 0x00BFFFFF);
	return true;
}

function HideTradeTDs(playerid) {
	for(new i = 0; i < sizeof(TradePTD); i++) PlayerTextDrawHide(playerid, TradePTD[i]);
	for(new i = 0; i < sizeof(TradeTD); i++) TextDrawHideForPlayer(playerid, TradeTD[i]);
	TradeID[playerid] = -1;
	TradePlayer[playerid] = -1;
	TradeTime[playerid] = 0;
	return true;
}
function CheckTradeMoney(playerid, id) {	
	if(MoneyTrade[playerid] != 0 && MoneyTrade[id] != 0 && TradeItems[playerid] == 1 && TradeItems[id] == 1) return true;
	return false;
}

function HideTradeItems(playerid) {
	MiliardTrade[playerid] = 0;
	MoneyTrade[playerid] = 0;
	HouseTrade[playerid] = -1;
	BusinessTrade[playerid] = -1;
	CarTrade[playerid] = -1;
	HiddenTrade[playerid] = -1;
	TradeTicket[playerid][0] = 0;
	TradeTicket[playerid][1] = 0;
	VoucherTrade[playerid][0] = 0;
	VoucherTrade[playerid][1] = 0;
	VoucherTrade[playerid][2] = 0;
	SkinTrade[playerid] = -1;
	
	new id = TradeID[playerid];
	if(TradeAccepted[playerid] == 0) {
		for(new i = 0; i < sizeof(TradeTitle); i++) {
			if(i >= 0 && i < 5) {
				PlayerTextDrawHide(playerid, TradeTitle[i]);
				PlayerTextDrawHide(id, TradeTitle[i]);
			}	
		}
		for(new i = 0; i < sizeof(TradeIcon); i++) {
			if(i >= 0 && i < 5) {
				PlayerTextDrawHide(playerid, TradeIcon[i]);
				PlayerTextDrawHide(id, TradeIcon[i]);
				PlayerTextDrawSetSelectable(playerid, TradeIcon[i], false);
				PlayerTextDrawSetSelectable(id, TradeIcon[i], false);
			}	
		}		
		for(new i = 0; i < sizeof(TradeTD); i++) {
			if(i >= 11 && i < 16) {
				TextDrawHideForPlayer(playerid, TradeTD[i]);
				TextDrawHideForPlayer(id, TradeTD[i]);
			}	
		}
	}
	if(TradeAccepted[playerid] == 1) {
		for(new i = 0; i < sizeof(TradeTitle); i++) {
			if(i >= 5 && i < 10) {
				PlayerTextDrawHide(playerid, TradeTitle[i]);
				PlayerTextDrawHide(id, TradeTitle[i]);
			}	
		}
		for(new i = 0; i < sizeof(TradeIcon); i++) {
			if(i >= 5 && i < 10) {
				PlayerTextDrawHide(playerid, TradeIcon[i]);
				PlayerTextDrawHide(id, TradeIcon[i]);
				PlayerTextDrawSetSelectable(playerid, TradeIcon[i], false);
				PlayerTextDrawSetSelectable(id, TradeIcon[i], false);
			}	
		}		
		for(new i = 0; i < sizeof(TradeTD); i++) {
			if(i >= 16 && i < 21) {
				TextDrawHideForPlayer(playerid, TradeTD[i]);
				TextDrawHideForPlayer(id, TradeTD[i]);
			}
		}
	}	
	TradeItems[playerid] = 0;	
	return true;
}


function FinishTrade(playerid) {
	new id = TradeID[playerid], string[256], string2[256], query[256], log2[300], items[128];
	SCM(playerid, COLOR_GOLD, "Afacerea a fost finalizata cu succes!");
	SCM(id, COLOR_GOLD, "Afacerea a fost finalizata cu succes!");
	strcat(string, "Ban nhan duoc: ");
	if(MoneyTrade[playerid] != 0) {
		GivePlayerCash(id, 1, MoneyTrade[playerid]);
		GivePlayerCash(playerid, 0, MoneyTrade[playerid]);
		format(string2, sizeof(string2), " $%s [l: $%s]", FormatNumber(MoneyTrade[playerid]), GetCashStr(playerid));
		strcat(string, string2);
		strcat(items, string2);
	}
	if(HouseTrade[playerid] != -1) {
		format(string2, sizeof(string2), " House %d ", HouseTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
		
		if(HouseTrade[id] == -1) {
			PlayerInfo[playerid][pHouse] = 999;
			UpdateVar(playerid, "House", 999);
		}
		
		GiveHouse(id, HouseTrade[playerid]);
		finishAchievement(id, 3);	
	}	
	if(BusinessTrade[playerid] != -1) {
		format(string2, sizeof(string2), " Business %d ", BusinessTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
		
		if(BusinessTrade[id] == -1) {
			PlayerInfo[playerid][pBizz] = 255;
			UpdateVar(playerid, "Bizz", 255);
		}	
		GiveBiz(id, BusinessTrade[playerid]);
		finishAchievement(id, 2);
	}	
	if(CarTrade[playerid] != -1) {
		new idd = CarTrade[playerid];
		format(string2, sizeof(string2), " Vehicul %s (%d) ", aVehicleNames[CarInfo[idd][cModel]-400], idd);
		strcat(string, string2);			
		strcat(items, string2);
		Iter_Remove(MyVehicle[playerid], idd);
		Iter_Add(MyVehicle[id], idd);
		format(CarInfo[idd][cOwner], 64, PlayerInfo[id][pUsername]);
		CarInfo[idd][Userid] = PlayerInfo[id][pSQLID];
		mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Owner`='%s', `Userid`='%d' WHERE `ID`='%d'", PlayerInfo[id][pUsername], PlayerInfo[id][pSQLID], CarInfo[idd][cID]);
		mysql_tquery(SQL, query, "", "");
	}
	if(VoucherTrade[playerid][0] != 0) {
		PlayerInfo[id][pVoucher][0] += VoucherTrade[playerid][0];
		PlayerInfo[playerid][pVoucher][0] -= VoucherTrade[playerid][0];
		format(string2, sizeof(string2), " Voucher %d (Rare)", VoucherTrade[playerid][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(id);
		save_vouchers(playerid);
	}
	if(VoucherTrade[playerid][1] != 0) {
		PlayerInfo[id][pVoucher][1] += VoucherTrade[playerid][1];
		PlayerInfo[playerid][pVoucher][1] -= VoucherTrade[playerid][1];
		format(string2, sizeof(string2), " Voucher %d (Epic)", VoucherTrade[playerid][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[playerid][2] != 0) {
		PlayerInfo[id][pVoucher][2] += VoucherTrade[playerid][2];
		PlayerInfo[playerid][pVoucher][2] -= VoucherTrade[playerid][2];
		format(string2, sizeof(string2), " Voucher %d (Legendary)", VoucherTrade[playerid][2]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(SkinTrade[playerid] != -1) {
		give_skin(id, SkinTrade[playerid]);
		for(new i = 0; i < 10; i++) {
			if(PlayerInfo[playerid][pSkins][i] == SkinTrade[playerid]) {
				PlayerInfo[playerid][pSkins][i] = -1;
				PlayerTextDrawColor(playerid, SkinsPTD[i], 0xFFFFFFFF);
		   		PlayerTextDrawBackgroundColor(playerid, SkinsPTD[i], 0xFFFFFF20);
			}
		}
		SetPlayerSkin(playerid, 250);
		PlayerInfo[playerid][pChar] = 250;
		UpdateVar(playerid, "CChar", 250);
		format(string2, sizeof(string2), " Skin %d (%s)", SkinTrade[playerid], GetSkinType(SkinTrade[playerid]));
		strcat(string, string2);
		strcat(items, string2);
		save_skin(playerid);
		save_skin(id);
	}
	if(HiddenTrade[playerid] != -1) {
		PlayerInfo[id][pHidden] += HiddenTrade[playerid];
		PlayerInfo[playerid][pHidden] -= HiddenTrade[playerid];
		format(string2, sizeof(string2), " %d Hidden(s)", HiddenTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
		UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
		UpdateVar(id, "Hidden", PlayerInfo[id][pHidden]);
	}
	if(MiliardTrade[playerid] != 0) {
		StoreMoney[id] += MiliardTrade[playerid];
		StoreMoney[playerid] -= MiliardTrade[playerid];
		format(string2, sizeof(string2), " $%d.000.000.000", MiliardTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
		UpdateVar(playerid, "MStore", StoreMoney[playerid]);
		UpdateVar(id, "MStore", StoreMoney[id]);
	}
	if(TradeTicket[playerid][0] != 0) {
		PlayerInfo[id][pTickete][0] += TradeTicket[playerid][0];
		PlayerInfo[playerid][pTickete][0] -= TradeTicket[playerid][0];
		format(string2, sizeof(string2), " %d Rainbow Ticket(s)", TradeTicket[playerid][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	if(TradeTicket[playerid][1] != 0) {
		PlayerInfo[id][pTickete][1] += TradeTicket[playerid][1];
		PlayerInfo[playerid][pTickete][1] -= TradeTicket[playerid][1];
		format(string2, sizeof(string2), " %d Vip Ticket(s)", TradeTicket[playerid][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	SCM(id, COLOR_GOLD, string);
	format(log2, sizeof(log2), "%s a dat [%s]", GetName(playerid), items);	
	items = "";
	string = "Ban nhan duoc: ";
	if(MoneyTrade[id] != 0) {
		GivePlayerCash(playerid, 1, MoneyTrade[id]);
		GivePlayerCash(id, 0, MoneyTrade[id]);
		format(string2, sizeof(string2), " $%s [l: $%s]", FormatNumber(MoneyTrade[id]), GetCashStr(id));
		strcat(string, string2);
		strcat(items, string2);
	}
	if(HouseTrade[id] != -1) {
		format(string2, sizeof(string2), " House %d ", HouseTrade[id]);
		strcat(string, string2);
		strcat(items, string2);
		
		if(HouseTrade[playerid] == -1) {		
			PlayerInfo[id][pHouse] = 999;
			UpdateVar(id, "House", 999);
		}
		
		GiveHouse(playerid, HouseTrade[id]);
		finishAchievement(playerid, 3);
	}	
	if(BusinessTrade[id] != -1) {
		format(string2, sizeof(string2), " Business %d ", BusinessTrade[id]);
		strcat(string, string2);
		strcat(items, string2);
		
		if(BusinessTrade[playerid] == -1) {	
			PlayerInfo[id][pBizz] = 255;
			UpdateVar(id, "Bizz", 255);
		}
		
		GiveBiz(playerid, BusinessTrade[id]);
		finishAchievement(playerid, 2);
	}				
	if(CarTrade[id] != -1) {
		new idd = CarTrade[id];
		format(string2, sizeof(string2), " Vehicul %s (%d) ", aVehicleNames[CarInfo[idd][cModel]-400], idd);
		strcat(string, string2);	
		strcat(items, string2);
		Iter_Remove(MyVehicle[id], idd);
		Iter_Add(MyVehicle[playerid], idd);
		format(CarInfo[idd][cOwner], 64, PlayerInfo[playerid][pUsername]);
		CarInfo[idd][Userid] = PlayerInfo[playerid][pSQLID];
		mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Owner`='%s', `Userid`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pSQLID], CarInfo[idd][cID]);
		mysql_tquery(SQL, query, "", "");
	}	
	if(VoucherTrade[id][0] != 0) {
		PlayerInfo[playerid][pVoucher][0] = VoucherTrade[id][0];
		PlayerInfo[id][pVoucher][0] -= VoucherTrade[id][0];
		format(string2, sizeof(string2), " Voucher %d (Rare)", VoucherTrade[id][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[id][1] != 0) {
		PlayerInfo[playerid][pVoucher][1] = VoucherTrade[id][1];
		PlayerInfo[id][pVoucher][1] -= VoucherTrade[id][1];
		format(string2, sizeof(string2), " Voucher %d (Epic)", VoucherTrade[id][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[id][2]) {
		PlayerInfo[playerid][pVoucher][2] = VoucherTrade[id][2];
		PlayerInfo[id][pVoucher][2] -= VoucherTrade[id][2];
		format(string2, sizeof(string2), " Voucher %d (Legendary)", VoucherTrade[id][2]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(SkinTrade[id] != -1) {
		give_skin(playerid, SkinTrade[id]);
		for(new i = 0; i < 10; i++) {
			if(PlayerInfo[id][pSkins][i] == SkinTrade[id]) {
				PlayerInfo[id][pSkins][i] = -1;
				PlayerTextDrawColor(id, SkinsPTD[i], 0xFFFFFFFF);
		   		PlayerTextDrawBackgroundColor(id, SkinsPTD[i], 0xFFFFFF20);
			}
		}
		SetPlayerSkin(id, 250);
		UpdateVar(id, "CChar", 250);
		format(string2, sizeof(string2), " Skin %d (%s)", SkinTrade[id], GetSkinType(SkinTrade[id]));
		strcat(string, string2);
		strcat(items, string2);
		save_skin(id);
		save_skin(playerid);
	}
	if(HiddenTrade[id] != -1) {
		PlayerInfo[playerid][pHidden] += HiddenTrade[id];
		PlayerInfo[id][pHidden] -= HiddenTrade[id];
		format(string2, sizeof(string2), " %d Hidden(s)", HiddenTrade[id]);
		strcat(string, string2);
		strcat(items, string2);
		UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
		UpdateVar(id, "Hidden", PlayerInfo[id][pHidden]);
	}
	if(MiliardTrade[id] != 0) {
		StoreMoney[playerid] += MiliardTrade[id];
		StoreMoney[id] -= MiliardTrade[id];
		format(string2, sizeof(string2), " $%d.000.000.000", MiliardTrade[id]);
		strcat(string, string2);
		strcat(items, string2);
		UpdateVar(playerid, "MStore", StoreMoney[playerid]);
		UpdateVar(id, "MStore", StoreMoney[id]);		
	}
	if(TradeTicket[id][0] != 0) {
		PlayerInfo[playerid][pTickete][0] += TradeTicket[id][0];
		PlayerInfo[id][pTickete][0] -= TradeTicket[id][0];
		format(string2, sizeof(string2), " %d Rainbow Ticket(s)", TradeTicket[id][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	if(TradeTicket[id][1] != 0) {
		PlayerInfo[playerid][pTickete][1] += TradeTicket[id][1];
		PlayerInfo[id][pTickete][1] -= TradeTicket[id][1];
		format(string2, sizeof(string2), " %d Vip Ticket(s)", TradeTicket[id][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	SCM(playerid, COLOR_GOLD, string);
	
	format(log2, sizeof(log2), "%s pe [%s], lui %s (user:%d).", log2, items, GetName(id), PlayerInfo[id][pSQLID]);
	InsertLog(playerid, log2, LOG_TRADE);	
	InsertLog(id, log2, LOG_TRADE);
	SendAdminMessage(COLOR_YELLOW, log2, 1);
	
	CancelSelectTextDraw(playerid);
	HideTradeItems(playerid);
	HideTradeTDs(playerid);
	
	CancelSelectTextDraw(id);
	HideTradeItems(id);
 	HideTradeTDs(id);
	return true;
}

function GiveBiz(id, biz) {
	PlayerInfo[id][pBizz] = biz;
	UpdateVar(id, "Bizz", biz);	
	BizzInfo[biz][bOwned] = 1;
	format(BizzInfo[biz][bOwner], 256, GetName(id));
	BizzInfo[biz][bBuyPrice] = 0;
	UpdateLabel(2, biz);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `bizz` SET `Owned`='1', `Owner`='%s', `BuyPrice`='0' WHERE `ID`='%d'", GetName(id), BizzInfo[biz][bID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}

function GiveHouse(id, house) {
	PlayerInfo[id][pHouse] = house;
	UpdateVar(id, "House", house);
	HouseInfo[house][hOwned] = 1;
	format(HouseInfo[house][hOwner], 256, GetName(id));
	HouseInfo[house][hValue] = 0;
	UpdateLabel(1, house);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `houses` SET `Owned`='1', `Owner`='%s', `Value`='0' WHERE `ID`='%d'", GetName(id), HouseInfo[house][hID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}	

function AddTradeItem(playerid, type, amount) {
	new tid, pid, id = TradeID[playerid], Models = -1, bool: VehColor = false; gString[0] = EOS;
	if(TradeItems[playerid] == 5) return true;
	if(TradeAccepted[playerid] == 0) {
		tid = TradeItems[playerid]+11;
		pid = TradeItems[playerid];
	}
	if(TradeAccepted[playerid] == 1) {
		tid = TradeItems[playerid]+16;
		pid = TradeItems[playerid]+5;	
	}		
	TradeItems[playerid] ++;
	TextDrawShowForPlayer(playerid, TradeTD[tid]);
	TextDrawShowForPlayer(id, TradeTD[tid]);
	switch(type) {
		case 0: {
			MoneyTrade[playerid] = amount;
			format(gString, 20, "$%s", FormatNumber(amount));
			Models = 1212;
		}	
		case 1: {
			HouseTrade[playerid] = PlayerInfo[playerid][pHouse];
			format(gString, 20, "House %d", PlayerInfo[playerid][pHouse]);
			Models = 1273;		
		}
		case 2: {
			BusinessTrade[playerid] = PlayerInfo[playerid][pBizz];
			format(gString, 20, "Business %d", PlayerInfo[playerid][pBizz]);
			Models = 1272;			
		}
		case 3: {
			CarTrade[playerid] = amount;
			format(gString, 50, "%s~n~Click here for info..", aVehicleNames[CarInfo[amount][cModel]-400]);
			Models = CarInfo[amount][cModel];	
			VehColor = true;
		}
		case 4: {
			VoucherTrade[playerid][0] = amount;
			format(gString, 50, "Vouchers %d (Rare)", amount);
			Models = 1581;
		}
		case 5: {
			VoucherTrade[playerid][1] = amount;
			format(gString, 50, "Vouchers %d (Epic)", amount);
			Models = 1581;
		}
		case 6: {
			VoucherTrade[playerid][2] = amount;
			format(gString, 60, "Vouchers %d (Legendary)", amount);
			Models = 1581;
		}
		case 7: {
			SkinTrade[playerid] = amount;
			format(gString, 50, "Current Skin~n~%d (%s)", amount, GetSkinType(amount));
			Models = amount;
		}
		case 8: {
			HiddenTrade[playerid] = amount;
			format(gString, 50, "%d Hidden(s)", amount);
			Models = 365;	
		}
		case 9: {
			MiliardTrade[playerid] = amount;
			format(gString, 50, "$%d.000.000.000", amount);			
			Models = 1212;
		}
		case 10: {
			TradeTicket[playerid][0] = amount;
			format(gString, 50, "%d Rainbow tickets", amount);
			Models = 1581;	
		}
		case 11: {
			TradeTicket[playerid][1] = amount;
			format(gString, 30, "%d Vip Tickets", amount);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 1581);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 1581);	
			Models = 1581;		
		}
	}
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], Models);
	PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], Models);	
	if(VehColor) {
		PlayerTextDrawSetPreviewVehCol(playerid, TradeIcon[pid], CarInfo[amount][cColorOne], CarInfo[amount][cColorTwo]);
		PlayerTextDrawSetPreviewVehCol(id, TradeIcon[pid], CarInfo[amount][cColorOne], CarInfo[amount][cColorTwo]);
		PlayerTextDrawSetSelectable(playerid, TradeIcon[pid], true);
		PlayerTextDrawSetSelectable(id, TradeIcon[pid], true);
	}
	PlayerTextDrawSetString(playerid, TradeTitle[pid], gString);
	PlayerTextDrawSetString(id, TradeTitle[pid], gString);
	PlayerTextDrawShow(playerid, TradeTitle[pid]);	
	PlayerTextDrawShow(id, TradeTitle[pid]);	
	PlayerTextDrawShow(playerid, TradeIcon[pid]);	
	PlayerTextDrawShow(id, TradeIcon[pid]);		
	return true;
}
YCMD:trade(playerid, params[], help) {
	new id;	
	if(sscanf(params, "u", id)) 
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/trade <playerid/name>");
	
	if(GetPlayerInterior(playerid) != 0 || IsPlayerInAnyVehicle(playerid)) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu poti face o afacere dintr-un interior sau vehicul!");
	
	if(GetDistanceBetweenPlayers(playerid,id) > 5) 
		return SCM(playerid, COLOR_GREY, "Nu esti langa acel player");

	if(id == INVALID_PLAYER_ID) 
		return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");

	if(PlayerInfo[id][pLevel] < 3 || PlayerInfo[playerid][pLevel] < 3) 
		return SCM(playerid, COLOR_GREY, "Tu sau acel jucator nu aveti nivel peste 3!");
	
	if(TradePlayer[id] == playerid) 
		return SCM(playerid, -1, "I-ai mai facut o oferta acestui jucator!");

	if(TradeID[playerid] != -1) 
		return SCM(playerid, COLOR_WHITE, "Esti deja intr-o afacere!");

	if(playerid == id) 
		return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda asupra ta!");

	TradePlayer[id] = playerid;
	SCMf(playerid, COLOR_LIGHTBLUE, "* L-ai invitat pe %s (%d) pentru a face afaceri.", GetName(id), id);
	SCMf(id, COLOR_LIGHTBLUE, "* %s (%d) te-a invitat sa faceti afaceri. Foloseste (/accept trade %d) pentru a accepta invitatia.", GetName(playerid), playerid, playerid);	
	return true;
}

YCMD:findhouse(playerid, params[], help) {
	if(CP[playerid] != 0) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
	new id;
	if(sscanf(params, "i",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/findhouse <id>");
	CP[playerid] = 43;
	SetPlayerCheckpointEx(playerid, HouseInfo[id][hEntrancex], HouseInfo[id][hEntrancey], HouseInfo[id][hEntrancez], 5.0);
	new string[180];
	format(string, sizeof(string), "Ti-a fost pus un punct rosu pe harta catre casa cu ID-ul %d. khoang cach: %0.2fm", id, GetPlayerDistanceFromPoint(playerid, HouseInfo[id][hEntrancex], HouseInfo[id][hEntrancey], HouseInfo[id][hEntrancez]));
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:findbiz(playerid, params[], help) {
	if(CP[playerid] != 0) return SCM(playerid, COLOR_GOLD, "Ai deja un punct rosu activ. Foloseste /killcp pentru a renunta la el.");
	new id;
	if(sscanf(params, "i",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/findbiz <id>");
	if(id < 1 || id > 48) return SCM(playerid, -1, "ID Invalid!");
	CP[playerid] = 43;
	if(BizzInfo[id][bStatic] == 0) SetPlayerCheckpointEx(playerid, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 5.0);
	else SetPlayerCheckpointEx(playerid,BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ], 5.0);
	new string[180];
	format(string, sizeof(string), "Ti-a fost pus un punct rosu pe harta catre afacerea cu ID-ul %d. khoang cach: %0.2fm", id, GetPlayerDistanceFromPoint(playerid, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]));
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:stealers(playerid, params[], help) {
	if(!IsAMember(playerid)) return SCM(playerid,COLOR_GREY, "Nu faci parte dintr-o mafie.");
	new string[128], x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pJob] == 3 && JobWorking[i] == 1 && IsAGangCar(GetPlayerVehicleID(i))) {
			format(string, sizeof(string), "%s (%d) cuop mot xe thuoc so huu to chuc.", GetName(i), i);
			SCM(playerid, COLOR_LIGHTBLUE, string);
			x++;
		}
	}
	if(x == 0) return SCM(playerid, COLOR_LGREEN, "Error: Niciun rezultat!");
	return true;
}
YCMD:editturf(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new turf, name[64];
	if(sscanf(params, "is[64]", turf, name)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/editturf <turfid> <name>");
	if(turf < 1 || turf >= sizeof(TurfInfo)) return SCM(playerid, COLOR_WHITE, "Nu esti pe un teritoriu!");
	new string[128], query[128];
	format(string, sizeof(string), "Numele la turf-ul %d a fost schimbat in %s.", turf, name);
	SendAdminMessage(COLOR_YELLOW, string, 1);
	format(query, sizeof(query), "UPDATE `turfs` SET `Name`='%s' WHERE `ID`='%d'", name, turf);
	mysql_tquery(SQL, query, "", "");
	format(TurfInfo[turf][zName], 64, name);
	return true;
}
YCMD:attack(playerid, params[], help) {
	if(!IsAMember(playerid)) return SCM(playerid,COLOR_GREY, "Nu faci parte dintr-o mafie.");
	if(PlayerInfo[playerid][pRank] < 3) return SCM(playerid,COLOR_LIGHTBLUE,"You do not have rank 3.");
	new turf,string[100];
	for(new i = 1; i <= sizeof(TurfInfo); i++) {
		if(IsPlayerInTurf(playerid, i) == 1) {
			turf = i;
			break;
		}
	}
	new hour,minute,second, year, month, day;
	gettime(hour,minute,second);
	getdate(year, month, day);
	new days[180];
	format(days, sizeof(days), GetWeekDay(day, month, year));
	if(PlayerInfo[playerid][pAdmin] < 7) {
		if(strcmp(days,"Saturday",true) == 0 || strcmp(days,"Sunday",true) == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu se dau war-uri in weekend!");	
		if(14 < hour > 17) return SCM(playerid, COLOR_LIGHTRED, "War-uri se pot da doar in intervalul 15:00 - 17:00!");
		if(GetFactionMembersOn2(PlayerInfo[playerid][pMember]) < 2) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu sunt minim 3 membri conectati din factiunea ta!");
		if(GetFactionMembersOn2(TurfInfo[turf][zOwned]) < 2) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu sunt minim 3 membri conectati din factiunea care detine teritoriul!");			
	}	
	if(turf == 0) return SCM(playerid, COLOR_WHITE, "Nu esti pe un teritoriu!");
	new faction = PlayerInfo[playerid][pMember];
	if(TurfInfo[turf][zOwned] == faction) return SCM(playerid, COLOR_GREY, "Nu poti ataca turful mafiei tale.");
	if(WarInfo[turf][wAttacker] != 0) return SCM(playerid, COLOR_WHITE, "Acest turf este deja atacat.");
	if(InWar[faction] == 1) return SCM(playerid, COLOR_WHITE, "Este deja un war activ.");
	if(InWar[TurfInfo[turf][zOwned]] == 1) return SCM(playerid, COLOR_WHITE, "Aceasta mafie are deja un war activ.");
	if(FactionDeelay[PlayerInfo[playerid][pMember]] != 0) {
		format(string, sizeof(string), "Poti folosi aceasta comanda peste %d minute (%d secunde).", FactionDeelay[PlayerInfo[playerid][pMember]]/60, FactionDeelay[PlayerInfo[playerid][pMember]]);
		SCM(playerid, COLOR_LGREEN, string);
		return true;
	}
	format(string, sizeof(string), "[WAR] %s started a war with %s.",FactionName(WarInfo[turf][wAttacker]), FactionName(TurfInfo[turf][zOwned]));
	SendAdminMessage(COLOR_LOGS, string, 1);
	format(string, sizeof(string), "[WAR] %s a atacat teritoriul %d detinut de factiunea %s.",GetName(playerid),turf,FactionName(TurfInfo[turf][zOwned]));
	SendFactionMessage(faction,COLOR_MONEY,string);
	format(string, sizeof(string), "[WAR] %s (%s) a atacat teritoriul %d detinut de factiunea ta.",FactionName(WarInfo[turf][wAttacker]),GetName(playerid),turf);
	SendFactionMessage(TurfInfo[turf][zOwned],COLOR_MONEY,string);
	new query[128];
	mysql_format(SQL, query,sizeof(query),"UPDATE `turfs` SET `Time`='24' WHERE `ID`='%d'",turf);
	mysql_tquery(SQL,query, "", "");
	
	TurfInfo[turf][zTime] = 24;
	if(PlayerInfo[playerid][pAdmin] == 7) WarInfo[turf][wTime] = 120;
	else WarInfo[turf][wTime] = 1200;
	WarInfo[turf][wAttacker] = faction;
	WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
	worstscoreat[turf] = 0;
	worstmemberat[turf] = 999;
	bestscoreat[turf] = 0;
	bestmemberat[turf] = 999;
	worstscoredf[turf] = 0;
	worstmemberdf[turf] = 999;
	bestscoredf[turf] = 0;
	bestmemberdf[turf] = 999;
	InWar[TurfInfo[turf][zOwned]] = 1;
	InWar[faction] = 1;
	
	InWarTurf[faction] = turf;
	InWarTurf[TurfInfo[turf][zOwned]] = turf;
	
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pMember] == faction || PlayerInfo[i][pMember] == TurfInfo[turf][zOwned]) UpdateVar(i, "WarTurf", turf);
		}
	}
	
	SetVehicle(faction, turf);
	SetVehicle(TurfInfo[turf][zOwned], turf);
	return true;
}

function SetVehicle(fid, turf) {
	for(new i = 1; i < MAX_SVEHICLES; i++) {
		if(ServerVehicles[i][vFaction] == fid) SetVehicleVirtualWorld(i, turf);
	}					
	return true;
}

function RespawnVehicle(fid) {
	for(new i = 1; i < MAX_SVEHICLES; i++) {
		if(ServerVehicles[i][vFaction] == fid) {
			SetVehicleVirtualWorld(i, 0);
			SetVehicleToRespawn(i);
		}	
	}					
	return true;
}
YCMD:turfs(playerid, params[], help) {
	if(TurfsDisp[playerid] == 0) {
		TurfsDisp[playerid] = 1;
		for(new i = 0; i < sizeof(Turfs); i++) {
			switch(TurfInfo[i][zOwned]) {
				case 0: ShowZoneForPlayer(playerid, Turfs[i], 0xFFFFFFAA); //None
				case 4: ShowZoneForPlayer(playerid, Turfs[i], 0x0CAB3C99); //Grove Street
				case 5: ShowZoneForPlayer(playerid, Turfs[i], 0x11F2F299); //Los Vagos
				case 6: ShowZoneForPlayer(playerid, Turfs[i], 0xFAD40099); //Ballas
				case 10: ShowZoneForPlayer(playerid, Turfs[i], 0xAB00FA99); //Los Aztecas
			}
		}
		SCM(playerid, -1, "Ai activat optiunea de a vizualiza turfurile.");
	} else {
		TurfsDisp[playerid] = 0;
		for(new i = 0; i < sizeof(Turfs); i++) HideZoneForPlayer(playerid, Turfs[i]);
		SCM(playerid, -1, "Ai dezactivat optiunea de a vizualiza turfurile.");
	}
	return true;
}
YCMD:fdeposit(playerid, params[], help) {
	for(new s = 0; s < sizeof(SafeInfo); s++) {
		if(!PlayerToPoint(5, playerid, SafeInfo[s][sPosX], SafeInfo[s][sPosY], SafeInfo[s][sPosZ]))
			continue;

		if(PlayerInfo[playerid][pMember] != SafeInfo[s][sFactionID])
			continue;

		if(TradeID[playerid] != -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
		SeifID[playerid] = PlayerInfo[playerid][pMember]-1;
		Dialog_Show(playerid, DIALOG_FDEPOSIT, DIALOG_STYLE_LIST, "Faction deposit", "Money\nMaterials\nDrugs", "Ok", "Exit");
	}
	return true;
}
YCMD:fwithdraw(playerid, params[], help) {
	if(PlayerInfo[playerid][pRank] < 6)
		return true;

	if(TradeID[playerid] != -1) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");

	for(new s = 0; s < sizeof(SafeInfo); s++) {
		if(!PlayerToPoint(5, playerid, SafeInfo[s][sPosX], SafeInfo[s][sPosY], SafeInfo[s][sPosZ]))
			continue;

		if(PlayerInfo[playerid][pMember] != SafeInfo[s][sFactionID])
			continue;

		SeifID[playerid] = PlayerInfo[playerid][pMember]-1;
		gString[0] = EOS;
		format(gString, 100, "Option\tResult\nMoney\t$%s\nMaterials\t%s\nDrugs\t%s\n", FormatNumber(SafeInfo[s][sMoney]), FormatNumber(SafeInfo[s][sMaterials]), FormatNumber(SafeInfo[s][sDrugs]));
		Dialog_Show(playerid, DIALOG_FWITHDRAW, DIALOG_STYLE_TABLIST_HEADERS, "Faction withdraw", gString, "Ok", "Exit");
	}
	return true;
}
YCMD:government(playerid, params[], help) {
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 13) {		
		if(PlayerInfo[playerid][pRank] < 5) return SCM(playerid, -1, "Ai nevoie de rank 5 pentru a folosi aceasta comanda.");
		new hour,minute,second, year, month, day;
		gettime(hour,minute,second);
		getdate(year, month, day);
		if(hour >= 00 && hour < 8) return SCM(playerid, COLOR_LIGHTRED, "Nu poti folosi aceasta comanda in intervalul 00-08.");
		new string[300],textgov[250],sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]", textgov)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gov <text>");
		if(FaceReclama(textgov)) return RemoveFunction(playerid, textgov);
		if(FaceReclama(textgov)) return Reclama(playerid, textgov);
		SCMTA(COLOR_WHITE, "-------------------------- Anunt Guvernamental --------------------------");
		if(PlayerInfo[playerid][pMember] == 1) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		if(PlayerInfo[playerid][pMember] == 2) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		if(PlayerInfo[playerid][pMember] == 3) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);	
		if(PlayerInfo[playerid][pMember] == 13) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		if(PlayerInfo[playerid][pMember] == 14) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		MesajLung2(0x5776FFFF, string);
	}
	else return SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei sau a primariei.");
	return true;
}
YCMD:editvehicle(playerid, params[], help) {	
	new vehicleid = GetPlayerVehicleID(playerid), string[256], szQuery[256], option[25], result;
	if(PlayerInfo[playerid][pScripter] < 1) return true;
	if(sscanf(params, "s[25]i", option, result)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/editvehicle <option> <result>");
		SCM(playerid, COLOR_WHITE, "Avaiable: Model, Color1, Color2, Faction, Rank.");
		return true;
	}
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	new dbid = GetVehicleID(vehicleid);
	if(ServerVehicles[dbid][vID] == 0) return SCM(playerid, COLOR_GREY, "Acest vehicul nu face parte din baza de date.");
	if(strcmp(option, "model" , true) == 0) {
		if(result < 400 || result > 611) return SCM(playerid, COLOR_GREY, "Modelul vehiculului este invalid.");
		DestroyVehicle(vehicleid);
		CreateVehicle(result, ServerVehicles[dbid][vLocation][0], ServerVehicles[dbid][vLocation][1], ServerVehicles[dbid][vLocation][2], ServerVehicles[dbid][vAngle], ServerVehicles[dbid][vColor][0], ServerVehicles[dbid][vColor][1], -1);
		PutPlayerInVehicleEx(playerid, vehicleid, 0);
		ServerVehicles[dbid][vModel] = result;
		format(string, sizeof(string), "Ai schimbat cu succes modelul acestui vehicul (vID: %d) in: %d.", vehicleid, result);
		SCM(playerid, COLOR_LGREEN, string);
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `svehicles` SET `vModel` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		mysql_tquery(SQL, szQuery, "", "");
	}
	if(strcmp(option, "color1" , true) == 0) {
		if(result < 0 || result > 256) return SCM(playerid, COLOR_GREY, "ID-ul culorii este invalid.");
		ChangeVehicleColorEx(vehicleid, result, ServerVehicles[dbid][vColor][1]);
		ServerVehicles[dbid][vColor][0] = result;
		format(string, sizeof(string), "Ai schimbat cu succes culoarea acestui vehicul (vID: %d) in: %d.", vehicleid, result);
		SCM(playerid, COLOR_LGREEN, string);

		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `svehicles` SET `Color1` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		mysql_tquery(SQL, szQuery, "", "");
	}
	if(strcmp(option, "color2" , true) == 0) {
		if(result < 0 || result > 256) return SCM(playerid, COLOR_GREY, "ID-ul culorii este invalid.");
		ChangeVehicleColorEx(vehicleid, ServerVehicles[dbid][vColor][0], result);
		ServerVehicles[dbid][vColor][1] = result;
		format(string, sizeof(string), "Ai schimbat cu succes culoarea acestui vehicul (vID: %d) in: %d.", vehicleid, result);
		SCM(playerid, COLOR_LGREEN, string);

		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `svehicles` SET `Color2` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		mysql_tquery(SQL, szQuery, "", "");
	}
	if(strcmp(option, "faction" , true) == 0) {
		ServerVehicles[dbid][vFaction] = result;
		format(string, sizeof(string), "Ai schimbat cu succes id-ul factiunii al acestui vehicul (vID: %d) in: %d.", vehicleid, result);
		SCM(playerid, COLOR_LGREEN, string);

		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `svehicles` SET `Faction` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		mysql_tquery(SQL, szQuery, "", "");
	}
	if(strcmp(option, "rank" , true) == 0) {
		ServerVehicles[dbid][vRank] = result;
		format(string, sizeof(string), "Ai schimbat cu succes rank-ul necesar al acestui vehicul (vID: %d) in: %d.", vehicleid, result);
		SCM(playerid, COLOR_LGREEN, string);

		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `svehicles` SET `Rank` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		mysql_tquery(SQL, szQuery, "", "");
	}
	return true;
}
YCMD:vpark(playerid, params[], help) {	
	new carid = GetPlayerVehicleID(playerid), Float: Pos[3], Float: Angle, string[500], szQuery[256];
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	new dbid = GetVehicleID(carid);
	if(ServerVehicles[dbid][vID] == 0) return SCM(playerid, COLOR_GREY, "Acest vehicul nu face parte din baza de date.");
	GetVehiclePos(carid, Pos[0], Pos[1], Pos[2]);
	GetVehicleZAngle(carid, Angle);
	ServerVehicles[dbid][vLocation][0] = Pos[0];
	ServerVehicles[dbid][vLocation][1] = Pos[1];
	ServerVehicles[dbid][vLocation][2] = Pos[2];
	ServerVehicles[dbid][vAngle] = Angle;
	DestroyVehicle(carid);
	ServerVehicles[dbid][vSpawned] = CreateVehicle(ServerVehicles[dbid][vModel], ServerVehicles[dbid][vLocation][0], ServerVehicles[dbid][vLocation][1], ServerVehicles[dbid][vLocation][2], ServerVehicles[dbid][vAngle], ServerVehicles[dbid][vColor][0], ServerVehicles[dbid][vColor][1], -1);
	ChangeVehicleColorEx(carid, ServerVehicles[dbid][vColor][0], ServerVehicles[dbid][vColor][1]);
	PutPlayerInVehicleEx(playerid, carid, 0);
	new plate[64];
	format(plate, sizeof(plate), "F%d %d", ServerVehicles[dbid][vFaction], ServerVehicles[dbid][vSpawned]);
	format(string, sizeof(string), "Pozitiile vehiculului au fost modificate cu succes (vID: %d).", carid);
	SCM(playerid, COLOR_LGREEN, string);
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `svehicles` SET `LocationX` = '%f', `LocationY` = '%f', `LocationZ` = '%f', `Angle` = '%f' WHERE `vID` = '%d'", Pos[0], Pos[1], Pos[2], Angle, ServerVehicles[dbid][vID]);
 	mysql_tquery(SQL, szQuery, "", "");
	return true;
}
YCMD:createvehicle(playerid, params[], help) {	
	new Float: Pos[3], Float: Angle, string[256], szQuery[500], modelid, color[2];
	if(PlayerInfo[playerid][pScripter] < 1) return true;
	if(sscanf(params, "iii", modelid, color[0], color[1])) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/createvehicle <model> <color1> <color2>");
	if(400 <= modelid >= 611) return SCM(playerid, COLOR_GREY, "Invalid vehicle id. (400 - 611)");
	if(!(0 <= color[0] <= 255 && 0 <= color[1] <= 255)) return SCM(playerid, COLOR_GREY, "Invalid color id. (0 - 255)");
	if(IsPlayerInAnyVehicle(playerid)) return true;

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Angle);
	new carid = CreateVehicle(modelid, Pos[0], Pos[1], Pos[2], Angle, color[0], color[1], -1);
	ServerVehicles[carid][vSpawned] = carid;
	SetVehicleNumberPlate(ServerVehicles[carid][vSpawned], "NewCar");
	PutPlayerInVehicleEx(playerid, ServerVehicles[carid][vSpawned], 0);
	ServerVehicles[carid][vID] = carid;
	ServerVehicles[carid][vModel] = modelid;
	ServerVehicles[carid][vLocation][0] = Pos[0];
	ServerVehicles[carid][vLocation][1] = Pos[1];
	ServerVehicles[carid][vLocation][2] = Pos[2];
	ServerVehicles[carid][vAngle] = Angle;
	ServerVehicles[carid][vColor][0] = color[0];
	ServerVehicles[carid][vColor][1] = color[1];

	mysql_format(SQL, szQuery, sizeof(szQuery),
	"INSERT INTO `svehicles` (vModel, LocationX, LocationY, LocationZ, Angle, Color1, Color2) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%d')", modelid, Pos[0], Pos[1], Pos[2], ServerVehicles[carid][vAngle], color[0], color[1]);
	mysql_tquery(SQL, szQuery, "", "");
	format(string, sizeof(string), "Ai creat cu succes un %s (vID: %d).", aVehicleNames[modelid - 400], carid);
	SCM(playerid, COLOR_LGREEN, string);
	format(string, sizeof(string), "Acesta a fost adaugat cu succes in baza de date iar acum sunt in total %d vehicule!", carid);
	SCM(playerid, COLOR_LGREEN, string);
	SCM(playerid, COLOR_LGREEN, "Daca vrei sa modifici acest vehicul, foloseste comanda /editvehicle.");
	return true;
}

YCMD:vinfo(playerid, params[], help) {
	new carid, string[500];
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(IsPlayerInAnyVehicle(playerid)) {
		carid = GetPlayerVehicleID(playerid);
		new dbid = GetVehicleID(carid);
		if(ServerVehicles[dbid][vID] == 0) return SCM(playerid, COLOR_GREY, "Acest vehicul nu face parte din baza de date.");
		format(string, sizeof(string),
			"Vehicle name: {FFFFFF}%s\n{B9C9BF}Vehicle model: {FFFFFF}%d\n{B9C9BF}Vehicle ID: {FFFFFF}%d\n{B9C9BF}LocationX: {FFFFFF}%f\n{B9C9BF}LocationY: {FFFFFF}%f\n{B9C9BF}LocationZ: {FFFFFF}%f\n{B9C9BF}\
			Color #1: {FFFFFF}%d\n{B9C9BF}Color #2: {FFFFFF}%d\n{B9C9BF}Faction: {FFFFFF}%d\n{B9C9BF}Rank: {FFFFFF}%d",
			aVehicleNames[GetVehicleModel(carid) - 400], ServerVehicles[dbid][vModel], dbid, ServerVehicles[dbid][vLocation][0], ServerVehicles[dbid][vLocation][1], ServerVehicles[dbid][vLocation][2],
			ServerVehicles[dbid][vColor][0], ServerVehicles[dbid][vColor][1], ServerVehicles[dbid][vFaction], ServerVehicles[dbid][vRank]);
		Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Vehicle info:", string, "Ok", "");
	}
	else {
		if(sscanf(params, "i", carid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/vinfo <car id>");
		if(!IsValidVehicle(carid)) return SCM(playerid, COLOR_GREY, "Car ID invalid.");
		new dbid = GetVehicleID(carid);
		if(ServerVehicles[dbid][vID] == 0) return SCM(playerid, COLOR_GREY, "Acest vehicul nu face parte din baza de date.");
		format(string, sizeof(string),
			"Vehicle name: {FFFFFF}%s\n{B9C9BF}Vehicle model: {FFFFFF}%d\n{B9C9BF}Vehicle ID: {FFFFFF}%d\n{B9C9BF}LocationX: {FFFFFF}%f\n{B9C9BF}LocationY: {FFFFFF}%f\n{B9C9BF}LocationZ: {FFFFFF}%f\n{B9C9BF}\
			Color #1: {FFFFFF}%d\n{B9C9BF}Color #2: {FFFFFF}%d\n{B9C9BF}Faction: {FFFFFF}%d\n{B9C9BF}Rank: {FFFFFF}%d",
			aVehicleNames[GetVehicleModel(carid) - 400], ServerVehicles[dbid][vModel], dbid, ServerVehicles[dbid][vLocation][0], ServerVehicles[dbid][vLocation][1], ServerVehicles[dbid][vLocation][2],
			ServerVehicles[dbid][vColor][0], ServerVehicles[dbid][vColor][1], ServerVehicles[dbid][vFaction], ServerVehicles[dbid][vRank]);
		Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Vehicle info:", string, "Ok", "");
	}
   	return true;
}
YCMD:setvrank(playerid, params[], help) {
	if(PlayerInfo[playerid][pLeader] == 0) return SCM(playerid, COLOR_LGREEN, "You are not faction leader!");
	new id;
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	if(!FactionVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Khong o trong xe ce apartine factiunii tale!");
	if(sscanf(params, "i", id)) return SCM(playerid, -1, "Syntax: /setvrank <rank>");
	if(id < 1 || id > 6) return SCM(playerid, -1, "Rank invalid!");
	new vehicle = GetVehicleID(GetPlayerVehicleID(playerid));
	ServerVehicles[vehicle][vRank] = id;
	new query[256], string[256];
	mysql_format(SQL, query, 256, "UPDATE `svehicles` SET `Rank`='%d' WHERE `vID`='%d'", id, ServerVehicles[vehicle][vID]);
	mysql_tquery(SQL, query, "", "");
	format(string, sizeof(string), "Ai modificat rank-ul la acest vehicul in %d.", id);
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:order(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) {
		new result[30];
		if(!PlayerToPoint(100, playerid, -2158.6482,642.3111,1052.3750)) return SCM(playerid, COLOR_GREY, "Nu esti in HQ!");
		if(PlayerHit[playerid] == -1) return SCM(playerid, COLOR_LGREEN, "Error: Poti lua arme doar atunci cand ai un contract!");
		if(sscanf(params, "s[30]", result)) {
			SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/order <id>");
			SCM(playerid, COLOR_WHITE, "1. Knife (10 $) | 2. SD-Pistol (100 $) | 3. Sniper (200 $)");
			return true;
		}
		if(PlayerInfo[playerid][pGunLic] == 0) return SCM(playerid,-1,"Ban khong co giay phep su dung sung!");
		if(strcmp(result,"1",true) == 0) {
			if(PlayerMoney(playerid, 10)) return true;
			ServerWeapon(playerid, 4, 200);
			SCM(playerid, COLOR_MONEY, "Ti-ai cumparat un cutit la pretul de 10$.");
			GivePlayerCash(playerid, 0, 10);
			return true;
		}
		else if(strcmp(result,"2",true) == 0) {
			if(PlayerMoney(playerid, 100)) return true;
			ServerWeapon(playerid, 23, 200);
			SCM(playerid, COLOR_MONEY, "Ti-ai cumparat un SD-Pistol la pretul de 100$.");
			GivePlayerCash(playerid, 0, 100);
			return true;
		}
		else if(strcmp(result,"3",true) == 0) {
			if(PlayerMoney(playerid, 200)) return true;
			ServerWeapon(playerid, 34, 200);
			SCM(playerid, COLOR_MONEY, "Ti-ai cumparat un Sniper la pretul de 200$.");
			GivePlayerCash(playerid, 0, 200);
			return true;
		}
		else return SCM(playerid, COLOR_GREY, "Invalid id!");
	}	
	if(!IsMafie(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti membrul unei mafii.");
	if(PlayerInfo[playerid][pGunLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ban khong co giay phep su dung sung.");
	if(GetPlayerInterior(playerid) == 0) return SCM(playerid, COLOR_WHITE,"Nu esti in HQ.");
	if(!IsAtOrderPlace(playerid)) return true;
	new x = PlayerInfo[playerid][pMember]-1, var[3];

	if(SafeInfo[x][sMaterials] < ValueMafie[0][1] && SafeInfo[x][sMoney] < ValueMafie[0][0])
		return SCM(playerid, COLOR_GREY, "Nu ai materiale sau bani de ajuns.");

	for(new i = 0; i < 5; i++) {
		if(SafeInfo[x][sMaterials] < ValueMafie[i][1] && SafeInfo[x][sMoney] < ValueMafie[i][0] || !PlayerInfo[playerid][pGuns][i])
			continue;

		SafeInfo[x][sMaterials] -= ValueMafie[i][1];
		SafeInfo[x][sMoney] -= ValueMafie[i][0];
		ServerWeapon(playerid, GunMafieID[0][i], 60);
		var[0] ++;
		var[1] += ValueMafie[i][1];
		var[2] += ValueMafie[i][0];
	}
	SaveSeif(x);
	format(gString, 100, "(/order) {FFFFFF}Ban nhan duoc %d arme si ai dat %s materiale si $%s.", var[0], FormatNumber(var[1]), FormatNumber(var[2]));
	SCM(playerid, COLOR_LGREEN, gString);		
	return true;
}

function IsMafie(playerid) return PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 ? (true) : (false);

YCMD:setgun(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 4 && PlayerInfo[playerid][pMember] != 5 && 
	PlayerInfo[playerid][pMember] != 6 && PlayerInfo[playerid][pMember] != 10) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu esti intr-o mafie.");

	gString[0] = EOS;
	strcat(gString, "Gun\tStatus\n{FFFFFF}");
	for(new i = 0; i < 5; i++) format(gString, sizeof(gString), "%s%s\t%s\n", gString, GunMafie[i], PlayerInfo[playerid][pGuns][i] ? ("{00ff00}Enabled") : ("{ff0000}Desabled"));
	Dialog_Show(playerid, DIALOG_SETGUN, DIALOG_STYLE_TABLIST_HEADERS, "Set you order gun", gString, "Select", "Cacnel");
	return true;
}
save_guns(playerid) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, 500, "UPDATE `users` SET `Guns`='%d|%d|%d|%d|%d' WHERE `id`='%d'", PlayerInfo[playerid][pGuns][0], PlayerInfo[playerid][pGuns][1], PlayerInfo[playerid][pGuns][2], 
		PlayerInfo[playerid][pGuns][3], PlayerInfo[playerid][pGuns][4], 
	PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");
}
YCMD:wars(playerid, params[], help) {
	new string[256], wars;
	SCM(playerid, COLOR_MONEY, "[WARS]:");
	for(new i = 1; i < sizeof(TurfInfo); i++) {
		if(WarInfo[i][wAttacker] != 0) {
			format(string, sizeof(string), "%s [score: %0.2f] - %s [score: %0.2f] on turf %d. Time left: %s", FactionName(WarInfo[i][wAttacker]), WarScoreF[WarInfo[i][wAttacker]][InWarTurf[WarInfo[i][wAttacker]]], FactionName(WarInfo[i][wFaction]), WarScoreF[WarInfo[i][wFaction]][InWarTurf[WarInfo[i][wAttacker]]], i, CalculeazaTimp2(WarInfo[i][wTime]));
			SCM(playerid, -1, string);
			wars ++;
		}
	}	
	if(wars == 0) SCM(playerid, -1, "Nu este niciun war!");
	return true;
}
function RainBowColors() {
	for(new i = 0; i < 63; i++) {
		switch(i) {
	   		case 0: RainBowColor[i] = 121;
			case 1: RainBowColor[i] = 80;
	 		case 2: RainBowColor[i] = 78;
			case 3: RainBowColor[i] = 181;
			case 4: RainBowColor[i] = 182;
			case 5: RainBowColor[i] = 183;
			case 6: RainBowColor[i] = 158;
			case 7: RainBowColor[i] = 222;
			case 8: RainBowColor[i] = 216;
			case 9: RainBowColor[i] = 231;
			case 10: RainBowColor[i] = 61;
	   		case 11: RainBowColor[i] = 228;
			case 12: RainBowColor[i] = 6;
			case 13: RainBowColor[i] = 219;
		  	case 14: RainBowColor[i] = 6;
			case 15: RainBowColor[i] = 194;
		 	case 16: RainBowColor[i] = 197;
		   	case 17: RainBowColor[i] = 145;
			case 18: RainBowColor[i] = 154;
			case 19: RainBowColor[i] = 241;
			case 20: RainBowColor[i] = 226;
			case 21: RainBowColor[i] = 229;
			case 22: RainBowColor[i] = 86;
			case 23: RainBowColor[i] = 234;
			case 24: RainBowColor[i] = 187;
			case 25: RainBowColor[i] = 189;
			case 26: RainBowColor[i] = 44;
			case 27: RainBowColor[i] = 4;
			case 28: RainBowColor[i] = 75;
			case 29: RainBowColor[i] = 53;
			case 30: RainBowColor[i] = 101;
			case 31: RainBowColor[i] = 95;
			case 32: RainBowColor[i] = 20;
			case 33: RainBowColor[i] = 207;
			case 34: RainBowColor[i] = 255;
			case 35: RainBowColor[i] = 247;
			case 36: RainBowColor[i] = 87;
			case 37: RainBowColor[i] = 108;
			case 38: RainBowColor[i] = 106;
			case 39: RainBowColor[i] = 208;
			case 40: RainBowColor[i] = 209;
			case 41: RainBowColor[i] = 210;
			case 42: RainBowColor[i] = 146;
			case 43: RainBowColor[i] = 176;
			case 44: RainBowColor[i] = 178;
			case 45: RainBowColor[i] = 232;
			case 46: RainBowColor[i] = 167;
			case 47: RainBowColor[i] = 144;
			case 48: RainBowColor[i] = 171;
			case 49: RainBowColor[i] = 179;
			case 50: RainBowColor[i] = 242;
			case 51: RainBowColor[i] = 249;
			case 52: RainBowColor[i] = 248;
			case 53: RainBowColor[i] = 132;
			case 54: RainBowColor[i] = 43;
			case 55: RainBowColor[i] = 45;
			case 56: RainBowColor[i] = 17;
			case 57: RainBowColor[i] = 18;
			case 58: RainBowColor[i] = 21;
			case 59: RainBowColor[i] = 117;
			case 60: RainBowColor[i] = 132;
			case 61: RainBowColor[i] = 212;
			case 62: RainBowColor[i] = 3;
		}
	}
	return true;
}
YCMD:rainbowspeed(playerid, params[], help) {
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) 
		return true;

	new idd = PersonalCar(playerid);
	if(idd == -1) return true;
	if(!CarInfo[idd][cRainBow]) return SCM(playerid, COLOR_LGREEN, "This vehicle is not a rainbow");
	
	new speed;
	if(sscanf(params, "i", speed)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/rainbowspeed [Speed 0/3]");
	if(1 < speed > 3) return SCM(playerid, COLOR_GREY, "Rainbow speed 1 - 3.");
	gString[0] = EOS;
 	format(gString, 30, "You rainbow speed is now %d.", speed);
	SCM(playerid, COLOR_YELLOW, gString);
	masinaRainbow[playerid] = CarInfo[idd][Spawned];

	if(PlayerRainbow[playerid] != 0) {
   		if(Iter_Contains(Rainbows[PlayerRainbow[playerid]], playerid)) Iter_Remove(Rainbows[PlayerRainbow[playerid]], playerid);
   	}
   	PlayerRainbow[playerid] = speed;
	switch(speed) {
		case 0: ChangeVehicleColor(CarInfo[idd][Spawned], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo]);
		case 1:	Iter_Add(Rainbows[1], playerid);
		case 2: Iter_Add(Rainbows[2], playerid);
		case 3: Iter_Add(Rainbows[3], playerid);
	}   
	return true;
}
function ChangeRainbowColors(playerid) {
	K[playerid]++;
	if(K[playerid] > 62) K[playerid] = 0;
	if(!IsPlayerInAnyVehicle(playerid)) {
		KillTimer(CARrainbow[playerid]);
		new carid = FindSpawnID(masinaRainbow[playerid]);
		ChangeVehicleColorEx(masinaRainbow[playerid], CarInfo[carid][cColorOne], CarInfo[carid][cColorTwo]);
   		return true;
	}
	ChangeVehicleColor(masinaRainbow[playerid], RainBowColor[K[playerid]], RainBowColor[K[playerid]]);
	return true;
}
YCMD:megaphone(playerid, params[], help) {
	new tmpcar = GetPlayerVehicleID(playerid),textmeg[250],string[200];
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(sscanf(params, "s[250]", textmeg)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/m <text>");
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei.");
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(!Copcar2(tmpcar)) return SCM(playerid, COLOR_GREY, "Khong o trong xe de-al factiunii.");
	if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1) format(string, sizeof(string), "> Ofiter %s: %s <", GetName(playerid), textmeg);
	else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2) format(string, sizeof(string), "> Agent %s: %s <", GetName(playerid), textmeg);
	else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3) format(string, sizeof(string), "> Soldat %s: %s <", GetName(playerid), textmeg);
	else if(PlayerInfo[playerid][pMember] == 14||PlayerInfo[playerid][pLeader] == 14) format(string, sizeof(string), "> Ofiter %s: %s <", GetName(playerid), textmeg);
	ProxDetector(60.0, playerid, string,COLOR_YELLOW);
	return true;
}
YCMD:radio(playerid, params[], help) {
	new radiomsj[120],sendername[MAX_PLAYER_NAME],string[200];
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(FactionChat[PlayerInfo[playerid][pMember]] == 1 && PlayerInfo[playerid][pRank] < 6) return SCM(playerid, COLOR_GREY, "Chatul factiunii a fost oprit!");
	if(sscanf(params, "s[120]", radiomsj)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/r <text>");
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, radiomsj);
	else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, radiomsj);
	else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, radiomsj);
	else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, radiomsj);
	else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, radiomsj);
	else return  SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei.");
	SendRadioMessage(PlayerInfo[playerid][pMember], 0x8D8DFFFF, string);
	return true;
}
YCMD:duty(playerid, params[], help) {
	if(PlayerInfo[playerid][pGunLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ban khong co giay phep su dung sung. Cauta un instructor pentru a obtine licenta.");
	new house = PlayerInfo[playerid][pHouse],string[200],sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti politist.");
	if(PlayerInfo[playerid][pSleeping] == 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda deoarece esti pe sleep!");
	if(GetPlayerVirtualWorld(playerid) == house || IsPlayerInRangeOfPoint(playerid, 150.0, 245.8297,112.4436,1003.2188) || IsPlayerInRangeOfPoint(playerid, 150.0, 236.3031,162.9478,1003.0300)) {
		if(GetPlayerInterior(playerid) != 0) {
			if(OnDuty[playerid] == 0) {
				if(PlayerInfo[playerid][pWantedLevel] != 0 || PlayerInfo[playerid][pJailTime] != 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece esti in jail sau ai wanted.");
				format(string, sizeof(string), "%s takes some guns and a badge from his locker.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				ServerWeapon(playerid, 24, 500);
				ServerWeapon(playerid, 3, 0);
				ServerWeapon(playerid, 41, 500);
				ServerWeapon(playerid, 29, 1000);
				ServerWeapon(playerid, 31, 1000);
				SetPlayerArmourEx(playerid, 99);
				SetPlayerHealthEx(playerid, 99);
				OnDuty[playerid] = 1;
				SetPlayerSkinEx(playerid, PlayerInfo[playerid][pChar]);
				SCM(playerid, -1, "You are now on duty!");				
			}
			else if(OnDuty[playerid]==1) {
				SCM(playerid, -1, "You are now off duty!");
				format(string, sizeof(string), "%s puts his badge and uniform in his locker.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				OnDuty[playerid] = 0;
				SetPlayerArmourEx(playerid, 0);
				ResetWeapons(playerid);
				SetPlayerSkinEx(playerid, 305);
				tazer[playerid] = 0;			
			}
			SetPlayerToTeamColor(playerid);
		}
		else SCM(playerid, COLOR_GREY, "You can only use this command in houses or in Police HQ.");
	}
	else SCM(playerid, COLOR_GREY, "You can only use this command in houses or in Police HQ.");
	return true;
}
YCMD:cf(playerid, params[], help) {
	new id, string[256];
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/cf <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
	if(!IsPlayerInVehicle(id, GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu este in vehiculul tau!");
	if(PlayerInfo[id][pWantedLevel] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are wanted!");
	format(string, sizeof(string), "* %s %s: %s este la mine, over.", GetRankName(playerid), GetName(playerid), GetName(id));
	SendTeamMessage(3, COLOR_DEPART2, string);
	SendTeamMessage(2, COLOR_DEPART2, string);
	SendTeamMessage(1, COLOR_DEPART2, string);
	SendTeamMessage(14, COLOR_DEPART2, string);
	SendAdminMessage(COLOR_DEPART2, string, 1);	
	TogglePlayerControllable(id, 0);
	format(string, sizeof(string), "* %s has handcuffed %s.", GetName(playerid),GetName(id));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	PlayerCuffed2[id] = 1;
	SetPlayerAttachedObject(id, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(id,SPECIAL_ACTION_CUFFED);	
	return true;
}
YCMD:departments(playerid, params[], help) {
	new text[250],sendername[MAX_PLAYER_NAME],string[200];
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params, "s[250]", text)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/d <text>");
	if(FaceReclama(text)) return RemoveFunction(playerid, text);
	if(FaceReclama(text)) return Reclama(playerid, text);
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, text);
	else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, text);
	else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, text);
	else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, text);
	else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14) format(string, sizeof(string), "* %s %s: %s, over.", GetRankName(playerid), sendername, text);
	else if(PlayerInfo[playerid][pScripter] == 2) format(string, sizeof(string), "* Scripter %s: %s, over.", GetRankName(playerid), sendername, text);
	else if(PlayerInfo[playerid][pAdmin] != 0) format(string, sizeof(string), "* Admin %s: %s, over.", sendername, text);
	else return SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei.");
	SendTeamMessage(3, COLOR_DEPART2, string);
	SendTeamMessage(2, COLOR_DEPART2, string);
	SendTeamMessage(1, COLOR_DEPART2, string);
	SendTeamMessage(13, COLOR_DEPART2, string);
	SendTeamMessage(14, 0x2e64feFF, string);
	SendAdminMessage(COLOR_DEPART2, string, 1);	
	return true;
}

function SendUserMessage(color, text[], userid) {
	foreach(new i: Player) {
		if(PlayerInfo[i][pSQLID] != userid) 
			continue;

		SCM(i, color, text);
	}
	return true;
}

YCMD:confiscate(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid,  COLOR_GREY, "Ban khong thuoc politiei.");
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	new item[15],id,string[180],query[180];
	if(sscanf(params, "us[15]",id,item)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/confiscate <playerid/name> <item>");
		SCM(playerid, COLOR_WHITE, "Items: Driving, Weapons, Drugs.");
		return true;
	}
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(IsACop(id) && OnDuty[id] == 1) return SCM(playerid, COLOR_GREY, "Nu poti confisca armele unui politist!");
	if(strcmp(item,"driving",true) == 0) {
		if(PlayerInfo[id][pCarLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are o licenta de condus!");
		format(string, sizeof(string), "* Ofiter %s ti-a confiscat licenta de condus.", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pCarLic] = 0;
		PlayerInfo[id][pCarLicS] = 2;
		mysql_format(SQL,query,sizeof(query),"UPDATE users SET `CarLic`='0',`CarLicT`='0',`CarLicS`='2' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,query, "", "");
		UpdateFactionRaport(playerid, 3);	
		if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicleEx(playerid);
	}
	else if(strcmp(item,"weapons",true) == 0) {
		if(HaveWeapons(playerid) == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are arme!");
		format(string, sizeof(string), "* Officer %s ti-a confiscat armele.", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		ResetWeapons(id);
		ResetWeapons(id);
	}
	else if(strcmp(item,"drugs",true) == 0) {
		if(PlayerInfo[id][pDrugs] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are droguri!");
		format(string, sizeof(string), "* Officer %s ti-a confiscat drogurile.", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pDrugs] = 0;
		format(query,sizeof(query),"UPDATE users SET `Drugs`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,query, "", "");
		UpdateFactionRaport(playerid, 4);
	}
	else return SCM(playerid, COLOR_GREY, "Item invalid!");
	format(string, sizeof(string), "* %s has confiscated %s's %s.", GetName(playerid), GetName(id), item);
	SendTeamMessage(14, 0x2e64feFF, string);
	SendTeamMessage(3, 0x2e64feFF, string);
	SendTeamMessage(2, 0x2e64feFF, string);
	SendTeamMessage(1, 0x2e64feFF, string);
	return true;
}
YCMD:mdc(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] == 0) {
		if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei.");
		if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	}	
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/mdc <playerid/name>"); {
		if(IsPlayerConnected(id)) ShowMDC(playerid, id);
		else SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	}
	return true;
}

function ShowMDC(playerid, targetid) {
	new id = targetid,  string[256];
	MDCOn[playerid] = id;
	if(PlayerInfo[id][pWantedLevel] == 0) return SCM(playerid, COLOR_GREY, "Acel player nu are wanted!");
	SCM(playerid, -1, "------------------------------------------- MDC -------------------------------------------");	
	format(string, sizeof(string), "Name: %s (%d) | Wanted: {FFFB00}%d{FFFFFF} | Wanted Time: %d minutes | Chased by %d cops", GetName(id), id, PlayerInfo[id][pWantedLevel], 10-WantedTime[id], ChasedBy(id));
	SCM(playerid, -1, string);
	new mdc[256];
	if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", false) == 0) { }
	else {
		format(mdc, sizeof(mdc), "%s", PlayerInfo[id][pCrime1]);
		SCM(playerid, -1, mdc);
	}
	if(strcmp(PlayerInfo[id][pCrime2],  "Fara Crima", false) == 0) { }
	else {
		format(mdc, sizeof(mdc), "%s", PlayerInfo[id][pCrime2]);
		SCM(playerid, -1, mdc);
	}
	if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0) { }
	else {
		format(mdc, sizeof(mdc), "%s", PlayerInfo[id][pCrime3]);
		SCM(playerid, -1, mdc);
	}					
	SCM(playerid, -1, "----------------------------------------------------------------------------------------------");
	return true;
}

function ChasedBy(playerid) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(MDCOn[i] == playerid && targetfind[i] == playerid) x++;
		}
	}
	return x;
}
YCMD:suspect(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_LGREEN, "Nu faci parte dintr-un departament!");
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/suspect <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(OnDuty[playerid] == 0) return true;
	if(IsACop(id) && OnDuty[id] == 1) return SCM(playerid, COLOR_GREY, "Nu poti confisca armele unui politist!");
	new szDialog[1024], szDialog2[1024];
	strcat(szDialog, "Nume\tNivel wanted\tDrept de predare\n");
	for(new i = 0; i < 16; i++) {
		format(szDialog2, sizeof(szDialog2), "%s\t%d\t%s\n", wantedName(i), wantedList[i][0], (wantedList[i][1] == 1) ? ("Fara") : ("Da"));
		strcat(szDialog, szDialog2);
	}
	new title[180];
	format(title, sizeof(title), "%s (%d)", GetName(id), id);
	Dialog_Show(playerid, DIALOG_SUSPECT, DIALOG_STYLE_TABLIST_HEADERS, title, szDialog, "Select", "Cancel");	
	SetPVarInt(playerid, "Userid", id);
	return true;
}
YCMD:setwanted(playerid, params[], help) {
	new id, nivel, string[70], reason[30];
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(sscanf(params, "uis[64]",id,nivel,reason)) return SendClientMessage(playerid,COLOR_GREY, "Syntax: {FFFFFF}/setwanted <playerid/name> <wanted> <reason>");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	PlayerInfo[id][pWantedLevel] = nivel;
	SetPlayerWantedLevel(id, nivel);
	Update(id, pWantedLevelx);
	format(string, sizeof(string), "* Warning Adminul %s ia dat lui %s wanted %d, motiv: %s", GetName(playerid), GetName(id), nivel,reason);
	SendAdminMessage(COLOR_WARNING, string ,1);
	format(string, sizeof(string), "Adminul %s ti-a dat wanted %d, motiv: %s", GetName(playerid), nivel, reason);
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:freepoints(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un departament de politie!");
	new string[180];
	format(string, sizeof(string), "Free points: %d/10", PlayerInfo[playerid][pLawyer]);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}
YCMD:wanted(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei.");
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	new iString[1024],string[300],count = 0,online[50];
	strcat(iString, "Name\tWanted level\tChased by\n");
	if(IsPlayerConnected(playerid)) {
		foreach(new i: Player) {
			if(PlayerInfo[i][pWantedLevel] >= 1) {
				SelectedPlayers[playerid][count] = i;
				string[0] = 0;
				format(string, sizeof(string), "%s (%d)\tWanted level %d\t%d cops\n",GetName(i),i,PlayerInfo[i][pWantedLevel],ChasedBy(i));
				count++;
				strcat(iString,string);
			}
		}
		format(online, sizeof(online),"Wanted online: %d",count);
		if(count == 0) return SCM(playerid,COLOR_GREY, "Nu sunt suspecti conectati.");
		Dialog_Show(playerid, DIALOG_WANTED, DIALOG_STYLE_TABLIST_HEADERS, online, iString , "Ok", "Exit");
	}
	return true;
}
YCMD:sellhouse(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");
YCMD:buyhouse(playerid, params[], help) {
	new id, string[180];
	for(new h = 1; h <= housess; h++) {
		if(PlayerToPoint(2, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez])) {
			if(HouseInfo[h][hValue] == 0) return true;
			if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel]) {
				format(string, sizeof(string), "Ai nevoie de nivel %d pentru a cumpara.", HouseInfo[h][hLevel]);
				SCM(playerid, COLOR_WHITE, string);
				return true;
			}
			if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) return SCM(playerid, COLOR_WHITE, "Ai deja o casa.");
			if(PlayerMoney(playerid, HouseInfo[h][hValue])) return SCM(playerid, COLOR_GREY, "Ban khong du tien pentru a cumpara aceasta casa.");
			id = GetPlayerID(HouseInfo[h][hOwner]);
			gQuery[0] = EOS;
			if(id != INVALID_PLAYER_ID) {
				PlayerInfo[id][pHouse] = 999;
				Update(id, pHousex);
				GivePlayerBank(id, HouseInfo[h][hValue]);
				Update(id, pBankx);
				Update(id, pMBankx);
				format(string, sizeof(string), "* %s ti-a cumparat casa pentru {19CF2E}$%s{239931}. Banii au fost transferati in contul tau bancar.", GetName(playerid), FormatNumber(HouseInfo[h][hValue]));
				SCM(id, 0x239931FF, string);
				mysql_format(SQL, gQuery,sizeof(gQuery),"UPDATE users SET `Bank`='%d', `MBank`='%d' WHERE `ID`='%d'",PlayerInfo[id][pAccount], PlayerInfo[id][pStoreAccount],PlayerInfo[id][pSQLID]);
				mysql_tquery(SQL, gQuery, "", "");
			} else {
				mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `name` = '%s'", HouseInfo[h][hOwner]);
				mysql_tquery(SQL, gQuery, "CheckUsers", "ii", 0, h);			
			}				
			InHouse[playerid] = h;
			PlayerInfo[playerid][pHouse] = HouseInfo[h][hID];
			UpdateVar(playerid, "House", PlayerInfo[playerid][pHouse]);
			UpdateVar(playerid, "Rented", -1);
			PlayerInfo[playerid][pRented] = -1;
			HouseInfo[h][hOwned] = 1;
			format(HouseInfo[h][hOwner], 256, GetName(playerid));
			GivePlayerCash(playerid, 0,HouseInfo[h][hValue]);
			SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
			SetPlayerPosEx(false, playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
			SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
			PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
			PlayerInfo[playerid][pLocal] = h;
			HouseInfo[h][hValue] = 0;
			SCM(playerid, COLOR_MONEY, "Chuc mung! Ti-ai cumparat aceasta casa.");
			Update(playerid,pCashx);
			Update(playerid,pHousex);
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Value`='0' WHERE `ID`='%d'", PlayerInfo[playerid][pUsername],HouseInfo[h][hID]);
			mysql_tquery(SQL,gQuery, "", "");
			UpdateLabel(1, h);
			finishAchievement(playerid, 3);	
		}
	}
	return true;
}
function CheckUsers(type, h) {
	new money, money2;
	gQuery[0] = EOS;
	if(cache_num_rows() != 0) {
		cache_get_value_name_int(0, "Bank", money);
		cache_get_value_name_int(0, "MBank", money2);
		Add64Bit(money2, money, HouseInfo[h][hValue]);
		switch(type) {
			case 0: mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Bank` = '%d', `MBank`='%d', `House` = '999' WHERE `name` = '%s'", money, money2, HouseInfo[h][hOwner]);
			case 1: mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Bank` = '%d', `MBank`='%d', `Bizz` = '255' WHERE `name` = '%s'", money, money2, BizzInfo[h][bOwner]);
		}
		mysql_tquery(SQL, gQuery, "", "");	
	}
	return true;
}
YCMD:discord(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "https://discord.gg/8Tu8KD");
YCMD:updates(playerid, params[], help) return Dialog_Show(playerid, DIALOG_UPDATES, DIALOG_STYLE_TABLIST_HEADERS, "SERVER UPDATES:", "Update name:\tVersion:\tDate:RO:RPG 2.11.0", "Select", "Cancel");
YCMD:unrent(playerid, params[], help) {
	if(IsRentCar[playerid] != 0) { DestroyVehicle(VehicleRent[playerid]), VehicleRent[playerid] = 0, IsRentCar[playerid] = 0, GameTextForPlayer(playerid, "~w~Nu mai ai un vehicul inchiriat.", 5000, 3); }
	else return SCM(playerid, COLOR_LGREEN, "Error: Nu ai ai un vehicul inchiriat!");
	return true;
}
YCMD:rentveh(playerid, params[], help) {
	new string[128];
	if(GetPlayerVirtualWorld(playerid) > 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda cand esti in virtual world!");
	if(PlayerInfo[playerid][pCarLic] < 1) return SCM(playerid, COLOR_LIGHTGREEN, "Error: Ban khong co giay phep lai xe.");
	if(IsRentCar[playerid] != 0) return SCM(playerid, COLOR_WHITE, "Ai deja un vehicul inchiriat.");
	if(!PlayerToPoint(5, playerid, 2250.7197,-83.0548,26.5266)) return SCM(playerid, COLOR_WHITE, "Nu esti la Rent Bike");
	format(string, sizeof(string), "Vehicle\tStock\nPremier\t%d\nSuper GT\t%d\nSultan\t%d\nComet\t%d\nSunrise\t%d\nNRG-500\t%d\nFaggio\t%d\nBMX\t%d", RentStock[0], RentStock[1], RentStock[2], RentStock[3], RentStock[4], RentStock[5], RentStock[6], RentStock[7]);
	Dialog_Show(playerid, DIALOG_RENTCAR, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Rent Car", string, "Select", "Cancel");
	return true;
}
YCMD:renters(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");

YCMD:rentroom(playerid, params[], help) {
	for(new h = 1; h < sizeof(HouseInfo); h++) {
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 && HouseInfo[h][hRentabil] == 1) {
			if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) return SCM(playerid, COLOR_WHITE, "Ai deja o casa.");
			if(PlayerMoney(playerid, 250 * PlayerInfo[playerid][pLevel])) return true;
			PlayerInfo[playerid][pRented] = HouseInfo[h][hID];
			PlayerInfo[playerid][pHouse] = HouseInfo[h][hID];
			InHouse[playerid] = h;
			GivePlayerCash(playerid, 0, 250 * PlayerInfo[playerid][pLevel]);
			HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+ 250 * PlayerInfo[playerid][pLevel];
			SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
			SetPlayerPosEx(false, playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
			SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
			PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
			PlayerInfo[playerid][pLocal] = h;
			Update(playerid,pCashx);
			new str[128];
			mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Rented`='%d',`House`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pRented],PlayerInfo[playerid][pRented],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,str, "", "");
		}
	}
	return true;
}
YCMD:bizmenu(playerid, params[], help) {
	new biz = PlayerInfo[playerid][pBizz];
	if(biz == 255) return SCM(playerid, COLOR_GREY, "Nu ai o afacere!");
	new string[180], open[64];
	if(BizzInfo[biz][bLocked] == 0) open = "Inchide usa";
	else open = "Deschide usa";
	format(string, sizeof(string), "Informatii\nDepozit\n%s\nSeteaza numele\nSeteaza taxa\nVinde afacerea\nRadio", open);
	Dialog_Show(playerid, DIALOG_BMENU, DIALOG_STYLE_LIST, "Business menu", string, "Ok", "Exit");	
	return true;
}
YCMD:housemenu(playerid, params[], help) {
	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) {
		new string[180], open[64];
		if(HouseInfo[PlayerInfo[playerid][pHouse]][hLock] == 0) open = "Inchide usa";
		else open = "Deschide usa";
		format(string, sizeof(string), "Informatii\nChiriasi\nDepozit\n%s\nHouse upgrade\nSeteaza numele\nSeteaza chiria\nVinde casa\nRadio\nHouse upgrades", open);
		Dialog_Show(playerid, DIALOG_HMENU, DIALOG_STYLE_LIST, "House menu", string, "Ok", "Exit");
	}
	else SCM(playerid, COLOR_GREY, "Nu ai o casa!");
	return true;
}

function houseTenants(hid) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pRented] == hid) x++;
	}	
	return x;
}

function showTenants(playerid) {
	new szQuery[256], string[180], MemberString[1024], szResult[180];
	new name[180], TitleString[180], tmembers, onmembers;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Rented` = '%d' LIMIT 50", PlayerInfo[playerid][pHouse]);
	new Cache: result = mysql_query(SQL, szQuery);
	for(new i, j = cache_num_rows(); i != j; ++i)
	{
		cache_get_value_name(i, "name", szResult); format(name, 256, szResult);
		format(Selected[playerid][tmembers], MAX_PLAYER_NAME, name);
		new userID = GetPlayerID(name);	
		if(userID != INVALID_PLAYER_ID) {
			onmembers++;
			format(string, sizeof(string), "%d. %s (%d) (Online)\n", tmembers+1, name, userID);
			strcat(MemberString, string, sizeof(MemberString));
		}
		else {
			format(string, sizeof(string), "%d. %s (Offline)\n", tmembers+1, name);
			strcat(MemberString, string, sizeof(MemberString));
		}
		tmembers++;
	}
	cache_delete(result);
	format(TitleString, sizeof(TitleString), "Chiriasi (%d/%d)", onmembers, tmembers);
	Dialog_Show(playerid, DIALOG_TENANTS, DIALOG_STYLE_LIST, TitleString, MemberString, "Ok", "Exit");		
	return true;
}
YCMD:housewithdraw(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");
YCMD:housename(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");

YCMD:asellbiz(playerid, params[], help) {
	new house, string[180], query[180];
	if(sscanf(params, "d", house)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/asellbiz <Biz ID>");
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_GREY, "Nu ai nivelul necesar de admin pentru a face asta.");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pBizz] == house) {
			PlayerInfo[i][pBizz] = 255;
			Update(i, pBizzx);
		}
	}			
	BizzInfo[house][bLocked] = 0;
	BizzInfo[house][bOwned] = 1;
	BizzInfo[house][bBuyPrice] = 0;
	mysql_format(SQL,query,sizeof(query),"UPDATE `bizz` SET `Locked`='0',`Owned`='1',`Owner`='The State',`BuyPrice`='0' WHERE `ID`='%d'",house);
	mysql_tquery(SQL,query, "", "");
	mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Bizz`='255' WHERE `name`='%s'",BizzInfo[house][bOwner]);
	mysql_tquery(SQL,query, "", "");
	strmid(BizzInfo[house][bOwner], "The State", 0, strlen("The State"), 255);	
	format(string, sizeof(string), "* Bizz-ul %d a fost vandut cu succes la stat!", house);
	SCM(playerid, COLOR_YELLOW, string);
	UpdateLabel(2, house);
	return true;
}


YCMD:givehouse(playerid, params[], help) {
	new house, id, query[256], string[180];
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(sscanf(params, "ud", id, house)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/givehouse <playerid/name> <house id>");
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `House`='999' WHERE `House`='%d'", id);
	mysql_tquery(SQL, query, "", "");
	PlayerInfo[id][pHouse] = house;
	format(query, sizeof(query), "UPDATE `users` SET `House`='%d' WHERE `ID`='%d'", house, PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, query, "", "");
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a dat lui %s(%d) casa %d.", GetName(playerid), GetName(id), id, house);
	SendAdminMessage(COLOR_WHITE, string, 1);
	format(string, sizeof(string), "Administratorul %s ti-a dat casa %d.", GetName(playerid), house);
	SCM(id, COLOR_YELLOW, string);
	HouseInfo[house][hOwned] = 1;
	format(HouseInfo[house][hOwner], 256, GetName(id));
	HouseInfo[house][hValue] = 0;
	UpdateLabel(1, house);
	mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Owned`='1', `Owner`='%s', `Value`='0' WHERE `ID`='%d'", GetName(id), house);
	mysql_tquery(SQL, query, "", "");
	return true;
}	

YCMD:givebiz(playerid, params[], help) {
	new biz, id, query[256], string[180];
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(sscanf(params, "ud", id, biz)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/givebiz <playerid/name> <biz id>");
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Bizz`='255' WHERE `Bizz`='%d'", id);
	mysql_tquery(SQL, query, "", "");
	PlayerInfo[id][pBizz] = biz;
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Bizz`='%d' WHERE `ID`='%d'", biz, PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, query, "", "");
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a dat lui %s(%d) afacerea %d.", GetName(playerid), GetName(id), id, biz);
	SendAdminMessage(COLOR_WHITE, string, 1);
	format(string, sizeof(string), "Administratorul %s ti-a dat afacerea %d.", GetName(playerid), biz);
	SCM(id, COLOR_YELLOW, string);
	BizzInfo[biz][bOwned] = 1;
	format(BizzInfo[biz][bOwner], 256, GetName(id));
	BizzInfo[biz][bBuyPrice] = 0;
	UpdateLabel(2, biz);
	mysql_format(SQL, query, sizeof(query), "UPDATE `bizz` SET `Owned`='1', `Owner`='%s', `BuyPrice`='0' WHERE `ID`='%d'", GetName(id), biz);
	mysql_tquery(SQL, query, "", "");
	return true;
}	
	
YCMD:asellhouse(playerid, params[], help) {
	new house, string[180], query[180];
	if(sscanf(params, "d", house)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/asellhouse <House ID>");
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_GREY, "Nu ai nivelul necesar de admin pentru a face asta.");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pHouse] == house) {
			PlayerInfo[i][pHouse] = 999;
			PlayerInfo[i][pRented] = -1;
			Update(i, pHousex);
		}
	}
	HouseInfo[house][hHel] = 0;
	HouseInfo[house][hArm] = 0;
	HouseInfo[house][hLock] = 0;
	HouseInfo[house][hOwned] = 1;
	HouseInfo[house][hValue] = 0;
	mysql_format(SQL, query,sizeof(query),"UPDATE `houses` SET `Hel`='0',`Arm`='0',`Lockk`='0',`Owned`='1',`Owner`='The State',`Value`='0' WHERE `ID`='%d'",house);
	mysql_tquery(SQL,query, "", "");
	mysql_format(SQL, query,sizeof(query),"UPDATE users SET `House`='999' WHERE `name`='%s'",HouseInfo[house][hOwner]);
	mysql_tquery(SQL,query, "", "");
	strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
	if(HouseInfo[house][hGarage] != 0) strmid(GarageInfo[HouseInfo[house][hGarage]][gOwner], "The State", 0, strlen("The State"), 255);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "* Casa %d a fost vandut cu succes la stat!", house);
	SCM(playerid, COLOR_YELLOW, string);
	UpdateLabel(1, house);
	return true;
}
YCMD:addobject(playerid, params[], help) {
	new obj, money;
	if(PlayerInfo[playerid][pAdmin] < 2) return true;
	if(sscanf(params, "ii", obj, money)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/addobject <object id> <money>");
		SCM(playerid, COLOR_LOGS, "Cadou (19054-19058), Glob (19059-19063), Oua (19341-19345), Dovleac (19320).");
		SCM(playerid, COLOR_LOGS, "Pentru mai multe obiecte, acceseaza: gamerxserver.com/forum/showthread.php?21-Objects-by-Category");
		return true;
	}	
	new id = GetObjects(), Float: Pos[3];
	if(id == MAX_COBJECTS) return SCM(playerid, COLOR_LGREEN, "A fost atinsa limita maxima de obiecte!");
	if(obj < 1 || obj > 19500) return SCM(playerid, COLOR_GREY, "Object invalid!");
	if(money < 1 || money > 1000000) return SCM(playerid, COLOR_GREY, "Invalid money! ($1-$1.000.000)");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	ObjectInfo[id][oID] = CreateDynamicPickup(obj, 23, Pos[0], Pos[1], Pos[2], 0, -1, -1, 100.0);
	ObjectInfo[id][oMoney] = money;
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a adaugat un nou obiect iar acum sunt %d obiecte in total. [obj: %d, $%s]", GetName(playerid), id+1, obj, FormatNumber(money));
	SendAdminMessage(COLOR_WHITE, string, 2);
	return true;
}	
YCMD:removeobjects(playerid, params[], help) {
	new id = GetObjects();
	if(PlayerInfo[playerid][pAdmin] < 2) return true;
	if(id == 0) return SCM(playerid, COLOR_GREY, "Nu sunt obiecte create!");
	new obj = GetObjects();	
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a sters toate obiectele create (%d).", GetName(playerid), obj);
	SendAdminMessage(COLOR_WHITE, string, 2);
	RemoveObjects();
	return true;
}

function RemoveObject(id) {
	DestroyDynamicPickup(ObjectInfo[id][oID]);
	ObjectInfo[id][oID] = 0;
	ObjectInfo[id][oMoney] = 0;
	return true;
}

function RemoveObjects() {
	for(new i = 0; i < MAX_COBJECTS; i++) {
		if(ObjectInfo[i][oID] != 0) {
			DestroyDynamicPickup(ObjectInfo[i][oID]);
			ObjectInfo[i][oID] = 0;
			ObjectInfo[i][oMoney] = 0;
		}
	}	
	return true;
}

function GetObjects() {
	new x;
	for(new i = 0; i < MAX_COBJECTS; i++) {
		if(ObjectInfo[i][oID] != 0) x++;
	}
	return x;
}
YCMD:evict(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");
YCMD:evictall(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");

YCMD:sellhousetostate(playerid, params[], help) {
		
	if(TradeID[playerid] != -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
	new playername[25];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerInfo[playerid][pHouse] == 999) return SCM(playerid, COLOR_GREY, "Ban khong so huu mot ngoi nha.");
	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) Dialog_Show(playerid, DIALOG_SELLHOUSE, DIALOG_STYLE_MSGBOX, "Server:", "Esti sigur ca vrei sa-ti vinzi casa pentru $50,000 la stat?\nDaca apesi pe butonul 'Da', nu mai exista cale de intoarcere!", "Co", "Khong");
	else SCM(playerid, COLOR_GREY, "Ban khong so huu mot ngoi nha.");
	return true;
}
YCMD:sellhouseto(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece acum se pot face afaceri prin intermediul comenzii /trade.");
YCMD:setrent(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");
YCMD:setrentable(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");
YCMD:hu(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /housemenu!");
YCMD:resetraports(playerid, params[], help) {
	new fid = PlayerInfo[playerid][pMember], string[180], membs, money;
	if(PlayerInfo[playerid][pLeader] == 0) return SCM(playerid, COLOR_GREY, "Nu esti lider!");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pMember] == fid) {
			if(CountRaport(i) > 0) {
				money = CountRaport(i)*5000;
				GivePlayerCash(i, 1, money);
				format(string, sizeof(string), "Ban nhan duoc $%s pentru comenzile efectuate (%d).", FormatNumber(money), CountRaport(i));
				SCM(i, COLOR_MONEY, string);
			}			
			PlayerInfo[i][pCommands][0] = 0;
			membs++;
		}
	}
	ResetRaports(PlayerInfo[playerid][pMember]);
	format(string, sizeof(string), "Ai resetat cu succes rapoartele la %d membri!", membs);
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}

function CountRaport(playerid) {
	new x = PlayerInfo[playerid][pCommands][0] + PlayerInfo[playerid][pCommands][1] + PlayerInfo[playerid][pCommands][2] + PlayerInfo[playerid][pCommands][3] + PlayerInfo[playerid][pCommands][4];
	return x;
}

function ResetRaports(fid) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pMember] == fid) {
			PlayerInfo[i][pCommands][0] = 0;
			PlayerInfo[i][pCommands][1] = 0;
			PlayerInfo[i][pCommands][2] = 0;
			PlayerInfo[i][pCommands][3] = 0;
			PlayerInfo[i][pCommands][4] = 0;
			PlayerInfo[i][pInvalidCommands] = 0;
		}
	}
	new query[256];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Commands`='0', `Commands2`='0', `Commands3`='0', `Commands4`='0', `Commands5`='0', `InvalidCommands`='0', `Fires`='0' WHERE `Member`='%d'", fid);
	mysql_tquery(SQL, query, "", "");
	return true;
}

function ResetPlayerRaport(playerid) {
	PlayerInfo[playerid][pCommands][0] = 0;
	PlayerInfo[playerid][pCommands][1] = 0;
	PlayerInfo[playerid][pCommands][2] = 0;
	PlayerInfo[playerid][pCommands][3] = 0;
	PlayerInfo[playerid][pCommands][4] = 0;		
	PlayerInfo[playerid][pInvalidCommands] = 0;	
	new query[256];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Commands`='0', `Commands2`='0', `Commands3`='0', `Commands4`='0', `Commands5`='0', `InvalidCommands`='0', `Fires`='0' WHERE `ID`='%d'", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, query, "", "");
	return true;
}
YCMD:fpk(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,string[200],giveplayer[30],sendername[MAX_PLAYER_NAME], fp, reson[50];
	if(sscanf(params, "uis[50]", id, fp, reson)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/auninvite <playerid/name> <faction punish> <reson>");
	if(0 < fp > 100) return SCM(playerid, COLOR_LGREEN, "Error: Poit da intre 0 si 100 Faction Punish");
	if(strlen(reson) > 50) return 1;
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(IsPlayerConnected(id)) {
		if(id != INVALID_PLAYER_ID) {
			if(PlayerInfo[id][pMember] == 0) return SCM(playerid, -1, "Acel player nu este intr-o factiune!");
			format(string, sizeof(string), "Admin-ul %s l-a scos pe %s din factiunea %s (rank %d) si %d zile, %d FP, motiv: %s.", GetName(playerid), GetName(id), FactionName(PlayerInfo[id][pMember]), PlayerInfo[id][pRank], PlayerInfo[id][pDays], fp, reson);
			SendAdminMessage(COLOR_LIGHTRED, string, 4);
			
			format(string, sizeof(string), "* Ai fost scos din factiunea %s (rank %d) dupa %d zile de admin-ul %s cu %d FP, motiv: %s.",FactionName(PlayerInfo[id][pMember]), PlayerInfo[id][pRank], PlayerInfo[id][pDays], sendername, fp, reson);
			SCM(id, COLOR_LIGHTBLUE, string);
			new string2[280], query[256];
			
			if(PlayerInfo[id][pAdmin] < 6) {
				format(string2, sizeof(string2), "%s a fost scos de Adminul %s din %s (rank %d) dupa %d zile, %d FP, motiv %s.", GetName(id),GetName(playerid),FactionName(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],PlayerInfo[id][pDays], fp, reson);
				mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
			}
			
			FactionMembers[PlayerInfo[id][pMember]] --;
			new faction = PlayerInfo[id][pMember];
			PlayerInfo[id][pMember]=0;
			PlayerInfo[id][pLeader]=0;
			format(string, sizeof(string), "Admin-ul %s l-a scos pe %s din factiunea %s (rank %d) si %d zile, %d FP, motiv: %s.", GetName(playerid), GetName(id), FactionName(faction), PlayerInfo[id][pRank], PlayerInfo[id][pDays], fp, reson);
			SendFactionMessage(faction, COLOR_CLIENT, string);
			PlayerInfo[id][pRank] = 0;
			PlayerInfo[id][pChar] = 0;
			PlayerInfo[id][pFACWarns] = 0;
			PlayerInfo[id][pFpunish] += fp;
			PlayerInfo[id][pDays] = 0;
			WarSeconds[id] = 0;
			PlayerInfo[id][pLW] = 0;
			UpdateVar(id, "LW", 0);				
			gTeam[id] = 3;
			PlayerInfo[id][pTeam] = 3;
			OnDuty[id] = 0;
			tazer[id] = 0;
			SetPlayerArmourEx(id, 0);
			SetPlayerSkinEx(id,PlayerInfo[id][pModel]);
			SetPlayerToTeamColor(id);
			mysql_format(SQL, query,sizeof(query),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`CChar`='0',`FWarn`='0',`FPunish`='%d',`Team`='3',`Days`='0' WHERE `ID`='%d'", PlayerInfo[id][pFpunish], PlayerInfo[id][pSQLID]);
			mysql_tquery(SQL,query, "", "");
			PlayerInfo[id][pCommands][0] = 0;
			ResetWeapons(id);
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Commands`='%d' WHERE `ID`='%d'", PlayerInfo[id][pCommands][0], PlayerInfo[id][pSQLID]);
			mysql_tquery(SQL, query, "", "");
			SpawnPlayer(id);
			PlayerTextDrawHide(playerid, WarTime);
			
		}
	}
	else SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	return true;
}
YCMD:spec(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,string[180];
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/spec <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len nguoi choi do.");
	if(IsPlayerLogged[id] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player se loghiaza!");
	Spectate[playerid] = id;
	SpecPlayers[playerid] ++;					
	if(SpecPlayers[playerid] == 1) {
		GetPlayerPos(playerid, SpecPos[playerid][0], SpecPos[playerid][1], SpecPos[playerid][2]);
		IsPlayerSpec[playerid] = 1;
		pInteriorID[playerid] = GetPlayerInterior(playerid);
		pVirtual[playerid] = GetPlayerVirtualWorld(playerid);
	}
	new Float:health;
	GetPlayerHealthEx(Spectate[playerid], health);
	new rank[50];
	if(PlayerInfo[playerid][pAdmin] != 0) rank = "Admin";
	else rank = "Helper";
	
	if(GetPVarInt(id, "ReportType") == 1) format(string, sizeof(string), "%s %s is now spectating %s. (reported for dm, score: %d)", rank, GetName(playerid),GetName(id), GetPVarInt(id, "ReportScore")); 
	else if(GetPVarInt(id, "ReportType") == 2) format(string, sizeof(string), "%s %s is now spectating %s. (reported for cheats, score: %d)", rank, GetName(playerid),GetName(id), GetPVarInt(id, "ReportScore"));  
	else if(GetPVarInt(id, "ReportType") == 3)  format(string, sizeof(string), "%s %s is now spectating %s. (stuck)", rank, GetName(playerid),GetName(id));
	else format(string, sizeof(string), "%s %s is now spectating %s.", rank, GetName(playerid),GetName(id));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_YELLOW, string,1);
	
	if(GetPVarInt(id, "Reported") == 1 && GetPVarInt(id, "ReportType") != 4 && PlayerInfo[playerid][pAdmin] >= 1) {
		SetPVarInt(id, "Reported", 0);
		SetPVarInt(id, "ReportType", 0);
		SetPVarString(id, "ReportedBy", "");
		SetPVarInt(id, "ReportScore", 0);
		SetPVarString(id, "ReportText", "");		
	}
	if(PlayerInfo[playerid][pAdmin] >= 1 && GetPVarInt(id, "ReportType") != 4) {
		PlayerInfo[playerid][pHelpedPlayers] += GetPVarInt(id, "ReportScore");
		PlayerInfo[playerid][pHelpedPlayersToday] += GetPVarInt(id, "ReportScore");
	}	
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	
	format(string, sizeof(string), "[SPEC] (%d) %s | Level: %d | Health: %.2f | AFK Time: %d | Seconds: %.0f | Duty: %d | Ping: %d",id,GetName(id),PlayerInfo[id][pLevel], health, AFKSeconds[id], PlayerInfo[id][pSeconds], OnDuty[id], GetPlayerPing(id));
	SCM(playerid, 0xFFADADFF, string);
	
	new Player_Weapons[13], Player_Ammos[13], i, guns;
	string = "Weapons:";	
	for(i = 1;i <= 12;i++) {
		GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
		if(Player_Weapons[i] != 0) {
			new weaponName[180];
			GetWeaponName(Player_Weapons[i],weaponName,255);
			format(string,255,"%s %s(%d)", string, weaponName,Player_Ammos[i]);
			guns ++;
		}
	}
	if(guns > 0) SCM(playerid, -1, string);
	Iter_Add(MySpec[id], playerid);

	TogglePlayerSpectating(playerid, 1);
	SetPlayerInterior(playerid, GetPlayerInterior(id));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
	
	if(IsPlayerInAnyVehicle(Spectate[playerid])) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(Spectate[playerid]));
	else PlayerSpectatePlayer(playerid, Spectate[playerid]);
	
	PlayerTextDrawSetString(playerid, SpectatorTD, "Loading...");
	PlayerTextDrawShow(playerid, SpectatorTD);						
	return true;
}
YCMD:specoff(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(Spectate[playerid] == 255) return true;
	TogglePlayerControllable(playerid, 1);
	TogglePlayerSpectating(playerid, 0);
	SetPlayerInterior(playerid,Unspec[playerid][sPint]);
	PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
	PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
	Unspec[playerid][sLocal] = 255;
	gTeam[playerid] = PlayerInfo[playerid][pTeam];
	SetPlayerToTeamColor(playerid);
	SCM(playerid, -1, "Ban khong con spec!");
	//SpawnPlayer(playerid);
	Iter_Remove(MySpec[Spectate[playerid]], playerid);
	Spectate[playerid] = 255;
	SpecPlayers[playerid] = 0;
	LastRecon[playerid] = 1;
	PlayerTextDrawHide(playerid, SpectatorTD);
	return true;
}
YCMD:ah(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(PlayerInfo[playerid][pAdmin] >= 1) {
			SCM(playerid, -1, "{008080}Admin 1:{FFFFFF} /ban /bano /kick /ajail /ajailo /reports /ar /cr /mute /unmute /check /warn /unwarn /goto /gethere /bigears /vre /o /disarm");
			SCM(playerid, -1, "{008080}Admin 1:{FFFFFF} /cc /spec /setvw /setint /freeze /unfreeze /starttp /slapcar /vsearch");
			SCM(playerid, -1, "{008080}Admin 1:{FFFFFF} /gotohouse /gotobiz /alicenses /rnewbie /afklist /cspec /inevent /wars /spawncar  /setjob /dm /dmp /suspendo /ip(4)");
			SCM(playerid, -1, "{008080}Admin 1:{FFFFFF} /fspec /suspend /lp /slap /rmute /respawn /setskin /deletead /inrace /as /aaa3 /aaa2");
		}
		if(PlayerInfo[playerid][pAdmin] >= 2) {
			SCM(playerid, -1, "{008080}Admin 2:{FFFFFF} /unjail /getip /checkweapons /neargun /nearskin /spawncar /despawncars /despawncar /jetpack /area");
			SCM(playerid, -1, "{008080}Admin 2:{FFFFFF} /addobject /removeobjects /aclear /banip");
		}
		if(PlayerInfo[playerid][pAdmin] >= 3) {
			SCM(playerid, -1, "{008080}Admin 3:{FFFFFF} /mark /gotomark /getcar /gotocar /rac /alias /unban /setyt /givegun /unbanip");
		}
		if(PlayerInfo[playerid][pAdmin] >= 4) {
			SCM(playerid, -1, "{008080}Admin 4:{FFFFFF} /sethp /setarmor /unwarn /fuelcars /skick /sethelper /setleader /fpkoff /agl");
			SCM(playerid, -1, "{008080}Admin 4:{FFFFFF} /hw /lw");
		}
		if(PlayerInfo[playerid][pAdmin] >= 5) {
			SCM(playerid, -1, "{008080}Admin 5:{FFFFFF} /givemoney /money /asellhouse /asellbiz /licitatie /fpk /tod /deletefurniture /acover /acoveroff /levelupall");
			SCM(playerid, -1, "{008080}Admin 5:{FFFFFF} /editraport /setrankname /auctions");
		}
		if(PlayerInfo[playerid][pAdmin] >= 6) {
			SCM(playerid, -1, "{008080}Admin 6:{FFFFFF} /restart /restartgame/editjob /editclan /edithouse /movehouse /editbizz /deleteclan /systems");
			SCM(playerid, -1, "{008080}Admin 6:{FFFFFF} /setstat /giftpointsall /restartmissions /addcmd /removecmd /givehouse /givebiz /movebiz /setaw /addsafezone /editsafezone");
			SCM(playerid, -1, "{008080}Admin 6:{FFFFFF} /ao /moneyforall /rpforall /ppforall /reloadstuffs /alock /gotocp /hpforall /rollforall");
			SCM(playerid, -1, "{008080}Admin 6:{FFFFFF} /givehouse /givebiz /movebiz /setaw /addsafezone /editsafezone /givecrate /crateforall");
		}
	}
	else SCM(playerid, COLOR_WHITE, AdminOnly);
 	return true;
}
YCMD:skick(playerid, params[], help) {
	new id,string[100];
	if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(PlayerInfo[id][pScripter] > 0) return SCM(playerid, COLOR_YELLOW, "Nu poti da kick la Scripter/Fondator.");
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/skick <playerid/name>");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti da kick singur.");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Nu poti folosi comanda aceasta pe acel player.");
	if(PlayerInfo[id][pAdmin] != 0 && PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, "Nu poti da kick unui admin!");
	format(string, sizeof(string), "SKick: %s a primit kick de la %s.",GetName(id),GetName(playerid));
	if(GetPVarInt(playerid, "Cover") == 0) SendStaffMessage(COLOR_RED, string);
	KickEx(id);
	return true;
}
YCMD:givegp(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new money,id,string[180],reason[64];
	if(sscanf(params, "uis[64]",id,money,reason)) return SendClientMessage(playerid,COLOR_GREY, "Syntax: {FFFFFF}/givegp <playerid/name> <points> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este conectat.");
	PlayerInfo[id][pGiftPoints] += money;
	format(string, sizeof(string), "%s i-a dat %s Gift points lui %s, motiv: %s.", GetName(playerid),FormatNumber(money),GetName(id), reason);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_YELLOW, string,5);
	format(string, sizeof(string), "* Ban nhan duoc %s Gift points de la administratorul %s, motiv: %s.", FormatNumber(money), GetName(playerid), reason);
	SendClientMessage(id, COLOR_YELLOW, string);
	Update(id, pGiftPointsx);
	return true;
}
YCMD:rentstock(playerid, params[], help) {
	new amount, string[128];
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "i",amount)) return SendClientMessage(playerid,COLOR_GREY, "Syntax: {FFFFFF}/rentstock <amount>");
	if(amount < 1 || amount > 15) SCM(playerid, COLOR_GREY, "Invalid amount, 1 - 15");
	for(new i = 0; i < 10; i++) RentStock[i] = amount;
	SCM(playerid, COLOR_GREEN, "Stockurile schimbate cu success.");
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a schimbat stockurile de la rent in %d", GetName(playerid), amount);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:givepp(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new money,id,string[180],reason[64];
	if(sscanf(params, "uis[64]",id,money,reason)) return SendClientMessage(playerid,COLOR_GREY, "Syntax: {FFFFFF}/givepp <playerid/name> <points> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este conectat.");	
	PlayerInfo[id][pPremiumPoints] += money;
	format(string, sizeof(string), "%s i-a dat %s Premium Points lui %s, motiv: %s.", GetName(playerid),FormatNumber(money),GetName(id), reason);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_YELLOW, string,5);
	format(string, sizeof(string), "* Ban nhan duoc %s Premium Points de la administratorul %s, motiv: %s.", FormatNumber(money), GetName(playerid), reason);
	SendClientMessage(id, COLOR_YELLOW, string);
	Update(id, pPremiumPointsx);
	return true;
}
YCMD:givehpoints(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new hp,id,string[180],reason[64];
	if(sscanf(params, "uis[64]", id,hp,reason)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/givehpoints <playerid/name> <points> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este connectat");
	PlayerInfo[id][pHpoints] += hp;
	format(string, sizeof(string), "%s i-a dat %s RPoints lui %s, motiv: %s", GetName(playerid),FormatNumber(hp),GetName(id), reason);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_ERROR, string,5);
	format(string, sizeof(string), "* Ban nhan duoc %s RPoints de la administratorul %s, motiv: %s.", FormatNumber(hp), GetName(playerid), reason);
	SendClientMessage(id, COLOR_YELLOW, string);
	Info(id, 0, hp);
	Update(id, pHpointsx);
	return true;
}



YCMD:kick(playerid, params[], help) {
	new id, reason[128], string[180];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(DeelayCommand[playerid][2] != 0) return DeelayTime(playerid, 2);
	if(sscanf(params, "us[128]", id, reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/kick <playerid/name> <reason>");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti da kick singur.");
	if(PlayerInfo[id][pScripter] > 0) return SCM(playerid, COLOR_YELLOW, "Nu poti da kick la Scripter/Fondator.");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(FaceReclama(reason)) return RemoveFunction(playerid, reason);
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len nguoi choi do.");
	DeelayCommand[playerid][2] = 10;
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s was kicked by %s, reason: %s", GetName(id), GetName(playerid), reason);
	MesajLung2(COLOR_LIGHTRED, string);

	InsereazaSanctiune(id, playerid, KICK, reason);	
	UpdateVar2(playerid, "Kicks", 1);
	KickEx(id);
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");							
	return true;
}
YCMD:rac(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_WHITE, AdminOnly);
 	new string[180];
	for(new car = 0; car < 252; car++) {
		if(IsValidVehicle(car)) {
			if(!VehicleHaveDriver(car)) SetVehicleToRespawn(car); 
		}	
	}
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a respawnat toate vehiculele nefolosite!", GetName(playerid));
	SendAdminMessage(COLOR_WHITE, string, 3);
	return true;
}

stock VehicleHaveDriver(car) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerInVehicle(i, car)) return true;
	}
	return false;
}
YCMD:warn(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE,  AdminOnly);
	if(DeelayCommand[playerid][1] != 0) return DeelayTime(playerid, 1);
	new id,reason[128],string[200],ip[25];
	if(sscanf(params, "us[128]", id, reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/warn <playerid/name> <reason>");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti da warn singur.");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	GetPlayerIp(id, ip, sizeof(ip));
	if(FaceReclama(reason)) return RemoveFunction(playerid, reason);
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Nu poti folosi comanda aceasta pe acel player.");
	PlayerInfo[id][pWarns] += 1;
	format(string, sizeof(string), "AdmBot: %s a primit o avertizare de la %s, motiv: %s", GetName(id), GetName(playerid), reason);
	SCMTA(COLOR_LIGHTRED, string);
	InsereazaSanctiune(id, playerid, WARN, reason);
	Update(id,pWarnsx);
	if(PlayerInfo[id][pWarns] >= 3) {
		new year,month,day;
		getdate(year, month, day);
		day += 3;
		if(IsMonth31(month)) {
			if(day > 31) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 31) day -= 31;
				}
				else while(day > 31) day -= 31;
			}
		}
		else if(!IsMonth31(month)) {
			if(day > 30) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 30) day -= 30;
				}
				else while(day > 30) day -= 30;
			}
		}
		else if(!IsMonth31(month) && IsMonth29(year) && month == 2) {
			if(day > 29) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 29) day -= 29;
				}
				else while(day > 29) day -= 29;
			}
		}
		else if(!IsMonth31(month) && !IsMonth29(year) && month == 2) {
			if(day > 28) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 28) day -= 28;
				}
				else while(day > 28) day -= 28;
			}
		}
		DeelayCommand[playerid][1] = 10;
		PlayerInfo[id][pBTemp] = 1;
		PlayerInfo[id][pBYear] = year;
		PlayerInfo[id][pBMonth] = month;
		PlayerInfo[id][pBDay] = day;
		strmid(PlayerInfo[id][pBBy], GetName(playerid), 0, strlen(GetName(playerid)), 255);
		strmid(PlayerInfo[id][pBReason], reason, 0, strlen(reason), 255);
		Update(id,pBTempx);
		Update(id,pBYearx);
		Update(id,pBMonthx);
		Update(id,pBDayx);
		Update(id,pBByx);
		Update(id,pBReasonx);
		PlayerInfo[id][pWarns] = 0;
		UpdateVar2(playerid, "Warns", 1);
		Update(id,pWarnsx);
		format(string, sizeof(string), "AdmBot: %s a fost banat de AdmBot (3/3 avertizari) pentru 2 zile, motiv: %s", GetName(id),reason);
		SCMTA(COLOR_LIGHTRED, string);
		InsereazaSanctiune(id, playerid, BAN, "3/3 warns");
		Banlog(ip,GetName(id),GetName(playerid),"3 Warnings",2);
		KickEx(id);
	}
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");								
	return true;
}
YCMD:warno(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE,  AdminOnly);
	if(DeelayCommand[playerid][1] != 0) return DeelayTime(playerid, 1);
	new id[25],reason[128],cont;
	if(sscanf(params, "s[25]s[128]", id, reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/warno <name> <reason>");
	cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid,COLOR_ERROR,"error:{FFFFFF} Acest cont nu a fost gasit in baza de date!");
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `name`='%s'",id);
	mysql_tquery(SQL, gQuery, "CheckWarns", "is[25]s[128]", playerid, id, reason);		
	return true;
}
function CheckWarns(playerid, id[], reason[]) {
	new intid;
	gString[0] = EOS;
	if(cache_num_rows() > 0) cache_get_value_name_int(0, "Warns", intid);
	if(intid >= 3) {
		new year,month,day;
		getdate(year, month, day);
		day += 3;
		if(IsMonth31(month)) {
			if(day > 31) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 31) day -= 31;
				}
				else while(day > 31) day -= 31;
			}
		}
		else if(!IsMonth31(month)) {
			if(day > 30) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 30) day -= 30;
				}
				else while(day > 30) day -= 30;
			}
		}
		else if(!IsMonth31(month) && IsMonth29(year) && month == 2) {
			if(day > 29) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 29) day -= 29;
				}
				else while(day > 29) day -= 29;
			}
		}
		else if(!IsMonth31(month) && !IsMonth29(year) && month == 2) {
			if(day > 28) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 28) day -= 28;
				}
				else while(day > 28) day -= 28;
			}
		}
		DeelayCommand[playerid][1] = 10;
		format(gString, sizeof(gString), "AdmBot: %s a fost banat de AdmBot (3/3 avertizari) pentru 2 zile, motiv: %s",id,reason);
		SCMTA(COLOR_LIGHTRED, gString);
		Banlog("Offline", id, GetName(playerid), "3 Warnings", 2);

		new query[184];		
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `BTemp`='1', `BYear`='%d', `BMonth`='%d', `BDay`='%d', `BBy`='%s', `BReason`='%s' WHERE `name`='%s'",year, month, day, GetName(playerid), reason, id);
		mysql_tquery(SQL ,query, "", "");	
		intid = 0;
	}
	intid++;
	format(gString, sizeof(gString), "Offline: %s a primit o avertizare de la %s, motiv: %s",id, GetName(playerid), reason);
	SCMTA(COLOR_LIGHTRED, gString);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE users SET `Warnings`='%d' WHERE `name`='%s'",intid,id);
	mysql_tquery(SQL, gQuery, "", "");
	format(gString, sizeof(gString), "Ban nhan duoc un warn de la %s, motiv %s.", GetName(playerid), reason);
	InsertEmail(id, GetName(playerid), gString, 0);	
	return true;
}
YCMD:unwarn(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_WHITE,  AdminOnly);
	new id,string[200];
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/unwarn <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pWarns] == 0) return SCM(playerid, COLOR_LGREEN, "* Acel player nu are avertizari!");
	PlayerInfo[id][pWarns] -= 1;
	format(string, sizeof(string), "AdmBot: %s i-a sters un warn lui %s.", GetName(playerid), GetName(id));
	SendAdminMessage(COLOR_LIGHTRED, string, 1);
	format(string, sizeof(string), "* %s ti-a sters un warn!", GetName(playerid));
	SCM(id, COLOR_YELLOW, string);
	Update(id,pWarnsx);
	return true;
}
YCMD:bano(playerid, params[], help) {
	new name[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_WHITE,AdminOnly);
	if(DeelayCommand[playerid][0] != 0) return DeelayTime(playerid, 0);
	new giveplayerid[25],days,reason[128],string[128],cont;
	if(sscanf(params, "s[25]ds[128]", giveplayerid, days,reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/bano <name> <0 = permanent/days> <reason>");
	if(FaceReclama(reason)) return RemoveFunction(playerid, reason);
	new userID = GetPlayerID( giveplayerid );
	if(userID != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel jucator este deja conectat!");
	cont = MySQLCheckAccount(giveplayerid);
	if(cont == 0) return SCM(playerid,COLOR_ERROR,"error:{FFFFFF} Acest cont nu a fost gasit in baza de date!");
	GetPlayerName(playerid, name, sizeof name);
	if(days > 0) {
		new year,month,day;
		getdate(year, month, day);
		day += days;
		if(IsMonth31(month)) {
			if(day > 31) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 31) day -= 31;
				}
				else while(day > 31) day -= 31;
			}
		}
		else if(!IsMonth31(month)) {
			if(day > 30) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 30) day -= 30;
				}
				else while(day > 30) day -= 30;
			}
		}
		else if(!IsMonth31(month) && IsMonth29(year) && month == 2) {
			if(day > 29) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 29) day -= 29;
				}
				else while(day > 29) day -= 29;
			}
		}
		else if(!IsMonth31(month) && !IsMonth29(year) && month == 2) {
			if(day > 28) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 28) day -= 28;
				}
				else while(day > 28) day -= 28;
			}
		}
		DeelayCommand[playerid][0] = 10;
		if(days == 1) {
			format(string,128,"Offline: %s a primit ban de la %s pentru %d zile, motiv: %s",giveplayerid,name,days,reason);
			SCMTA(COLOR_LIGHTRED,string);
		}
		else if(days > 1) {
			format(string,128,"Offline: %s a primit ban de la %s pentru %d zile, motiv: %s",giveplayerid,name,days,reason);
			SCMTA(COLOR_LIGHTRED,string);
		}
		new szQuery[256];
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `BTemp`='1', `BYear`='%d', `BMonth`='%d', `BDay`='%d', `BBy`='%s', `BReason`='%s' WHERE `name`='%s'",year, month, day, name, reason, giveplayerid);
		mysql_tquery(SQL ,szQuery, "", "");	
	}
	else if(days == 0) {
		new szQuery[256];
		mysql_format(SQL, szQuery,sizeof(szQuery),"UPDATE users SET `Banned`='1', `BBy`='%s', `BReason`='%s' WHERE `name`='%s'", GetName(playerid), reason, giveplayerid);
		mysql_tquery(SQL,szQuery, "", "");	
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, szQuery, "", "");	
		if(strfind(reason, "Silent", true) != -1) {
			format(string, sizeof(string), "Silent: %s (offline) has been banned by %s, reason: %s", giveplayerid, GetName(playerid),reason);
			SendAdminMessage(COLOR_LIGHTRED, string, 1);		
		}
		else {
			format(string, sizeof(string), "Offline: %s has been banned by %s, reason: %s", giveplayerid, GetName(playerid),reason);
			SCMTA(COLOR_LIGHTRED, string);
		}	
	}
	else return true;
	
	Banlog("Offline",giveplayerid,GetName(playerid),reason,days);
	PlayerInfo[playerid][pHelpedPlayers] += 2;
	PlayerInfo[playerid][pHelpedPlayersToday] += 2;
	
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");				
	return true;
}
YCMD:respawn(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,string[100];
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/respawn <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Nu poti folosi comanda aceasta pe acel player.");
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s l-a respawnat pe %s.", GetName(playerid), GetName(id));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,4);
	format(string, sizeof(string), "* Ban nhan duoc respawn de la %s.", GetName(playerid));
	SCM(id, -1, string);
	SpawnPlayer(id);
	return true;
}
YCMD:l(playerid, params[], help) {
	if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pAdmin] == 0) return true;
	new text[250],string[250];
	if(sscanf(params, "s[250]",text)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/l <text>");
	if(PlayerInfo[playerid][pScripter] == 2) format(string, sizeof(string), "* Scripter %s: %s",GetName(playerid), text);
	else if(PlayerInfo[playerid][pAdmin] == 9) format(string, sizeof(string), "* Fondator %s: %s",GetName(playerid), text);
	else if(PlayerInfo[playerid][pAdmin] >= 1) format(string, sizeof(string), "* Admin %s: %s",GetName(playerid), text);
	else if(PlayerInfo[playerid][pLeader] != 0) format(string, sizeof(string), "Leader %s %s: %s",FactionName(PlayerInfo[playerid][pLeader]),GetName(playerid), text);
	LeaderChat(0xA2C791FF, string);
	return true;
}
YCMD:e(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper]== 0 && PlayerInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_GREY, "Nu esti helper.");
	new text[250],string[250];
	if(sscanf(params, "s[250]",text)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/ec <text>");
	format(string, sizeof(string), "* (Helper %d) %s: %s",PlayerInfo[playerid][pHelper], GetName(playerid), text);
	if(PlayerInfo[playerid][pScripter] == 2) format(string, sizeof(string), "* Scripter %s: %s",GetName(playerid), text);
	else if(PlayerInfo[playerid][pScripter] == 1) format(string, sizeof(string), "* Fondator %s: %s",GetName(playerid), text);
	else if(PlayerInfo[playerid][pAdmin] >= 1) format(string, sizeof(string), "* (Admin %d) %s: %s",PlayerInfo[playerid][pAdmin],GetName(playerid), text);
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pHelper] >= 1 || PlayerInfo[i][pAdmin] != 0) SCM(i, 0xF2A35EFF, string);
		}
	}
	return true;
}
YCMD:afvr(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return true;
	new id;
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/afvr <faction id>");
	if(id < 1 || id > 15) return SCM(playerid, COLOR_GREY, "Invalid faction!");
	for(new v = 1; v < MAX_SVEHICLES; v++) {
		if(ServerVehicles[v][vFaction] == id) {
			if(!IsVehicleOccupied(ServerVehicles[v][vSpawned])) SetVehicleToRespawn(ServerVehicles[v][vSpawned]), Gas[ServerVehicles[v][vSpawned]] = 100;
		}			
	}
	new string[180];
	format(string, sizeof(string), "(AdmCmd): %s a respawnat toate vehiculele factiunii %s (%d)!", GetName(playerid), FactionName(id), id);
	SendAdminMessage(COLOR_RED, string, 2);
	return true;
}
YCMD:fvrespawn(playerid, params[], help) {
	if(PlayerInfo[playerid][pRank] < 5) return true;
	for(new v = 1; v < MAX_SVEHICLES; v++) {
		if(ServerVehicles[v][vFaction] == PlayerInfo[playerid][pMember]) {
			if(!IsVehicleOccupied(ServerVehicles[v][vSpawned])) SetVehicleToRespawn(ServerVehicles[v][vSpawned]), Gas[ServerVehicles[v][vSpawned]] = 100;
		}			
	}
	new string[180];
	format(string, sizeof(string), "(i) %s a respawnat vehiculele factiunii", GetName(playerid));
	SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);			
	return true;
}
YCMD:members(playerid, params[], help) return ShowFactionMembers(playerid);
stock ShowFactionMembers(playerid) {
	if(PlayerInfo[playerid][pMember] == 0) return true;
	new szQuery[256], string[180], MemberString[1024], szResult[180], days[180];
	new name[180], lastl[180], rank[180], fw[180], TitleString[180], tmembers, onmembers;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`Rank` DESC LIMIT 20", PlayerInfo[playerid][pMember]);
	new Cache: result = mysql_query(SQL, szQuery);
	strcat(MemberString, "#. Name\tRank - FW\tStatus\tDays\n");
	for(new i, j = cache_num_rows(); i != j; ++i)
	{
		cache_get_value_name(i, "name", szResult); format(name, 256, szResult);
		cache_get_value_name(i, "lastOn", szResult); format(lastl, 256, szResult);
		cache_get_value_name(i, "Rank", szResult); format(rank, 256, szResult);
		cache_get_value_name(i, "FWarn", szResult);  format(fw, 256, szResult);
		cache_get_value_name(i, "Days", szResult);  format(days, 256, szResult);
		
		format(Selected[playerid][tmembers], MAX_PLAYER_NAME, name);
		new userID = GetPlayerID(name);	
		
		if(userID != INVALID_PLAYER_ID) {
			onmembers++;
			format(string, sizeof(string), "%d. %s (%d)\t%d - %s/3\tOnline\t%s\n", tmembers+1, name, userID, PlayerInfo[userID][pRank], fw, days);
			strcat(MemberString, string, sizeof(MemberString));
		}
		else {
			format(string, sizeof(string), "%d. %s\t%s - %s/3\t%s\t%s\n", tmembers+1, name, rank, fw, lastl, days);
			strcat(MemberString, string, sizeof(MemberString));
		}
		tmembers++;
	}
	cache_delete(result);
	format(TitleString, sizeof(TitleString), "Members (%d/%d)", onmembers, tmembers);
	Dialog_Show(playerid, DIALOG_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, TitleString, MemberString, "Ok", "Exit");
	return true;
}
YCMD:playerobject(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 2) return true;
	if(sscanf(params, "uiii", params[0], params[1], params[2], params[3])) return SCM(playerid, COLOR_GREY, "Usage: {FF0000} /playerobject <playerid> [index] [id object] [body part]");
	if((params[1] < 0 || params[1] > 9)  || (params[3] < 1 || params[3] > 18)) return true;
	RemovePlayerAttachedObject(params[0], params[1]);
	SetPlayerAttachedObject(params[0], params[1], params[2], params[3], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	EditAttachedObject(params[0],params[1]);
	return true;
}
YCMD:deleteobject(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 2) return true;
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_GREY, "Usage: /deleteobiect <playerid>");
	for(new i; i < 9; i++) RemovePlayerAttachedObject(params[0], i);
	SCM(playerid, COLOR_GREY, "{03c03c} obiectele eliminate din player");
	return true;
}

YCMD:setstatus(playerid, params[], help) {
	if(PlayerInfo[playerid][pLeader] == 0) return SCM(playerid, COLOR_GREY, "Nu esti lider de factiune!");
	switch(DynamicFactions[PlayerInfo[playerid][pLeader]][fApp]) {
		case 0: SCM(playerid, COLOR_WHITE, "Acum, factiunea ta, nu mai recruteaza membrii."), DynamicFactions[PlayerInfo[playerid][pLeader]][fApp] = 1;
		case 1: SCM(playerid, COLOR_WHITE, "Acum, factiunea ta, recruteaza membrii."), DynamicFactions[PlayerInfo[playerid][pLeader]][fApp] = 0;
	}
	new query[180];
	mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `App`='%d' WHERE `ID`='%d'", DynamicFactions[PlayerInfo[playerid][pLeader]][fApp], PlayerInfo[playerid][pLeader]);
	mysql_tquery(SQL, query, "", "");
	return true;
}
YCMD:ban(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,reason[128],string[200],type, str[128];
	if(DeelayCommand[playerid][0] != 0) return DeelayTime(playerid, 0);
	if(sscanf(params, "uds[128]", id,type,reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/ban <playerid/name> <days | 0 = permanent ip ; 1 = permanent account> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti da ban singur.");
	if(PlayerInfo[id][pScripter] > 0) return SCM(playerid, COLOR_YELLOW, "Nu poti da kick la Scripter/Fondator.");
	if(FaceReclama(reason)) return RemoveFunction(playerid, reason);
	if(PlayerInfo[id][pAdmin] > 7) return true;
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Acel player are adminul mai mare ca tine!");
	InsereazaSanctiune(id, playerid, BAN, reason);		
	 
	if(type == 1) {
		if(strfind(reason, "silent", true) != -1) {
			format(string, sizeof(string), "Silent: %s has been banned by %s, reason: %s", GetName(id), GetName(playerid), reason);
			SendAdminMessage(COLOR_LIGHTRED, string, 1);
		}
		else {
			format(string, sizeof(string), "AdmBot: %s has been banned by %s, reason: %s", GetName(id), GetName(playerid), reason);
			MesajLung2(COLOR_LIGHTRED, string);		
		}
		PlayerInfo[id][pBanned] = 1;						
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Banned`='1' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		new ip[25];
		GetPlayerIp(id, ip, sizeof(ip));
		Banlog(ip,GetName(id),GetName(playerid),reason,0);
		KickEx(id);
	}
	else if(type == 0) {
		if(strfind(reason, "silent", true) != -1) {
			format(string, sizeof(string), "Silent: %s has been permanent banned by %s, reason: %s", GetName(id), GetName(playerid), reason);
			SendAdminMessage(COLOR_LIGHTRED, string, 1);
		}
		else {
			format(string, sizeof(string), "AdmBot: %s has been permanent banned by %s, reason: %s", GetName(id), GetName(playerid), reason);
			MesajLung2(COLOR_LIGHTRED, string);		
		}
		PlayerInfo[id][pBanned] = 1;
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Banned`='1' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		new ip[25];
		GetPlayerIp(id, ip, sizeof(ip));
		Banlog(ip,GetName(id),GetName(playerid),reason,0);
		BanSerial(id, playerid, reason);
		Ban(id);
		KickEx(id);
	}
	else if(type > 1) {
		if(strfind(reason, "silent", true) != -1) {
			format(string, sizeof(string), "Silent: %s a primit ban de la %s pentru %d zile, motiv: %s", GetName(id), GetName(playerid), type, reason);
			SendAdminMessage(COLOR_LIGHTRED, string, 1);
		}
		else {
			format(string, sizeof(string), "AdmBot: %s a primit ban de la %s pentru %d zile, motiv: %s", GetName(id), GetName(playerid), type, reason);
			MesajLung2(COLOR_LIGHTRED, string);		
		}
		new year,month,day;
		getdate(year, month, day);
		day += type;
		if(IsMonth31(month)) {
			if(day > 31) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 31) day -= 31;
				}
				else while(day > 31) day -= 31;
			}
		}
		else if(!IsMonth31(month)) {
			if(day > 30) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 30) day -= 30;
				}
				else while(day > 30) day -= 30;
			}
		}
		else if(!IsMonth31(month) && IsMonth29(year) && month == 2) {
			if(day > 29) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 29) day -= 29;
				}
				else while(day > 29) day -= 29;
			}
		}
		else if(!IsMonth31(month) && !IsMonth29(year) && month == 2) {
			if(day > 28) {
				month += 1;
				if(month > 12) {
					year += 1;
					while(day > 28) day -= 28;
				}
				else while(day > 28) day -= 28;
			}
		}
		new ip[25], szQuery[256];
		GetPlayerIp(id, ip, sizeof(ip));
		Banlog(ip,GetName(id),GetName(playerid),reason,type);
		KickEx(id);
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `BTemp`='1', `BYear`='%d', `BMonth`='%d', `BDay`='%d', `BBy`='%s', `BReason`='%s' WHERE `ID`='%d'",year, month, day, GetName(playerid), reason, PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL ,szQuery, "", "");		
	}
	SCM(id,COLOR_WARNING,"Ai fost banat! Daca consideri ca ai luat ban degeaba, poti face o cerere pe (panel."SERVER_NAME".ro/unbans).");
	SCM(id,COLOR_WARNING,"Si poti face un Screen Shot pe tasta F8.");
	strmid(PlayerInfo[id][pBBy], GetName(playerid), 0, strlen(GetName(playerid)), 255);
	strmid(PlayerInfo[id][pBReason], reason, 0, strlen(reason), 255);
	Update(id,pBByx);
	Update(id,pBReasonx);					
	UpdateVar2(playerid, "Bans", 1);
	PlayerInfo[playerid][pHelpedPlayers] += 2;
	PlayerInfo[playerid][pHelpedPlayersToday] += 2;
	DeelayCommand[playerid][0] = 10;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");					
	return true;
}
YCMD:unbanip(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new ip[16],string[128];
	if(sscanf(params, "s[16]", ip)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/unbanip <ip>");
	format(string, sizeof(string), "Warning: %s a debanat IP-ul %s", GetName(playerid), ip);
	SendAdminMessage(COLOR_WARNING, string, 3);		
	return true;
}
YCMD:banip(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new ip[16], reason[64], string[128];
	if(sscanf(params, "s[16]s[64]", ip, reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/banip <ip> <reason>");
	if(strlen(ip) < 5) return SCM(playerid, COLOR_GREY, "IP Invalid!");
			
	format(string, sizeof(string), "Warning: %s a banat IP-ul %s, motiv: %s.", GetName(playerid), ip, reason);
	SendAdminMessage(COLOR_WARNING, string, 3);		
	return true;
}

function BanSerial(playerid, by, reason[]) {
	new query[256], playerserial[128];
	gpci(playerid,playerserial,sizeof(playerserial));
	mysql_format(SQL, query, sizeof(query), "INSERT INTO `ipbans` (`Serial`, `By`, `Reason`, `Name`) VALUES ('%s', '%s', '%s', '%s')", playerserial, GetName(by), reason, GetName(playerid));
	mysql_tquery(SQL, query, "", "");	
	printf("[SERIAL BAN]: %s - %s", GetName(playerid),  playerserial); 
	return true;
}
function UnbanSerial(playerid, ip2[]) {
	new query[180], ip[16];
	format(ip, 16, ip2);
	if(strlen(ip) > 9) strdel(ip, 9, strlen(ip));
	format(query, sizeof(query), "SELECT * FROM `ipbans` WHERE `IP`='%s'", ip);
	new Cache: result = mysql_query(SQL, query);
	new test = cache_num_rows();
	cache_delete(result);
	if(test == 0) return SCM(playerid, COLOR_LGREEN, "Clasa acestui IP nu a fost gasita in baza de date.");		
	mysql_format(SQL, query, sizeof(query), "DELETE FROM `ipbans` WHERE `IP`='%s'", ip);
	mysql_tquery(SQL, query, "", "");	
	printf("[SERIAL IP UNBAN]: %s by %s", ip, GetName(playerid));
	SCM(playerid, COLOR_LGREEN, "Clasa acestui IP a fost gasita in baza de date.");	
	return true;
}
function CheckClassIP(playerid) {
	PlayerAccount[playerid] = cache_num_rows();

	new playerserial[64];
	gpci(playerid,playerserial,sizeof(playerserial));
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `ipbans` WHERE `Serial`='%s' LIMIT 1", playerserial);
	mysql_tquery(SQL, gQuery, "CheckBans", "i", playerid);
	return true;
}
function CheckBans(playerid) {
	GameTextForPlayer(playerid, " ", 100, 3);
	gString[0] = EOS;
	switch(cache_num_rows()) {
		case 1: {
			new name[MAX_PLAYER_NAME], by[MAX_PLAYER_NAME], date[30], reason[64];
			cache_get_value_name(0, "Name", name);
			cache_get_value_name(0, "By", by);
			cache_get_value_name(0, "Date", date);
			cache_get_value_name(0, "Reason", reason);
			format(gString, sizeof(gString), "Acest cont este banat permanent pe IP de %s de pe %s!", by, date);
			SCM(playerid, COLOR_WARNING, gString);
			format(gString, sizeof(gString), "Contul pe care s-a luat ban este %s.", name);
			SCM(playerid, COLOR_CLIENT, gString);
			format(gString, sizeof(gString), "Motivul: %s", reason);
			SCM(playerid, COLOR_CLIENT, gString);	
			format(gString, sizeof(gString), "Daca consideri ca Ban nhan duoc ban aiurea, fa o cerere de unban pe panel!", reason);
			SCM(playerid, COLOR_CLIENT, gString);

			SetPlayerCameraPos(playerid, 1183.0143, -965.7394, 129.6071);
			SetPlayerCameraLookAt(playerid, 1183.7214, -965.0270, 129.2470);
			TogglePlayerSpectating(playerid, false);
			KickEx(playerid);	
		}
		case 0: {
			SetPlayerInterior(playerid, false);
			TogglePlayerControllable(playerid, false);
			gPlayerLogTries[playerid] = 2;
			switch(PlayerAccount[playerid]) {
				case 1: {
					TextDrawShowForPlayer(playerid, LoginTD[0]);
					TextDrawShowForPlayer(playerid, LoginTD[1]);
					format(gString, 100, "Welcome, %s!\nNhap mat khau cua ban de dang nhap.", GetName(playerid));
					Dialog_Show(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Login", gString, "Login", "Quit");
					login[playerid] = gettime()+60;
				}
				case 0: {
					IsRegister[playerid] = true;
					PlayerTextDrawSetString(playerid, RegisterPTD[6], GetName(playerid));
					for(new i = 0; i < 7; i++) PlayerTextDrawShow(playerid, RegisterPTD[i]);
					for(new i = 0; i < 13; i++) TextDrawShowForPlayer(playerid, RegisterTD[i]);
					SelectTextDraw(playerid, 0x5AC6D5FF);
					login[playerid] = gettime()+190;
				}
			}
			Camera(playerid);
		}
	}
	return true;
}
YCMD:check2(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id[25], cont;
	if(sscanf(params, "s[25]", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/check2 <nume intreg>");
	cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid,COLOR_GREY, "Acest nume nu a fost gasit in baza de date!");
	Dialog_Show(playerid, DIALOG_CHECK, DIALOG_STYLE_LIST, "Check:", "PIN\nCash\nBank\nHouse\nBusiness\nLevel\nHours\nPremium Points\nPremium Points win\nHours month\nDaily hours\nLast login\nFaction", "Ok", "Exit");
	SetPVarString(playerid, "CheckName", id);
	return true;
}
YCMD:unban(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id[25], cont;
	if(sscanf(params, "s[25]", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/unban <account name>");
	cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid,COLOR_ERROR,"error:{FFFFFF} Acest cont nu a fost gasit in baza de date!");
	new string[180], query[128];
	mysql_format(SQL, query,sizeof(query),"UPDATE users SET `Banned`='0', `BTemp`='0', `BYear`='0', `BMonth`='0', `BDay`='0' WHERE `name`='%s'",id);
	mysql_tquery(SQL,query, "", "");
	mysql_format(SQL, query,sizeof(query),"DELETE FROM `ipbans` WHERE `Name`='%s'",id);
	mysql_tquery(SQL,query, "", "");	
	format(string, sizeof(string), "Warning: %s i-a dat unban lui %s", GetName(playerid), id);
	SendAdminMessage(COLOR_WARNING, string, 3);		
	return true;
}
YCMD:fpkoff(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id[25], msg[80];
	if(sscanf(params, "s[25]s[80]", id,msg)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/fpkoff <name> <reason>");
	new cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Acest nume nu a fost gasit in baza de date!");
	
	new string[75], query[184];
	mysql_format(SQL, query,sizeof(query),"UPDATE users SET `Member`='0', `Leader`='0', `Rank`='0', `CChar`='250', `Days`='0'  WHERE `name`='%s'",id);
	mysql_tquery(SQL,query, "", "");
	
	format(string, sizeof(string), "%s a fost scos din factiune.", id);
	SCM(playerid, COLOR_YELLOW, string);	
	return true;
}
YCMD:muteo(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id[25],cont,msg[80],time,string[184];
	if(sscanf(params, "s[25]is[80]", id,time,msg)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/muteo <name> <Time(minutes)> <reason>");
	if(FaceReclama(msg)) return RemoveFunction(playerid, msg);
	cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid,COLOR_ERROR,"error:{FFFFFF} Acest cont nu a fost gasit in baza de date!");
	if(time <= 0) return SCM(playerid,-1, "Invalid mute time.");

	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	mysql_format(SQL, szQuery,sizeof(szQuery),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'",time*60,id);
	mysql_tquery(SQL,szQuery, "", "");
	
	format(string, sizeof(string), "Ban nhan duoc mute de la %s pentru %d minute, motiv %s.", GetName(playerid), time, msg);
	InsertEmail(id, GetName(playerid), string, 0);
	format(string, sizeof(string), "Offline: %s a primit mute de la %s pentru %d minute, motiv: %s", id, GetName(playerid),time,msg);
	SCMTA(COLOR_LIGHTRED, string);
	return true;
}
YCMD:restartgame(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new string[100];
	format(string, sizeof(string), "AdmBot: Adminul %s a dat restart la server.", GetName(playerid));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_LOGS, string, 6);
	GameModeExit();
	return true;
}
YCMD:restart(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new time, string[180];
	if(sscanf(params, "i", time)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/restart <timp in minute>");
	format(string, sizeof(string), "(( Admin %s: {FF9696}Urmeaza un restart in %d ore (%d minute). {A9C4E4}))", GetName(playerid), time/60, time);
	SCMTA(COLOR_CLIENT, string);
	RestartTime = time*60;
	return true;
}
YCMD:cancelrestart(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new string[180];
	format(string, sizeof(string), "(( Admin %s: {FF9696}Restart-ul a fost anulat. {A9C4E4}))", GetName(playerid));
	SCMTA(COLOR_CLIENT, string);
	RestartTime = 0;
	return true;
}
YCMD:sethp(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,hp,string[100];
	if(sscanf(params, "ui", id, hp)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/sethp <playerid/name> <hp>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda pe acel player!");
	SetPlayerHealthEx(id, hp);

	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a setat lui %s viata la %d hp.", GetName(playerid),GetName(id),hp);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,2);
	return true;
}
YCMD:setarmor(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,armor,string[100];
	if(sscanf(params, "ui", id, armor)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/setarmor <playerid/name> <armor>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	SetPlayerArmourEx(id, armor);
	
	format(string, sizeof(string), "AdmBot: Adminul %s i-a setat lui %s armura la %d.",  GetName(playerid),GetName(id),armor);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,2);
	return true;
}
YCMD:stats(playerid, params[], help) return ShowStats(playerid,playerid);

YCMD:nmute(playerid, params[], help) {
	new userID, time, result[180];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, COLOR_GREY, "Nu ai acces!");
	if(sscanf(params, "uis[180]", userID, time, result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/nmute <playerid/name> <time> <reason>");
	if(!IsPlayerConnected(userID) && userID == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[userID][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra unui administrator!");
	if(userID == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	PlayerInfo[userID][pNewbieMute] = time*60;
	Update(playerid, pNewbieMutex);
	
	new string[180];
	format(string, sizeof(string), "AdmBot: %s a primit mute %d minute pe /newbie de la %s, motiv: %s", GetName(userID), time, GetName(playerid), result);
	SCMTA(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Ban nhan duoc mute pe /newbie pentru %d minute! Motiv: %s", time, result);
	SCM(userID, COLOR_WARNING, string);
	return true;
}

function SendStaffMessage(color, text[]) {
	foreach(new i: PlayerAdmins) MesajLung(i, color, text);
	foreach(new i: PlayerHelpers) MesajLung(i, color, text);
	return true;
}
YCMD:clearallwanted(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) return true;
	new x, string[180];
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pWantedLevel] != 0) {
			x++;
			PlayerInfo[i][pWantedLevel] = 0;
			SetPlayerWantedLevel(i, 0);
			Update(i, pWantedLevelx);
			ClearCrime(i);
			format(string, sizeof(string),  "Admin %s has cleared all your warrants!", GetName(playerid));
			SCM(i, COLOR_LIGHTRED, string);
		}
	}
	if(x == 0) return SCM(playerid, COLOR_GREY, "Nu sunt playeri cu wanted.");
	format(string, sizeof(string), "AdmCmd: %s a sters wanted-ul la toti. (%d jucatori)", GetName(playerid), x);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:gotoi(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu esti autorizat.");

	SetPlayerPosEx(false, playerid, 837.0604,-2349.4961,5.8061);
	SCM(playerid, COLOR_WHITE, "Te-ai teleporat cu succes la insula.");
	return 1;
}
YCMD:hw(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_LGREEN, "Nu ai permisiunea de a folosi aceasta comanda!");
	new string[180], id, amount, reason[180];
	if(sscanf(params, "uis[180]", id, amount, reason)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/hw <playerid/name> <amount/3> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(PlayerInfo[id][pHelper] == 0) return SCM(playerid, COLOR_GREY, "Acel player nu este helper!");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda pe acel player!");
	if(amount > 3) return SCM(playerid, COLOR_GREY, "Invalid amount! (0-3)");
	if(strlen(reason) < 5) return SCM(playerid, COLOR_GREY, "Motiv prea mic!");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	PlayerInfo[id][pHW] = amount;
	UpdateVar(id, "HW", amount);
	format(string, sizeof(string), "AdmCmd: %s i-a setat lui %s %d/3 helper warns, motiv: %s.", GetName(playerid), GetName(id), amount, reason);
	SendAdminMessage(COLOR_WHITE, string, 1);
	format(string, sizeof(string), "Administratorul %s ti-a setat %d/3 helper warns, motiv: %s.", GetName(playerid), amount, reason);
	SCM(id, COLOR_LIGHTBLUE, string);
	if(amount == 3) {
		PlayerInfo[id][pHelper] = 0;
		PlayerInfo[id][pHW] = 0;
		UpdateVar(id, "HW", 0);
		if(HaveHelp[playerid] != -1) {
			OnHelper[HaveHelp[playerid]] = 0;
			SCM(HaveHelp[playerid], COLOR_YELLOW, "Helper-ul care ti-a acceptat intrebarea nu mai poate raspunde! Asteapta pana cand iti va raspunde altcineva..");
		}
		HaveHelp[playerid] = -1;
		SCM(id, COLOR_YELLOW, "Ti-ai pierdut functia deoarece ai acumulat 3/3 warns.");
	}
	return true;
}
YCMD:lw(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_LGREEN, "Nu ai permisiunea de a folosi aceasta comanda!");
	new string[180], id, amount, reason[180];
	if(sscanf(params, "uis[180]", id, amount, reason)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/lw <playerid/name> <amount/3> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(PlayerInfo[id][pLeader] == 0) return SCM(playerid, COLOR_GREY, "Acel player nu este lider!");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda pe acel player!");
	if(amount > 3) return SCM(playerid, COLOR_GREY, "Invalid amount! (0-3)");
	if(strlen(reason) < 5) return SCM(playerid, COLOR_GREY, "Motiv prea mic!");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	PlayerInfo[id][pLW] = amount;
	UpdateVar(id, "LW", amount);
	format(string, sizeof(string), "AdmCmd: %s i-a setat lui %s %d/3 leader warns, motiv: %s.", GetName(playerid), GetName(id), amount, reason);
	SendAdminMessage(COLOR_WHITE, string, 1);
	format(string, sizeof(string), "Administratorul %s ti-a setat %d/3 leader warns, motiv: %s.", GetName(playerid), amount, reason);
	SCM(id, COLOR_LIGHTBLUE, string);
	if(amount == 3) {
		PlayerInfo[id][pMember]=0;
		PlayerInfo[id][pLeader]=0;
		PlayerInfo[id][pRank] = 0;
		PlayerInfo[id][pChar] = 0;
		PlayerInfo[id][pFACWarns] = 0;
		PlayerInfo[id][pFpunish] = 0;
		PlayerInfo[id][pDays] = 0;
		WarSeconds[id] = 0;
		PlayerInfo[id][pLW] = 0;
		UpdateVar(id, "LW", 0);				
		gTeam[id] = 3;
		PlayerInfo[id][pTeam] = 3;
		OnDuty[id] = 0;
		tazer[id] = 0;
		SetPlayerArmourEx(id, 0);
		SetPlayerSkinEx(id,PlayerInfo[id][pModel]);
		SetPlayerToTeamColor(id);
		new str[180];
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`CChar`='0',`FWarn`='0',`FPunish`='0',`Team`='3',`Days`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		PlayerInfo[id][pCommands][0] = 0;
		new rquery[256];

		mysql_format(SQL, rquery, sizeof(rquery), "UPDATE `users` SET `Commands`='%d' WHERE `ID`='%d'", PlayerInfo[id][pCommands][0], PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL, rquery, "", "");
		SpawnPlayer(id);
		SCM(id, COLOR_YELLOW, "Ti-ai pierdut functia deoarece ai acumulat 3/3 warns.");			
	}
	return true;
}
YCMD:aw(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_LGREEN, "Nu ai permisiunea de a folosi aceasta comanda!");
	new string[180], id, amount, reason[180];
	if(sscanf(params, "uis[180]", id, amount, reason)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/aw <playerid/name> <amount/3> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(PlayerInfo[id][pAdmin] == 0) return SCM(playerid, COLOR_GREY, "Acel player nu este admin!");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda pe acel player!");
	if(amount > 3) return SCM(playerid, COLOR_GREY, "Invalid amount! (0-3)");
	if(strlen(reason) < 5) return SCM(playerid, COLOR_GREY, "Motiv prea mic!");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	PlayerInfo[id][pAW] = amount;
	UpdateVar(id, "AW", amount);
	format(string, sizeof(string), "AdmCmd: %s i-a setat lui %s %d/3 admin warns, motiv: %s.", GetName(playerid), GetName(id), amount, reason);
	SendAdminMessage(COLOR_WHITE, string, 1);
	format(string, sizeof(string), "Administratorul %s ti-a setat %d/3 admin warns, motiv: %s.", GetName(playerid), amount, reason);
	SCM(id, COLOR_LIGHTBLUE, string);
	if(amount == 3) {
		PlayerInfo[id][pAW] = 0;
		UpdateVar(id, "AW", 0);	
		PlayerInfo[id][pAdmin] = 0;
		SCM(id, COLOR_YELLOW, "Ti-ai pierdut functia deoarece ai acumulat 3/3 warns.");
	}
	return true;
}
YCMD:hh(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return true;
	new szDialog[500];
	if(PlayerInfo[playerid][pHelper] >= 1) {
		strcat(szDialog, "{5F9CC9}Helper 1:{FFFFFF}\n");
		strcat(szDialog, "/slap /cc /hpoints /ec /hac\n/nduty, /nreply, /nskip, /ndelete, /checkhelp, /pm, /deletead, /nreport.\n");
	}
	if(PlayerInfo[playerid][pHelper] >= 2) {
		strcat(szDialog, "{5F9CC9}Helper 2:{FFFFFF}\n");
		strcat(szDialog, "/skick /kick /freeze /unfreeze /spec /specoff /mute");
	}
	Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Comenzi:", szDialog, "Close", "");
	return true;
}
YCMD:closereport(playerid, params[], help) {
	new userID, result[180], string[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "Nu ai acces!");
	if(AcceptedReport[playerid] != -1) {
		SCM(playerid, COLOR_YELLOW, "Cuoc tro chuyen ket thuc!");
		SCM(AcceptedReport[playerid], COLOR_YELLOW, "Cuoc tro chuyen ket thuc!");
		AcceptedReport[AcceptedReport[playerid]] = -1;
		AcceptedReport[playerid] = -1;	
		return true;
	}
	if(sscanf(params, "us[180]", userID, result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/closereport <playerid/name> <reason>");
	if(!IsPlayerConnected(userID) || userID == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(GetPVarInt(userID, "Reported") == 0) return SCM(playerid, COLOR_WHITE, "Acel player nu a dat report.");
	format(string, sizeof(string), "Admin %s: %s", GetName(playerid), result);
	SCM(userID, COLOR_GOLD, string);
	SCM(userID, COLOR_GOLD, "Report-ul tau a fost inchis.");
	format(string, sizeof(string), "(/cr) %s a inchis report-ul lui %s, motiv: %s.", GetName(playerid), GetName(userID), result);
	SendAdminMessage(0xFFADADFF, string, 1);
	
	if(PlayerInfo[playerid][pAdmin] >= 1 && GetPVarInt(userID, "ReportType") != 4) {
		PlayerInfo[playerid][pHelpedPlayers] += GetPVarInt(userID, "ReportScore");
		PlayerInfo[playerid][pHelpedPlayersToday] += GetPVarInt(userID, "ReportScore");
	}
	else {
		PlayerInfo[playerid][pHelpedPlayers] ++;
		PlayerInfo[playerid][pHelpedPlayersToday] ++;
	}
	
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	
	SetPVarInt(userID, "Reported", 0);
	SetPVarInt(userID, "ReportType", 0);
	SetPVarString(userID, "ReportedBy", "");
	SetPVarInt(userID, "ReportScore", 0);
	SetPVarString(userID, "ReportText", "");		
	return true;
}
YCMD:acceptreport(playerid, params[], help) {
	new userID, string[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "Nu ai acces!");
	if(AcceptedReport[playerid] != -1) return SCM(playerid, COLOR_GREY, "Ai acceptat deja un report!");
	if(sscanf(params, "u", userID)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/acceptreport <playerid/name>");
	if(!IsPlayerConnected(userID) || userID == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(GetPVarInt(userID, "Reported") == 0) return SCM(playerid, COLOR_WHITE, "Acel player nu a dat report.");
	format(string, sizeof(string), "Admin %s ti-a acceptat report-ul si este in curs de rezolvare.", GetName(playerid));
	SCM(userID, COLOR_GOLD, string);
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a acceptat report-ul lui %s.", GetName(playerid), GetName(userID));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_RED, string, 1);
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	AcceptedReport[playerid] = userID;
	AcceptedReport[userID] = playerid;
	
	format(string, sizeof(string), "A fost creata o conversatie intre tine si adminul %s(%d). (/x)", GetName(playerid), playerid);
	SCM(userID, COLOR_GOLD, string);
	format(string, sizeof(string), "A fost creata o conversatie intre tine si jucatorul %s(%d). (/x)", GetName(userID), userID);
	SCM(playerid, COLOR_GOLD, string);		
	
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	
	if(PlayerInfo[playerid][pAdmin] >= 1 && GetPVarInt(userID, "ReportType") != 4) {
		PlayerInfo[playerid][pHelpedPlayers] += GetPVarInt(userID, "ReportScore");
		PlayerInfo[playerid][pHelpedPlayersToday] += GetPVarInt(userID, "ReportScore");
	}
	else {
		PlayerInfo[playerid][pHelpedPlayers] ++;
		PlayerInfo[playerid][pHelpedPlayersToday] ++;
	}
		
	SetPVarInt(userID, "Reported", 0);
	SetPVarInt(userID, "ReportType", 0);
	SetPVarString(userID, "ReportedBy", "");
	SetPVarInt(userID, "ReportScore", 0);
	SetPVarString(userID, "ReportText", "");		
	return true;
}
YCMD:x(playerid, params[], help) {
	if(AcceptedReport[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu esti intr-o conversatie!");
	new string[256], result[256];
	if(sscanf(params, "s[256]", result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/x <text>");
	if(PlayerInfo[playerid][pAdmin] >= 1) format(string, sizeof(string), "Admin %s: %s", GetName(playerid), result);
	else format(string, sizeof(string), "Player %s: %s", GetName(playerid), result);
	SCM(playerid, COLOR_YELLOW, string);
	SCM(AcceptedReport[playerid], COLOR_YELLOW, string);
	return true;
}
YCMD:rmute(playerid, params[], help) {
	new userID, time, result[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "Nu ai acces!");
	if(sscanf(params, "uis[180]", userID, time, result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/rmute <playerid/name> <time> <reason>");
	if(!IsPlayerConnected(userID) || userID == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(PlayerInfo[userID][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra unui administrator!");
	if(userID == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	PlayerInfo[userID][pReportTime] = time*60;
	Update(playerid, pReportTimex);
	new string[180];
	format(string, sizeof(string), "Ban nhan duoc mute pe /report pentru %d minute! Motiv: %s", time, result);
	SCM(userID, -1, string);
	format(string, sizeof(string), "AdmBot: %s a primit mute %d minute pe /report de la %s, motiv: %s", GetName(userID), time, GetName(playerid), result);
	SCMTA(COLOR_LIGHTRED, string);
	return true;
}
YCMD:reports(playerid, params[], help) {
	new string[180], result[64];
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	SCM(playerid, COLOR_WHITE, "Reports:");
	foreach(new i: Player) {
		if(GetPVarInt(i, "Reported") == 1) {
			GetPVarString(i, "ReportedBy", result, sizeof(result));
			if(GetPVarInt(i, "ReportType") == 1) {
				format(string, sizeof(string), "DM: %s (%d) reported by %s. Score: %d", GetName(i), i, result, GetPVarInt(i, "ReportScore"));
				MesajLung(playerid, COLOR_DBLUE, string);
			}
			if(GetPVarInt(i, "ReportType") == 2) {
				format(string, sizeof(string), "Cheater: %s (%d) reported by %s. Score: %d", GetName(i), i, result, GetPVarInt(i, "ReportScore"));
				MesajLung(playerid, COLOR_DBLUE, string);
			}
			if(GetPVarInt(i, "ReportType") == 3) {
				format(string, sizeof(string), "Stuck: %s (%d)", GetName(i), i);
				MesajLung(playerid, COLOR_WARNING, string);
			}				
			
			if(GetPVarInt(i, "ReportType") == 4) {
				GetPVarString(i, "ReportText", result, sizeof(result));
				format(string, sizeof(string), "Another: %s (%d): %s", GetName(i), i, result);
				MesajLung(playerid, COLOR_LGREEN, string);
			}		
		}
	}
	return true;
}


YCMD:dm(playerid, params[], help) {
	new id, string[180];
	if(PlayerInfo[playerid][pAdmin] == 0) { }
	else {
		if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dm <playerid/name>");
		if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
		if(id == playerid && PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
		if(PlayerInfo[id][pJailTime] != 0) return SCM(playerid, COLOR_GREY, "Acel player este deja in jail!");
		PlayerInfo[id][pDM] ++;
		UpdateVar(playerid, "DM", PlayerInfo[id][pDM]);
		new minutes = PlayerInfo[id][pDM] * 15;
		
		ResetWeapons(id);
		SetPlayerWantedLevel(id, 6);
		
		PlayerInfo[id][pWantedLevel] = 0;
		Update(id, pWantedLevelx);
		PlayerInfo[id][pJailed] = 2;
		PlayerInfo[id][pJailTime] = minutes*60;
		JailPrice[id] = 0;		
		
		UpdateVar(id, "AJail", 1);
		PlayerInfo[id][pAJail] = 1;
		InsereazaSanctiune(id, playerid, JAIL, "DM");	
		Update(id,pJailedx);
		Update(id,pJailTimex);

		UpdateVar2(playerid, "Jails", 1);
		PlayerInfo[playerid][pHelpedPlayers] ++;
		PlayerInfo[playerid][pHelpedPlayersToday] ++;
		
		new szQuery[256];
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, szQuery, "", "");	
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `GunLic`='0', `GunLicT`='0', `GunLicS`='5' WHERE `ID`='%d'", PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL, szQuery, "", "");				
		format(string, sizeof(string), "AdmBot: %s a fost bagat in inchisoare de %s pentru %d minute, motiv: DM #%d", GetName(id), GetName(playerid), minutes, PlayerInfo[id][pDM]);
		MesajLung2(COLOR_LIGHTRED, string);			
		format(string, sizeof(string), "Licenta ta de arme a fost confiscata timp de 5 ore deoarece Ban nhan duoc jail pentru DM!");
		SCM(id, COLOR_WARNING, string);
		
		PlayerInfo[id][pGunLicS] = 5;
		PlayerInfo[id][pGunLic] = 0;
		PlayerInfo[id][pGunLicT] = 0;
		ResetPlayerWeapons(id);			
		SpawnPlayer(id);
	}
	return true;
}
YCMD:dmp(playerid, params[], help) {
	new id, string[180];
	if(PlayerInfo[playerid][pAdmin] == 0) return true;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dmp <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(PlayerInfo[id][pJailTime] != 0) return SCM(playerid, COLOR_GREY, "Acel player este deja in jail!");	
	PlayerInfo[id][pDM] ++;
	UpdateVar(playerid, "DM", PlayerInfo[id][pDM]);
	new minutes = 10;
	
	ResetWeapons(id);
	SetPlayerWantedLevel(id, 6);
	
	PlayerInfo[id][pWantedLevel] = 0;
	Update(id, pWantedLevelx);
	PlayerInfo[id][pJailed] = 2;
	PlayerInfo[id][pJailTime] = minutes*60;
	JailPrice[id] = 0;		
	
	UpdateVar(id, "AJail", 1);
	PlayerInfo[id][pAJail] = 1;
	InsereazaSanctiune(id, playerid, JAIL, "DM");	
	Update(id,pJailedx);
	Update(id,pJailTimex);

	UpdateVar2(playerid, "Jails", 1);
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	format(string, sizeof(string), "AdmBot: %s a fost bagat in inchisoare de %s pentru %d minute, motiv: DM #%d", GetName(id), GetName(playerid), minutes, PlayerInfo[id][pDM]);
	MesajLung2(COLOR_LIGHTRED, string);				
	SpawnPlayer(id);
	return true;
}
YCMD:report(playerid, params[], help) {
	if(PlayerInfo[playerid][pReportTime] >= 1) {	
		new string[128];
		format(string, sizeof(string), "Vei putea da un report peste %d minute (%d secunde).", PlayerInfo[playerid][pReportTime]/60, PlayerInfo[playerid][pReportTime]);
		SCM(playerid, COLOR_GRAD4, string);
		return true;
	}
	if(PlayerInfo[playerid][pAdmin] >= 1 && GetPVarInt(playerid, "Cover") == 0) return SCM(playerid, COLOR_GREY, "Nu poti da un report deoarece esti admin!");
	if(PlayerInfo[playerid][pLevel] < 5) SCM(playerid, COLOR_LGREEN, "Nu da report pentru motive inutile deoarece vei fi sanctionat!");
	Dialog_Show(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report", "Raporteaza DM\nRaporteaza un codat\nIntrebari despre donatii\nSunt blocat\nAlta problema", "Select", "Close");
	return true;
}
		
function CheckReport(playerid) {
	if(Ajutor[playerid] == 1) {
		SCM(playerid, COLOR_YELLOW, "Report-ul tau a fost inchis automat deoarece nu Ban nhan duoc un raspuns.");
		Ajutor[playerid] = 0;
		ReportedPlayer[playerid] = -1;
		SetPVarInt(playerid, "Reported", 0);
		SetPVarInt(playerid, "ReportType", 0);
		SetPVarString(playerid, "ReportedBy", "");
		SetPVarInt(playerid, "ReportScore", 0);
		SetPVarString(playerid, "ReportText", "");		
		if(ReportTimer[playerid] != 0) ReportTimer[playerid] = 0;
	}
	return true;
}
YCMD:helps(playerid, params[], help) {
	new x, string[180];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return true;
	SCM(playerid, -1, "------------------------------------------------------------------------------------");
	foreach(new i: Player) {
		if(Helped[i] == 1) {
			format(string, 512, "* %s (%d) il intreaba pe %s: %s", GetName(i), i, LaCineEsteIntrebarea(i), HelpText[i]);
			MesajLung(playerid, COLOR_LGREEN, string);
			x++;
		}
	}
	format(string, sizeof(string), "Sunt %d intrebari in acest moment!", x);
	SCM(playerid, COLOR_WHITE, string);
	SCM(playerid, -1, "------------------------------------------------------------------------------------");
	return true;
}

stock LaCineEsteIntrebarea(playerid) {
	new szName[180];
	format(szName, 256, "Server");
	foreach(new i: Player) {
		if(HaveHelp[i] == playerid && IsPlayerConnected(playerid)) {
			format(szName, 256, GetName(i));
		}
	}
	return szName;	
}
YCMD:newbie(playerid, params[], help) {
	new result[200], string[255];
	if(Helped[playerid] == 1) return SCM(playerid, -1, "Ai pus recent o intrebare. Asteapta un raspuns!");
	if(sscanf(params, "s[200]", result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/newbie <text>");
	if(PlayerInfo[playerid][pNewbieMute] >= 1) {
		format(string, sizeof(string), "Trebuie sa mai astepti %d secunde pentru a folosi din nou comanda /newbie!", PlayerInfo[playerid][pNewbieMute]);
		SCM(playerid, -1, string);
		return true;
	}
	if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1) {
		if(GetPVarInt(playerid, "Cover") == 0)
		return SCM(playerid, COLOR_WHITE, "Faci parte din staff, nu poti folosi aceasta comanda!");
	} 
	format(string, sizeof(string), "Intrebarea ta a fost trimisa helperilor. Asteapta sa-ti raspunda unul!");
	SCM(playerid, COLOR_YELLOW, string);
	HelpText[playerid] = "";
	format(HelpText[playerid], 256, result);
	PlayerInfo[playerid][pNewbieMute] = 120;
	Helped[playerid] = 1;
	OnHelper[playerid] = 0;
	return true;
}
YCMD:hduty(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_LGREEN, "* Nu ai acces la aceasta comanda!");
	switch(HelperDuty[playerid]) {
		case 0: HelperDuty[playerid] = 1, SCM(playerid, -1, "Incepand de acum, vei primi intrebari.");
		case 1: {
			if(HaveHelp[playerid] != -1) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda atata timp cat ai o intrebare activa.");
			HelperDuty[playerid] = 0, SCM(playerid, -1, "Incepand de acum, nu mai vei primi intrebari.");
		}
	}
	return true;
}
YCMD:nreport(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	if(HelperDuty[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu esti la datorie ca helper.");
	if(HaveHelp[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o intrebare.");
	new userID = HaveHelp[playerid];
	new string[180];
	format(string, sizeof(string), "AdmCmd: %s a trimis intrebarea lui %s (%d) adminilor.", GetName(playerid), GetName(userID), userID);
	SendStaffMessage(COLOR_LOGS, string);
	SCM(userID, COLOR_GOLD, "Intrebarea ta a fost trimisa adminilor!");
	format(string, sizeof(string), "Report de la %s (%d): %s.", GetName(userID), userID, HelpText[userID]);
	SendAdminMessage(0xC9161FFF, string, 1);
	format(string, sizeof(string), "Reportul tau a fost trimis adminilor.");
	if(ReportTimer[userID] != 0) {
		KillTimer(ReportTimer[userID]);
		ReportTimer[userID] = 0;
	}
	ReportTimer[userID] = SetTimerEx("CheckReport", 500000, 0, "%d", userID);
	SCM(userID, COLOR_YELLOW, string);

	SetPVarInt(userID, "Reported", 1);
	SetPVarInt(userID, "ReportType", 4);
	SetPVarString(userID, "ReportText", HelpText[HaveHelp[playerid]]);

	PlayerInfo[userID][pReportTime] = 120;
	HaveHelp[playerid] = -1;
	Helped[userID] = 0;
	return true;
}
YCMD:nskip(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	if(HelperDuty[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu esti la datorie ca helper.");
	if(HaveHelp[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o intrebare.");
	new helpers, string[180];
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pHelper] != 0 && HelperDuty[playerid] == 1 && HaveHelp[i] == -1 && i != playerid) {
				HaveHelper[helpers] = i;
				helpers ++;
			}
		}
	}
	if(Iter_Count(PlayerHelpers) > 1) {
		new userID = HaveHelper[Iter_Random(PlayerHelpers)];
		PlayerPlaySound(userID, 1056, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "(/nskip) %s a sarit peste intrebarea lui %s.", GetName(playerid), GetName(HaveHelp[playerid]));
		if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(0xFFADADFF, string, 1);
		format(string, sizeof(string), "Helperul anterior a sarit peste intrebarea ta. Acum, intrebarea a fost preluata de helperul %s (%d).", GetName(userID), userID);
		SCM(HaveHelp[playerid], COLOR_LGREEN, string);
		format(string, 512, "* %s (%d) intreaba: %s", GetName(HaveHelp[playerid]), HaveHelp[playerid], HelpText[HaveHelp[playerid]]);
		SCM(userID, 0x4FB021FF, string);
		HaveHelp[userID] = HaveHelp[playerid];
		SCM(playerid, COLOR_YELLOW, "Ai sarit peste aceasta intrebare.");
		HaveHelp[playerid] = -1;
	}
	else return SCM(playerid, -1, "Doar tu esti la datorie.");
	return true;
}
	
YCMD:rnewbie(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces la aceasta comanda!");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/rnewbie <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(PlayerInfo[id][pHelper] != 0) return SCM(playerid, COLOR_WHITE, "Acel player este helper!");
	if(GetPVarInt(id, "Reported") == 0) return SCM(playerid, COLOR_WHITE, "Acel player nu a dat report.");
	if(GetPVarInt(id, "ReportType") != 4) return SCM(playerid, COLOR_WHITE, "Nu poti muta acest report.");
	new result[128];
	GetPVarString(id, "ReportText", result, sizeof(result));
	new string[180];
	format(string, sizeof(string), "AdmCmd: %s a trimis report-ul lui %s (%d) helperilor.", GetName(playerid), GetName(id), id);
	SendStaffMessage(COLOR_WHITE, string);
	SCM(id, COLOR_GOLD, "Report-ul tau a fost trimis helperilor! Asteapta un raspuns..");
	HelpText[id] = "";
	format(HelpText[id], 256, result);
	PlayerInfo[id][pNewbieMute] = 120;
	Helped[id] = 1;
	OnHelper[id] = 0;	
	SetPVarInt(id, "Reported", 0);
	SetPVarInt(id, "ReportType", 0);
	SetPVarString(id, "ReportedBy", "");
	SetPVarInt(id, "ReportScore", 0);
	SetPVarString(id, "ReportText", "");		
	return true;
}
YCMD:nreply(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	if(HelperDuty[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu esti la datorie ca helper.");
	if(HaveHelp[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o intrebare.");
	new result[250], string[180];
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/nreply <text>");
	new userID = HaveHelp[playerid];
	format(string, sizeof(string), "* %s intreaba: %s", GetName(userID), HelpText[userID]);
	SendNewbieMessage(COLOR_LGREEN, string);	
	format(string, sizeof(string), "* %s raspunde: %s", GetName(playerid), result);
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && NewbieChat[i] == 0) {
			if(i == userID) MesajLung(i, COLOR_YELLOW, string);
			else MesajLung(i, COLOR_LGREEN, string);
		}
	}
	HaveHelp[playerid] = -1;
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	Helped[userID] = 0;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	return true;
}
YCMD:nr(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	if(HelperDuty[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu esti la datorie ca helper.");
	if(HaveHelp[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o intrebare.");
	new result[250], string[180];
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/nr <text>");
	new userID = HaveHelp[playerid];
	format(string, sizeof(string), "* %s intreaba: %s", GetName(userID), HelpText[userID]);
	SendNewbieMessage2(COLOR_LGREEN, string);	
	format(string, sizeof(string), "(NR) * %s raspunde: %s", GetName(playerid), result);
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(i == userID) MesajLung(i, COLOR_YELLOW, string);
			if(PlayerInfo[i][pAdmin] != 0 && PlayerInfo[i][pHelper] != 0) MesajLung(i, COLOR_LGREEN, string);
			else if(PlayerInfo[i][pAdmin] != 0 || PlayerInfo[i][pHelper] != 0) MesajLung(i, COLOR_LGREEN, string);
		}
	}
	HaveHelp[playerid] = -1;
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	Helped[userID] = 0;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	return true;
}
YCMD:checkhelp(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	if(HelperDuty[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu esti la datorie ca helper.");
	if(HaveHelp[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o intrebare.");
	new userID = HaveHelp[playerid], string[180];
	format(string, sizeof(string), "* %s a intreabat: %s", GetName(userID), HelpText[userID]);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}
YCMD:ndelete(playerid, params[], help) {
	if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	if(HelperDuty[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu esti la datorie ca helper.");
	if(HaveHelp[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o intrebare.");
	new result[64], string[256];
	if(sscanf(params, "s[64]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/ndelete <reason>");
	new userID = HaveHelp[playerid];
	format(string, sizeof(string), "* Intrebarea ta a fost stearsa de %s. Motiv: %s", GetName(playerid), result);
	SCM(userID, COLOR_YELLOW, string);
	format(string, sizeof(string), "(/nd) intrebarea lui %s a fost stearsa de %s, motiv: %s.", GetName(HaveHelp[playerid]), GetName(playerid), result);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(0xFFADADFF, string, 1);
	Helped[userID] = 0;
	HaveHelp[playerid] = -1;
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	return true;
}

function HelpReset(playerid) {
	if(HelpMuted[playerid] == 1) HelpText[playerid] = "", HelpMuted[playerid] = 0;
}
YCMD:getgift(playerid, params[], help) {
	if(GiftStep[playerid] < 19) return SCM(playerid, COLOR_RED, "Error:{FFFFFF} Deschizi deja un gift!");
	if(PlayerInfo[playerid][pGiftPoints] < 200) return SCM(playerid, COLOR_ERROR, "GiftBox: {FFFFFF}Trebuie sa ai minim 200 gift points pentru a folosi aceasta comanda");
	if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, COLOR_LGREEN, "Ai nevoie de 5 ore jucate pentru a putea lua acest cadou!");
	if(PlayerToPoint(5, playerid, 154.9603,-1950.8998,6.0030)) GiftStep[playerid] = 0, UpdateGift(playerid);
	else SCM(playerid, COLOR_GREY, "Nu esti langa GiftBox! (/gps)");
	return true;
}
YCMD:buyhat(playerid, params[], help) return IsAtClothShop(playerid) ? ShowModelSelectionMenu(playerid, hats, "Palarii") : 1;
YCMD:afklist(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) 
		return true;
	
	new x; gString[0] = EOS;
	SCM(playerid, -1, "AFK List:");
	foreach(new i: Player) {
		if(AFKSeconds[i] < 60)
			continue;

		format(gString, 75, "%s (%d) for %d seconds.", GetName(i), i, AFKSeconds[i]);
		SCM(playerid, COLOR_WHITE, gString);
		x++;
	}
	if(x == 0) return SCM(playerid, -1, "Nu au fost gasiti jucatori AFK!");

	format(gString, 50, "* Au fost gasiti %d jucatori AFK!", x);
	SCM(playerid, COLOR_LGREEN, gString);
	return true;
}

stock GetAdminRank(playerid) {
	new string[32];
	switch(PlayerInfo[playerid][pAdmin]) {
		case 1: string = "Admin level 1 ";
		case 2: string = "Admin level 2 ";
		case 3: string = "Admin level 3 ";
		case 4: string = "Admin level 4 ";
		case 5: string = "Admin level 5 ";
		case 6: string = "Co-owner ";
		case 7: string = "owner ";
		case 8: string = "Mapper ";
	}
	return string;
}

stock GetAdminRank2(admid) {
	new string[180];
	switch(admid) {
		case 1: string = "Fondator";
		case 2: string = "Scripter";
	}
	return string;
}
YCMD:admins(playerid, params[], help) {
	new string[128];
	format(string, sizeof(string), "---------------- Admini conectati ----------------");
	SCM(playerid, COLOR_SERVER, string);
	if(PlayerInfo[playerid][pAdmin] < 1) {
		foreach(new i: PlayerAdmins) {
			if(PlayerInfo[i][pScripter] > 0) format(string, sizeof(string), "(%d) %s - %s", i, PlayerInfo[i][pUsername], PlayerInfo[i][pScripter] == 2 ? ("Scripter") : ("Fondator"));
			format(string, sizeof(string), "(%d) %s - admin level %d", i, PlayerInfo[i][pUsername], PlayerInfo[i][pAdmin]);
			SCM(playerid, -1, string);
		}
	}
	else {
		foreach(new i: PlayerAdmins) {
			if(GetPVarInt(i, "Cover") == 1) format(string, sizeof(string), "(%d) %s - admin level %d [afk: %d] [cover: %s]", i, PlayerInfo[i][pUsername], PlayerInfo[i][pAdmin], AFKSeconds[i], GetName(i));
			else if(Spectate[i] != 255) format(string, sizeof(string), "(%d) %s - admin level %d [afk: %d] [spec: %s]", i, PlayerInfo[i][pUsername], PlayerInfo[i][pAdmin], AFKSeconds[i], GetName(Spectate[i]));
			else format(string, sizeof(string), "(%d) %s - admin level %d [afk: %d]", i, PlayerInfo[i][pUsername], PlayerInfo[i][pAdmin], AFKSeconds[i]);
			SCM(playerid, -1, string);
		}		
	}
	SCM(playerid, COLOR_SERVER, "--------------------------------------------------------");
	SCM(playerid, COLOR_WHITE, "Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n.");	
	SCM(playerid, COLOR_SERVER, "--------------------------------------------------------");
	return true;
}
YCMD:helpers(playerid, params[], help) {
	new string[128],count=0, helpers, questions;
	format(string, sizeof(string), "---------------- Helperi conectati ----------------");
	SCM(playerid, COLOR_WHITE, string);
	foreach(new i: PlayerHelpers) {
		if(HelperDuty[i] == 1 && PlayerInfo[i][pHelper]) helpers++;
		if(Helped[i] == 1) questions++;
		if(PlayerInfo[i][pHelper] > 0) {
			format(string, sizeof(string), "{%s}%s {FFFFFF}(%d) - Helper %d ", (HelperDuty[i] == 1) ? ("98FF5C") : ("FF5C5C"), GetName(i),i, PlayerInfo[i][pHelper]);
			SCM(playerid, -1, string);
			count++;
		}
	}
	format(string, sizeof(string), "{ADFF5C}* Sunt %d helperi conectati in acest moment.", count);
	SCM(playerid, COLOR_WHITE, string);
	if(count > 0) {
		format(string, sizeof(string), "{ADFF5C}* Sunt %d helperi la datorie si %d intrebari in acest moment.", helpers, questions);
		if(helpers == 0 && questions == 0) {} 
		else SCM(playerid, COLOR_WHITE, string);
	}	
	SCM(playerid, COLOR_WHITE, "--------------------------------------------------------");
	return true;
}
YCMD:setstat(playerid, params[], help) {
	new valoare, item[50], userid, id[64], query[256], string[180];
	if(PlayerInfo[playerid][pScripter] < 1) return true;
	if(sscanf(params, "s[64]s[50]i", id, item, valoare)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/set <full name/id> <item> <amount>");
		SCM(playerid, COLOR_LGREEN, "Level, billion, Money, Bank, House, Bizz, Job, Hours, Premium, premiumpoints");
		SCM(playerid, COLOR_LGREEN, "Rob, Mats, Drugs, Member, Leader, Rank, Fwarn, Warn, FPunish, Phone.");
		SCM(playerid, COLOR_LGREEN, "Vip, Clan, ClanRank, Admin, Helper, PetPoints");
		return true;
	}	
	if(IsNumeric(id)) {
		if(IsPlayerConnected(strval(id))) {
			//format(id, 64, "%s" GetName(id));
		}	
		else SCM(playerid, COLOR_GREY, "Player not connected!");
	}
	new cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid, COLOR_GREY, "Acest nume nu a fost gasit in baza de date!");
	userid = GetPlayerID(id);
	if(strcmp(item, "level", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pLevel] = valoare, SetPlayerScore(userid, valoare), UpdateProgress(playerid);
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Level`='%d' WHERE `name`='%s' LIMIT 1", valoare, id);
		mysql_tquery(SQL, string, "", "");
	}		
	else if(strcmp(item, "admin", true) == 0) {
		if(valoare < 0 || valoare > 6) return SCM(playerid, COLOR_GREY, "Invalid admin level! (0-6)");
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pAdmin] = valoare;		
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Admin`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}	
	else if(strcmp(item, "helper", true) == 0) {
		if(valoare < 0 || valoare > 3) return SCM(playerid, COLOR_GREY, "Invalid helper level! (0-3)");
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pHelper] = valoare;
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Helper`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}	
	else if(strcmp(item, "billion", true) == 0) {
		if(valoare > 2000000000 || valoare < 0) return SCM(playerid, COLOR_GREY, "Invalid.");
		if(userid != INVALID_PLAYER_ID) StoreMoney[userid] = valoare;
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `MStore`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");		
	}	
	else if(strcmp(item, "money", true) == 0) {
		if(valoare > 2000000000 || valoare < 0) return SCM(playerid, COLOR_GREY, "Invalid.");
		if(userid != INVALID_PLAYER_ID) MoneyMoney[userid] = valoare;
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Money`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else if(strcmp(item, "Mbank", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pStoreAccount] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `MBank`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else if(strcmp(item, "bank", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pAccount] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Bank`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else if(strcmp(item, "house", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pHouse] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `House`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else if(strcmp(item, "bizz", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pBizz] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else if(strcmp(item, "job", true) == 0) {
		PlayerInfo[userid][pJob] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Job`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else if(strcmp(item, "hours", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pConnectTime] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `ConnectedTime`='%0.3f' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");	
	}
	else if(strcmp(item, "premium", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pPremiumAccount] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Premium`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");		
	}	
	else if(strcmp(item, "premiumpoints", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pPremiumPoints] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `GoldPoints`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");	
	}
	else if(strcmp(item, "rob", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pRob] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `GoldCastigat`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");	
	}
	else if(strcmp(item, "mats", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pMats] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Materials`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}		
	else if(strcmp(item, "drugs", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pDrugs] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Drugs`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}		
	else if(strcmp(item, "member", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pMember] = valoare, SetPlayerToTeamColor(userid);	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Member`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}	
	else if(strcmp(item, "leader", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pLeader] = valoare, SetPlayerToTeamColor(userid);	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Leader`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}		
	else if(strcmp(item, "rank", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pRank] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Rank`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}		
	else if(strcmp(item, "fwarn", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pFACWarns] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `FWarn`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}		
	else if(strcmp(item, "warn", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pWarns] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Warnings`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}		
	else if(strcmp(item, "fpunish", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pFpunish] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `FPunish`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}			
	else if(strcmp(item, "phone", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pPhone] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `PhoneNr`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	} 
	else if(strcmp(item, "vip", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pVip] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Vip`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");	
		Update3DTextLabelText(vipLabel[userid], -1, "");
		if(valoare != 0) {
		   	switch(valoare) {
		   		case 0: Update3DTextLabelText(vipLabel[userid], 0x7DE41BFF, "VIP USER");
		   		case 1: Update3DTextLabelText(vipLabel[userid], 0xF28036FF, "VIP USER");
		   		case 2: Update3DTextLabelText(vipLabel[userid], 0xDF2626FF, "VIP USER");
		   	}
		   	Attach3DTextLabelToPlayer(vipLabel[userid], userid, 0.0, 0.0, 0.4);
		}
	}
	else if(strcmp(item, "clan", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pClan] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Clan`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}		
	else if(strcmp(item, "clanrank", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pClanRank] = valoare;	
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `ClanRank`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else if(strcmp(item, "PetPoints", true) == 0) {
		if(userid != INVALID_PLAYER_ID) PlayerInfo[userid][pPetPoints] = valoare;
		mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `PetPoints`='%d' WHERE `name`='%s'", valoare, id);
		mysql_tquery(SQL, query, "", "");
	}
	else {
		SCM(playerid, COLOR_WHITE, "Level, Money, Bank, House, Bizz, Job, Hours, Premium, premiumpoints.");
		SCM(playerid, COLOR_WHITE, "Rob, Mats, Drugs, Member, Leader, Rank, Fwarn, Warn, FPunish, Phone.");
		SCM(playerid, COLOR_WHITE, "Vip, Clan, ClanRank, Admin, Helper, SpinPoints");	
		return true;
	}
	if(userid != INVALID_PLAYER_ID) format(string, sizeof(string), "(/set) {FFFFFF}%s's (id: %d) %s was set to '%d' by admin %s.", GetName(userid), userid, item, valoare, GetName(playerid));	
	else format(string, sizeof(string), "(/set) {FFFFFF}%s's %s was set to '%d' by admin %s.", id, item, valoare, GetName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, string, 6);
	return true;
}
YCMD:setyoutuber(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] == 0) return SCM(playerid, COLOR_ERROR, "Nu ai access.");
	new id,youtuber,string[200];
	if(sscanf(params, "ui",id,youtuber)) return SendClientMessage(playerid, COLOR_GREY, "Sintaxa: {FFFFFF}/setyoutuber <playerid/name> <YouTuber>");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Acel player nu este connectat!");
	if(id != INVALID_PLAYER_ID) {
		if(youtuber >= 1) {
			format(string, sizeof(string), "AdmCmd: %s a fost promovat la gradul de YouTuber de catre adminul %s", GetName(id), GetName(playerid));
			SendAdminMessage(COLOR_WHITE, string, 1);
			SCM(id, COLOR_YELLOW, "Chuc mung! ai fost promovat la gradul de YouTuber!");
			PlayerInfo[id][pYouTuber] = 1;
		}
		else {
			format(string, sizeof(string), "AdmCmd: %s i-a fost scos gradul de YouTuber de catre adminul %s", GetName(id), GetName(playerid));
			SendAdminMessage(COLOR_WHITE, string, 1);
			format(string, sizeof(string), "Adminul %s ti-a scos gradul de YouTuber.", GetName(playerid));
			SCM(id, COLOR_YELLOW, string);
			PlayerInfo[id][pYouTuber] = 0;
		}
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Youtuber`='%d' WHERE `id`='%d'", PlayerInfo[id][pYouTuber], PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL, string, "", "");
	}
	return true;
}
YCMD:setadmin(playerid, params[], help)
{
	if(IsPlayerConnected(playerid)) {
		if(PlayerInfo[playerid][pScripter] == 0) return SCM(playerid, COLOR_ERROR, "Nu ai access.");
		new id,adminlevel,sendername[30],giveplayer[30],string[200];
		if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, COLOR_GREY, "Sintaxa: {FFFFFF}/setadmin <playerid/name> <Admin Level>");
		if(IsPlayerConnected(id)) {
			if(id != INVALID_PLAYER_ID)
			{
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[id][pAdmin] = adminlevel;
				PlayerInfo[id][pChar] = 217;
				SetPlayerSkinEx(id, 217);
				printf("AdmCmd: %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
				format(string, sizeof(string), "Ai fost promovat la admin %d de %s,", adminlevel, sendername);
				SendClientMessage(id, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "L-ai promovat pe %s la nivel %d admin.", giveplayer,adminlevel);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "AdmCmd: Admin %s i-a setat lui %s admin %d.", sendername,giveplayer,adminlevel);
				Iter_Add(PlayerAdmins, id);
				SendAdminMessage(COLOR_LOGS,string,4);
			 	new wakaname[25];
			 	if(adminlevel == 0) {
					PlayerInfo[id][pAW] = 0;
					UpdateVar(id, "AW", 0);
					SpecFaction[id] = 0;
					StopFly(playerid);
					UsedFly[playerid] = 0;
					SetPlayerHealthEx(playerid, 100);

					Iter_Remove(PlayerAdmins, id);
				}
				GetPlayerName(id,wakaname,25);
				new str[256];
				mysql_format(SQL, str,256,"UPDATE users SET `Admin`='%d',`CChar`='%d' WHERE `ID`='%d'",PlayerInfo[id][pAdmin],PlayerInfo[id][pChar],PlayerInfo[id][pSQLID]);
				mysql_tquery(SQL,str, "", "");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Acel player nu este conectat.");
		}
	}
	return true;
}
YCMD:sethelper(playerid, params[], help) {

	new id, helperlevel;

	if(PlayerInfo[playerid][pAdmin] < 6)
		return SCM(playerid, COLOR_WHITE, AdminOnly);

	if(sscanf(params, "ui", id, helperlevel))
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/sethelper <playerid/name> <level(0-3)>");

	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");

	if(helperlevel == 0) {
		HaveHelp[playerid] = -1;
		gString[0] = EOS;
		format(gString, sizeof(gString), "Ai fost scos din functia de helper de catre %s", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, gString);
		gString[0] = EOS;
		format(gString, sizeof(gString), "AdmCmd: %s a fost scos din functia de helper level %d de catre %s", GetName(id), helperlevel, GetName(playerid));
		SendAdminMessage(COLOR_LOGS, gString, 1);

		PlayerInfo[id][pHW] = 0;
		UpdateVar(id, "HW", 0);
		NewbieChat[id] = 0;

		Iter_Remove(PlayerHelpers, playerid);

	}

	Iter_Add(PlayerHelpers, playerid);
	PlayerInfo[id][pHelper] = helperlevel;
	gString[0] = EOS;
	format(gString, sizeof(gString), "Ai fost promovat ca helper level %d de %s.", helperlevel, GetName(playerid));
	SCM(id, COLOR_LIGHTBLUE, gString);
	gString[0] = EOS;
	format(gString, sizeof(gString), "AdmCmd: %s i-a setat lui %s helper level %d", GetName(playerid), GetName(id), helperlevel);
	SendAdminMessage(COLOR_LOGS, gString, 1);

	finishAchievement(id, 26);

	gQuery[0] = EOS;
	format(gQuery, sizeof(gQuery), "UPDATE users SET `Helper`='%d', `HelpedPlayers`='0' WHERE `ID`='%d'", helperlevel, PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");

	return true;
}
YCMD:togfind(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_WHITE,AdminOnly);
	if(togfind[playerid] == 1)  {
		togfind[playerid] = 0;
		SCM(playerid,COLOR_WHITE,"Ai activat optiunea de a te cauta playerii.");
	}
	else
	{
		togfind[playerid] = 1;
		SCM(playerid,COLOR_WHITE,"Ai dezactivat optiunea de a te cauta playerii.");
	}
	return true;
}

stock GetCity(playerid) {
	new string[180];
	if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60)) string ="SF";
	else if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00)) string ="LS";
	else if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80)) string ="LV";
	else string="Unknown";
	return string;
}
YCMD:payday(playerid, params[], help) {
	new string[125];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_ERROR, AdminOnly);
	if(DeelayCommand[playerid][15] != 0) return DeelayTime(playerid, 15);
	DeelayCommand[playerid][15] = 10;
	PayDay(true);
	format(string, sizeof(string), "INFO: {FFFFFF}Admin-ul %s v-a dat payday.", GetName(playerid));
	SCMTA(COLOR_ERROR, string);
	return true;
}
YCMD:find(playerid, params[], help) {
	if(JobWorking[playerid] == 1) return true;
	if(CP[playerid] != 0 || targetfind[playerid] != -1) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
	new id,giveplayer[30],string[100];
	if(PlayerInfo[playerid][pJob] != 6 && PlayerInfo[playerid][pMember] != 11 && !IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu ai jobul 'Detective'.");
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/find <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(Spectate[id] != 255) return SCM(playerid, COLOR_GREY, "Acel player este ocupat!");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(togfind[id] == 1) return SCM(playerid,COLOR_GREY, "Acel player nu poate fi urmarit!");
	if(GetPVarInt(id, "Undercover") == 1) return SCM(playerid, COLOR_GREY, "Acel player este ocupat!");
	if(BizRobbed[playerid] != 0) return true;
	if(togfind[id] == 1 && OnDuty[playerid] == 0 && PlayerHit[playerid] == -1) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu poate fi urmarit!");
	UsedFind[playerid] = 1;
	new skin = GetPlayerSkin(id);
	PlayerTextDrawSetPreviewModel(playerid, FindSkinTD, skin);
	PlayerTextDrawShow(playerid, FindSkinTD);
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(id, X,Y,Z);
	SetPlayerCheckpointEx(playerid, X,Y,Z, 3.5);
	targetfind[playerid] = id;
	CP[playerid] = 53;
	format(string, sizeof(string), "* Punctul rosu a fost setat pe %s (%d) care se afla in zona %s.",giveplayer,id,GetPlayerZone(id));
	SCM(playerid,COLOR_YELLOW,string);
	for(new m; m < 2; m++) {
		if(PlayerInfo[playerid][pDailyMission][m] == 12) CheckMission(playerid, m);
	}			
 	return true;
}
YCMD:gethere(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,string[100];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gethere <playerid/name>");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Player Invalid.");
	if(IsPlayerLogged[id] != 1 && IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Acel player este la logare.");
	new Float:idcx,Float:idcy,Float:idcz;
	GetPlayerPos(playerid, idcx, idcy, idcz);
	SetPlayerInterior(id,GetPlayerInterior(playerid));
	if(GetPlayerState(id) == 2) SetVehiclePosEx(id, GetPlayerVehicleID(id), idcx, idcy+4, idcz);
	else SetPlayerPosEx(false, id,idcx,idcy+2, idcz);
	if(InHouse[playerid] > 0) InHouse[id] = InHouse[playerid];
	if(InHQ[playerid] > 0) InHQ[id] = InHQ[playerid];
	if(InBussines[playerid] > 0) InBussines[id] = InBussines[playerid];
	SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));

	/*format(string, sizeof(string), "AdmCmd: %s l-a teleportat pe %s la el.", GetName(playerid),GetName(id));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,1);*/
	format(string, sizeof(string), "You have teleported %s to you.", GetName(id));
	SCM(playerid, COLOR_GRAD3, string);
	format(string, sizeof(string), "You have been teleported by admin %s.", GetName(playerid));
	SCM(id, COLOR_GRAD3, string);
	return true;
}
YCMD:gotoxyz(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new string[128],interior,vw;
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "fffii", x,y,z,interior,vw)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/gotoxyz <x> <y> <z> <interior> <virtual world>");
	SetPlayerPosEx(false, playerid, x, y, z);
	format(string, sizeof(string), "Te-ai teleportat cu succes. (%0.1f,%0.1f,%0.1f | int: %d | vw: %d)",x,y,z,interior, vw);
	SCM(playerid,COLOR_LGREEN, string);
	SetPlayerVirtualWorld(playerid, vw);
	SetPlayerInterior(playerid,interior);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	return true;
}
YCMD:gotolv(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), 1699.2, 1435.1, 10.7);
	else SetPlayerPosEx(false, playerid, 1699.2,1435.1, 10.7);
	SetPlayerInterior(playerid,0);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return true;
}
YCMD:gotosf(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), -1417.0,-295.8,14.1);
	else SetPlayerPosEx(false, playerid, -1417.0,-295.8,14.1);
	SetPlayerInterior(playerid,0);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return true;
}
YCMD:gotospawn(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_WHITE,AdminOnly);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), 2279.1653,-84.3076,26.2426);
	else SetPlayerPosEx(false, playerid, 269.6230,-74.9329,26.7724);
	SetPlayerInterior(playerid,0);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);	
	return true;
}
YCMD:gotods(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_WHITE,AdminOnly);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), 1438.2988,-2286.0681,13.5469);
	else SetPlayerPosEx(false, playerid, 1487.0498,-2287.2930,13.7529);
	SetPlayerInterior(playerid,0);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);	
	return true;
}

YCMD:gotols(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), 1529.6,-1691.2,13.3);
	else SetPlayerPosEx(false, playerid, 1529.6,-1691.2,13.3);
	SetPlayerInterior(playerid,0);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return true;
}

YCMD:gotom(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), -2317.8091,-1637.5575,483.7031);
	else SetPlayerPosEx(false, playerid,-2317.8091,-1637.5575,483.7031);
	SetPlayerInterior(playerid,0);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return true;
}
YCMD:gotoin(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), 1416.107000,0.268620,1000.926000);
	else SetPlayerPosEx(false, playerid,1416.107000,0.268620,1000.926000);
	SetPlayerInterior(playerid,1);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return true;
}
YCMD:aaa3(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	SetPlayerPosEx(false, playerid, 1477.5452,1742.9164,10.8125);
	SetPlayerVirtualWorld(playerid, 666);
	SetPlayerInterior(playerid, 0);
	return true;
}
YCMD:aaa2(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	SetPlayerPosEx(false, playerid, 1477.5452,1742.9164,10.8125);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	return true;
}
YCMD:ip(playerid, params[], help) {
	new id;
	if(PlayerInfo[playerid][pAdmin] < 4) 
		return SCM(playerid, COLOR_WHITE, AdminOnly);
	
	if(sscanf(params, "u", id)) 
		return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/ip <playerid>");
	
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) 
		return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	
	if(PlayerInfo[id][pAdmin] >= 4 && PlayerInfo[playerid][pAdmin] < 6) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu poti vedea IP-ul unui admin!");
	
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) 
		return SCM(playerid, -1, "Nu poti folosi comanda aceasta pe acel player.");
	
	new playersip[16];
	GetPlayerIp(id,playersip,sizeof(playersip));

	gString[0] = EOS;
	format(gString, sizeof(gString), "Conturile cu IP-ul lui %s (%d):",GetName(id),id);
	SCM(playerid, COLOR_SERVER, gString);

	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `IP`='%s'", playersip);
	mysql_tquery(SQL, gQuery, "SearchIP", "i", playerid);
	return true;
}
function SearchIP(playerid) {
	new name[MAX_PLAYER_NAME], idd[16], x;
	for(new i, j = cache_num_rows(); i < j; i++) {
		cache_get_value_name(i, "name", name);
		cache_get_value_name(i, "id", idd);		
		x++;
		gString[0] = EOS;
		format(gString, sizeof(gString), "%d. %s (user %d)", x, name, strval(idd));
		SCM(playerid, COLOR_WHITE, gString);
	}
	if(x == 0) SCM(playerid, COLOR_LGREEN, "Error: Nu au fost gasite alte conturi de pe acest IP!");
	return true;
}
YCMD:getip(playerid, params[], help) {
	new id, playersip[16], string[180];
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/getip <playerid>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pAdmin] >= 1 && PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti vedea IP-ul unui admin!");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Nu poti folosi comanda aceasta pe acel player.");
	GetPlayerIp(id,playersip,sizeof(playersip));
	format(string, sizeof(string), "%s (%d) IP: %s",GetName(id),id,playersip);
	SCM(playerid,COLOR_WHITE,string);
	return true;
}
YCMD:goto(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, count;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax: {FFFFFF}/goto <playerid/name>");

	if(!IsPlayerConnected(id)) 
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este conectat.");

	if(IsPlayerLogged[id] != 1)
		return SCM(playerid, COLOR_GREY, "Acel player este la logare.");

	if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[playerid][pAdmin] < 5) {
		if(PlayerInfo[id][pLevel] > 3 && PlayerInfo[playerid][pAdmin] == 0) return SendClientMessage(playerid, -1, "Ca helper, te poti teleporta doar la playerii cu nivel maxim de 3.");
	}
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	new Float:ax,Float:ay,Float:az;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,ax,ay,az);	
	GetPlayerPos(id, x, y, z);
	
	SCMEx(id, -1, "Adminul %s s-a teleportat la tine",GetName(playerid));
	SCMEx(playerid, -1, "Te-ai teleportat la %s cu succes!",GetName(id));
	
	new tmpcar = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, tmpcar, x, y+4, z);
	else if(GetPlayerState(id) == 2 || GetPlayerState(id) == 3) {
		new model = GetVehicleModel(GetPlayerVehicleID(id));
		if(MaxSeats[model - 400] > 0) {
			for(new xx; xx < MaxSeats[model - 400]; xx++) {
				if(!IsSeatTaken(GetPlayerVehicleID(id), xx)) {
					PutPlayerInVehicle(playerid, GetPlayerVehicleID(id), xx);
					count++;
					break;
				}
			}
		}
		else { SetPlayerPosEx(false, playerid,x,y+2, z); }
	}
	else { SetPlayerPosEx(false, playerid,x,y+2, z); }
	if(count == 0) SetPlayerPosEx(false, playerid,x,y+2, z);

	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
	SetPlayerInterior(playerid, GetPlayerInterior(id));
	if(InHouse[id] > 0) InHouse[playerid] = InHouse[id];
	if(InHQ[id] > 0) InHQ[playerid] = InHQ[id];
	if(InBussines[id] > 0) InBussines[playerid] = InBussines[id];
	return true;
}
YCMD:mark(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) 
		return true;

	GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	SCM(playerid, COLOR_LGREEN, "Pozitii setate.");
	return true;
}
YCMD:gotomark(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) 
		return true;

	if(TeleportDest[playerid][0] == 0) 
		return SCM(playerid, COLOR_LGREEN, "Nu ai salvat o pozitie.");

	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	else SetPlayerPosEx(false, playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	SCM(playerid, COLOR_WHITE, "Ai fost teleportat cu succes.");
	SetPlayerInterior(playerid,0);
	return true;
}
YCMD:gotocar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) 
		return SCM(playerid, COLOR_WHITE, AdminOnly);

	new testcar, string[128];
	if(sscanf(params, "d", testcar)) 
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gotocar <Car ID>");

	new Float:cwx2,Float:cwy2,Float:cwz2;
	GetVehiclePos(testcar, cwx2, cwy2, cwz2);
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), cwx2, cwy2, cwz2);
	else SetPlayerPosEx(false, playerid, cwx2, cwy2, cwz2);
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	format(string, sizeof(string), "Te-ai teleportat la {7BAABA}vehiculul %d{FFFFFF}.", testcar);
	SCM(playerid, COLOR_WHITE, string);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;	
	return true;
}

YCMD:check(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/check <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Ban khong the su dung lenh nay len nguoi choi do.");
	ShowStats(playerid,id);
	return true;
}
YCMD:pm(playerid, params[], help) {
	new id, message[128], string[180];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[128]", id, message)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/pm <playerid/name> <text>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti da pm singur.");
	format(string, sizeof(string), "(( PM %s: %s ))", GetName(playerid), message);
	SCM(id, COLOR_YELLOW, string);
	format(string, sizeof(string), "(( PM trimis lui %s: %s ))", GetName(id) , message);
	SCM(playerid, 0xC8E0DFFF, string);
	format(string, sizeof(string), "(PM) %s catre %s: %s", GetName(playerid), GetName(id), message);
	ChatLog(GetName(playerid), playerid, string);				
	return true;
}
YCMD:id(playerid, params[], help) {
	new names[64], giveplayer[25], x, sstring[180];
	if(sscanf(params, "s[64]", names)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/id <playerid/name>");
	if(strlen(names) > 24) return SCM(playerid, COLOR_GREY, "Player not connected.");
	if(IsNumeric(names)) {
		if(strval(names) >= 1000) return SCM(playerid, COLOR_GREY, "Player not connected.");
	}
	if(IsNumeric(names)) {
		if(x < 10) {
			if(strval(names) < 0 || strval(names) > 999) return SCM(playerid, COLOR_GREY, "Player not connected."); 
			new i = strval(names);
			if(!IsPlayerConnected(i))
				return SCM(playerid, COLOR_GREY, "Player not connected.");
			if(IsPlayerLogged[i] == 0) return SCM(playerid, COLOR_GREY, "Player not connected.");
			GetPlayerName(i, giveplayer, sizeof(giveplayer));
			new szRankk[180];
			if(PlayerInfo[i][pMember] != 0) format(szRankk, sizeof(szRankk), " (rank %d)", PlayerInfo[i][pRank]);
			if(GetPVarInt(i, "Cover") == 1) {
				format(sstring, sizeof(sstring), "(ID %d) Nume: %s | Level: %d | Factiune: Civil | FPS: %d",i,giveplayer,GetPlayerScore(i), FPS2[i]);
				SCM(playerid, COLOR_WHITE, sstring);
				return true;
			}
			new name[180];
			format(name, sizeof(name), "%s", GetName(i));
			new clan = PlayerInfo[i][pClan];					
			if(clan != 0 && PlayerInfo[i][pTag] == 0) format(name, sizeof(name), "{%s}%s{FFFFFF}%s", ClanInfo[clan][clColor], ClanInfo[clan][clTag], GetName(i));
			else if(clan != 0 && PlayerInfo[i][pTag] == 1) format(name, sizeof(name), "%s{%s}%s{FFFFFF}", GetName(i), ClanInfo[clan][clColor], ClanInfo[clan][clTag]);								
			if(PlayerInfo[playerid][pAdmin] > 0) {
				if(PlayerInfo[i][pSleeping] == 1 || AFKSeconds[i] >= 5) format(sstring, sizeof(sstring), "(ID %d) %s | Level: %d | Factiune: {%s}%s{FFFFFF}%s | FPS: %d {FFADAD}- [AFK: %d]",i,name,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), szRankk, FPS2[i], AFKSeconds[i]);
				else format(sstring, sizeof(sstring), "(ID %d) %s | Level: %d | Factiune: {%s}%s{FFFFFF}%s | FPS: %d",i,name,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), szRankk, FPS2[i]);
			}
			else format(sstring, sizeof(sstring), "(ID %d) %s | Level: %d | Factiune: {%s}%s{FFFFFF}%s | FPS: %d",i,name,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), szRankk, FPS2[i]);
			SCM(playerid, COLOR_WHITE, sstring);				
			x++;
			return true;
		}
	}	
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {					
			if(strfind(GetNameEx(i), names, true) != -1) {
				if(x < 10) {
					if(i == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Player not connected."); 
					GetPlayerName(i, giveplayer, sizeof(giveplayer));
					new szRankk[180];
					if(PlayerInfo[i][pMember] != 0) format(szRankk, sizeof(szRankk), " (Rank %d)", PlayerInfo[i][pRank]);
					if(GetPVarInt(i, "Cover") == 1) {
						format(sstring, sizeof(sstring), "(ID %d) Nume: %s | Level: %d | Factiune: Civil | FPS: %d",i,giveplayer,GetPlayerScore(i), FPS2[i]);
						SCM(playerid, COLOR_WHITE, sstring);
						return true;
					}
					new name[180];
					format(name, sizeof(name), "%s", GetName(i));
					new clan = PlayerInfo[i][pClan];
					if(clan != 0 && PlayerInfo[i][pTag] == 0) format(name, sizeof(name), "{%s}%s{FFFFFF}%s", ClanInfo[clan][clColor], ClanInfo[clan][clTag], GetName(i));
					else if(clan != 0 && PlayerInfo[i][pTag] == 1) format(name, sizeof(name), "%s{%s}%s{FFFFFF}", GetName(i), ClanInfo[clan][clColor], ClanInfo[clan][clTag]);								
					if(PlayerInfo[playerid][pAdmin] > 0) {
						if(PlayerInfo[i][pSleeping] == 1 || AFKSeconds[i] >= 5) format(sstring, sizeof(sstring), "(ID %d) %s | Level: %d | Factiune: {%s}%s{FFFFFF}%s | FPS: %d {FFADAD}- [AFK: %d]",i,name,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), szRankk, FPS2[i], AFKSeconds[i]);
						else format(sstring, sizeof(sstring), "(ID %d) %s | Level: %d | Factiune: {%s}%s{FFFFFF}%s | FPS: %d",i,name,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), szRankk, FPS2[i]);
					}
					else format(sstring, sizeof(sstring), "(ID %d) %s | Level: %d | Factiune: {%s}%s{FFFFFF}%s | FPS: %d",i,name,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), szRankk, FPS2[i]);
					SCM(playerid, COLOR_WHITE, sstring);	
					x++;
				}	
			}											
		}
	}
	if(x == 0) return SCM(playerid, COLOR_GREY, "Player not connected.");
	if(x == 10) SCM(playerid, COLOR_WHITE, "Au fost afisate doar primele 10 rezultate.");
	return true;
}

IsNumeric(const string[]) {
	for (new i = 0, j = strlen(string); i < j; i++) {
		if (string[i] > '9' || string[i] < '0') return false;
	}
	return true;
}
YCMD:sleep(playerid, params[], help) {
	if(GetPlayerInterior(playerid) == 0) return SCM(playerid, COLOR_GREY, "Nu esti intr-o casa.");
	if(InHouse[playerid] != PlayerInfo[playerid][pHouse]) return SCM(playerid, -1, "Nu ai rent in aceasta casa!");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return SCM(playerid, COLOR_GREY, "Nu poti dormi deoarece esti cautat de politie.");
	if(PlayerInfo[playerid][pSleeping] == 0) {
		PlayerInfo[playerid][pSleeping] = 1;
		TogglePlayerControllable(playerid,0);
		SCM(playerid, COLOR_LGREEN, "Acum dormi!");
		SCM(playerid, COLOR_LGREEN, "Recomandare: Daca doresti sa lasi jocul in bara, iti recomandam sa apesi intai tasta ESC pentru a nu aparea probleme.");
		LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		SetPlayerHealthEx(playerid, 99);
		SetPlayerColor(playerid, COLOR_GREY);
		Freezed[playerid] = 1;
		UpdateVar(playerid, "Status", 2);
		if(OnDuty[playerid] == 1) SetPlayerSkinEx(playerid, 305);
		OnDuty[playerid] = 0;
		SetPlayerArmourEx(playerid, 0);
		ResetWeapons(playerid);
		tazer[playerid] = 0;	
	}
	else if(PlayerInfo[playerid][pSleeping] == 1) {
		PlayerInfo[playerid][pSleeping] = 0;
		TogglePlayerControllable(playerid,1);
		ClearAnimations(playerid);
		SCM(playerid, COLOR_LGREEN, "Bine ai revenit!");
		SetPlayerToTeamColor(playerid);
		SetPlayerHealthEx(playerid, 99);
		Freezed[playerid] = 0;
		UpdateVar(playerid, "Status", 1);
	}
	return true;
}

YCMD:fixveh(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pYouTuber] < 1) return SCM(playerid, COLOR_WHITE, "Nu ai acces.");
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	RepairVehicle(GetPlayerVehicleID(playerid));
	SetVehicleHealth(GetPlayerVehicleID(playerid), 999);
	Gas[GetPlayerVehicleID(playerid)] = 100;
	return true;
}
YCMD:fuelcars(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_RED, "Error: {FFFFFF}Nu ai adminul necesar.");
	new full, string[60];
	if(sscanf(params, "i[10]", full)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/fuelcars <procent>");
	Gas[GetPlayerVehicleID(playerid)] = full;
	format(string, sizeof(string), "* Ai umplut canistra %d benzina.", full);
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:calls(playerid, params[], help) {
	new fid = PlayerInfo[playerid][pMember];
	if(fid == 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu faci parte dintr-o factiune!");
	if(fid != 12 && fid != 13 && fid != 8 && fid != 7 && fid != 15) return SCM(playerid, COLOR_LGREEN, "Error: Aceasta comanda nu este disponibila factiunii tale!");
	//if(BizRobbed[playerid] != 0) return true;
	new 
		szDialog[512], szDialog2[512], x,
		szZone[128], Float: Pos[3], distance;
	
	strcat(szDialog2, "Player\tLocation\n");

	switch(fid) {
		case 12: {
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && TaxiService[0][i] == 1 && AcceptedTaxiService[0][i] == 0) {
					SelectedPlayers[playerid][x] = i;
					distance = GetDistanceBetweenPlayers(playerid,i);
					GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
					GetPlayer3DZone2(Pos[0], Pos[1], Pos[2], szZone, sizeof(szZone));				
					format(szDialog, sizeof(szDialog), "%s (%d)\t%s - %dm\n", GetName(i), i, szZone, distance);
					strcat(szDialog2, szDialog);
					x++;
				}
			}
		}
		case 15: {
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && TaxiService[1][i] == 1 && AcceptedTaxiService[1][i] == 0) {
					SelectedPlayers[playerid][x] = i;
					distance = GetDistanceBetweenPlayers(playerid,i);
					GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
					GetPlayer3DZone2(Pos[0], Pos[1], Pos[2], szZone, sizeof(szZone));
					format(szDialog, sizeof(szDialog), "%s (%d)\t%s - %dm\n", GetName(i), i, szZone, distance);
					strcat(szDialog2, szDialog);
					x++;
				}
			}
		}
		case 13: {
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && MedicCall[i] == i) {
					SelectedPlayers[playerid][x] = i;
					distance = GetDistanceBetweenPlayers(playerid,i);
					GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
					GetPlayer3DZone2(Pos[0], Pos[1], Pos[2], szZone, sizeof(szZone));				
					format(szDialog, sizeof(szDialog), "%s (%d)\t%s - %dm\n", GetName(i), i, szZone, distance);
					strcat(szDialog2, szDialog);
					x++;
				}
			}
		}
		case 8: {
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && MechanicCall[i] == i) {
					SelectedPlayers[playerid][x] = i;
					distance = GetDistanceBetweenPlayers(playerid,i);
					GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
					GetPlayer3DZone2(Pos[0], Pos[1], Pos[2], szZone, sizeof(szZone));				
					format(szDialog, sizeof(szDialog), "%s (%d)\t%s - %dm\n", GetName(i), i, szZone, distance);
					strcat(szDialog2, szDialog);
					x++;
				}
			}
		}	
		case 7: {
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && InstructorCall[i] == 1) {
					SelectedPlayers[playerid][x] = i;
					distance = GetDistanceBetweenPlayers(playerid,i);
					GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
					GetPlayer3DZone2(Pos[0], Pos[1], Pos[2], szZone, sizeof(szZone));				
					format(szDialog, sizeof(szDialog), "%s (%d)\t%s - %dm\n", GetName(i), i, szZone, distance);
					strcat(szDialog2, szDialog);
					x++;
				}
			}
		}			
	}
	if(x == 0) return SCM(playerid, COLOR_LGREEN, "Error: Nimeni nu a apelat momentan la serviciile factiunii tale!");
	
	new title[64];
	format(title, sizeof(title), "%s's calls: %d", FactionName(fid), x);
	Dialog_Show(playerid, DIALOG_CALLS, DIALOG_STYLE_TABLIST_HEADERS, title, szDialog2, "Select", "Cancel");
	return true;
}
YCMD:service(playerid, params[], help) {
	new item[180],string[256];
	if(DeelayCommand[playerid][3] != 0) return DeelayTime(playerid, 3);
	if(sscanf(params, "s[180]",item)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/service <name>");
		SCM(playerid, COLOR_WHITE, "Valabile: Taxi, Uber, Medic, Mecanic, Instructor.");
		return true;
	}
	
	new szZone[128], Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayer3DZone2(Pos[0], Pos[1], Pos[2], szZone, sizeof(szZone));

	if(strcmp(item,"uber",true) == 0) {
		if(IsInBlacklist(playerid, 15)) return SCM(playerid, -1, "Ban nam trong danh sach den cua to chuc nay, vi vay ban khong the su dung dich vu to chuc cung cap!");
		if(TaxiService[1][playerid] == 1) return SCM(playerid, COLOR_GREY, "Ai mai apelat odata la acest serviciu, asteapta un raspuns.");
		TaxiService[1][playerid] = 1;
		AcceptedTaxiService[1][playerid] = 0;
		format(string, sizeof(string), "**(( Uber Dispatch: %s (%d) are nevoie de un Uber. Acesta se afla in zona %s. ))**", GetName(playerid), playerid, szZone);
		SendFactionMessage(15, 0x2C6CBFFF, string);
		SCM(playerid, COLOR_WHITE, "Ai apelat la serviciul de Uber. Asteapta un raspuns!");
	}
				
	if(strcmp(item,"taxi",true) == 0) {
		if(IsInBlacklist(playerid, 12)) return SCM(playerid, -1, "Ban nam trong danh sach den cua to chuc nay, vi vay ban khong the su dung dich vu to chuc cung cap!");
		if(TaxiService[0][playerid] == 1) return SCM(playerid, COLOR_GREY, "Ai mai apelat odata la acest serviciu, asteapta un raspuns.");
		TaxiService[0][playerid] = 1;
		AcceptedTaxiService[0][playerid] = 0;
		format(string, sizeof(string), "**(( Taxi Dispatch: %s (%d) are nevoie de un taximetrist. Acesta se afla in zona %s. ))**", GetName(playerid), playerid, szZone);
		SendFactionMessage(12, 0x2C6CBFFF, string);		
		SCM(playerid, COLOR_WHITE, "Ai apelat la serviciul de taximetristi. Asteapta un raspuns!");
	}	
	else if(strcmp(item,"medic",true) == 0) {
		if(IsInBlacklist(playerid, 14)) return SCM(playerid, -1, "Ban nam trong danh sach den cua to chuc nay, vi vay ban khong the su dung dich vu to chuc cung cap!");				
		if(MedicCall[playerid] == playerid) return SCM(playerid, -1, "Ai apelat deja, asteapta un raspuns.");
		format(string, sizeof(string), "**(( Paramedic Dispatch: %s (%d) are nevoie de un paramedic. Acesta se afla in zona %s. ))**", GetName(playerid),playerid, szZone);
		SendFactionMessage(13, COLOR_LIGHTBLUE, string);
		SCM(playerid, COLOR_WHITE, "* Ai apelat la un medic, asteapta un raspuns.");
		MedicCall[playerid] = playerid;
		return true;
	}
	else if(strcmp(item,"mecanic",true) == 0) {
		if(IsInBlacklist(playerid, 8)) return SCM(playerid, -1, "Ban nam trong danh sach den cua to chuc nay, vi vay ban khong the su dung dich vu to chuc cung cap!");	
		if(MechanicCall[playerid] == playerid) return SCM(playerid, -1, "Ai apelat deja, asteapta un raspuns.");
		format(string, sizeof(string), "**(( TTC Dispatch: %s (%d) are nevoie de un mecanic. Acesta se afla in zona %s. ))**", GetName(playerid),playerid, szZone);
		SendFactionMessage(8, COLOR_LIGHTBLUE, string);
		SCM(playerid, COLOR_WHITE, "* Ai apelat la un mecanic, asteapta un raspuns.");
		MechanicCall[playerid] = playerid;
		return true;
	}	
	else if(strcmp(item,"instructor",true) == 0) {
		if(IsInBlacklist(playerid, 7)) return SCM(playerid, -1, "Ban nam trong danh sach den cua to chuc nay, vi vay ban khong the su dung dich vu to chuc cung cap!");				
		if(InstructorCall[playerid] == 1) return SCM(playerid, -1, "Ai apelat deja, asteapta un raspuns.");
		format(string, sizeof(string), "**(( SI Dispatch: %s (%d) are nevoie de un instructor. Acesta se afla in zona %s. ))**", GetName(playerid),playerid, szZone);
		SendFactionMessage(7, COLOR_LIGHTBLUE, string);
		SCM(playerid, COLOR_WHITE, "* Ai apelat la un instructor, asteapta un raspuns.");
		InstructorCall[playerid] = 1;
		return true;
	}			
	else return SCM(playerid, COLOR_WHITE, "Valabile: Taxi, Medic, Mecanic, Instructor.");
	DeelayCommand[playerid][3] = 60*5;
	return true;
}
YCMD:cancel(playerid, params[], help) {
	new item[180], string[180];
	if(sscanf(params, "s[180]",item)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/cancel <name>");
		SCM(playerid, COLOR_WHITE, "Valabile: Drugs, Repair, Live, House, Taxi, Medic, Mecanic, Ticket, Refill, Materials, Trade, Instructor, Requestevent, Command, Uber.");
		return true;
	}
	if(strcmp(item,"taxi",true) == 0) {
		if(TaxiService[0][playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");
		format(string, sizeof(string), "**(( Taxi Dispatch: %s (%d) nu mai are nevoie de un taximetrist. ))**", GetName(playerid), playerid);
		SendFactionMessage(12, 0x2C6CBFFF, string);
		SCM(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
		TaxiService[0][playerid] = 0;
		AcceptedTaxiService[0][playerid] = 0;
		PlayerTextDrawHide(playerid, FindTD);
		foreach(new i: Player) {
			if(IsPlayerConnected(i) && AcceptedService[i] == playerid) {
				targetfind[i] = -1;
				CP[i] = 0;
				DisablePlayerCheckpointEx(i);
				AcceptedService[i] = -1;
				SCM(i, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
		}
	}
	else if(strcmp(item,"uber",true) == 0) {
		if(TaxiService[1][playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");
		format(string, sizeof(string), "**(( Uberul Dispatch: %s (%d) nu mai are nevoie de un Uber. ))**", GetName(playerid), playerid);
		SendFactionMessage(12, 0x2C6CBFFF, string);
		SCM(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
		TaxiService[1][playerid] = 0;
		AcceptedTaxiService[1][playerid] = 0;
		PlayerTextDrawHide(playerid, FindTD);
		foreach(new i: Player) {
			if(IsPlayerConnected(i) && AcceptedService[i] == playerid) {
				targetfind[i] = -1;
				CP[i] = 0;
				DisablePlayerCheckpointEx(i);
				AcceptedService[i] = -1;
				SCM(i, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
		}
	}
	else if(strcmp(item,"command",true) == 0) {
		if(AcceptedService[playerid] == -1) return true;
		AcceptedTaxiService[0][AcceptedService[playerid]] = 0;
		format(string, sizeof(string), "**(( Taxi Dispatch: Taximetristul %s (%d) i-a anulat comanda lui %s (%d). Pentru a o accepta, foloseste (/accept taxi). ))**", GetName(playerid), playerid, GetName(AcceptedService[playerid]), AcceptedService[playerid]);
		SendFactionMessage(12, 0x2C6CBFFF, string);
		format(string, sizeof(string), "Yeu cau dich vu cua ban da bi huy bo!");
		SCM(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Taximetristul %s a renuntat la comanda. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid));
		SCM(AcceptedService[playerid], COLOR_YELLOW, string);
		AcceptedService[playerid] = -1;
		targetfind[playerid] = -1;
		CP[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);	
	}		
	else if(strcmp(item,"requestevent",true) == 0) {
		if(requestingevent[playerid] == 0) return SCM(playerid, 0xFFFFFFFF, "You're not requesting an event.");
		requestingevent[playerid] = 0;
		SCM(playerid, COLOR_LGREEN, "Cererea de eveniment a fost anulata!");
	}		
	else if(strcmp(item,"mecanic",true) == 0) {
		if(MechanicCall[playerid] != playerid) return SCM(playerid, -1, "Acel player nu a apelat la acest serviciu!");
		MechanicCall[playerid] = -1;
		format(string, sizeof(string), "**(( TTC Dispatch: %s (%d) nu mai are nevoie de un mecanic. ))**", GetName(playerid), playerid);
		SendFactionMessage(8, COLOR_LIGHTBLUE, string);
		SCM(playerid, -1, "Ai renuntat la acest serviciu.");
	}
	else if(strcmp(item,"instructor",true) == 0) {
		if(InstructorCall[playerid] == 0) return SCM(playerid, -1, "Acel player nu a apelat la acest serviciu!");
		InstructorCall[playerid] = 0;
		format(string, sizeof(string), "**(( SI Dispatch: %s (%d) nu mai are nevoie de un instructor. ))**", GetName(playerid), playerid);
		SendFactionMessage(7, COLOR_LIGHTBLUE, string);
		SCM(playerid, -1, "Ai renuntat la acest serviciu.");
	}		
	else if(strcmp(item,"trade",true) == 0) {
		if(TradePlayer[playerid] == -1) return SCM(playerid, -1, "Nu Ban nhan duoc o oferta!");
		TradePlayer[playerid] = -1;
		SCM(playerid, -1, "Afacere anulata!");
	}		
	else if(strcmp(item,"drugs",true) == 0) {
		if(DrugOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit droguri.");
		DrugOffer[playerid] = 999;
		DrugPrice[playerid] = 0;
		DrugGram[playerid] = 0;
	}
	else if(strcmp(item,"checkpoint",true) == 0) {
		if(CP[playerid] == 50) return SCM(playerid,COLOR_WHITE, "Este checkpoint pentru rob.");
		if(CP[playerid] == 99 || CP[playerid] == 100 || CP[playerid] == 101 || CP[playerid] == 102 || CP[playerid] == 103 || CP[playerid] == 104 || CP[playerid] == 105 || CP[playerid] == 106 || CP[playerid] == 107 || CP[playerid] == 108
		 || CP[playerid] == 109 || CP[playerid] == 110 || CP[playerid] == 111 || CP[playerid] == 112 || CP[playerid] == 113) return SCM(playerid,COLOR_WHITE,"Este checkpoint pentru DMV.");
		if(CP[playerid] == 9 || CP[playerid] == 10 || CP[playerid] == 11 || CP[playerid] == 12 || CP[playerid] == 13 || CP[playerid] == 14 || CP[playerid] == 15 || CP[playerid] == 16 || CP[playerid] == 17 || CP[playerid] == 18 || CP[playerid] == 19
		 || CP[playerid] == 20) return SCM(playerid,COLOR_WHITE, "Este checkpoint pentru kart.");
		if(JobWorking[playerid] == 1) return SCM(playerid,COLOR_WHITE, "Foloseste /stopwork pentru a nu mai munci.");
		if(CP[playerid] != 0) {
			DisablePlayerCheckpointEx(playerid);
			SCM(playerid,COLOR_WHITE,"Punctul rosu a fost sters cu succes.");
			CP[playerid] = 0;
		}
	}
	else if(strcmp(item,"repair",true) == 0) {
		if(RepairOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit o reparatie.");
		RepairOffer[playerid] = 999;
		RepairPrice[playerid] = 0;
		RepairCar[playerid] = 0;
	}
	else if(strcmp(item,"materials",true) == 0) {
		if(MatsOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit materiale.");
		MatsOffer[playerid] = -1;
		MatsPrice[playerid] = 0;
		MatsAmmo[playerid] = 0;
	}
	else if(strcmp(item,"gun",true) == 0) {
		if(SellgunOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit o arma.");
		SellgunOffer[playerid] = -1;
		SellgunPrice[playerid] = 0;
		SellgunMats[playerid] = 0;
		SellgunAmmo[playerid] = 0;
		SellgunID[playerid] = 0;
	}
	else if(strcmp(item,"free",true) == 0) {
		if(FreeOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit un free.");
		FreeOffer[playerid] = -1;
		FreePrice[playerid] = 0;
	}
	else if(strcmp(item,"live",true) == 0) {
		if(LiveOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit un live.");
		LiveOffer[playerid] = 999;
	}
	else if(strcmp(item,"refill",true) == 0) {
		if(RefillOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit benzina.");
		RefillOffer[playerid] = 999;
		RefillPrice[playerid] = 0;
	}
	else if(strcmp(item,"ticket",true) == 0) {
		if(TicketOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit o amenda.");
		TicketOffer[playerid] = 999;
		TicketMoney[playerid] = 0;
	}
	else if(strcmp(item,"medic",true) == 0) {
		if(MedicCall[playerid] != playerid) return SCM(playerid,COLOR_GREY, "Nu ai apelat la acest serviciu.");
		MedicCall[playerid] = -1;
		
		format(string, sizeof(string), "**(( Paramedic Dispatch: %s (%d) nu mai are nevoie de un medic. ))**", GetName(playerid), playerid);
		SendFactionMessage(13, COLOR_LIGHTBLUE, string);
	}
	return true;
}
function GetTeamMembers(teamid) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && Team[i] == teamid) x++;
	}
	return x;
}
function GetPlayersOnEvent() {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && InEvent[i] == 1) x++;
	}
	return x;
}
YCMD:accept(playerid, params[], help) {
	
	new x_job[180],id,sendername[25],giveplayer[25],string[300];
	if(sscanf(params, "s[180]u",x_job,id))
	{
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/accept <item> <playerid/name>");
		SCM(playerid, COLOR_WHITE, "Trade, Dice, Drugs, Materials,");
		SCM(playerid, -1, "Live, Free, Ticket, Refill, Invite, Lesson, Cinvite, Clan, Propose.");
		return true;
	}
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(strcmp(x_job,"medic",true) == 0 || strcmp(x_job,"taxi",true) == 0 || strcmp(x_job,"mecanic",true) == 0 || strcmp(x_job,"instructor",true) == 0) return SCM(playerid, COLOR_LGREEN, "Error: Aceasta comanda nu mai este disponibila. Foloseste /calls!");
	if(strcmp(x_job,"clan",true) == 0) {
		if(GetPVarInt(playerid, "OfferedClan") == -1 || GetPVarInt(playerid, "OfferedClan") != id) return SCM(playerid, COLOR_GREY, "Acel player nu ti-a facut o oferta!");
		if(PlayerInfo[playerid][pClan] != 0) return SCM(playerid, COLOR_GREY, "Esti deja intr-un clan. Foloseste comanda /quitclan pentru a iesi din clanul in care esti acum!");
		new 
			clan = GetPVarInt(playerid, "SellClan"),
			money = GetPVarInt(playerid, "ClanMoney");
		if(PlayerInfo[id][pClan] != clan || PlayerInfo[id][pClanRank] < 6) return SCM(playerid, COLOR_GREY, "Acel player nu mai detine clanul care ti l-a oferit!");
		if(PlayerMoney(playerid, money)) return SCM(playerid, COLOR_GREY, "Nu ai suma necesara pentru a accepta oferta!");
		format(string, sizeof(string), "%s ti-a acceptat oferta de a lua clanul si Ban nhan duoc $%s.", GetName(playerid), FormatNumber(money));
		SCM(id, COLOR_MONEY, string);
		format(string, sizeof(string), "Ai acceptat oferta lui %s si ai pierdut $%s.", GetName(id), FormatNumber(money));
		SCM(playerid, COLOR_MONEY, string);
		GivePlayerCash(playerid, 0,money);
		GivePlayerCash(id, 1, money);
		PlayerInfo[playerid][pClan] = clan;
		PlayerInfo[playerid][pClanRank] = 6;
		UpdateVar(playerid, "Clan", clan); UpdateVar(playerid, "ClanRank", 6); UpdateVar(playerid, "ClanDays", 0);
		PlayerInfo[id][pClan] = 0;
		PlayerInfo[id][pClanRank] = 0;
		UpdateVar(id, "Clan", 0); UpdateVar(id, "ClanRank", 0); UpdateVar(id, "ClanDays", 0);
		format(string, sizeof(string), "[CLAN] %s este noul lider al clanului!", GetName(playerid));
		SendClanMessage(clan, string);
		DeletePVar(playerid, "OfferedClan");
		DeletePVar(playerid, "ClanMoney");
		DeletePVar(playerid, "SellClan");
		new query[128];
		mysql_format(SQL, query, 128, "UPDATE `clans` SET `Owner`='%s', `OwnerSQL`='%d' WHERE `ID`='%d'", GetName(playerid), PlayerInfo[playerid][pSQLID], clan);
		mysql_tquery(SQL, query, "", "");
		
		new szName[180];
		SetPlayerName(id, PlayerInfo[id][pUsername]);
		PlayerInfo[playerid][pTag] = 0;
		format(szName, sizeof(szName), "%s%s", ClanInfo[clan][clTag], PlayerInfo[playerid][pUsername]);			
		SetPlayerName(playerid, szName);		
		return true;
	}	
	if(strcmp(x_job,"Lesson",true) == 0) {
		new x = GetPVarInt(playerid, "Lesson");
		if(x == -1 || x != id) return SCM(playerid, -1, "Acel player nu ti-a facut o invitatie.");
		if(GetPVarInt(id, "InLesson") == 1) return SCM(playerid, -1, "Acel instructor are deja o lectie activa.");
		SetPVarInt(playerid, "InLesson", id);
		SetPVarInt(id, "InLesson", playerid);
		SetPVarInt(playerid, "Lesson", -1);
		format(string, sizeof(string), "**(( SI Dispatch: %s (%d) a inceput o lectie cu %s (%d). ))**", GetName(id), id, GetName(playerid), playerid);
		SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Ai acceptat lectia oferita de instructorul %s.", GetName(id));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s ti-a acceptat inceperea lectiei cu tine.", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);			
		return true;
	}
	if(strcmp(x_job, "license", true) == 0) {
		if(LicenseOffer[playerid] == -1) return SCM(playerid, -1, "Nu Ban nhan duoc o oferta!");
		if(LicenseOffer[playerid] != id) return SCM(playerid, -1, "Acel player nu ti-a facut o oferta!");
		if(PlayerInfo[id][pMember] != 7) return SCM(playerid, -1, "Acel player nu este din factiunea School Instructors!");
		new money, str[180];
		switch(License[playerid]) {
			case 1: {
				money = 150000;
				if(PlayerMoney(playerid, money)) return SCM(playerid, -1, "Nu ai aceasta suma de bani!");
				GivePlayerCash(playerid, 0, money);
				GivePlayerCash(id, 1, money);
				
				PlayerInfo[playerid][pFlyLic] = 1;
				PlayerInfo[playerid][pFlyLicT] = 50;
				mysql_format(SQL, str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='50' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,str, "", "");

				format(string, sizeof(string), "**(( SI Dispatch: %s (%d) i-a oferit licenta de zbor lui %s (%d) pentru suma de %d$. ))**", GetName(id), id, GetName(playerid), playerid, money);
				SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, string);
				finishAchievement(playerid, 9);	
			}
			case 2: {
				money = 100000;
				if(PlayerMoney(playerid, money)) return SCM(playerid, -1, "Nu ai aceasta suma de bani!");
				GivePlayerCash(playerid, 0,money);
				GivePlayerCash(id, 1, money);	
				
				PlayerInfo[playerid][pBoatLic] = 1;
				PlayerInfo[playerid][pBoatLicT] = 50;
				mysql_format(SQL, str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='50' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,str, "", "");		

				format(string, sizeof(string), "**(( SI Dispatch: %s (%d) i-a oferit licenta de navigatie lui %s (%d) pentru suma de %d$. ))**", GetName(id), id, GetName(playerid), playerid, money);
				SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, string);	
				finishAchievement(playerid, 8);	
			}
			case 3: {
				money = 200000;
				if(PlayerMoney(playerid, money)) return SCM(playerid, -1, "Nu ai aceasta suma de bani!");
				GivePlayerCash(playerid, 0, money);
				GivePlayerCash(id, 1, money);	

				PlayerInfo[playerid][pGunLic] = 1;
				PlayerInfo[playerid][pGunLicT] = 50;
				mysql_format(SQL, str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='50' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,str, "", "");		

				format(string, sizeof(string), "**(( SI Dispatch: %s (%d) i-a oferit licenta de arme lui %s (%d) pentru suma de %d$. ))**", GetName(id), id, GetName(playerid), playerid, money);
				SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, string);	
				finishAchievement(playerid, 7);	
			}
		}
		UpdateFactionRaport(id, 0);				
		License[playerid] = 0;
		LicenseOffer[playerid] = -1;
		
		for(new m; m < 2; m++) {
			if(PlayerInfo[id][pDailyMission][m] == 15 || PlayerInfo[id][pDailyMission][m] == 16) CheckMission(id, m);
		}			
		format(string, sizeof(string), "Ai acceptat oferta lui %s si Ban nhan duoc licenta.", GetName(id));
		SCM(playerid, COLOR_MONEY, string);
		format(string, sizeof(string), "%s ti-a acceptat oferta si Ban nhan duoc $%s.", GetName(playerid), FormatNumber(money));
		SCM(id, COLOR_MONEY, string);	
		return true;
	}
	if(strcmp(x_job,"trade",true) == 0) {
		if(TradePlayer[playerid] == -1) return SCM(playerid, -1, "Nu Ban nhan duoc o asemenea oferta.");
		if(TradePlayer[playerid] != id) return SCM(playerid, -1, "Acel player nu ti-a facut o oferta.");
		if(TradeMoney[playerid] > 2000000000) return SCM(playerid, COLOR_GREY, "Nu poti transfera o suma mai mare de $2.000.000.000!");
		if(GetPlayerInterior(playerid) != 0 || IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti face o afacere dintr-un interior sau vehicul!");
		if(GetPlayerInterior(id) != 0 || IsPlayerInAnyVehicle(id)) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti face o afacere cu cineva ce se afla intr-un interior sau vehicul!");
		if(TradeID[playerid] != -1) return SCM(playerid, COLOR_WHITE, "Esti deja intr-o afacere!");
		if(TradeID[id] != -1) return SCM(playerid, COLOR_WHITE, "Acel player este deja intr-o afacere!");					
		TradePlayer[playerid] = -1;
		
		format(string, sizeof(string), "Bunurile lui %s", GetName(id));
		PlayerTextDrawSetString(playerid, TradePTD[0], string);
		PlayerTextDrawSetString(id, TradePTD[0], "Bunurile tale");
		PlayerTextDrawSetString(playerid, TradePTD[1], "Bunurile tale");
		format(string, sizeof(string), "Bunurile lui %s", GetName(playerid));
		PlayerTextDrawSetString(id, TradePTD[1], string);
		
		TradeItems[id] = 0;
		TradeItems[playerid] = 0;
		TradeReady[id] = 0;
		TradeReady[playerid] = 0;
		TradeID[id] = playerid;
		TradeID[playerid] = id;

		format(string, sizeof(string), "%s (%d) a acceptat invitatia ta!", GetName(playerid), playerid);
		SCM(id, COLOR_LIGHTBLUE, string);	
		format(string, sizeof(string), "Ai acceptat invitatia lui %s (%d)!", GetName(id), id);
		SCM(playerid, COLOR_LIGHTBLUE, string);
		
		ShowTradeTDs(id);
		ShowTradeTDs(playerid);

		TradeType[id] = 1;
		TradeType[playerid] = 0;
	
		TextDrawHideForPlayer(id, TradeTD[9]);
		TextDrawHideForPlayer(id, TradeTD[10]);
		PlayerTextDrawHide(playerid, TradePTD[2]);
		PlayerTextDrawHide(playerid, TradePTD[3]);

		TradeAccepted[playerid] = 1;
		TradeAccepted[id] = 0;
		CarTrade[id] = -1;
		CarTrade[playerid] = -1;
		return true;
	}	
	if( strcmp ( x_job, "dice" , true ) == 0 )
	{
		new szMessage[180];
		if(DiceID[playerid] == -1) return SCM(playerid,COLOR_WHITE,"Nimeni nu te-a invitat sa joci barbut.");
		if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
		if(!PlayerToPoint(100, playerid, 2016.1156,1017.1541,996.875)) return SCM(playerid, COLOR_GREY, "Nu te aflii intr-un casino.");
		if(IsPlayerConnected(id)) {
			if(DiceID[playerid] == id)
			{
				if(PlayerMoney(playerid, DiceMoney[playerid])) return SCM(playerid,COLOR_WHITE,"Ban khong du tien!");
				if(PlayerMoney(id, DiceMoney[playerid])) return SCM(playerid,COLOR_WHITE,"Acest player nu are destui bani.");
				if(!ProxDetectorS(10.0, playerid, id)) return SCM(playerid, COLOR_GREY, "Nu te aflii langa acel jucator!");
				new dice1[MAX_PLAYERS],dice2[MAX_PLAYERS];
				dice1[playerid] = random(12);
				dice2[DiceID[playerid]] = random (12);
				if(dice1[playerid] > dice2[DiceID[playerid]])
				{
					format(string, sizeof(string), "%s rolls %d. %s rolls %d. %s won $%s.", GetName(playerid), dice1[playerid], GetName(id), dice2[DiceID[playerid]], GetName(playerid), FormatNumber(DiceMoney[playerid]));
					ProxDetector(30.0,playerid, string, COLOR_PURPLE);					
					format(szMessage, 256,"(+) Ai castigat $%s.", FormatNumber(DiceMoney[playerid]));
					SCM(playerid, COLOR_MONEY, szMessage);
					format(szMessage, 256,"(-) Ai pierdut $%s.", FormatNumber(DiceMoney[playerid]));
					SCM(DiceID[playerid], COLOR_MONEY, szMessage);
					GivePlayerCash(playerid, 1, DiceMoney[playerid]);
					GivePlayerCash(DiceID[playerid], 0,DiceMoney[playerid]);				}
				if(dice2[DiceID[playerid]] > dice1[playerid])
				{
					format(string, sizeof(string), "%s rolls %d. %s rolls %d. %s won $%s.", GetName(id), dice2[DiceID[playerid]], GetName(playerid), dice1[playerid], GetName(id), FormatNumber(DiceMoney[playerid]));
					ProxDetector(30.0,playerid, string, COLOR_PURPLE);				
					format(szMessage, 256,"(+) Ai castigat $%s.", FormatNumber(DiceMoney[playerid]));
					SCM(DiceID[playerid], COLOR_MONEY, szMessage);
					format(szMessage, 256,"(-) Ai pierdut $%s.", FormatNumber(DiceMoney[playerid]));
					SCM(playerid, COLOR_MONEY, szMessage);
					GivePlayerCash(playerid, 0,DiceMoney[playerid]);
					GivePlayerCash(DiceID[playerid], 1,DiceMoney[playerid]);
				}
				if(dice2[DiceID[playerid]] == dice1[playerid])
				{
					SCM(DiceID[playerid], COLOR_MONEY, "Egal!");
					SCM(playerid, COLOR_MONEY, "Egal!");
				}
				for(new m; m < 2; m++) {
					if(PlayerInfo[playerid][pDailyMission][m] == 20) CheckMission(playerid, m);
				}
				for(new m; m < 2; m++) {
					if(PlayerInfo[id][pDailyMission][m] == 20) CheckMission(id, m);
				}
	
				DiceID[playerid] = -1;
				DiceMoney[playerid] = 0;
			}
			else SCM(playerid, COLOR_WHITE, "Acest player nu te-a invitat sa joci cu el barbut.");
		}			
	}	
	else if( strcmp ( x_job, "invite" , true ) == 0 )
	{
		if(GetPVarInt(playerid, "InvitedFaction") == 0) return SCM(playerid, -1, "N-ai fost invitat de cineva!");
		if(InvitedBy[playerid] == -1) return SCM(playerid, -1, "N-ai fost invitat de cineva!");
		if(id != InvitedBy[playerid]) return SCM(playerid, -1, "Acel player nu te-a invitat.");
		if(!IsPlayerConnected(InvitedBy[playerid])) return SCM(playerid, -1, "Acel player nu mai este conectat!");
		if(PlayerInfo[id][pMember] != InvitedFaction[playerid]) return SCM(playerid, -1, "Acel player nu mai face parte din factiunea in care te-a invitat.");
		if(PlayerInfo[playerid][pFpunish] != 0) return SCM(playerid,-1, "Ai FP!");
		InvitedBy[playerid] = -1;
		SetPVarInt(playerid, "InvitedFaction", 0);
		GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(id, sendername, sizeof(sendername));
		
		PlayerInfo[playerid][pMember] = PlayerInfo[id][pMember];
		PlayerInfo[playerid][pRank] = 1;		
		format(string, sizeof(string), "%s a intrat in factiunea %s.", GetName(playerid), FactionName(PlayerInfo[playerid][pMember]));
		new query[256];
		mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", string, PlayerInfo[playerid][pSQLID],PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,query,"","");					
		
		if(PlayerInfo[playerid][pMember] == 11) finishAchievement(playerid, 19);	
		else if(IsACop(playerid)) finishAchievement(playerid, 20);	
		else if(IsAMember(playerid)) finishAchievement(playerid, 21);	
		else finishAchievement(playerid, 18);	
		
		ShowModelSelectionMenu (playerid, fskins[PlayerInfo[playerid][pMember]-1], "Haine");	
		SetPlayerToTeamColor(playerid);
		printf("AdmCmd: %s has invited %s to join %s.", sendername, giveplayer, FactionName(PlayerInfo[playerid][pMember]));
		format(string, sizeof(string), "(i) %s a intrat in factiune deoarece a fost invitat de %s.", giveplayer, sendername);
		SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
		FactionMembers[PlayerInfo[playerid][pMember]] ++;
		format(string, sizeof(string), "Ai acceptat invitatia liderului %s de a intra in factiunea %s.", sendername,FactionName(PlayerInfo[playerid][pMember]));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s a acceptat invitatia ta.", giveplayer);
		SCM(id, COLOR_LIGHTBLUE, string);
		SetPlayerInterior(playerid,0);
		ResetPlayerRaport(playerid);
		new str[128];
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Team`='%d',`Member`='%d',`Rank`='1' WHERE `ID`='%d'",PlayerInfo[playerid][pTeam],PlayerInfo[playerid][pMember],PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		FactionLog(PlayerInfo[playerid][pMember],GetName(playerid),"Joined the Faction.");
	}
	else if(strcmp(x_job,"cinvite",true) == 0) {
		new query[256];
		new clanid = InvitedClan[playerid];
		if(clanid == 0) return SCM(playerid, COLOR_GREY, "Nu ai nicio invitatie.");
		SCM(playerid, COLOR_LIGHTBLUE, "Ai acceptat cererea de intrare in clan.");

		format(string, sizeof(string), "{%s}[CLAN] %s a acceptat invitatia de intrare in clan.", ClanInfo[InvitedClan[playerid]][clColor], GetName(playerid));
		SendClanMessage(clanid, string);
		PlayerInfo[playerid][pClan] = clanid;
		ClanMembers[clanid] ++;
		PlayerInfo[playerid][pClanRank] = 1;
		InvitedClan[playerid] = -1;
		InvitedBy[playerid] = -1;

		new
			szDate[180],
			Year, Month, Day, Hour, Minute, Second;

		getdate(Year, Month, Day);
		gettime(Hour, Minute, Second);

		format(szDate, sizeof(szDate), "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);

		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Clan`='%d', `ClanRank`='%d' WHERE `Name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pClanRank], PlayerInfo[playerid][pUsername]);
		mysql_tquery(SQL, query, "", "");

		new
			szName[180],
			clanid2 = PlayerInfo[playerid][pClan];

		PlayerInfo[playerid][pTag] = 0;
		UpdateVar(playerid, "Tag", 0);
		format(szName, sizeof(szName), "%s%s", ClanInfo[clanid2][clTag], PlayerInfo[playerid][pUsername]);
		SetPlayerName(playerid, szName);

		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Clan`='%d', `ClanRank`='%d' WHERE `Name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pClanRank], GetName(playerid));
		mysql_tquery(SQL, query, "", "");
		return true;
	}
	else if(strcmp(x_job,"lawyer",true) == 0)
	{
		if(AcceptOffer[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");
		if(AcceptOffer[playerid] != id) return SCM(playerid,-1, "Acel player nu ti-a oferit accept.");
		if(PlayerMoney(playerid, AcceptPrice[playerid])) return SCM(playerid,COLOR_GREY, "Nu ai banii necesari.");
		PlayerInfo[playerid][pLawyer] += 15;
		PlayerInfo[AcceptOffer[playerid]][pLawyer] -= 15;
		GivePlayerCash(playerid, 0, AcceptPrice[playerid]);
		GivePlayerCash(AcceptOffer[playerid], 1, AcceptPrice[playerid]);
		new str[356];
		mysql_format(SQL, str,356,"UPDATE users SET `Money`='%d',`MStore`='%d', Acceptpoints`='%d' WHERE `ID`='%d'",MoneyMoney[playerid],StoreMoney[playerid], PlayerInfo[playerid][pLawyer],PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		new str2[356];
		mysql_format(SQL, str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Acceptpoints`='%d' WHERE `ID`='%d'",MoneyMoney[AcceptOffer[playerid]], StoreMoney[playerid],PlayerInfo[AcceptOffer[playerid]][pLawyer],PlayerInfo[AcceptOffer[playerid]][pSQLID]);
		mysql_tquery(SQL,str2, "", "");
		new wakaname[25];
		GetPlayerName(playerid,wakaname,25);
		new wakaname2[25];
		GetPlayerName(AcceptOffer[playerid],wakaname2,25);
		format(string, sizeof(string), "%s a acceptat oferta.",GetName(playerid));
		SCM(AcceptOffer[playerid],COLOR_MONEY,string);
		format(string, sizeof(string), "Ai cumparat accept de la %s.",wakaname2);
		SCM(playerid,COLOR_MONEY,string);
		AcceptOffer[playerid] = -1;
		AcceptPrice[playerid] = 0;

	}
	else if(strcmp(x_job,"materials",true) == 0)
	{
		if(MatsOffer[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");
		if(MatsOffer[playerid] != id) return SCM(playerid,-1, "Acel player nu ti-a oferit materials.");
		if(PlayerMoney(playerid, MatsPrice[playerid])) return SCM(playerid,COLOR_GREY, "Nu ai banii necesari.");
		PlayerInfo[playerid][pMats] += MatsAmmo[playerid];
		PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmmo[playerid];
		GivePlayerCash(playerid, 0, MatsPrice[playerid]);
		GivePlayerCash(MatsOffer[playerid], 1, MatsPrice[playerid]);
		GetPlayerName(MatsOffer[playerid],giveplayer,sizeof(giveplayer));
		GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "Ai cumparat %d materiale pentru $%s de la %s.",MatsAmmo[playerid],FormatNumber(MatsPrice[playerid]),giveplayer);
		SCM(playerid,COLOR_MONEY,string);
		format(string, sizeof(string), "%s a cumparat materialele tale pentru $%s.",sendername,FormatNumber(MatsPrice[playerid]));
		SCM(MatsOffer[playerid],COLOR_MONEY,string);
		Update(playerid,pMatsx);
		Update(MatsOffer[playerid],pMatsx);
		Update(MatsOffer[playerid],pCashx);
		Update(playerid,pCashx);
		MatsOffer[playerid] = -1;
		MatsAmmo[playerid] = 0;
		MatsPrice[playerid] = 0;
	}
	else if(strcmp(x_job,"gun",true) == 0)
	{
		if(SellgunOffer[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");

		if(SellgunOffer[playerid] != id) return SCM(playerid,-1, "Acel player nu ti-a oferit o arma.");
		if(PlayerMoney(playerid, SellgunPrice[playerid])) return SCM(playerid,COLOR_GREY, "Nu ai banii necesari.");
		new weaponid,ammo,price,mats,gunname[60],idoffer;
		weaponid = SellgunID[playerid];
		ammo = SellgunAmmo[playerid];
		price = SellgunPrice[playerid];
		mats = SellgunMats[playerid];
		idoffer = SellgunOffer[playerid];
		ServerWeapon(playerid,weaponid,ammo);
		PlayerInfo[idoffer][pMats] -= mats;
		GivePlayerCash(playerid, 0, price);
		GivePlayerCash(idoffer, 1, price);
		Update(playerid, pCashx);
		Update(idoffer,pMatsx);
		Update(idoffer, pCashx);
		PlayerInfo[id][pMatSkill] ++;
		UpdateVar(id, "MatSkill", PlayerInfo[id][pMatSkill]);
		GetPlayerName(idoffer,giveplayer,sizeof(giveplayer));
		GetPlayerName(playerid,sendername,sizeof(sendername));
		GetWeaponNameEx(weaponid,gunname,sizeof(gunname));
		format(string, sizeof(string), "I-ai dat lui %s, un %s cu %d gloante, pentru %d materiale.", sendername,gunname, ammo,mats);
		SCM(idoffer, COLOR_GRAD1, string);
		format(string, sizeof(string), "Ban nhan duoc un %s cu %d gloante pentru %s.", gunname, ammo, giveplayer);
		SCM(playerid, COLOR_GRAD1, string);
		format(string, sizeof(string), "* %s a creat o arma si i-a dat-o lui %s.", giveplayer ,sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		SellgunOffer[playerid] = -1;
		SellgunPrice[playerid] = 0;
		SellgunMats[playerid] = 0;
		SellgunAmmo[playerid] = 0;
		SellgunID[playerid] = 0;
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			new gun2,tmp;
			GetPlayerWeaponData(playerid,5,gun2,tmp);
			#pragma unused tmp
			if(gun2)SetPlayerArmedWeapon(playerid,gun2);
			else SetPlayerArmedWeapon(playerid,0);
		}
		for(new m; m < 2; m++) {
			if(PlayerInfo[id][pDailyMission][m] == 6) CheckMission(id, m);
		}			
	}
	else if(strcmp(x_job,"free",true) == 0)
	{
		if(FreeOffer[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");
		if(FreeOffer[playerid] != id) return SCM(playerid,-1, "Acel player nu ti-a oferit free.");
		if(PlayerMoney(playerid, FreePrice[playerid])) return SCM(playerid,COLOR_GREY, "Nu ai banii necesari.");
		if(PlayerInfo[id][pLawyer] < 1) return SCM(playerid,-1, "Acel player nu are accept.");
		GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(FreeOffer[playerid], sendername, sizeof(sendername));
		format(string, sizeof(string), "* I-ai dat free lui %s si l-ai scos din inchisoare.", giveplayer);
		SCM(FreeOffer[playerid], COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Ban nhan duoc free de la %s si ai iesit din inchisoare.", sendername);
		SCM(playerid, COLOR_LIGHTBLUE, string);
		JailPrice[playerid] = 0;
		PlayerInfo[playerid][pJailTime] = 1;
		PlayerInfo[FreeOffer[playerid]][pLawyer] -= 1;
		PlayerInfo[FreeOffer[playerid]][pLawSkill] ++;
		GivePlayerCash(playerid, 0, FreePrice[playerid]);
		GivePlayerCash(FreeOffer[playerid], 1,FreePrice[playerid]);
		PlayerInfo[playerid][pJailed] = 1;
		new str[356];
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `JailTime`='0',`Money`='%d', `MStore`='%d',`Jailed`='0' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Money`='%d', `MStore`='%d',`Acceptpoints`='%d',`LawSkill`='%d' WHERE ``ID`='%d'",MoneyMoney[FreeOffer[playerid]], StoreMoney[FreeOffer[playerid]],PlayerInfo[FreeOffer[playerid]][pLawyer],PlayerInfo[FreeOffer[playerid]][pLawSkill],PlayerInfo[FreeOffer[playerid]][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		FreeOffer[playerid] = 0;
		FreePrice[playerid] = 0;

	}
	else if(strcmp(x_job,"ticket",true) == 0)
	{
		if(TicketOffer[playerid] == 999) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");
		if(TicketOffer[playerid] != id) return SCM(playerid,-1, "Acel player nu ti-a oferit ticket.");
		if(!ProxDetectorS(5.0, playerid, TicketOffer[playerid])) return SCM(playerid, -1, "Acel player nu este langa tine.");
		GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerMoney(playerid, TicketMoney[playerid])) return SCM(playerid, COLOR_LIGHTBLUE, "* Nu ai enough money.");
		format(string, sizeof(string), "* Ai platit amenda de $%d lui %s.", TicketMoney[playerid], giveplayer);
		SCM(playerid, COLOR_MONEY, string);
		format(string, sizeof(string), "* %s a platit amenda in valoare de $%d.", sendername, TicketMoney[playerid]);
		SCM(TicketOffer[playerid], COLOR_MONEY, string);
		GivePlayerCash(playerid, 0, TicketMoney[playerid]);
		GivePlayerCash(TicketOffer[playerid], 1, TicketMoney[playerid]);
		Update(playerid, pCashx);
		Update(TicketOffer[playerid], pCashx);
		TicketOffer[playerid] = 999;
		TicketMoney[playerid] = 0;
		UpdateFactionRaport(id, 1);						

	}
	else if(strcmp(x_job,"refill",true) == 0)
	{
		if(RefillOffer[playerid] == 999) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");
		if(RefillOffer[playerid] != id) return SCM(playerid,COLOR_WHITE, "This player has not offered you refill.");
		if(PlayerMoney(playerid, RefillPrice[playerid])) return SCM(playerid, COLOR_WHITE, "Nu ai banii necesari!");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new car = gLastCar[playerid];
		new fuel;
		fuel = 100;
		UpdateFactionRaport(id, 0);	
		DeelayCommand[id][6] = 30;	
		format(string, sizeof(string), "**(( TTC Dispatch: Tow Truck Member %s (%s) i-a alimentat masina lui %s (%d) pentru suma de %d$. ))**", GetName(id), id, GetName(playerid), playerid, RefillPrice[playerid]);
		SendFactionMessage(8, COLOR_LIGHTBLUE, string);		
		format(string, sizeof(string), "* Vehiculul tau a fost alimentat cu %d%s pentru $%d de mecanicul %s.",fuel,"%%",RefillPrice[playerid],GetName(id));
		SCM(playerid,COLOR_MONEY, string);
		format(string, sizeof(string), "* I-ai alimentat vehiculul lui %s pentru $%d.",sendername,RefillPrice[playerid]);
		SCM(RefillOffer[playerid], COLOR_MONEY, string);
		GivePlayerCash(id, 1,RefillPrice[playerid]);
		GivePlayerCash(playerid, 0, RefillPrice[playerid]);
		if(Gas[car] < 110) { Gas[car] += fuel; }
		Update(playerid, pCashx);
		RefillOffer[playerid] = 999;
		RefillPrice[playerid] = 0;
		OnePlayAnim(id, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

	}
	else if(strcmp(x_job,"live",true) == 0) {
		if(LiveOffer[playerid] == 999) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");
		if(LiveOffer[playerid] != id) return SCM(playerid,COLOR_WHITE, "This player has not offered you live.");
		if(!ProxDetectorS(5.0, playerid, LiveOffer[playerid])) return SCM(playerid, -1, "Acel player nu este langa tine.");
		SCM(playerid, COLOR_WHITE, "* Ban nhan duoc freeze pana la terminarea live-ului!");
		SCM(LiveOffer[playerid], COLOR_WHITE, "* Ban nhan duoc freeze pana la terminarea live-ului! Pentru a opri live-ul, foloseste comanda (/live) iar.");
		TogglePlayerControllable(playerid, 0);
		TogglePlayerControllable(LiveOffer[playerid], 0);
		TalkingLive[playerid] = LiveOffer[playerid];
		TalkingLive[LiveOffer[playerid]] = playerid;
		LiveOffer[playerid] = 999;

	}
	else if(strcmp(x_job,"drugs",true) == 0) {
		if(DrugOffer[playerid] == 999) return SCM(playerid, COLOR_GREY, "Nu Ban nhan duoc o oferta!");
		if(DrugOffer[playerid] != id) return SCM(playerid,COLOR_WHITE, "This player has not offered you drugs.");
		if(PlayerMoney(playerid, DrugPrice[playerid]))  return SCM(playerid, COLOR_WHITE, "Nu ai banii necesari!");
		if(PlayerInfo[playerid][pDrugs] > 50) return SCM(playerid, COLOR_WHITE, "Ai prea multe droguri!");
		GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* Ai cumparat %d grame de droguri pentru $%d de la distribuitorul %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
		SCM(playerid, COLOR_MONEY, string);
		format(string, sizeof(string), "* %s a cumparat %d grame de droguri in schimbul sumei de $%d.",sendername,DrugGram[playerid],DrugPrice[playerid]);
		SCM(DrugOffer[playerid], COLOR_MONEY, string);
		GivePlayerCash(DrugOffer[playerid], 1,DrugPrice[playerid]);
		PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
		GivePlayerCash(playerid, 0, DrugPrice[playerid]);
		PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
		PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
		new wakaname[25],str[456];
		GetPlayerName(playerid,wakaname,sizeof(wakaname));
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Money`='%d', `MStore`='%d',`Drugs`='%d' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Money`='%d', `MStore`='%d',`Drugs`='%d',`DrugsSkill`='%d' WHERE `ID`='%d'",MoneyMoney[DrugOffer[playerid]],StoreMoney[DrugOffer[playerid]], PlayerInfo[DrugOffer[playerid]][pDrugs],PlayerInfo[DrugOffer[playerid]][pDrugsSkill],PlayerInfo[DrugOffer[playerid]][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		DrugOffer[playerid] = 999;
		DrugPrice[playerid] = 0;
		DrugGram[playerid] = 0;

	}
	else {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/accept <item> <playerid/name>");
		SCM(playerid, COLOR_WHITE, "Trade, License, Dice, Drugs, Materials, Taxi,");
		SCM(playerid, -1, "Medic, Live, Free, Mecanic, Ticket, Refill, Invite, Lesson, Cinvite, Clan.");
	}
	return true;
}
YCMD:invite(playerid, params[], help) {
	if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "Comanda aceasta este doar pentru lideri si sublideri.");
	new id,string[100];
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/invite <playerid/name>");
	if(PlayerInfo[id][pFpunish] != 0) return SCM(playerid,-1, "Acel player are FP.");
	if(GetFactionMembers2(PlayerInfo[playerid][pMember]) >= 15) return SCM(playerid, -1, "Ai numarul maxim de membrii in factiune.");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pMember] != 0 || PlayerInfo[id][pLeader] != 0) return SCM(playerid, -1, "Acel player face deja parte dintr-o factiune!");
	if(IsInBlacklist(id, PlayerInfo[playerid][pMember])) return SCM(playerid, -1, "Acel player este pe blacklist-ul factiunii!");							
	if(PlayerInfo[playerid][pAdmin] < 7) {
		new szQuery[256];
		format(szQuery, sizeof(szQuery), "SELECT * FROM `app_factions` WHERE `UserID`='%d' AND `Status`='1' AND `Faction`='%d'", PlayerInfo[id][pSQLID], PlayerInfo[playerid][pLeader]);
		new Cache: result = mysql_query(SQL, szQuery);
		//new test = cache_num_rows();
		cache_delete(result);
		//if(test == 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti baga un player in factiune care nu are o aplicatie acceptata!");
	}
	format(string, sizeof(string), "Lider %s te-a invitat in factiunea %s. (/accept invite %d)", GetName(playerid), FactionName(PlayerInfo[playerid][pMember]), playerid);
	SCM(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "L-ai invitat pe %s in factiunea ta.", GetName(id));
	SCM(playerid, COLOR_LIGHTBLUE, string);
	InvitedFaction[id] = PlayerInfo[playerid][pMember];
	InvitedBy[id] = playerid;
	SetPVarInt(id, "InvitedFaction", 1);
	return true;
}
YCMD:withdraw(playerid, params[], help) {
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti la banca.");
	new money,string[200];
	if(sscanf(params, "i", money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/withdraw <Suma>");
	if(money > 1000000000 || money < 1) return SCM(playerid, COLOR_LGREEN, "Poti retrage intre $1.000.000.000 si 1.");
	if(PlayerInfo[playerid][pStoreAccount] == 0 && money > PlayerInfo[playerid][pAccount] || money < 1) return SCM(playerid, COLOR_GRAD3, "Nu ai aceasta suma de bani!");
	GivePlayerCash(playerid, 1, money);
	GivePlayerBank(playerid, -money);
	format(string, sizeof(string), "Ai scos $%s din contul tau bancar. Acum ai: $%s.", FormatNumber(money), GetBankMoney(playerid));
	SCM(playerid, 0xFAAC25FF, string);
	ConsumingMoney[playerid] = 1;
	if(PlayerInfo[playerid][pShowBanca] == 1) {
		format(string, sizeof(string), "$%s", GetBankMoney(playerid));
		PlayerTextDrawSetString(playerid, BancaTD, string);
	}
	return true;
}
YCMD:deposit(playerid, params[], help) {
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: Pentru a putea folosi aceasta comanda, trebuie sa fii intr-o banca!");
	new money,string[200];
	if(sscanf(params, "i", money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/deposit <Suma>");
	if(PlayerMoney(playerid, money) || money < 1 || money > 1000000000) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai aceasta suma pe care vrei sa o depozitezi.");
	GivePlayerCash(playerid, 0, money);
	GivePlayerBank(playerid, money);
	Update(playerid, pBankx);
	Update(playerid, pMBankx);
	format(string, sizeof(string), "Ai depozitat $%s in contul tau bancar. Acum ai: $%s.", FormatNumber(money), GetBankMoney(playerid));
	if(TradeID[playerid] != -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
	SCM(playerid, 0xFAAC25FF, string);
	if(PlayerInfo[playerid][pShowBanca] == 1) {
		format(string, sizeof(string), "$%s", GetBankMoney(playerid));
		PlayerTextDrawSetString(playerid, BancaTD, string);
	}
	return true;
}
YCMD:balance(playerid, params[], help) {
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: Pentru a putea folosi aceasta comanda, trebuie sa fii intr-o banca!");
	new string[128];
	format(string, sizeof(string), "Ai $%s in contul tau.", GetBankMoney(playerid));
	SCM(playerid, COLOR_WHITE, string);
	return true;
}
YCMD:transfer(playerid, params[], help) {
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LGREEN, "Error: Pentru a putea folosi aceasta comanda, ai nevoie de minim level 5.");
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: Pentru a putea folosi aceasta comanda, trebuie sa fii intr-o banca!");

	new id,moneytransfer,string[100];
	if(TradeID[playerid] != -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
	if(sscanf(params, "ui", id,moneytransfer)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/transfer <playerid/name> <Suma>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(playerid == id) return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda asupra ta!");
	if(moneytransfer < 10000 || moneytransfer > 500000000) return SCM(playerid, COLOR_LGREEN, "Error: Poti transfera Toi thieu $10,000 si va toi da $500,000,000!");
	if(GetPlayerBank(playerid) < moneytransfer) return SCM(playerid, COLOR_LGREEN, "Fonduri insuficiente.");
	TransferOffer[playerid] = id;
	TransferMoney[playerid] = moneytransfer;	
	new cashbank = TransferMoney[playerid]/100;	
	format(string, sizeof(string), "Esti sigur ca vrei sa transferi %s$ lui %s?\nTaxa este $%s.",FormatNumber(moneytransfer),GetName(id),FormatNumber(cashbank));
	Dialog_Show(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer:", string, "Yes", "No");
	return true;
}
YCMD:staff(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	Dialog_Show(playerid, DIALOG_STAFF, DIALOG_STYLE_LIST, "Staff", "Admins\nHelpers", "Ok", "Close");
	return true;		
}
function GetStaffOnline(type) {
	switch(type) {
		case 0: return Iter_Count(PlayerAdmins);
		case 1: return Iter_Count(PlayerHelpers);	
	}
	return false;
}
stock GetLeader(faction) {
	new lead[180], query[256], result[100];
	format(lead, MAX_PLAYER_NAME, "None");
	format(query, sizeof(query), "SELECT * FROM `users` WHERE `Leader` = '%d'", faction);
	new Cache: masta = mysql_query(SQL, query);
	if(cache_num_rows() >= 1) {
		cache_get_value_name(0, "name", result);
		format(lead, sizeof(lead), "%s", result);
		new userID = GetPlayerID( result );
		if(userID != INVALID_PLAYER_ID) format(lead, 256, "%s (%d)", result, userID);
	}
	cache_delete(masta);
	return lead;
}

stock IsSeatTaken(vehicleid, seatid) { 
 	for(new i; i < MAX_PLAYERS; i++) {  if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seatid) return true;  }
	return false;
}
YCMD:factions(playerid, params[], help) {
	new szDialog[210], szDialog2[1700];
	strcat(szDialog2, "Numele factiunii\tMembrii/Locuri\tAplicatii\n");
	for(new i = 1; i < 16; i++) {
		format(szDialog, sizeof(szDialog), "%d. {%s}%s{FFFFFF}\t%s/15\t%s\n", i, ColorFaction[i], FactionName(i), GetFactionMembers(i), GetFactionStatus(i));
		strcat(szDialog2, szDialog);
	}
	Dialog_Show(playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Factiuni:", szDialog2, "Ok", "Close");
	return true;
}
stock GetFactionStatus(fid) {
	new szStatus[180];
	if(DynamicFactions[fid][fApp] == 1) format(szStatus, 256, "{FF0000}Dong cua{FFFFFF}");
	else format(szStatus, 256, "{2FC914}Mo{FFFFFF}");
	return szStatus;
}
stock GetFactionStatus2(fid) {
	new szStatus[180];
	if(DynamicFactions[fid][fApp] == 0) format(szStatus, 256, "Dong cua");
	else format(szStatus, 256, "Mo");
	return szStatus;
}
new Float: VipPos[3], VipText;	
YCMD:finalpos(playerid, params[], help) {
	new str[128];
	format(str, 128, "[DEBUG] %f, %f, %f", VipPos[0], VipPos[1], VipPos[2]);
	SCM(playerid, -1, str);
	print(str);
	VipText = 0;
	return true;
}
YCMD:xpos(playerid, params[], help) {
	if(sscanf(params, "f", VipPos[0])) return true;
	DestroyDynamicObject(VipText);
	VipText = CreateDynamicObject(1463, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	AttachDynamicObjectToVehicle(VipText, GetPlayerVehicleID(playerid), VipPos[0], VipPos[1], VipPos[2], 0.0, 0.0, 0.0);
	return true;
}
YCMD:ypos(playerid, params[], help) {
	if(sscanf(params, "f", VipPos[1])) return true;
	DestroyDynamicObject(VipText);
	VipText = CreateDynamicObject(1463, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	AttachDynamicObjectToVehicle(VipText, GetPlayerVehicleID(playerid), VipPos[0], VipPos[1], VipPos[2], 0.0, 0.0, 0.0);
	return true;
}
YCMD:zpos(playerid, params[], help) {
	if(sscanf(params, "f", VipPos[2])) return true;
	DestroyDynamicObject(VipText);
	VipText = CreateDynamicObject(1463, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	AttachDynamicObjectToVehicle(VipText, GetPlayerVehicleID(playerid), VipPos[0], VipPos[1], VipPos[2], 0.0, 0.0, 0.0);
	return true;
}
YCMD:flip(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pYouTuber] < 1) return true;
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	if(PlayerInfo[playerid][pVip] > 0 && PlayerInfo[playerid][pWantedLevel] != 0) return  SCM(playerid, -1, "Nu poti folosi aceasta comanda atata timp cat ai wanted!");
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, "Ban khong the su dung thao tac nay khi dang trong Race Arena!");
	new Float:angle;
	GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
	SetVehicleZAngleEx(GetPlayerVehicleID(playerid), angle);
	return true;
}
function valid_vip_vehicle(vehid) {
	switch(vehid) {
		case 560: return true;
		case 541: return true;
		case 429: return true;
		case 495: return true;
		case 579: return true;
		case 562: return true;
		case 451: return true;
		case 480: return true;
		case 411: return true;
	}
	return false;
}
YCMD:vipname(playerid, params[], help) {
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti in vehiculul tau!");
	new car = GetPlayerVehicleID(playerid);
	if(Iter_Count(MyVehicle[playerid]) == 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai un vehicul personal!");
	if(PersonalCar(playerid) == -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti in unul dintre vehiculele tale personale!");
	new idd = PersonalCar(playerid);
	if(CarInfo[idd][Spawned] != car) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti in vehiculul tau.");
	if(strlen(CarInfo[idd][cText]) < 3) return SCM(playerid, COLOR_LGREEN, "Error: Acest vehicul nu este unul VIP!");
	if(GetPVarInt(playerid, "Engine") != 0) 
		return SCM(playerid, COLOR_LGREEN, "Error: Trebuie sa ai motorul oprit.");
	Dialog_Show(playerid, DIALOG_VIPNAME, DIALOG_STYLE_LIST, "{FCD482}VIP{FFFFFF} Menu", "Change vip name text\nChange text color\nSet text position\nReset to default", "Select", "Cancel");
	return true;
}
function EditVipCar(playerid, vssid) {
	new Float:fPos[3];
		
	GetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1], fPos[2]); 
	CarInfo[vssid][cVipPos][0] = CarInfo[vssid][cVipPos][0]+fPos[0];
	CarInfo[vssid][cVipPos][1] = CarInfo[vssid][cVipPos][1]+fPos[1];
	CarInfo[vssid][cVipPos][2] = CarInfo[vssid][cVipPos][2]+fPos[2];

	nameobject[CarInfo[vssid][Spawned]] = CreateDynamicObject(19327, CarInfo[vssid][cVipPos][0], CarInfo[vssid][cVipPos][1], CarInfo[vssid][cVipPos][2], CarInfo[vssid][cVipPos][3], CarInfo[vssid][cVipPos][4], CarInfo[vssid][cVipPos][5]);
	new name[40];
	format(name, sizeof(name), "{%s}%s", serverColors(CarInfo[vssid][cTextColor]), CarInfo[vssid][cText]);
	SetDynamicObjectMaterialText(nameobject[CarInfo[vssid][Spawned]], 0, name, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
	EditDynamicObject(playerid, nameobject[CarInfo[vssid][Spawned]]);
	IsEditVip[playerid] = 1;
	EditVehicleID[playerid] = vssid;
	return true;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz) {
	if(response == EDIT_RESPONSE_FINAL) {
		if(IsEditVip[playerid] == 1) {
			new 
				vssidd = EditVehicleID[playerid], Float:ofx, Float:ofy, Float:ofz, Float:ofaz,
				Float:finalx, Float:finaly, Float:px, Float:py, Float:pz, Float:roz, car = GetPlayerVehicleID(playerid)
			;
			GetVehiclePos(car, px, py, pz);
			GetVehicleZAngle(car, roz);

			ofx = x-px;
			ofy = y-py;
			ofz = z-pz;
			ofaz = rz-roz;
			finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
			finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

			CarInfo[vssidd][cVipPos][0] = finalx;
			CarInfo[vssidd][cVipPos][1] = finaly;
			CarInfo[vssidd][cVipPos][2] = ofz;
			CarInfo[vssidd][cVipPos][3] = rx;
			CarInfo[vssidd][cVipPos][4] = ry;
			CarInfo[vssidd][cVipPos][5] = ofaz;
			AttachDynamicObjectToVehicle(nameobject[CarInfo[vssidd][Spawned]], CarInfo[vssidd][Spawned], CarInfo[vssidd][cVipPos][0], CarInfo[vssidd][cVipPos][1], CarInfo[vssidd][cVipPos][2], CarInfo[vssidd][cVipPos][3], CarInfo[vssidd][cVipPos][4], CarInfo[vssidd][cVipPos][5]);
			Save_VipCoordonat(vssidd);
			IsEditVip[playerid] = 0;
			SCM(playerid, COLOR_LIGHTGOLD, "VIP MENU: {FFFFFF}coordonate-le au fost schimbate cu success.");
		}
	}
	else if(response == EDIT_RESPONSE_CANCEL) {
		if(IsEditVip[playerid] == 1) {
			DestroyDynamicObject(nameobject[CarInfo[EditVehicleID[playerid]][Spawned]]);
			attach_vip_text(EditVehicleID[playerid]);
			IsEditVip[playerid] = 0;
		}
	}
	return true;
}
function attach_vip_text(idd) {
	if(strlen(CarInfo[idd][cText]) >= 3) {
		new name[82];
		nameobject[CarInfo[idd][Spawned]] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
		format(name, sizeof(name), "{%s}%s", serverColors(CarInfo[idd][cTextColor]), CarInfo[idd][cText]);
		SetDynamicObjectMaterialText(nameobject[CarInfo[idd][Spawned]], 0, name, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
		AttachDynamicObjectToVehicle(nameobject[CarInfo[idd][Spawned]], CarInfo[idd][Spawned], CarInfo[idd][cVipPos][0], CarInfo[idd][cVipPos][1], CarInfo[idd][cVipPos][2], CarInfo[idd][cVipPos][3], CarInfo[idd][cVipPos][4], CarInfo[idd][cVipPos][5]);
	}
	return true;
}
YCMD:vipwheels(playerid, params[], help) {
	if(PlayerInfo[playerid][pVip] == 0) return true;
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LGREEN, "Khong o trong xe!");
	new idd = PersonalCar(playerid);
	if(idd == -1) return true;
	Dialog_Show(playerid, DIALOG_WHEELS, DIALOG_STYLE_LIST, "legendary Wheels", "Shadow\nCutter\nSwitch\nDollar", "Ok", "Exit");
	return true;
}
YCMD:viplist(playerid, params[], help) {
	gString[0] = EOS;
	SCM(playerid, COLOR_WHITE, "---------------------- VIP's List ----------------------");
	foreach(new i: PlayerVips) {
		format(gString, 30, "%s (%d)", GetName(i), i);
		SCM(playerid, COLOR_WHITE, gString);
	}
	format(gString, 65, "{ADFF5C}* Sunt %d jucatori conectati ce au cont VIP user.", Iter_Count(PlayerVips));
	SCM(playerid, COLOR_WHITE, gString);
	SCM(playerid, COLOR_WHITE, "--------------------------------------------------------");
	return true;
}

YCMD:premiumlist(playerid, params[], help) {
	gString[0] = EOS;
	SCM(playerid, COLOR_WHITE, "---------------------- Premium's List ----------------------");
	foreach(new i: PlayerPremiums) {
		format(gString, 30, "%s (%d)", GetName(i),i);
		SCM(playerid, COLOR_WHITE, gString);
	}
	format(gString, 65, "{ADFF5C}* Sunt %d jucatori conectati ce au cont premium user.", Iter_Count(PlayerPremiums));
	SCM(playerid, COLOR_WHITE, gString);
	SCM(playerid, COLOR_WHITE, "--------------------------------------------------------");
	return true;
}
YCMD:nos(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pVip] == 0) 
		return true;
	
	if(!IsPlayerInAnyVehicle(playerid)) 
		return true;
	
	if(PlayerInfo[playerid][pVip] == 1 && PlayerInfo[playerid][pWantedLevel] != 0) 
		return SCM(playerid, -1, "Nu poti folosi aceasta comanda atata timp cat ai wanted!");
   
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	GivePlayerCash(playerid, 0, 10000);
	format(gString, 100, "(NOS): {FFFFFF}Ti-ai pus nos pe vehiculul tau '%s' (%d) si ai platit $10.000.", aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400], GetPlayerVehicleID(playerid));
	SCM(playerid, 0x00C700FF, gString);
	return true;
}
YCMD:setgoal(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SCM(playerid, COLOR_RED, "Error: {FFFFF}Nu ai acces la aceasta comanda!");
	new amount, string[64];
	if(sscanf(params, "i", amount)) return SCM(playerid, COLOR_RED, "Usage: {FFFFFF}/setgoal <amount>");
	MAXGOAL = amount;
	format(string, sizeof(string), "New gol set to %s", FormatNumbers(amount));
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:fish(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 9) 
		return SCM(playerid, COLOR_GREY, "Nu esti pescar!");

	if(!PlayerToPoint(40, playerid, 2094.1675,-110.8299,2.1482)) 
		return SCM(playerid, COLOR_GREY, "Nu esti in zona in care poti pescui.");

	if(IsPlayerInAnyVehicle(playerid)) 
		return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the thuc hien hanh dong nay khi dang o trong mot phuong tien!");

	if(PlayerInfo[playerid][pBackpack] < 2) {
		if(HaveFish[0][playerid] != 0) return SCM(playerid, -1, "Ai prins deja un peste! Dute si vinde pestele la Fish Shop (/gps).");
	}
	else if(PlayerInfo[playerid][pBackpack] == 2) {
		if(HaveFish[0][playerid] != 0 && HaveFish[1][playerid] != 0) return SCM(playerid, -1, "Ai prins deja doi pesti! Dute si vinde pestele la Fish Shop (/gps).");
	}
	if(StartFish[playerid] == 1) 
		return true;

	GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~y~YOU'RE FISHING~n~~w~~h~Waiting...", 3000, 3);
	FishTimer[playerid] = 10;
	TogglePlayerControllable(playerid, 0);
	OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
	SetPlayerAttachedObject(playerid, 0, 18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
	StartFish[playerid] = 1;
	Freezed[playerid] = 1;
	return true;
}
function Fish(playerid) {
	new x, string[180];
	if(!IsPlayerConnected(playerid)) return true;
	if(PlayerInfo[playerid][pJob] == 9) {
		RemovePlayerAttachedObject(playerid, 0);
		x = 30000 + random(10000) + GetPlayerSkill(playerid)*500;
		new rar = random(500);
		if(rar >= 450 && rar < 489) {
			x += 30000 + random(50000);
			format(string, sizeof(string), "Ai prins un peste rar care valoreaza $%s!", FormatNumber(x));
			SCM(playerid, COLOR_DARKPINK, string);
			SCM(playerid, -1, "Pentru a vinde pestele, trebuie sa mergi Fish Shop. (/gps)");			
			format(string, sizeof(string), "* %s a prins un peste rar ce valoreaza $%s.", GetName(playerid), FormatNumber(x));
			NearMessage(playerid, COLOR_YELLOW, string);						
		}
		else if(rar >= 490) {
			x += 30000 + random(100000);
			format(string, sizeof(string), "Ai prins un peste foarte rar!", FormatNumber(x));
			SCM(playerid, COLOR_BLUE, string);
			SCM(playerid, -1, "Pentru a vinde pestele, trebuie sa mergi Fish Shop. (/gps)");		
			format(string, sizeof(string), "* %s a prins un peste foarte rar care valoreaza %s.", GetName(playerid), FormatNumber(x));
			NearMessage(playerid, COLOR_YELLOW, string);
		}
		else {
			format(string, sizeof(string), "Ai prins un peste normal care valoreaza $%s!", FormatNumber(x));
			SCM(playerid, COLOR_YELLOW, string);	
			SCM(playerid, -1, "Pentru a vinde pestele, trebuie sa mergi Fish Shop. (/gps)");
			format(string, sizeof(string), "* %s a prins un peste normal ce valoreaza $%s.", GetName(playerid), FormatNumber(x));
			NearMessage(playerid, COLOR_YELLOW, string);				
		}
		if(HaveFish[0][playerid] != 0) HaveFish[1][playerid] = x;
		if(HaveFish[0][playerid] == 0) HaveFish[0][playerid] = x;
		StartFish[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		Freezed[playerid] = 0;
	}
	return true;
}
YCMD:apark(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return true;
	new Float:x,Float:y,Float:z, Float:a;
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu te aflii intr-un vehicul.");
	new car = GetPlayerVehicleID(playerid);
	new carid = FindSpawnID(car);
	if(carid == 0) return true;
	GetVehiclePos(car, x, y, z);
	GetVehicleZAngle(car, a);
	CarInfo[carid][cLocationx] = x;
	CarInfo[carid][cLocationy] = y;
	CarInfo[carid][cLocationz] = z;
	CarInfo[carid][cAngle] = a;
 	DestroyVehicle(car);
  	CarInfo[carid][Spawned] = CreateVehicleEx(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo], -1, 0);
	VehicleOwned[CarInfo[carid][Spawned]] = CarInfo[carid][Spawned];
	VehicleSQL[CarInfo[carid][Spawned]] = carid;	
	SetTunning(carid);
	saveCar(carid);
	return true;
}
YCMD:jobs(playerid, params[], help) {
	
	if(JobWorking[playerid] == 1) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta coamnda cand muncesti.");
	
	new szDialog2[1024], szTitle[50], xx, Owner[30];
	strcat(szDialog2, "Job name\tLevel\tOwner\tDistance\n");

	for(new j = 0; j < MAX_JOBS; j++) {
		if(strlen(JobInfo[j][jName]) > 1) {
			if(strcmp(JobInfo[j][jOwner], "None", true) == 0) { 
				Owner = "{BC1D1D}-{FFFFFF}"; 
			} else format(Owner, sizeof(Owner), "%s", JobInfo[j][jOwner]);

			gString[0] = EOS;
			format(gString, sizeof(gString), "%s\t%d\t%s\t%0.2fm\n", JobInfo[j][jName],JobInfo[j][jLevel], Owner, GetPlayerDistanceFromPoint(playerid, JobInfo[j][jPosX],JobInfo[j][jPosY],JobInfo[j][jPosZ]));
			strcat(szDialog2, gString);
			xx++;
		}
	}
	format(szTitle, sizeof(szTitle), "Jobs: %d", xx);
	Dialog_Show(playerid, DIALOG_JOBS, DIALOG_STYLE_TABLIST_HEADERS, szTitle, szDialog2, "Ok", "Cancel");
	return true;
}

function PlayersHaveJob(jobid) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pJob] == jobid) x++;
		}
	}
	return x;
}
YCMD:locations(playerid, params[], help) {
	Dialog_Show(playerid, DIALOG_LOCATIONS, DIALOG_STYLE_LIST, "Locatii", "Bussines-uri\nLocatii importante\nTunning-uri\nCrates & Gift box", "Select", "Exit");
	return true;
}
YCMD:heal(playerid, params[], help) {
	if(PaintType[playerid] != 0) return true;
	new string[180];
	if(IsACop(playerid)) {
		if(InHouse[playerid] > 0) {
			SetPlayerHealthEx(playerid,99.0);
			if(HouseInfo[InHouse[playerid]][hArm] == 1 && OnDuty[playerid] == 1) {
				format(string, sizeof(string), "* %s si-a pus armura.", GetName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				SetPlayerArmourEx(playerid,99.0);
			}
		}
		else {
			if(IsPlayerInRangeOfPoint(playerid, 50.0, 245.8297,112.4436,1003.2188) || IsPlayerInRangeOfPoint(playerid, 50.0, 236.3031,162.9478,1003.0300) && IsACop(playerid)) {
				if(GetPlayerInterior(playerid) == 0) return SCM(playerid,COLOR_GREY, "Nu esti in HQ.");
				SetPlayerHealthEx(playerid,99.0);
				if(OnDuty[playerid] == 1) SetPlayerArmourEx(playerid,99.0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 50.0, 769.9825,-39.2081,1000.6865) || IsPlayerInRangeOfPoint(playerid, 50.0, 1719.3446,-1662.2314,20.2285) || IsPlayerInRangeOfPoint(playerid, 50.0,2324.3416,-1143.3370,1050.4922) || IsPlayerInRangeOfPoint(playerid, 50.0,616.0771,-11.4624,1000.9219)
			|| IsPlayerInRangeOfPoint(playerid, 50.0,960.9341,-51.0495,1001.1172) || IsPlayerInRangeOfPoint(playerid, 50.0,957.6353,2109.3533,1011.0234) || IsPlayerInRangeOfPoint(playerid, 50.0,1496.2422,1306.8334,1093.2891)) {
				SetPlayerHealthEx(playerid,99.0);
			}
		}
	}
	else {
		if(InTraining[playerid] != 0) SetPlayerHealthEx(playerid,99.0); 
		if(InHouse[playerid] > 0) {
			if(HouseInfo[InHouse[playerid]][hHel] == 1) SetPlayerHealthEx(playerid,99.0);
		}
		if(InHQ[playerid] == PlayerInfo[playerid][pMember] && PlayerInfo[playerid][pMember] != 0) SetPlayerHealthEx(playerid,99.0);
		new id,price;
		if(PlayerInfo[playerid][pMember] != 13) return true;
		if(DeelayCommand[playerid][4] != 0) return DeelayTime(playerid, 4);
		if(sscanf(params, "ui", id,price)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/heal <playerid/name> <price>");
		if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
		if(IsInBlacklist(id, 14)) return SCM(playerid, -1, "Acel jucator este pe blacklist-ul factiunii!");	
		if(price < 1 || price > 5000) return SCM(playerid, -1, "Pretul trebuie sa fie intre $1 si $5,000.");
		if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!"); 				
		if(PlayerMoney(id, price)) return SCM(playerid,-1, "Acel player nu are destui bani.");
		new giveambu = GetPlayerVehicleID(id);
		new playambu = GetPlayerVehicleID(playerid);
		if(!IsAnAmbulance(playambu) || playambu != giveambu) return SCM(playerid, COLOR_WHITE, "Acel player nu este in ambulanta.");
		new Float:tempheal;
		GetPlayerHealthEx(id,tempheal);
		if(tempheal >= 98.0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player are viata plina!");
		GivePlayerCash(playerid, 1,price);
		GivePlayerCash(id, 0,price);
		SetPlayerHealthEx(id, 99);
		DeelayCommand[playerid][4] = 30;
		PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
		
		format(string, sizeof(string), "**(( Paramedic Dispatch: Paramedic %s (%d) i-a oferit heal lui %s (%d) pentru suma de %s$. ))**",GetName(playerid), playerid, GetName(id), id, FormatNumber(price));
		SendFactionMessage(13, COLOR_LIGHTBLUE,string);
		
		format(string, sizeof(string), "Ban nhan duoc viata pentru %s$.",FormatNumber(price));
		SCM(id, COLOR_MONEY,string);
		format(string, sizeof(string), "I-ai dat viata lui %s in schimbul sumei de $%s.", GetName(id), FormatNumber(price));
		SCM(playerid, COLOR_MONEY, string);
		if(PlayerInfo[playerid][pMember] != PlayerInfo[id][pMember]) UpdateFactionRaport(playerid, 0);	
		Update(id, pCashx);
		Update(playerid, pCashx);	

		for(new m; m < 2; m++) {
			if(PlayerInfo[playerid][pDailyMission][m] == 15 || PlayerInfo[playerid][pDailyMission][m] == 16) CheckMission(playerid, m);
		}
	}
	return true;
}
YCMD:call(playerid, params[], help) {
	new number,string[180],giveplayer[25];
	if(sscanf(params, "i",number)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/call <Number>");
	if(PaintType[playerid] != 0) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in arena de paintball!");
	if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid, COLOR_GREY, "Nu ai un telefon.");
	if(PhoneOnline[playerid] > 0) return SCM(playerid, -1, "Telefonul tau este inchis.");
	if(number == 112) {
		if(OnDuty[playerid] == 1) return true;
		if(WantedReason[playerid] != 999) {
			new killerid = GetPlayerID(WantedName[playerid]);
			if(killerid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
			if(PlayerInfo[killerid][pWantedLevel] >= 6) return SCM(playerid, -1, "Acel player are niveul maxim de wanted!");
			PlayerInfo[killerid][pWantedLevel] += 1;
			
			format(string, sizeof(string), "Crima raportata!",GetName(killerid));
			SCM(playerid,COLOR_CLIENT,string);
			
			SetPlayerCriminal(killerid,playerid, "first degree murder");
			ShowWanted[killerid] = 1;
			WantedReason[playerid] = 999;		
		}
		return true;
	}
	if(number == PlayerInfo[playerid][pPhone]) return SCM(playerid, COLOR_GRAD2, "Ton ocupat...");
	if(Mobile[playerid] != 255) return SCM(playerid, -1, "Esti deja intr-un apel.");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pPhone] == number && number != 0) {
				new giveplayerid = i;
				if(!IsPlayerConnected(giveplayerid) && giveplayerid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Invalid number!");
				if(IsBlocked(giveplayerid, playerid)) return SCM(playerid, COLOR_LGREEN, "Acel player te-a blocat! Nu il poti contacta.");
				if(IsBlocked(playerid, giveplayerid)) return SCM(playerid, COLOR_LGREEN, "L-ai blocat pe acel player! Nu il poti contacta.");
				if(Spectate[giveplayerid] != 255) return SCM(playerid, COLOR_GREY, "Acel player este ocupat!");
				if(PhoneOnline[giveplayerid] > 0) return SCM(playerid, -1, "Are telefonul inchis.");
				if(Mobile[giveplayerid] != 255) return SCM(playerid, COLOR_GREY, "Acel player este deja intr-un apel.");
				Mobile[playerid] = giveplayerid;
				format(string, sizeof(string), "%s (%s) te suna. Scrie '/pickup' pentru a raspunde.", GetName(playerid), DecimalNumber(playerid));
				SCM(giveplayerid, COLOR_YELLOW, string);
				new tel[180], tel2[180];
				format(tel, 256, "%d", PlayerInfo[playerid][pPhone]);
				format(tel2, 256, "%d", PlayerInfo[giveplayerid][pPhone]);								
				if(strlen(tel) == 4) format(string, sizeof(string), "%s scoate iPhone-ul si scrie un numar.", GetName(playerid));
				else format(string, sizeof(string), "%s scoate telefonul si scrie un numar.", GetName(playerid));
				
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
				if(PlayerInfo[playerid][pPhone] == 0) SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				else if(PlayerInfo[playerid][pPhone] == 1) SetPlayerAttachedObject( playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
				else if(PlayerInfo[playerid][pPhone] == 2) SetPlayerAttachedObject( playerid,4, 18874, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone10 - phone10
				if(strlen(tel2) == 4) format(string, sizeof(string), "* Suna iPhone-ul lui %s.", giveplayer);
				else format(string, sizeof(string), "* Suna telefonul lui %s.", giveplayer);
				ProxDetector(20.0, giveplayerid, string, COLOR_PURPLE);

				CellTime[playerid] = 1;
				Update(playerid, pCashx);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				if(PlayerInfo[playerid][pPhone] == 0) SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				else if(PlayerInfo[playerid][pPhone] == 1) SetPlayerAttachedObject( playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
				else if(PlayerInfo[playerid][pPhone] == 2) SetPlayerAttachedObject( playerid,4, 18874, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone10 - phone10
				return true;
			}
		}
	}
	SCM(playerid, COLOR_GREY, "Invalid number!");
	return true;
}
YCMD:sms(playerid, params[], help) {
	new id, phonenumb,smstext[90],string[184],giveplayerid;
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti da sms singur.");
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(sscanf(params, "is[90]",phonenumb,smstext)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/sms <Number> <Text>");
	if(FaceReclama(smstext)) return Reclama(playerid, smstext);
	if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid, COLOR_GREY, "Nu ai un telefon.");
	if(PhoneOnline[playerid] > 0) return SCM(playerid, -1, "Telefonul tau este inchis.");
	foreach(new i: Player) {
		if(PlayerInfo[i][pPhone] == phonenumb && phonenumb != 0) {
			giveplayerid = i;
			if(!IsPlayerConnected(giveplayerid) && giveplayerid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Invalid number!");
			if(IsBlocked(i, playerid)) return SCM(playerid, COLOR_LGREEN, "Acel player te-a blocat! Nu il poti contacta.");
			if(IsBlocked(playerid, i)) return SCM(playerid, COLOR_LGREEN, "L-ai blocat pe acel player! Nu il poti contacta.");
			if(Spectate[i] != 255) return SCM(playerid, COLOR_GREY, "Acel player este ocupat!");
			if(PhoneOnline[giveplayerid] > 0) return SCM(playerid, -1, "Telefonul lui este inchis.");
			if(PlayerInfo[giveplayerid][pAdmin] >= 1) {
				format(string, sizeof(string), "SMS de la %s (%d): %s",GetName(playerid),playerid, smstext);
				SCM(giveplayerid, COLOR_YELLOW, string);
			}
			else {
				format(string, sizeof(string), "SMS de la %s (%s): %s",GetName(playerid),DecimalNumber(playerid), smstext);
				SCM(giveplayerid, COLOR_YELLOW, string);
			}
			format(string, sizeof(string), "SMS trimis lui %s (%s): %s",GetName(giveplayerid),DecimalNumber(giveplayerid),smstext);
			SCM(playerid, 0xC8E0DFFF, string);
			format(string, sizeof(string), "(sms) %s catre %s: %s", GetName(playerid), GetName(giveplayerid), smstext);
			ChatLog(GetName(playerid), playerid, string);	

			format(string, sizeof(string), "(SMS LOG) %s(%d) catre %s(%d): %s", GetName(playerid), playerid, GetName(giveplayerid), giveplayerid, smstext);
			if(PlayerInfo[playerid][pAdmin] < 6) EarsMessage(0xFFC400FF, string);
	
			//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlaySound(giveplayerid, 1138, 0.0, 0.0, 0.0);
			Reply[giveplayerid] = playerid;
			return true;
		}
	}
	SCM(playerid, COLOR_GREY, "Invalid number!");
	return true;
}
YCMD:re(playerid, params[], help) {	
	new id,message[128], string[256], sendername[25], giveplayer[25];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		if(sscanf(params, "us[128]", id, message)) return SCM(playerid, COLOR_GREY, "Sintaxa: {FFFFFF}/re <playerid/name> <message>");
		{
			if(id != INVALID_PLAYER_ID)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), ">> %s: %s <<", sendername, message);
				SCM(id, COLOR_YELLOW, string);
				format(string, sizeof(string), "(/re)%s->%s: %s", sendername , giveplayer, message);
				SendStaffMessage(COLOR_YELLOW, string);
			}
			else return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
		}
	}
	else return SCM(playerid, COLOR_LGREEN, "Nu ai acces la aceasta comanda!");
	return true;
}
YCMD:reply(playerid, params[], help) {
	new tel[180];
	format(tel, 256, "%d", PlayerInfo[playerid][pPhone]);
	if(strlen(tel) != 4) return SCM(playerid, COLOR_GREY, "Nu ai un iPhone!");
	if(Reply[playerid] == -1) return true;
	new phonenumb,smstext[90],sendername[30],string[184],giveplayerid;
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(sscanf(params, "s[90]",smstext)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/reply <Text>");
	if(FaceReclama(smstext)) return Reclama(playerid, smstext);
	if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid, COLOR_GREY, "Nu ai un telefon.");
	if(PhoneOnline[playerid] > 0) return SCM(playerid, -1, "Telefonul tau este inchis.");
	phonenumb = PlayerInfo[Reply[playerid]][pPhone];
	foreach(new i: Player) {
		if(PlayerInfo[i][pPhone] == phonenumb && phonenumb != 0) {
			if(!IsPlayerConnected(giveplayerid) && giveplayerid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Invalid number!");
			if(IsBlocked(i, playerid)) return SCM(playerid, COLOR_LGREEN, "Acel player te-a blocat! Nu il poti contacta.");
			if(IsBlocked(playerid, i)) return SCM(playerid, COLOR_LGREEN, "L-ai blocat pe acel player! Nu il poti contacta.");
			if(Spectate[i] != 255) return SCM(playerid, COLOR_GREY, "Acel player este ocupat!");
			giveplayerid = i;
			if(PhoneOnline[giveplayerid] > 0) return SCM(playerid, -1, "Telefonul lui este inchis.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[giveplayerid][pAdmin] >= 1) {
				format(string, sizeof(string), "SMS de la %s (%d): %s",GetName(playerid),playerid, smstext);
				SCM(giveplayerid, COLOR_YELLOW, string);
			}
			else {
				format(string, sizeof(string), "SMS de la %s (%s): %s",GetName(playerid),DecimalNumber(playerid), smstext);
				SCM(giveplayerid, COLOR_YELLOW, string);
			}
			format(string, sizeof(string), "SMS trimis lui %s (%s): %s",GetName(giveplayerid),DecimalNumber(giveplayerid),smstext);
			SCM(playerid, 0xC8E0DFFF, string);
			format(string, sizeof(string), "(sms) %s catre %s: %s", sendername, GetName(giveplayerid), smstext);
			ChatLog(GetName(playerid), playerid, string);

			format(string, sizeof(string), "(SMS LOG) %s(%d) catre %s(%d): %s", sendername, playerid, GetName(giveplayerid), giveplayerid, smstext);
			if(PlayerInfo[playerid][pAdmin] < 6) EarsMessage(0xFFC400FF, string);

			//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlaySound(giveplayerid, 1138, 0.0, 0.0, 0.0);
			return true;
		}	
	}
	SCM(playerid, COLOR_GREY, "Invalid number!");
	return true;
}
YCMD:speaker(playerid, params[], help) {
	if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid,COLOR_GREY, "Nu ai un telefon.");
	if(Mobile[playerid] == 255) return SCM(playerid, COLOR_GREY, "Nu esti intr-un apel.");
	if(PlayerInfo[playerid][pSpeaker] == 0) {
		SCM(playerid, -1, "* Difuzor pornit.");
		PlayerInfo[playerid][pSpeaker] = 1;
	}
	if(PlayerInfo[playerid][pSpeaker] == 1) {
		SCM(playerid, -1, "* Diifuzor oprit.");
		PlayerInfo[playerid][pSpeaker] = 0;
	}
	return true;
}
YCMD:turn(playerid, params[], help) {
	new result[50],string[128];
	if(sscanf(params, "s[50]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/turn <Off/On>");
	if(strcmp(result,"off",true) == 0) {
		if(PhoneOnline[playerid] == 0) {
			PhoneOnline[playerid] = 1;
			UpdateVar(playerid, "PhoneOnline", PhoneOnline[playerid]);
			format(string, sizeof(string), "%s si-a oprit telefonul.", GetName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		}
		else SCM(playerid, -1, "Telefonul tau este deja inchis!");
	}
	if(strcmp(result,"on",true) == 0) {
		if(PhoneOnline[playerid] == 1) {
			PhoneOnline[playerid] = 0;
			UpdateVar(playerid, "PhoneOnline", PhoneOnline[playerid]);
			format(string, sizeof(string), "%s si-a deschis telefonul.", GetName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		}
		else SCM(playerid, -1, "Telefonul tau este deja deschis!");
	}
	return true;
}
YCMD:pickup(playerid, params[], help) {
	new string[128];
	if(Mobile[playerid] != 255) return SCM(playerid, COLOR_GRAD2, "Esti deja intr-un apel!");
	if(PhoneOnline[playerid] == 1) return SCM(playerid, COLOR_GREY, "Telefonul tau este inchis!");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(Mobile[i] == playerid) {
				Mobile[playerid] = i;
				format(string, sizeof(string), "%s a raspuns la telefon.", GetName(playerid));
				SCM(i, COLOR_YELLOW, string);
				format(string, sizeof(string), "* %s a raspuns la telefon.", GetName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				if(PlayerInfo[playerid][pPhone] == 0) SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				else if(PlayerInfo[playerid][pPhone] == 1) SetPlayerAttachedObject( playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
				else if(PlayerInfo[playerid][pPhone] == 2) SetPlayerAttachedObject( playerid,4, 18874, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone10 - phone10
			}
		}
	}
	return true;
}
YCMD:pcolor(playerid, params[], help) {
	if(PlayerInfo[playerid][pPremiumAccount] == 0) return true;
	Dialog_Show(playerid, DIALOG_PCOLOR, DIALOG_STYLE_LIST, "Nickname color", 
		"{CECECE}White\n{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2\n{4169E1}Royan Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}Dark\n{FF1493}Pink\n{9966CC}Amethyst\n{F0B2B2}Pink-Orange\n{DB7093}Violet-Red", "Choose", "Cancel");
	return true;
}
YCMD:hangup(playerid, params[], help) {
	new caller = Mobile[playerid];
	if(!IsPlayerConnected(caller) && caller == INVALID_PLAYER_ID || caller == 255) return SCM(playerid,-1, "Nu esti intr-un apel.");
	if(PhoneOnline[caller] == 0) {
		new string[180];
		format(string, sizeof(string), "%s a inchis apelul.", GetName(playerid));
		SCM(caller, COLOR_YELLOW, string);
	}
	CellTime[caller] = 0;
	CellTime[playerid] = 0;
	SCM(playerid,COLOR_YELLOW,"Apel inchis.");
	Mobile[caller] = 255;
	SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);

	RemovePlayerAttachedObject(caller,4);
	RemovePlayerAttachedObject(playerid,4);
	Mobile[playerid] = 255;
	PlayerInfo[playerid][pSpeaker] = 0;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return true;
}
YCMD:drink(playerid, params[], help) {
	if(PlayerToPoint(30,playerid, 248.8095,2240.1760,-33.0337)) {
		new Float:health;
		new x_nr[50],str[128];
		if(sscanf(params, "s[50]",x_nr)) {
			SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/drink <Drink name>");
			SCM(playerid, COLOR_WHITE, "Alcohol: Beer (1,000$), Wine (1,500$), Vodka(3,000$), Whiskey(5,000$)");
			SCM(playerid, COLOR_WHITE, "Refreshments: Water (20$), Soda (50$), Sprunk(200$), Coffee (500$)");
			return true;
		}
		if(strcmp(x_nr,"beer",true) == 0) {
			if(PlayerMoney(playerid, 1000)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 1000);
			PlayerDrunk[playerid] += 1;
			GetPlayerHealthEx(playerid, health);
			if(health <= 85) SetPlayerHealthEx(playerid, health + 14.0);
			BizzInfo[InBussines[playerid]][bBalance] += 1000;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 10) CheckMission(playerid, m);
			}							
		}
		else if(strcmp(x_nr,"vodka",true) == 0) {
			if(PlayerMoney(playerid, 3000)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 3000);
			PlayerDrunk[playerid] += 2;			
			GetPlayerHealthEx(playerid, health);
			if(health <= 85) SetPlayerHealthEx(playerid, health + 14.0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
			BizzInfo[InBussines[playerid]][bBalance] += 3000;
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 10) CheckMission(playerid, m);
			}							
		}
		else if(strcmp(x_nr,"whiskey",true) == 0) {
			if(PlayerMoney(playerid, 5000)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 5000);
			PlayerDrunk[playerid] += 3;					
			GetPlayerHealthEx(playerid, health);
			if(health <= 85) SetPlayerHealthEx(playerid, health + 14.0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
			BizzInfo[InBussines[playerid]][bBalance] += 5000;
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 10) CheckMission(playerid, m);
			}							
		}
		else if(strcmp(x_nr,"wine",true) == 0) {
			if(PlayerMoney(playerid, 1500)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 1500);
			PlayerDrunk[playerid] += 3;					
			GetPlayerHealthEx(playerid, health);
			if(health <= 85) SetPlayerHealthEx(playerid, health + 14.0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
			BizzInfo[InBussines[playerid]][bBalance] += 1500;
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 10) CheckMission(playerid, m);
			}							
		}
		else if(strcmp(x_nr,"water",true) == 0) {
			if(PlayerMoney(playerid, 20)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 20);
			GetPlayerHealthEx(playerid, health);
			if(health <= 85) SetPlayerHealthEx(playerid, health + 14.0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InBussines[playerid]][bBalance] += 20;			
		}
		else if(strcmp(x_nr,"soda",true) == 0) {
			if(PlayerMoney(playerid, 50)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 50);
			GetPlayerHealthEx(playerid, health);
			if(health <= 85) SetPlayerHealthEx(playerid, health + 14.0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InBussines[playerid]][bBalance] += 50;
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 10) CheckMission(playerid, m);
			}				
		}
		else if(strcmp(x_nr,"sprunk",true) == 0) {
			if(PlayerMoney(playerid, 200)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 200);
			GetPlayerHealthEx(playerid, health);
			if(health <= 85)  SetPlayerHealthEx(playerid, health + 14.0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InBussines[playerid]][bBalance] += 200;
		}
		else if(strcmp(x_nr,"coffee",true) == 0) {
			if(PlayerMoney(playerid, 500)) return SCM(playerid,COLOR_WHITE,"Nu ai bani destui.");
			GivePlayerCash(playerid, 0, 500);
			GetPlayerHealthEx(playerid, health);
			if(health <= 85) SetPlayerHealthEx(playerid, health + 14.0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InBussines[playerid]][bBalance] += 500;
			for(new m; m < 2; m++) {
				if(PlayerInfo[playerid][pDailyMission][m] == 14) CheckMission(playerid, m);
			}			
		}
		else return  SCM(playerid, COLOR_WHITE, "Barman: Nu avem aceasta bautura!");

		new string[70];
		format(string, sizeof(string), "* %s bea %s.", GetName(playerid) ,x_nr);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);	
		mysql_format(SQL, str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],InBussines[playerid]);
		mysql_tquery(SQL,str, "", "");				
	}
	else SCM(playerid, COLOR_GREY, "Nu esti la bar.");
	return true;
}
YCMD:unjailo(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id[25];
	if(sscanf(params, "s[25]", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/unjailo <name>");
	new cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid,COLOR_ERROR,"error:{FFFFFF} Acest cont nu a fost gasit in baza de date!");
	new str1[128], string[180];
	format(string, sizeof(string), "%s a fost scos din jail si a fost salvat in baza de date.", id);
	SCM(playerid, COLOR_WHITE, string);
	mysql_format(SQL, str1,sizeof(str1),"UPDATE users SET `Jailed`='0',`JailTime`='0',`WantedLevel`='0' WHERE `name`='%s'",id);
	mysql_tquery(SQL,str1, "", "");
	return true;
}
YCMD:jailo(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id[25],reason[128],string[128],sendername[30],minutes,cont;
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(sscanf(params, "s[25]is[128]", id,minutes,reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/ajailo <name> <Minute> <reason>");
	if(FaceReclama(reason)) return RemoveFunction(playerid, reason);
	cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid,COLOR_ERROR,"error:{FFFFFF} Acest cont nu a fost gasit in baza de date!");
	new timej = minutes*60;
	format(string, sizeof(string), "Offline: %s a fost bagat in inchisoare de %s pentru %d minute, motiv: %s", id, sendername,minutes,reason);
	SCMTA(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Ban nhan duoc jail de la %s pentru %d minute, motiv %s.", GetName(playerid), minutes, reason);
	InsertEmail(id, GetName(playerid), string, 0);		
	new str1[184];		
	mysql_format(SQL, str1,sizeof(str1),"UPDATE users SET `Jailed`='2',`JailTime`='%d',`WantedLevel`='0' WHERE `name`='%s'",timej,id);
	mysql_tquery(SQL,str1, "", "");
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	return true;
}
YCMD:ajail(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,reason[128],string[128],minutes;
	if(sscanf(params, "uis[128]", id,minutes,reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/ajail <playerid/name> <Minutes> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	ResetWeapons(id);
	SetPlayerArmourEx(id, 0);
	for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(id, 1001, 1001, 200);
	CheckPaintball();
	PaintType[id] = 0;
	SetPlayerWantedLevel(id, 6);
	PlayerInfo[id][pWantedLevel] = 0;
	Update(id, pWantedLevelx);
	PlayerInfo[id][pJailed] = 2;
	PlayerInfo[id][pJailTime] = minutes*60;
	JailPrice[id] = 0;
	UpdateVar(id, "AJail", 1);
	PlayerInfo[id][pAJail] = 1;
	InsereazaSanctiune(id, playerid, JAIL, reason);
	Update(id,pJailedx);
	Update(id,pJailTimex);
	UpdateVar2(playerid, "Jails", 1);
	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	SpawnPlayer(id);
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	format(string, sizeof(string), "Esti in inchisoare pentru %d minute. motiv: %s", minutes,reason);
	SCM(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmCmd: %s a fost bagat in inchisoare de %s pentru %d minute, motiv: %s", GetName(id), GetName(playerid),minutes,reason);
	MesajLung2(COLOR_LIGHTRED, string);
	return true;
}
YCMD:unjail(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,string[128];
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/unjail <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pJailTime] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu este in jail!");
	ResetWeapons(id);
	ResetWeapons(id);
	PlayerInfo[id][pJailed] = 0;
	PlayerInfo[id][pJailTime] = 0;
	PlayerInfo[id][pWantedLevel] = 0;
	SetPlayerInterior(id, 0);
	JailPrice[id] = 0;
	Update(id,pJailedx);
	Update(id,pJailTimex);
	UpdateVar(id, "AJail", 0);
	PlayerInfo[id][pAJail] = 0;				
	Update(id,pWantedLevelx);
	SetPlayerPosEx(false, id, 1553.1921,-1675.7089,16.1953);
	format(string, sizeof(string), "Admin %s l-a scos pe %s din inchisoare.",GetName(playerid),GetName(id));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_LOGS, string,3);
	if(PlayerInfo[id][pChar] > 0 && PlayerInfo[id][pMember] != 0) {
		if(OnDuty[id] == 0) {}
		else SetPlayerSkinEx(id, PlayerInfo[id][pChar]);
	}
	else SetPlayerSkinEx(id, PlayerInfo[id][pModel]);
	ClearCrime(id);
	TextDrawHideForPlayer(id, Jailtime[id]);
	return true;
}
YCMD:aclear(playerid, params[], help) {
	new id,string[128];
	if(PlayerInfo[playerid][pAdmin] < 2) return true;
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/aclear <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pWantedLevel] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are wanted!");
	format(string, sizeof(string), "Admin %s has cleared all your warrants!", GetName(playerid));
	SCM(id, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Dispatch: Admin %s has cleared all the warrants on %s.", GetName(playerid), GetName(id));
	SendTeamMessage(14, 0x2e64feFF, string);
	SendTeamMessage(3, COLOR_LIGHTBLUE, string);
	SendTeamMessage(2, COLOR_LIGHTBLUE, string);
	SendTeamMessage(1, COLOR_LIGHTBLUE, string);
	PlayerInfo[id][pWantedLevel] = 0;
	SetPlayerWantedLevel(id, 0);
	ClearCrime(id);
	Update(id,pWantedLevelx);
	return true;
}
YCMD:clear(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei.");
	new id,string[128],giveplayer[30],sendername[30];
	if(sscanf(params, "u", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/clear <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(id == playerid) return SCM(playerid, COLOR_WHITE, "You cannot clear yourself.");
	if(PlayerInfo[id][pWantedLevel] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are wanted!");
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "%s has cleared all your warrants!", sendername);
	SCM(id, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Dispatch: %s has cleared all the warrants on %s.", sendername, giveplayer);
	SendTeamMessage(14, 0x2e64feFF, string);
	SendTeamMessage(3, COLOR_LIGHTBLUE, string);
	SendTeamMessage(2, COLOR_LIGHTBLUE, string);
	SendTeamMessage(1, COLOR_LIGHTBLUE, string);
	PlayerInfo[id][pWantedLevel] = 0;
	SetPlayerWantedLevel(id, 0);
	ClearCrime(id);
	Update(id,pWantedLevelx);
	return true;
}
YCMD:showlicenses(playerid, params[], help) {
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/showlicenses <playerid/name>");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid,COLOR_WHITE, "Acel player nu este langa tine.");
	if(Spectate[id] != 255) return SCM(playerid,COLOR_WHITE, "Acel player nu este langa tine.");
	new string[128];
	format(string, sizeof(string), "I-ai aratat licentele lui %s.", GetName(id));
	SCM(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s ti-a aratat licentele lui.", GetName(playerid));
	SCM(id, COLOR_LIGHTBLUE, string);	
	ShowLicenses(id, playerid);
	return true;
}
YCMD:alicenses(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_WHITE,AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/alicenses <playerid/name>");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	ShowLicenses(playerid, id);
	return true;
}
YCMD:panel(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, SERVER_NAME".ro/panel");
YCMD:forum(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, SERVER_NAME".ro/forum");

YCMD:bonus(playerid, params[], help) {
	if(PlayerInfo[playerid][pLevel] > 1) 
		return true;

	SetPlayerScore(playerid, 5);
	PlayerInfo[playerid][pLevel] = 5;
	UpdateVar(playerid, "Level", 5);
	PlayerInfo[playerid][pVoucher][2] += 2;
	save_vouchers(playerid);
	GivePlayerCash(playerid, 1, 200000000);
	GiveVehicle(playerid, 541, 0, 0, 0, 0, 0);
	SCM(playerid, COLOR_GOLD, "Server Bonus: {FFFFFF}Ban nhan duoc $200,000,000 si 2 Vouchere Legendary, level 5, Bullet.");
	return true;
}
YCMD:tog(playerid, params[], help) {
	new szDialog[1024];
	strcat(szDialog, "Function\tStatus\n");
	strcat(szDialog, NewbieChat[playerid] != 1 ? "Newbie chat\t{3BBF0B}Enabled\n" : "Newbie chat\t{FF0000}Disabled\n");
	strcat(szDialog, toglc[playerid] != 1 ? "Leader chat\t{3BBF0B}Enabled\n" : "Leader chat\t{FF0000}Disabled\n");
	strcat(szDialog, gFam[playerid] != 1 ? "Faction chat\t{3BBF0B}Enabled\n" : "Faction chat\t{FF0000}Disabled\n");
	strcat(szDialog, WTToggle[playerid] != 1 ? "Freq chat\t{3BBF0B}Enabled\n" : "Freq chat\t{FF0000}Disabled\n");
	strcat(szDialog, HidePM[playerid] != 1 ? "Whisper\t{3BBF0B}Enabled\n" : "Whisper\t{FF0000}Disabled\n");
	strcat(szDialog, gOoc[playerid] != 1 ? "OOC\t{3BBF0B}Enabled\n" : "OOC\t{FF0000}Disabled\n");
	strcat(szDialog, gNews[playerid] != 1 ? "News\t{3BBF0B}Enabled\n" : "News\t{FF0000}Disabled\n");
	strcat(szDialog, toglicitatie[playerid] != 0 ? "Auction\t{3BBF0B}Enabled\n" : "Auction\t{FF0000}Disabled\n");
	strcat(szDialog, togclan[playerid] != 1 ? "Clan chat\t{3BBF0B}Enabled\n" : "Clan chat\t{FF0000}Disabled\n");
	strcat(szDialog, GetPVarInt(playerid, "Undercover") != 0 ? "Name players\t{3BBF0B}Enabled\n" : "Name players\t{FF0000}Disabled\n");	
	strcat(szDialog, togevent[playerid] != 1 ? "Event chat\t{3BBF0B}Enabled\n" : "Event chat\t{FF0000}Disabled\n");
	strcat(szDialog, togding[playerid] != 1 ? "DMG Song (ding)\t{3BBF0B}Enabled\n" : "DMG Song (ding)\t{FF0000}Disabled\n");
	strcat(szDialog, togsurf[playerid] != 1 ? "Surf vehicle\t{3BBF0B}Enabled\n" : "Surf vehicle\t{FF0000}Disabled\n");	
	strcat(szDialog, togfind[playerid] != 1 ? "Find\t{3BBF0B}Enabled\n" : "Find\t{FF0000}Disabled\n");
	strcat(szDialog, tograport[playerid] != 1 ? "Raport\t{3BBF0B}Enabled\n" : "Raport\t{FF0000}Disabled\n");
	strcat(szDialog, togjob[playerid] != 1 ? "Job\t{3BBF0B}Enabled\n" : "Job\t{FF0000}Disabled\n");	
	strcat(szDialog, PlayerInfo[playerid][pVip] != 0 ? PlayerInfo[playerid][pBackpack] != 1 ? "Backpack(VIP)\t{3BBF0B}Enabled\n" : "Backpack(VIP)\t{FF0000}Disabled\n" : "Backpack(VIP)\t{FF0000}Disabled\n");
	strcat(szDialog, PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pVip] > 0 ? togvip[playerid] != 1 ? "VIP Chat\t{3BBF0B}Enabled\n" : "VIP Chat\t{FF0000}Disabled\n" : "VIP Chat\t{FF0000}Disabled\n");
	strcat(szDialog, PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pPremiumAccount] == 1 ? togpremium[playerid] != 1 ? "PREMIUM Chat\t{3BBF0B}Enabled\n" : "PREMIUM Chat\t{FF0000}Disabled\n" : "PREMIUM Chat\t{FF0000}Disabled\n");
	strcat(szDialog, tograinbow[playerid] != 0 ? "Rainbow\t{3BBF0B}Enabled\n" : "Rainbow\t{FF0000}Disabled\n");	
	Dialog_Show(playerid, DIALOG_TOG, DIALOG_STYLE_TABLIST_HEADERS, "Tog", szDialog, "Select", "Close");
	return true;
}
YCMD:licenses(playerid, params[], help) return ShowLicenses(playerid, playerid);
YCMD:startlesson(playerid, params[], help) {
	new id,string[180];
	if(PlayerInfo[playerid][pMember] != 7) return true;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/startlesson <playerid/name>");
	if(IsInBlacklist(id, 7)) return SCM(playerid, -1, "Acel jucator este pe blacklist-ul factiunii!");			
	if(GetPVarInt(playerid, "InLesson") != -1 || GetPVarInt(id, "InLesson") != -1) return SCM(playerid, -1, "Tu sau acel player va aflati deja intr-o lectie.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pLevel] < 3) return SCM(playerid, -1, "Nu poti da aceasta licenta unui player ce are nivel mai mic de 3.");
	if(!ProxDetectorS(9.0, playerid, id)) return SCM(playerid, -1, "Nu esti langa acel jucator!");
	format(string, sizeof(string), "Instructorul %s doreste sa inceapa o lectie cu tine. (/accept lesson %d)", GetName(playerid), playerid);
	SCM(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Invitatie a fost trimisa lui %s.", GetName(id));
	SCM(playerid, COLOR_LIGHTBLUE, string);	
	SetPVarInt(id, "Lesson", playerid);
	return true;
}
YCMD:stoplesson(playerid, params[], help) {
	if(GetPVarInt(playerid, "InLesson") == -1) return SCM(playerid, -1, "Nu esti intr-o lectie.");
	new id = GetPVarInt(playerid, "InLesson");
	if(!IsPlayerConnected(id)) return true;
	SetPVarInt(playerid, "InLesson", -1);
	SetPVarInt(id, "InLesson", -1);
	SCM(id, COLOR_LIGHTBLUE, "Lectia a fost terminata!");
	SCM(playerid, COLOR_LIGHTBLUE, "Lectia a fost terminata!");
	return true;
}
YCMD:insertcar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces la aceasta comanda.");
	new model, price, dsstock;
	if(sscanf(params, "iii", model, price, dsstock)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/insertcar <model> <price> <stock>");
	if(model < 400 || model > 611) return SCM(playerid,COLOR_WHITE, "Invalid car ID.");
	if(price < 1 || price > 2000000000) return SCM(playerid, COLOR_LGREEN, "Invalid price.");
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO dsveh (`Model`, `Price`, `Stock`) VALUES ('%d', '%d', '%d')", model, price, dsstock);
	mysql_tquery(SQL, gQuery, "InsertCars", "iiii", playerid, model, price, dsstock);
	return true;
}
function InsertCars(playerid, model, price, dsstock) {
	new i = cache_insert_id();
	DSModels[i][dID] = i;
	DSModels[i][dModel] = model;
	DSModels[i][dPrice] = price;
	DSModels[i][dStock] = dsstock;	
	dsvehs ++;
	SelectedCar[playerid][dsvehs] = DSModels[i][dID];
	TotalDealerCars[playerid] = dsvehs;
	gString[0] = EOS;
	format(gString, sizeof(gString), "(/insertcar) {FFFFFF}AdmCmd: Admin %s a insearat un vehicul in dealership %s, price %s.", GetName(playerid), aVehicleNames[model-400], FormatNumbers(price));
	SendAdminMessage(COLOR_LGREEN, gString, 6);
	return true;
}
YCMD:instructors(playerid, params[], help) {
	SCM(playerid, -1, "---- Instructori online ----");
	new string[128], x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pMember] == 7) {
			format(string, sizeof(string), "%s (%d) - Nr. %d", GetName(i), i, PlayerInfo[i][pPhone]);
			SCM(playerid, -1, string);
			x++;
		}
	}
	if(x == 0) return SCM(playerid, -1, "Nu sunt instructori online.");
	else {
		format(string, sizeof(string), "Instructori online: %d", x);
		SCM(playerid, COLOR_LGREEN, string);
	}	
	return true;
}
YCMD:givelicense(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 7) return true;
	new id,x_nr[10],string[128];
	if(sscanf(params, "us[10]",id,x_nr)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/givelicense <playerid/name> <License>");
		SCM(playerid, COLOR_WHITE, "Valabile: Fly, Sailing, Gun.");
		return true;
	}
	if(GetPVarInt(id, "InLesson") != playerid) return SCM(playerid, -1, "Acel player nu este intr-o lectie cu tine.");
	
	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pLevel] < 3) return SCM(playerid, -1, "Nu poti da aceasta licenta unui player ce are nivel mai mic de 3.");
	if(!ProxDetectorS(9.0, playerid, id)) return SCM(playerid, -1, "Nu esti langa acel jucator!");
			
	if(strcmp(x_nr,"fly",true) == 0) {
		new money = 150000;
		if(PlayerMoney(id, money)) return SCM(playerid, -1, "Acel jucator nu are suma necesara de bani!");
		if(PlayerInfo[id][pFlyLicS] != 0) return SCM(playerid, -1, "Acel jucator are aceasta licenta suspendata!");
		if(PlayerInfo[id][pFlyLicT] >= 20) return SCM(playerid, -1, "Acel jucator are deja aceasta licenta!");
		format(string, sizeof(string), "* I-ai oferit licenta de zbor lui %s pentru suma de $%s.",GetName(id), FormatNumber(money));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Instructorul %s ti-a oferit licenta de zbor in schimbul sumei de $%s. (/accept license %d)",GetName(playerid), FormatNumber(money), playerid);
		SCM(id, COLOR_LIGHTBLUE, string);
		License[id] = 1;
		LicenseOffer[id] = playerid;
	}
	else if(strcmp(x_nr,"sailing",true) == 0) {
		new money = 100000;
		if(PlayerMoney(id, money)) return SCM(playerid, -1, "Acel jucator nu are suma necesara de bani!");
		if(PlayerInfo[id][pBoatLicS] != 0) return SCM(playerid, -1, "Acel jucator are aceasta licenta suspendata!");
		if(PlayerInfo[id][pBoatLicT] >= 20) return SCM(playerid, -1, "Acel jucator are deja aceasta licenta!");
		format(string, sizeof(string), "* I-ai oferit licenta de navigatie lui %s pentru suma de $%s.",GetName(id), FormatNumber(money));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Instructorul %s ti-a oferit licenta de navigatie in schimbul sumei de $%s. (/accept license %d)",GetName(playerid), FormatNumber(money), playerid);
		SCM(id, COLOR_LIGHTBLUE, string);
		License[id] = 2;
		LicenseOffer[id] = playerid;
	}
	else if(strcmp(x_nr,"gun",true) == 0) {			
		new money = 200000;
		if(PlayerMoney(id, money)) return SCM(playerid, -1, "Acel jucator nu are suma necesara de bani!");
		if(PlayerInfo[id][pGunLicS] != 0) return SCM(playerid, -1, "Acel jucator are aceasta licenta suspendata!");
		if(PlayerInfo[id][pGunLicT] >= 20) return SCM(playerid, -1, "Acel jucator are deja aceasta licenta!");
		format(string, sizeof(string), "* I-ai oferit licenta de arme lui %s pentru suma de $%s.",GetName(id), FormatNumber(money));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Instructorul %s ti-a oferit licenta arme in schimbul sumei de $%s. (/accept license %d)",GetName(playerid), FormatNumber(money), playerid);
		SCM(id, COLOR_LIGHTBLUE, string);
		License[id] = 3;
		LicenseOffer[id] = playerid;
	}
	return true;
}

function ShowLicenses(playerid, targetid) {
	new text1[180],text2[180],text3[180],text4[180];
	if(PlayerInfo[targetid][pCarLic] == 1) { format(text1, 256, "Obtinuta (%s ore)", FormatNumber(PlayerInfo[targetid][pCarLicT])); } else { text1 = "Expirata"; }
	if(PlayerInfo[targetid][pFlyLic] == 1) { format(text2, 256, "Obtinuta (%s ore)", FormatNumber(PlayerInfo[targetid][pFlyLicT])); } else { text2 = "Expirata"; }
	if(PlayerInfo[targetid][pBoatLic] == 1) { format(text3, 256, "Obtinuta (%s ore)", FormatNumber(PlayerInfo[targetid][pBoatLicT])); } else { text3 = "Expirata"; }
	if(PlayerInfo[targetid][pGunLic] == 1) { format(text4, 256, "Obtinuta (%s ore)", FormatNumber(PlayerInfo[targetid][pGunLicT])); } else { text4 = "Expirata"; }
	
	if(PlayerInfo[targetid][pCarLicS] != 0) format(text1, 256, "Suspendata (%s ore)", FormatNumber(PlayerInfo[targetid][pCarLicS]));
	if(PlayerInfo[targetid][pFlyLicS] != 0) format(text2, 256, "Suspendata (%s ore)", FormatNumber(PlayerInfo[targetid][pFlyLicS]));
	if(PlayerInfo[targetid][pBoatLicS] != 0) format(text3, 256, "Suspendata (%s ore)", FormatNumber(PlayerInfo[targetid][pBoatLicS]));
	if(PlayerInfo[targetid][pGunLicS] != 0) format(text4, 256, "Suspendata (%s ore)", FormatNumber(PlayerInfo[targetid][pGunLicS]));	
	
	new szDialog[1024], szDialog2[1024];
	format(szDialog, 1024, "Licenta de condus: %s\n", text1);
	strcat(szDialog2, szDialog);
	format(szDialog, 1024, "Licenta de zbor: %s\n", text2);
	strcat(szDialog2, szDialog);
	format(szDialog, 1024, "Licenta de navigatie: %s\n", text3);
	strcat(szDialog2, szDialog);
	format(szDialog, 1024, "Licenta de arme: %s\n", text4);
	strcat(szDialog2, szDialog);

	new titleh[180];
	if(playerid == targetid) format(titleh, sizeof(titleh), "Licenses");
	else format(titleh, sizeof(titleh), "%s's licenses", GetName(targetid));
	Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, titleh, szDialog2, "Ok", "");
	return true;
}
YCMD:setint(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,intid,string[180];
	if(sscanf(params, "ud", id,intid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setint <playerid/name> <Interior ID>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	SetPlayerInterior(id,intid);
	PlayerInfo[id][pInt] = intid;
	format(string, sizeof(string), "I-ai setat lui {7BAABA}%s(%d){FFFFFF} interior %d.", GetName(id), id, intid);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Admin {7BAABA}%s{FFFFFF} ti-a setat interior %d.", GetName(playerid), intid);
	SCM(id, COLOR_WHITE, string);
	return true;
}
YCMD:setvw(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,vwid,string[180];
	if(sscanf(params, "ud", id,vwid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setvw <playerid/name> <Virtual World>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	SetPlayerVirtualWorld(id,vwid);
	format(string, sizeof(string), "I-ai setat lui {7BAABA}%s(%d){FFFFFF} virtual world %d.", GetName(id), id, vwid);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Admin {7BAABA}%s{FFFFFF} ti-a setat virtual world %d.", GetName(playerid), vwid);
	SCM(id, COLOR_WHITE, string);
	return true;
}
YCMD:wthelp(playerid, params[], help) {
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "Nu ai o frecventa.");
	SCM(playerid,COLOR_WHITE,"Walkie Talkie: /setfreq /wt /freqmembers");
	return true;
}
YCMD:showfreq(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_WHITE,AdminOnly);
	new id,string[64];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/showfreq <playerid/name>");
	if(PlayerInfo[id][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "Acel player nu are Walkie Talkie.");
   	format(string, sizeof(string), "Frecventa %d.",WTChannel[id]);
	SCM(playerid, COLOR_WHITE, string);
	return true;
}
YCMD:setfreq(playerid, params[], help) {	
	new string[180];
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "Nu ai o frecventa radio.");
	new freqss2;
	if(sscanf(params, "i",freqss2)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setfreq <Frecventa>");
	if(freqss2 < 0 || freqss2 > 100 ) return SCM(playerid, COLOR_GREY, "Frecvente disponibile: 1-100.");
	if(WTToggle[playerid] == 1) return SCM(playerid, 0xFFFFFFFF, "Statia ta este oprita. Foloseste comanda /tog pentru a o activa.");
	if(freqss2 == WTChannel[playerid]) return SCM(playerid, COLOR_GREY, "Esti deja in aceasta frecventa.");
	new query[256];
	WTChannel[playerid] = freqss2;
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `WTChannel`='%d' WHERE `ID`='%d'", WTChannel[playerid], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, query, "", "");	
	if(freqss2 == 0) {
		SCM(playerid, COLOR_YELLOW, "Ai inchis frecventa!");
		return true;
	}		
	format(string, sizeof(string), "Ai intrat pe frecventa %d.",freqss2);
	SCM(playerid, COLOR_LIGHTBLUE, string);
	return true;
}
YCMD:wt(playerid, params[], help) {
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "Nu ai o frecventa radio.");
	new msg[128],sendername[25],string[180];
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(sscanf(params, "s[128]", msg)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/wt <text>");
	if(WTToggle[playerid] == 1) return SCM(playerid, 0xFFFFFFFF, "Statia ta este oprita. Foloseste comanda /tog pentru a o activa.");
	if(WTChannel[playerid] == 0) return SCM(playerid,COLOR_GREY, "Nu esti pe o frecventa!");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	foreach(new i: Player) {
		if(WTChannel[i] == WTChannel[playerid] && WTToggle[i] == 0) {
			format(string, sizeof(string), "[FREQ %d] %s: %s",WTChannel[playerid],sendername, msg);
			SCM(i, 0xC8E0DFFF, string);
		}
	}
	return true;
}
YCMD:freqmembers(playerid, params[], help) {
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "Nu ai o frecventa radio.");
	if(WTChannel[playerid] == 0) return SCM(playerid,COLOR_GREY, "Nu esti pe o frecventa!");
	new string[180], x;
	format(string, sizeof(string), "-- Playeri pe frecventa %d --", WTChannel[playerid]);
	SCM(playerid, -1, string);
	foreach(new i: Player) {
		if(WTChannel[i] == WTChannel[playerid]) {	
			format(string, sizeof(string), "%s (%d)", GetName(i), i);
			SCM(playerid, -1, string);
			x++;
		}
	}
	if(x == 0) return SCM(playerid, -1, "Nu au fost gasiti jucatori pe aceasta frecventa!");
	else {
		format(string, sizeof(string), "* Au fost gasiti %d jucatori pe aceasta frecventa!", x);
		SCM(playerid, COLOR_LGREEN, string);
	}	
	return true;
}
YCMD:arrest(playerid, params[], help)  {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Ban khong thuoc politiei.");
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	new id,string[186];
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/arrest <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerToPoint(15, playerid, 1762.1947,-1578.4435,1742.5059) || PlayerToPoint(10, playerid, 1526.5613,-1677.7168,5.8906) || PlayerToPoint(10.0, playerid, 2281.6555,2429.8877,3.2734)) {	
		if(GetDistanceBetweenPlayers(playerid,id) > 10) return SCM(playerid,-1, "Acel player nu este langa tine.");
		if(PlayerInfo[id][pWantedLevel] < 1) return SCM(playerid, COLOR_GREY, "Acel player nu are wanted.");
		UpdateFactionRaport(playerid, 1);	
		ClearCrime(id);
		GivePlayerCash(id, 0, PlayerInfo[id][pWantedLevel]*2000);
		GivePlayerCash(playerid, 1, PlayerInfo[id][pWantedLevel]*2000);
		ResetWeapons(id);
		JailPrice[id] = 1000;
		PlayerInfo[id][pJailTime] = PlayerInfo[id][pWantedLevel] * 250;
		SetPlayerWantedLevel(id, 0);					
		format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $%d.", GetName(playerid), PlayerInfo[id][pJailTime],  PlayerInfo[id][pWantedLevel]*350);
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pJailed] = 1;
		PlayerInfo[id][pArrested] += 1;					
		ClearCrime(id);
		arrestcop[id] = playerid;
		Update(id,pJailedx);
		Update(id,pJailTimex);
		Update(playerid,pCashx);
		Update(id,pCashx);
		
		PutPlayerInJail(id);
		if(PlayerCuffed2[id] == 1) {
			PlayerCuffed2[id] = 0;
			SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(id,1);
			TogglePlayerControllable(id, 1);
		}
		format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $%d with a sentence of %d seconds.", GetName(playerid), GetName(id), PlayerInfo[id][pWantedLevel]*350, PlayerInfo[id][pJailTime]);
		SCMTA(COLOR_LIGHTRED, string);
		PlayerInfo[id][pWantedLevel] = 0;
		Update(id,pWantedLevelx);
		
		for(new m; m < 2; m++) {
			if(PlayerInfo[playerid][pDailyMission][m] == 15 || PlayerInfo[playerid][pDailyMission][m] == 16) CheckMission(playerid, m);
		}			
	}
	else SCM(playerid, COLOR_GREY, "Nu esti in zona inchisorii.");
	return true;
}
YCMD:trival(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti autorizat sa folosesti aceasta comanda");
	if(TrivalEvent != 0) return SCM(playerid, COLOR_LGREEN, "Error: Este deja un trival event activ.");
	new text[30], premium;
	if(sscanf(params, "is[30]", premium, text)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/trival <parize> <text>");
	if(strlen(text) < 5 || strlen(text) >= 30) return SCM(playerid, COLOR_LGREEN, "Error: Texctu trebuie sa fie intre 5 si 30 de caractere.");
	if(premium < 1 || premium > 2000000000) return SCM(playerid, COLOR_LGREEN, "Error: Poti pune intre $1 si $2.000.000.000.");
	format(TrivalText, 30, text);
	TrivalPremium = premium;
	TrivalEvent = 1;
	SendClientMessageToAll(COLOR_WHITE, "------------------ {339DDD}Trival {33DD8B}Event{FFFFFF} ------------------");
	gString[0] = EOS;
	format(gString, sizeof(gString), "Admin-ul %s a inceput un event de tip trival.", GetName(playerid));
	SendClientMessageToAll(COLOR_WHITE, gString);
	format(gString, sizeof(gString), "Cine scrie primu '{339DDD}%s{FFFFFF}' castiga {38F549}$%s{FFFFFF}.", TrivalText, FormatNumber(TrivalPremium));
	SendClientMessageToAll(COLOR_WHITE, gString);
	SendClientMessageToAll(COLOR_WHITE, "--------------------------------------------------");
	return true;
}
YCMD:spawncar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new model;
	if(sscanf(params, "i", model)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/spawncar <Model>");
	if(model < 400 || model > 611) return SCM(playerid,COLOR_WHITE, "Invalid car ID.");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X,Y,Z);
	new carid = CreateVehicleEx(model, X,Y,Z, 0.0, random(250), random(250), -1, 0);
	Gas[carid] = 100;
	SetVehicleNumberPlate(carid, "AdmCar");
	Carspawn[carid] = carid;	LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid, carid, 0);
	return true;
}

YCMD:car(playerid, params[], help) {
	if(PlayerInfo[playerid][pYouTuber] != 1) return 1;
	if(SpawnedCarYT[playerid] == 1) return SCM(playerid, COLOR_GREY, "Ai spawnat deja o masina!");
	SpawnedCarYT[playerid] = 1;
	new Float:X,Float:Y,Float:Z,string[100];
	GetPlayerPos(playerid, X,Y,Z);
	YouTuberCar[playerid] = CreateVehicleEx(411, X,Y,Z, 0.0, 205, 205, -1, 0);
	format(string, sizeof(string), "({E52C2F}YouTuber Info{FFFFFF}) %s si-a spawnat masina de youtuber.",GetName(playerid));
	SendAdminMessage(COLOR_WHITE, string, 1);
	nameobject[YouTuberCar[playerid]] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	SetDynamicObjectMaterialText(nameobject[YouTuberCar[playerid]], 0, "{E52C2F}You{FFFFFF}Tuber", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
	AttachDynamicObjectToVehicle(nameobject[YouTuberCar[playerid]], YouTuberCar[playerid], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
	LinkVehicleToInterior(YouTuberCar[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(YouTuberCar[playerid], GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid, YouTuberCar[playerid], 0);
	return true;
}
YCMD:despawncar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id;
	if(sscanf(params, "d", id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/despawncar <Car ID>");
	if(Carspawn[id] == 0) return SCM(playerid, COLOR_GREY, "Nu este o masina spawnata.");
	DestroyVehicle(id);
	Carspawn[id] = 0;
	return true;
}

YCMD:despawncars(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	for(new i = 1; i < MAX_VEHICLES; i++) {
		if(Carspawn[i] != 0) {
			DestroyVehicle(Carspawn[i]);
			Carspawn[i] = 0;
		}
	}	
	new string[100];
	format(string, sizeof(string), "(/despawncars) {FFFFFF}%s destroyed all spawned cars.", GetName(playerid));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_LIGHTGOLD, string, 2);
	return true;
}
YCMD:checkspawncar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new string[64];
	for(new i = 1; i < MAX_VEHICLES; i++) {
		if(Carspawn[i] != 0)  {
			format(string, sizeof(string), "Car ID: %d",Carspawn[i]);
			SCM(playerid,COLOR_WHITE,string);
		}
	}
	return true;
}
YCMD:rob(playerid, params[], help) {
	if(InBussines[playerid] == -1) return SCM(playerid, -1, "Nu esti intr-un bizz.");
	if(IsACop(playerid)) return true;
	if(!NearSafe(playerid)) return SCM(playerid, -1, "Nu esti in raza unui seif.");
	if(InRob[playerid] != 0) return true;
	if(PlayerInfo[playerid][pRob] < 10) return SCM(playerid, -1, "Nu poti da rob deoarece nu ai 10 puncte.");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return SCM(playerid, -1, "Nu poti da rob deoarece ai wanted.");
	if(targetfind[playerid] != -1) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LGREEN, "Error: Pentru a putea folosi aceasta comanda, ai nevoie de minim level 5.");
	PlayerInfo[playerid][pRob] -= 10;
	Update(playerid, pRobx);
	new id = InBussines[playerid], string[180];
	format(string, sizeof(string), "Jefuiesti afacerea cu ID-ul %d. Din aceasta afacere poti lua %d saci cu bani.", id, GetBags(id));
	SCM(playerid, COLOR_YELLOW, string);
	SCM(playerid, COLOR_YELLOW, "Pentru a lua sacii cu bani, foloseste comanda /steal.");
	InRob[playerid] = 1;

	BizRobbed[playerid] = id;
	Bags[playerid] = 0;
	LastRVehicle[playerid] = 0;
	SafeRTime[playerid] = 0;
	SetPlayerWantedLevel(playerid, 6);
	PlayerInfo[playerid][pWantedLevel] = 6;
	SetPlayerCriminal(playerid,255, "armed robbery");
	WantedTime[playerid] = 0;
	Update(playerid,pWantedLevelx);
	ShowWanted[playerid] = 1;
	finishAchievement(playerid, 13);
	return true;
}
	
YCMD:steal(playerid, params[], help) {
	if(InRob[playerid] == 0) return SCM(playerid, -1, "Nu jefuiesti un bizz.");
	if(InBussines[playerid] == -1) return SCM(playerid, -1, "Nu esti in bizz.");
	if(BizRobbed[playerid] != InBussines[playerid]) return SCM(playerid, -1, "Nu esti in bizz-ul in care ai folosit comanda /rob.");
	if(HaveBag[playerid] == 1) return SCM(playerid, -1, "Jefuiesti deja.");
	if(Bags[playerid] >= GetBags(BizRobbed[playerid])) return SCM(playerid, -1, "Ai luat toti sacii!");
	if(!NearSafe(playerid)) return SCM(playerid, -1, "Nu esti in raza unui seif.");
	HaveBag[playerid] = 1;
	SafeRTime[playerid] = 5;
	TogglePlayerControllable(playerid,0);
	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	Freezed[playerid] = 1;
	return true;
}

stock FailRob(playerid, reason[]) {
	if(CP[playerid] != 0) DisablePlayerCheckpointEx(playerid), CP[playerid] = 0;
	InRob[playerid] = 0;
	HaveBag[playerid] = 0;
	BizRobbed[playerid] = 0;
	Bags[playerid] = 0;
	SafeRTime[playerid] = 0;
	RemovePlayerAttachedObject(playerid,0);
	RemovePlayerAttachedObject(playerid,1);	
	BagTime[playerid] = 0;
	new string[180];
	format(string, sizeof(string), "Rob esuat! Motiv: %s.", reason);
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
						   
function GetBags(id) {
	new x;
	switch(id) {
		case 1: x = 4;
		case 2..8: x = 1;
		case 9..15: x = 3;
		case 16..22: x = 2;
	}
	return x;
}

function NearSafe(playerid) {
	for(new i=0;i<sizeof(SafePos);i++) {
		if(PlayerToPoint(5, playerid, SafePos[i][0], SafePos[i][1], SafePos[i][2])) return true;
	}
	return false;
}
YCMD:tod(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new hour,string[60];
	if(sscanf(params, "i", hour)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/tod <timp>");
	SetWorldTime(hour);
	format(string, sizeof(string), "AdmCmd: %s a setat ora la %d.", GetName(playerid),hour);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string, 3);
	return true;
}
YCMD:weather(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new weather,string[60];
	if(sscanf(params, "i",weather)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/weather <id>");
	if(weather < 0||weather > 45) return SCM(playerid, -1, "Vreme invalida (1-45).");
	SetWeather(weather);
	format(string, sizeof(string), "AdmCmd: %s a setat vremea %d.", GetName(playerid),weather);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string, 4);
	return true;
}
YCMD:sett(playerid, params[], help) {
	if(PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai cont VIP!");
	new hour, string[30];
	if(sscanf(params, "i", hour)) return SCM(playerid, COLOR_GREY, "Usage: {FFFFFF}/sett <time>");
	if(hour < 0 || hour > 23) return SCM(playerid, COLOR_GREY, "Invalid (0 - 23).");
	SetPlayerTime(playerid, hour, 0);
	format(string, sizeof(string), "New time %d.", hour);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}
YCMD:setw(playerid, params[], help) {
	if(PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai cont VIP!");
	new weather, string[30];
	if(sscanf(params, "i", weather)) return SCM(playerid, COLOR_GREY, "Usage: {FFFFFF}/setw <weather>");
	if(weather < 0 || weather > 45) return SCM(playerid, COLOR_GREY, "Invalid (1 - 45).");
	SetPlayerWeather(playerid, weather);
	format(string, sizeof(string), "New weather %d.", weather);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}
YCMD:slap(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, COLOR_WHITE,"Nu ai acces la aceasta comanda.");
	new id;
	if(sscanf(params, "u",id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/slap <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	new Float:shealth;
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda pe acel player!");
	new Float:slx, Float:sly, Float:slz;
	GetPlayerHealthEx(id, shealth);
	SetPlayerHealthEx(id, shealth-5);
	GetPlayerPos(id, slx, sly, slz);
	SetPlayerPosEx(false, id, slx, sly, slz+5);
	PlayerPlaySound(id, 1190, slx, sly, slz+5);
	return true;
}
FormatNumberr(...)
{
	new Number[128], int_str = 0, firstchar[4];
	format(firstchar, sizeof firstchar, "%s", getarg(0, 0));
	if(strfind(firstchar, "#", true) == 0)
	{
		int_str = 1;
		new nr = 0;
		for(new i = 0; i < 128; i++)
		{
			Number[nr] = getarg(0, i); 
			nr++;
		}
	}	
	if(int_str == 1)
	{
		strdel(Number, 0, 1); 
		for(new i = strlen(Number) - 3; i > 0; i -= 3)
		{
			strins(Number, ".", i, strlen(Number));
		}
	}
	if(int_str == 0)
	{
		format(Number, sizeof Number, "%s", FormatIntNumber(getarg(0)));
	}
	return Number;
}
stock CheckerBigInt(const BigInt[]) {
	new rchar[20];
	format(rchar, 20, "%s", BigInt);
	if(strfind(rchar, "-", true) != -1) {
		strmid(rchar, BigInt, 1, 20);
		if(!IsNumeric(rchar)) return true;
	}
	else if(!IsNumeric(BigInt)) return true;
	return false;
}
YCMD:money(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new money[25],id,string[180];
	if(sscanf(params, "us[25]",id,money)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/money <playerid/name> <Suma>");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(CheckerBigInt(money) != 0) return SCM(playerid, COLOR_GREY, "Money invalid.");
	ResetPlayerCash(id);
	Translate32Bit(StoreMoney[id], MoneyMoney[id], money);
	format(string, sizeof(string), "(/money) {FFFFFF}%s i-a setat bani lui %s, $%s.", GetName(playerid),GetName(id), FormatBigInt(StoreMoney[id], MoneyMoney[id]));
	SendAdminMessage(COLOR_RED, string, 5);
	format(string, sizeof(string), "Admin {7BAABA}%s{FFFFFF} ti-a setat banii la $%s.", GetName(playerid), FormatBigInt(StoreMoney[id], MoneyMoney[id]));
	SCM(id, COLOR_WHITE, string);
	Update(id, pCashx);
	return true;
}

function GiveVehicle(playerid, modelid, vip, rainbow, legendary, stage, temporar) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO cars (Model) VALUES (%d)", modelid);
	mysql_tquery(SQL, gQuery, "InsertVehicle", "iiiiiii", playerid, modelid, vip, rainbow, legendary, stage, temporar);
	return true;
}
function InsertVehicle(playerid, modelid, vip, rainbow, legendary, stage, temporar) {
	new idd = Iter_Free(PersonalVehicles);
	Iter_Add(MyVehicle[playerid], idd);
	Iter_Add(PersonalVehicles, idd);
	CarInfo[idd][Userid] = PlayerInfo[playerid][pSQLID];
	CarInfo[idd][cID] = cache_insert_id();
	CarInfo[idd][cModel] = modelid;
	CarInfo[idd][cValue] = 1;
	CarInfo[idd][cOnline] = playerid;

	if(CarInfo[idd][cModel] == 487 || CarInfo[idd][cModel] == 447) {
		new randspawn = random(sizeof(DealerCarPos1));
		CarInfo[idd][cLocationx] = DealerCarPos1[randspawn][0];	CarInfo[idd][cLocationy] = DealerCarPos1[randspawn][1];	CarInfo[idd][cLocationz] = DealerCarPos1[randspawn][2];
		CarInfo[idd][cAngle] = DealerCarPos1[randspawn][3];
	}
	else if(CarInfo[idd][cModel] == 519) {
		new randspawn = random(sizeof(DealerCarPos2));
		CarInfo[idd][cLocationx] = DealerCarPos2[randspawn][0];	CarInfo[idd][cLocationy] = DealerCarPos2[randspawn][1];	CarInfo[idd][cLocationz] = DealerCarPos2[randspawn][2];
		CarInfo[idd][cAngle] = DealerCarPos2[randspawn][3];
	}
	else {
		new randspawn = random(sizeof(DealerCarPos));
		CarInfo[idd][cLocationx] = DealerCarPos[randspawn][0];	CarInfo[idd][cLocationy] = DealerCarPos[randspawn][1];	CarInfo[idd][cLocationz] = DealerCarPos[randspawn][2];
		CarInfo[idd][cAngle] = DealerCarPos[randspawn][3];
	}
	CarInfo[idd][cColorOne] = 1;	CarInfo[idd][cColorTwo] = 1;
	strmid(CarInfo[idd][cOwner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	strmid(CarInfo[idd][cLicense], "NewCar", 0, 6, 255);
	CarInfo[idd][cAlarm] = 0;	CarInfo[idd][cLock] = 0;	CarInfo[idd][cRainBow] = false; CarInfo[idd][cLegendary] = 0;	CarInfo[idd][cStage] = 0;
	for(new i = 0; i < 14; i++) CarInfo[idd][cMod][i] = 0;
	CarInfo[idd][cVip] = 0;		CarInfo[idd][cFuel] = 100;
	CarInfo[idd][paintjob] = 3;	CarInfo[idd][KM] = 0;
	CarInfo[idd][cPoints] = 5;  CarInfo[idd][cTax] = 3000;  CarInfo[idd][cTime] = gettime()+600; 
	
	CarInfo[idd][cPoints] = 5; CarInfo[idd][cTax] = 50;
	saveCar(idd);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE cars SET `MaxSpeed`='%d' WHERE ID=%d", Model_TopSpeed(CarInfo[idd][cModel]-400), CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");	

	CarInfo[idd][cMaxSpeed] = Model_TopSpeed(CarInfo[idd][cModel]-400);

	if(legendary == 1) {
		CarInfo[idd][cLegendary] = 1;
		gQuery[0] = EOS;
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE cars SET `Legendary`='%d',`MaxSpeed`='300'  WHERE ID=%d", CarInfo[idd][cLegendary], CarInfo[idd][cID]);
		mysql_tquery(SQL, gQuery, "", "");
	}
	if(stage > 0) {
		gQuery[0] = EOS;
		CarInfo[idd][cStage] = stage;
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE cars SET `Stage`='%d' WHERE ID=%d", stage, CarInfo[idd][cID]);
		mysql_tquery(SQL, gQuery, "", "");
	}
	if(rainbow == 1) {
		gQuery[0] = EOS;
		CarInfo[idd][cRainBow] = true;
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE cars SET `RainBow`='%d' WHERE ID=%d", CarInfo[idd][cRainBow], CarInfo[idd][cID]);
		mysql_tquery(SQL, gQuery, "", "");
	}
	if(vip == 1) {
		gQuery[0] = EOS;
		format(CarInfo[idd][cText], 32, GetName(playerid));
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE cars SET `Text`='%s' WHERE ID=%d", GetName(playerid), CarInfo[idd][cID]);
		mysql_tquery(SQL, gQuery, "", "");
	}
	if(MyVehicleSpawn[playerid] != 5) SpawnPlayerCar(idd);
	return true;
}
YCMD:mute(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new time,id,string[180],reason[250],str[180];
	if(sscanf(params, "uis[250]",id,time,reason)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/mute <playerid/name> <Time(minutes)> <reason>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Acel player are adminul mai mare ca tine!");
	PlayerInfo[id][pMuted] = 1;
	PlayerInfo[id][pMuteTime] = time*60;
	format(string, sizeof(string), "* Ban nhan duoc mute de la %s pentru %d minute, motiv: %s.", GetName(playerid),time,reason);
	SCM(id, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmCmd: %s a primit mute de la %s pentru %d minute, motiv: %s.", GetName(id), GetName(playerid),time, reason);
	SCMTA(COLOR_LIGHTRED, string);
	mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `ID`='%d'",PlayerInfo[id][pMuteTime], PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL,str, "","");
	UpdateVar2(playerid, "Mutes", 1);
	InsereazaSanctiune(id, playerid, MUTE, reason);

	PlayerInfo[playerid][pHelpedPlayers] ++;
	PlayerInfo[playerid][pHelpedPlayersToday] ++;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `HelpedPlayers` = '%d', `HelpedPlayersToday`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pHelpedPlayersToday], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");							
	return true;
}
YCMD:unmute(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,string[180];
	if(sscanf(params, "u",id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/unmute <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	PlayerInfo[id][pMuted] = 0;
	PlayerInfo[id][pMuteTime] = 0;
	format(string, sizeof(string), "* Ban nhan duoc unmute de la Adminul %s.", GetName(playerid));
	SCM(id, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmCmd: %s i-a dat unmute lui %s.", GetName(playerid),GetName(id));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,3);
	new string2[184];
	mysql_format(SQL, string2, sizeof(string2), "UPDATE users SET `Muted`='0',`MuteTime`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL,string2, "", "");
	return true;
}
YCMD:mutedplayers(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new count = 0,string[250];
	SCM(playerid, COLOR_WHITE, "--------- Player cu mute ---------");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pMuted] == 1) {
			format(string, sizeof(string), "%s(%d) - Timp: %d.",GetName(i),i,PlayerInfo[i][pMuteTime]);
			SCM(playerid,COLOR_WHITE,string);
			count++;
		}
	}
	if(count == 0) SCM(playerid,COLOR_LIGHTRED,"* Nu este nimeni care are mute.");
	else if(count == 1) SCM(playerid,COLOR_LIGHTRED,"* Este doar un player cu mute.");
	else if(count >= 2) {
		format(string, sizeof(string), "* Acum, sunt %d playeri cu mute.", count);
		SCM(playerid, COLOR_LIGHTRED, string);
	}
	return true;
}
YCMD:jaillist(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new count = 0,string[250];
	SCM(playerid, COLOR_WHITE, "--------- Player cu jail ---------");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pJailed] >= 1) {
			format(string, sizeof(string), "%s(%d) - Timp: [%d]",GetName(i),i,PlayerInfo[i][pJailTime]);
			SCM(playerid,COLOR_WHITE,string);
			count++;
		}
	}
	if(count == 0) SCM(playerid,COLOR_LIGHTRED,"* Nu este nimeni in inchisoare.");
	else if(count == 1) SCM(playerid,COLOR_LIGHTRED,"* Este un player in inchisoare.");
	else if(count >= 2) {
		format(string, sizeof(string), "* Acum, sunt %d playeri in inchisoare.", count);
		SCM(playerid, COLOR_LIGHTRED, string);
	}
	return true;
}
YCMD:myvw(playerid, params[], help) {
 	new str[50];
 	format(str, sizeof(str), "vw = %d", GetPlayerVirtualWorld(playerid));
 	SCM(playerid, COLOR_RED, str);
	return true;
}
function TotalUsers() return ServerAccounts = cache_num_rows();

function StartingMission(playerid) {
	TogglePlayerControllable(playerid, 1);
	TogglePlayerSpectating(playerid, 0);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid, playerid + 10);
	CP[playerid] = 306;
	SetPlayerCheckpointEx(playerid, 2473.3894,-1694.1910,13.2295, 5.0);
	return true;
}
YCMD:exam(playerid, params[], help) {
	if(CP[playerid] != 0 || targetfind[playerid] != -1) 
		return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
	
	if(!PlayerToPoint(2, playerid, 2183.7578,2295.5403,10.8203)) 
		return SCM(playerid, COLOR_LGREEN, "Error: Nu esti in locul potrivit.");

	if(PlayerInfo[playerid][pCarLic] > 0) 
		
		return SCM(playerid, COLOR_LGREEN, "Error: Ai deja licenta de condus.");
	if(PlayerInfo[playerid][pCarLicS] > 0) 
		return SCM(playerid, COLOR_LGREEN, "Error: Permisul ti-a fost confiscat recent, nu-l poti lua inca!");
	
	if(InExamen[playerid] == 1) 
		return SCM(playerid, -1, "Esti deja in examen!");

	if(PlayerMoney(playerid, 1000)) 
		return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de $1.000 pentru a da examenul!");

	InExamen[playerid] = 1;
	SetPlayerInterior(playerid, 0);
	ExamCar[playerid] = CreateVehicleEx(589, 2179.5417, 2285.7588, 10.3088, 89.2036, 23, 23, -1, 0);
	Gas[ExamCar[playerid]] = 100;
	SetVehicleNumberPlate(ExamCar[playerid], "{FF0000}DMV");
	SetVehicleVirtualWorld(ExamCar[playerid], GetPlayerVirtualWorld(playerid));
	CP[playerid] = 100;
	SetPlayerRaceCheckpointEx(playerid,0, DMVCP[CP[playerid]-100][0], DMVCP[CP[playerid]-100][1], DMVCP[CP[playerid]-100][2], DMVCP[CP[playerid]-99][0], DMVCP[CP[playerid]-99][1], DMVCP[CP[playerid]-99][2],8.0);
	new engine,lights,alarm,bonnet,boot,objective, x = CreateDynamicObject(19309,0,0,0,0,0,0);
	SetDynamicObjectMaterialText(x, 0, "DMV", 50, "Arial", 27, 1, COLOR_WHITE, 0xFF000000, 1);
	AttachDynamicObjectToVehicle(x, ExamCar[playerid], -0.004999, -0.829999, 1.164999, 0.000000, 0.000000, 0.000000);
	SetPVarInt(playerid, "ObjExam", x);
	SetVehicleParamsEx(ExamCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
	PutPlayerInVehicleEx(playerid, ExamCar[playerid], 0);
	return true;
}
function ShowExam(playerid, type) {
	if(StepExam[playerid] == 0) {
		for(new i = 0; i < 13; i++) PlayerTextDrawShow(playerid, ExamTD[i]);
		SelectTextDraw(playerid, 0x52EF4AFF);
		TogglePlayerControllable(playerid, false);
		InterpolateCameraPos(playerid, 2637.850830, -985.842224, 111.864707, 2637.850830, -985.842224, 111.864707, 1000);
		InterpolateCameraLookAt(playerid, 2635.984130, -985.135314, 107.280380, 2633.261962, -984.218200, 110.722541, 1000);
		SetPlayerInterior(playerid, 0);
	}
	ExamTime[playerid] = 30;
	PlayerTextDrawSetString(playerid, ExamTD[4], "~b~00:30");
	switch(type) {
		case 0: {
			switch(StepExam[playerid]) {
				case 0: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Pe cine ai voie sa faci DM? (1/5)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Pe nimeni.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. Pe politisti.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Pe oricine.");
				}
				case 1: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Ce se intampla daca faci c-bug? (2/5)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Nimic.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. Primesc ban.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Primesc bani.");
				}
				case 2: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Cu ce ma ajuta aceasta licenta de arme? (3/5)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Acces la arme.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. Nu ma ajuta.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Primesc kick.");
				}
				case 3: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Pot vinde aceasta licenta? (4/5)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. da, pot.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. O pot da prin trade.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Nu pot.");
				}
				case 4: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Pot sa folosesc arme fara licenta? (5/5)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Nu pot.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. Da.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Primesti kick.");
				}
				case 5: {
					ExamHP[playerid] = 10;
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, true);
					for(new i = 0; i < 13; i++) PlayerTextDrawHide(playerid, ExamTD[i]);
					SetPlayerPosEx(false, playerid, 291.5567,-135.8325,1004.0625);
					CancelSelectTextDraw(playerid);
					SetPlayerInterior(playerid, 7);
					GivePlayerWeapon(playerid, 23, 10);
					SCM(playerid, COLOR_LIGHTBLUE, "License: {FFFFFF}Distruge aceasta cutiie.");
					ExamTime[playerid] = 0;
				}
			}
		}
		case 1: {
			switch(StepExam[playerid]) {
				case 0: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Ce poti face cu licenta de barca? (1/4)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Sa inot.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. Sa pescuesc.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Sa pot conduce o barca.");
				}
				case 1: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Pe unde ai voie sa mergi? (2/4)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Prin LV.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. Prin apa.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Prin aier.");
				}
				case 2: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Cum pornesti barca? (3/4)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Pe tasta 2.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. /engine.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. Porneste automat.");
				}
				case 3: {
					PlayerTextDrawSetString(playerid, ExamTD[6], "Ai voie sa scoti barca din apa? (4/4)");
					PlayerTextDrawSetString(playerid, ExamTD[10], "1. Nu.");
					PlayerTextDrawSetString(playerid, ExamTD[11], "2. poate.");
					PlayerTextDrawSetString(playerid, ExamTD[12], "3. da pot.");
				}
				case 4: {
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, true);
					for(new i = 0; i < 13; i++) PlayerTextDrawHide(playerid, ExamTD[i]);
					SetPlayerInterior(playerid, false);
					SetPlayerVirtualWorld(playerid, false);
					ExamCar[playerid] = CreateVehicleEx(446, 2232.7983,411.4962,-0.5455,316.5272, 1, 1, -1, 0);
					Gas[ExamCar[playerid]] = 100;
					ExamTime[playerid] = 0;
					CancelSelectTextDraw(playerid);
					CP[playerid] = 120;
					SetPlayerRaceCheckpointEx(playerid, 0, DMVBOAT[CP[playerid]-120][0], DMVBOAT[CP[playerid]-120][1], DMVBOAT[CP[playerid]-120][2], DMVBOAT[CP[playerid]-120][0], DMVBOAT[CP[playerid]-120][1], DMVBOAT[CP[playerid]-120][2], 10.0);
					new engine,lights,alarm,bonnet,boot,objective;
					SetVehicleParamsEx(ExamCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
					PutPlayerInVehicleEx(playerid, ExamCar[playerid], 0);
				}
			}			
		}
	}
	return 1;
} 
stock FailExamen(playerid) {
	DestroyVehicle(ExamCar[playerid]);
	ExamCar[playerid] = 0;
	InExamen[playerid] = 0;
	DisableRemoteVehicleCollisions(playerid, 0);
	DisablePlayerRaceCheckpointEx(playerid);
	DestroyDynamicObject(GetPVarInt(playerid, "ObjExam"));
	CP[playerid] = 0;
	return true;
}
YCMD:smoke(playerid, params[], help) {
	if(IsSmoking[playerid] != 0) return SCM(playerid, -1, "Fumezi deja.");
	if(PlayerInfo[playerid][pCigarettes] == 0) return SCM(playerid, COLOR_GREY, "Nu ai o tigara.");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_GREY, "Nu poti folosi comanda in vehicule.");
	PlayerInfo[playerid][pLighter] -= 1;
	PlayerInfo[playerid][pCigarettes] -= 1;
	IsSmoking[playerid] = 60;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	return true;
}

YCMD:buy(playerid, params[], help) {
	if(IsPlayerInRangeOfPoint(playerid,100.0,6.1884,-28.4153,1003.5494) || IsPlayerInRangeOfPoint(playerid,100.0,-30.6147,-89.6600,1003.5469) || IsPlayerInRangeOfPoint(playerid,100.0,-26.0890,-185.8300,1003.5469) || IsPlayerInRangeOfPoint(playerid,100.0,-27.3123,-29.2776,1003.5573) || IsPlayerInRangeOfPoint(playerid,100.0,-25.1326,-139.0670,1003.5469)) {
		if(GetPlayerInterior(playerid) == 0) return SCM(playerid, COLOR_GREY, "Nu esti intr-un magazin 24/7.");
		new szDialog2[500];
		if(PlayerInfo[playerid][pTutorial] < 10) {
			strcat(szDialog2, "Item\tPrice\n");
			if(RegisrationStep[playerid][0]) strcat(szDialog2, "{FF0000}Phone\t1,000\n");
			else strcat(szDialog2, "{FFFFFF}Phone\t$1,000\n");
			if(RegisrationStep[playerid][1]) strcat(szDialog2, "{FF0000}PhoneBook\t$750\n");
			else strcat(szDialog2, "{FFFFFF}PhoneBook\t$750\n");
			if(RegisrationStep[playerid][2]) strcat(szDialog2, "{FF0000}Credite\t$500\n");
			else strcat(szDialog2, "{FFFFFF}Credite\t$500\n");
		}
		else {
			strcat(szDialog2, "Item\tPrice\n");
			strcat(szDialog2, "{FFFFFF}Phone\t$1,000\n");
			strcat(szDialog2, "{FFFFFF}PhoneBook\t$750\n");
			strcat(szDialog2, "{FFFFFF}Credite\t$500\n");		
		}	
		strcat(szDialog2, "{FFFFFF}Walkie Talkie\t$1,500\n");
		strcat(szDialog2, "{FFFFFF}Lighter\t$500\n");	
		strcat(szDialog2, "{FFFFFF}Ciggaretess\t$100\n");	
		strcat(szDialog2, "{FFFFFF}GasCan\t$2,000\n");
		strcat(szDialog2, "{FFFFFF}Camera\t$3,000\n");
		Dialog_Show(playerid, DIALOG_STORE,DIALOG_STYLE_TABLIST_HEADERS,"24/7 Store",szDialog2,"Ok","Close");
	}
	else SCM(playerid, COLOR_GREY, "Nu esti intr-un magazin 24/7");
	return true;
}

YCMD:oldcar(playerid, params[], help) {
	new string[64];
	format(string, sizeof(string), "Ultima masina: %d",gLastCar[playerid]);
	SCM(playerid, COLOR_WHITE, string);
	return true;
}
YCMD:checkweapons(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/checkweapons <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	new Player_Ammos[13], Player_Weapons[13], i;
	for(i = 1;i <= 12;i++) {
		GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
		if(Player_Weapons[i] != 0) {
			new weaponName[180];
			GetWeaponName(Player_Weapons[i],weaponName,255);
			format(string,255,"* %s - vu khi: %s, Gloante: %d",GetName(i),weaponName,Player_Ammos[i]);
			SCM(playerid,0xFFFFFFAA,string);
		}
	}
	return true;
}
YCMD:eject(playerid, params[], help) {
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Trebuie sa fii intr-un vehicul pentru a folosi aceasta comanda.");
	new id,string[128],giveplayer[25];
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SCM(playerid,-1, "You can only eject people as the driver.");
	if(sscanf(params, "u",id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/eject <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	new test = GetPlayerVehicleID(playerid);
	if(PlayerTied[id] > 0) return SCM(playerid, -1, "Acel player e legat.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti da eject singur.");
	if(IsPlayerInVehicle(id,test) || GetPlayerSurfingVehicleID(id) == test) {
		if(GetPlayerSurfingVehicleID(id) == test) SlapPlayer(id);
		new PName[MAX_PLAYER_NAME];
		GetPlayerName(playerid,PName,sizeof(PName));
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		format(string, sizeof(string), "* %s has thrown %s out of their vehicle.",GetName(playerid),GetName(id));				   
		ProxDetector(15.0, playerid, string, COLOR_PURPLE);
		format(string, sizeof(string), "* L-ai dat pe %s afara din vehicul!", giveplayer);
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Ai fost dat afara din vehicul de %s !", PName);
		SCM(id, COLOR_LIGHTBLUE, string);
		
		RemovePlayerFromVehicleEx(id);
	}
	return true;
}
YCMD:tie(playerid, params[], help) {
	if(!IsAMember(playerid)) return  SCM(playerid, COLOR_GREY, "Nu faci parte dintr-o mafie.");
	if(PlayerInfo[playerid][pRank] < 2) return SCM(playerid, -1, "Ai nevoie rank 2+ pentru a face asta.");
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/tie <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerTied[id] > 0) return SCM(playerid, -1, "Acel player este deja legat.");
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, COLOR_GREY, "Nu este vreun player langa tine.");
	new car = GetPlayerVehicleID(playerid);
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu te poti lega pe tine.");
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(id, car)) {
		format(string, sizeof(string), "* Ai fost legat de %s.", GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* L-ai legat pe %s.", GetName(id));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s l-a legat pe %s.", GetName(playerid) ,GetName(id));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		TogglePlayerControllable(id, 0);
		PlayerTied[id] = 1;
	}
	else SCM(playerid, COLOR_GREY, "Nu este in vehiculul tau sau Ban khong o tren xe.");
	return true;
}
YCMD:untie(playerid, params[], help) {
	if(!IsAMember(playerid) && !IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti mafiot.");
	if(PlayerInfo[playerid][pRank] < 2 && IsAMember(playerid)) return SCM(playerid, -1, "Ai nevoie de rank 2.");
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/untie <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, COLOR_GREY, "Nu este vreun player langa tine.");
	if(id == playerid) return SCM(playerid, -1, "You cannot untie yourself!");
	if(PlayerTied[id] == 0) return SCM(playerid, COLOR_GREY, "Nu este legat.");
	format(string, sizeof(string), "* Ai fost dezlegat de %s.", GetName(playerid));
	SCM(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* L-ai dezlegat pe %s.", GetName(id));
	SCM(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* %s l-a dezlegat pe %s.", GetName(playerid) ,GetName(id));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	TogglePlayerControllable(id, 1);
	PlayerTied[id] = 0;
	return true;
}
YCMD:acclear(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, AdminOnly);
	foreach(new i: Player) {
		if(PlayerInfo[i][pAdmin] != 0) {
			for( new j = 0; j <= 100; j++) SCM(i, COLOR_WHITE, "");
		}
	}
	new string[100];
	format(string, sizeof(string), "Warning: %s a sters chatul adminilor.",GetName(playerid));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_RED, string,1);
	return true;
}
YCMD:cc(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	foreach(new i: Player) {
		if(PlayerInfo[i][pAdmin] < 1) {
			for( new j = 0; j <= 100; j++) SCM(i, COLOR_WHITE, "");
		}
	}
	new string[100];
	format(string, sizeof(string), "Warning: %s a sters chatul.",GetName(playerid));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_RED, string,1);
	return true;
}
YCMD:cmc(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	foreach(new i: Player) {
		for( new j = 0; j <= 100; j++) SCM(i, COLOR_WHITE, "");
	}
	new string[100];
	format(string, sizeof(string), "Warning: %s a sters chatul.",GetName(playerid));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_RED, string,1);
	return true;
}
YCMD:guns(playerid, params[], help) {
	if(PlayerInfo[playerid][pGunLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ban khong co giay phep su dung sung. Cauta un instructor pentru a obtine licenta.");
	if(InTraining[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu esti in sala de antrenament!");
	Dialog_Show(playerid, DIALOG_BUYGUN2, DIALOG_STYLE_LIST, "Training guns", "Deagle\nM4\nAK47\nMicro SMG\nShotgun\nBaseball Bat", "Buy", "Exit");
	return true;
}
YCMD:whisper(playerid, params[], help) {
	new id, message[128], string[180];
	if(HidePM[playerid] == 1) return SCM(playerid, COLOR_LGREEN, "Ai dezactivat aceasta comanda!");
	if(sscanf(params, "us[128]", id, message)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/whisper <playerid/name> <text>");
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}	
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu ai minim level 3!");
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_GREY, "Nu esti langa acel player!");
	if(playerid == id) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda pe tine!");
	if(HidePM[id] == 1) return SCM(playerid, COLOR_LGREEN, "Acel player a dezactivat aceasta comanda!");
	format(string, sizeof(string), "(Whisper LOG) %s(%d) catre %s(%d): %s", GetName(playerid), playerid, GetName(id), id, message);
	if(PlayerInfo[playerid][pAdmin] < 6) EarsMessage(0xFFC400FF, string);
	format(string, sizeof(string), "(Whisper) from %s (%d): %s", GetName(playerid), playerid, message);
	SCM(id, COLOR_YELLOW, string);
	format(string, sizeof(string), "(Whisper) sent to %s (%d): %s", GetName(id), id, message);
	SCM(playerid, COLOR_YELLOW, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(id, 1139, 0.0, 0.0, 0.0);
	return true;
}
YCMD:setmanager(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces la aceasta comanda.");
	new id, type;
	if(sscanf(params, "ii", id, type)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setmanager <playerid> <type>");
		SCM(playerid, COLOR_WHITE, "(1) Manageri Mafi | (2) Manager departamente | (3) Manager pasnice");
		return true;
	}
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Acel player nu este connectat.");
	PlayerInfo[id][pManager] = type;
	new query[128], string[80];
	mysql_format(SQL, query, sizeof(query), "UPDATE users SET `Manager`='%d' WHERE `id`='%d'", PlayerInfo[id][pManager], PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, query, "", "");
	format(string, sizeof(string), "(/setmanager) {FFFFFF}%s has set to %s Manager %d.", GetName(playerid), GetName(id), PlayerInfo[id][pManager]);
	SendAdminMessage(COLOR_DARKNICERED, string, 6);
	return true;
}
stock ManagerLevel(level) {
	new string[30];
	switch(level) {
		case 1: string = "Manager Mafi";
		case 2: string = "Manager departamnete";
		case 3: string = "Manager pasnice";
	}
	return string;
}
YCMD:setleader(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pManager] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,level,string[180];
	if(sscanf(params, "ui",id,level)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setleader <playerid/name> <faction>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(level > 15 || level < 0) return SCM(playerid, COLOR_WHITE, "Invalid ID. (1-15).");
	
	if(PlayerInfo[id][pMember] > 0 && PlayerInfo[id][pLeader] > 0) return SCM(playerid,COLOR_WHITE, "Acel player este intr-o factiune.");
	format(string, sizeof(string), "%s este noul lider al factiunii.", GetName(id));
	SendFactionMessage(level, COLOR_CLIENT, string);
	if(PlayerInfo[playerid][pManager] > 0) {
		switch(PlayerInfo[playerid][pManager]) {
			case 1: if(level != 4 || level != 5 || level != 6 || level != 10) return SCM(playerid, COLOR_LGREEN, "Poti seta doar leaderi pentru mafie");
			case 2: if(level != 1 || level != 2 || level != 3 || level != 14) return SCM(playerid, COLOR_LGREEN, "Poti seta doar leaderi pentru departamnete");
			case 3: if(level != 7 || level != 8 || level != 9 || level != 11 || level != 11 || level != 12 || level != 13 || level != 15) return SCM(playerid, COLOR_LGREEN, "Poti seta doar leaderi pentru pasnice");
		}
	}
	new ftext[50];
	format(ftext, sizeof(ftext), FactionName(level));
	PlayerInfo[id][pMember] = level;
	
	if(PlayerInfo[playerid][pMember] == 11) finishAchievement(id, 29);	
	else if(IsACop(playerid)) finishAchievement(id, 30);	
	else if(IsAMember(playerid)) finishAchievement(id, 31);	
	else finishAchievement(id, 28);	
	
	
	PlayerInfo[id][pLeader] = level;
	FactionMembers[PlayerInfo[id][pMember]] ++;
	switch(level) {
		case 0: PlayerInfo[id][pChar] = 0;
		case 1: PlayerInfo[id][pChar] = 265; //Police Departament
		case 2: PlayerInfo[id][pChar] = 295; //FBI
		case 3: PlayerInfo[id][pChar] = 179; //National Guard
		case 4: PlayerInfo[id][pChar] = 270; //Triad
		case 5: PlayerInfo[id][pChar] = 292; //Los Vagos
		case 6: PlayerInfo[id][pChar] = 273; //Ballas
		case 7: PlayerInfo[id][pChar] = 258; //School Instructors
		case 8: PlayerInfo[id][pChar] = 59; //Tow Car Company
		case 9: PlayerInfo[id][pChar] = 228; //News Reporters
		case 10: PlayerInfo[id][pChar] = 296; //Los Aztecas
		case 11: PlayerInfo[id][pChar] = 294; //Hitman
		case 12: PlayerInfo[id][pChar] = 272; //School Instructors
		case 13: PlayerInfo[id][pChar] = 70; //Paramedic
		case 14: PlayerInfo[id][pChar] = 265; //
		case 15: PlayerInfo[id][pChar] = 70; //
	}
	if(IsACop(id)) SetPlayerSkinEx(id, 305);
	else SetPlayerSkinEx(id, PlayerInfo[id][pChar]);					
	PlayerInfo[id][pRank] = 7;
	SetPlayerToTeamColor(id);

	new query[256];
	format(string, sizeof(string), "%s este liderul factiunii %s.", GetName(id), ftext);
	
	if(PlayerInfo[id][pAdmin] < 6) {
		mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", string, PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,query,"","");			
	}
	
	mysql_format(SQL, query,sizeof(query),"UPDATE users SET `Leader`='%d',`Member`='%d',`Rank`='7',`Team`='%d',`CChar`='%d' WHERE `ID`='%d'",PlayerInfo[id][pLeader],PlayerInfo[id][pMember],PlayerInfo[id][pTeam],PlayerInfo[id][pChar],PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL,query, "", "");	
	format(string, sizeof(string), "L-ai promovat pe %s ca lider la factiunea %s.", GetName(id),ftext);
	SCM(playerid, COLOR_LIGHTBLUE, string);
	
	format(string, sizeof(string), "Admin %s te-a promovat ca lider al factiunii %s.", GetName(playerid),ftext);
	SCM(id, COLOR_LIGHTBLUE, string);
	return true;
}
		
YCMD:tow(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) TTCFunction(playerid);
	return true;
}

stock TTCFunction(playerid) {
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {	
		new m = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(m == 525) {
			if(GetPlayerState(playerid)==2) {
				new idd, vid;
				vid = GetClosestVehicle2(playerid);
				idd = FindSpawnID(vid);	
				
				if(vid == 0) return true;
				if(IsABike2(vid) || IsAPlane(vid) || GetVehicleModel(vid) == 448 || GetVehicleModel(vid) == 461 || GetVehicleModel(vid) == 462 || GetVehicleModel(vid) == 463 || GetVehicleModel(vid) == 468 || GetVehicleModel(vid) == 471 || GetVehicleModel(vid) == 521 || GetVehicleModel(vid) == 522 || GetVehicleModel(vid) == 523)
					return SCM(playerid,-1, "Nu poti tracta acest vehicul!");
					
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					DisablePlayerCheckpointEx(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				}
				else {
					if(CP[playerid] != 0 || targetfind[playerid] != -1) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Anuleaza");
					new Float: hp;
					GetVehicleHealth(vid, hp);
					if(hp >= 900) return SCM(playerid, COLOR_LGREEN, "Error: Vehiculul pe care vrei sa-l tractezi are peste 900.0 HP!");
					SetPVarFloat(playerid, "VehHP", hp);
					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					new rand;
					rand = random(sizeof(TowCarCk));
					SetPlayerCheckpointEx(playerid, TowCarCk[rand][0],TowCarCk[rand][1],TowCarCk[rand][2], 6);
					CP[playerid] = 34;
					if(idd != 0) {
						new string[180];
						format(string, 256, "Ai tractat vehiculul lui %s.", CarInfo[idd][cOwner]);
						SCM(playerid, -1, string);	
					}
				}
			}
		}
	}
	return true;
}


YCMD:spawnchange(playerid, params[], help) {
	new string[128];
	format(string, sizeof(string), "Spawn Type\tType\nHouse Spawn\t%s\nDefault Spawn\t{38DD33}Valid{FFFFFF}\nClan HQ Spawn\t%s", 
		PlayerInfo[playerid][pHouse] == 999 ? ("{E72C23}Invalid{FFFFFF}") : ("{38DD33}Valid{FFFFFF}"), 
	ClanInfo[PlayerInfo[playerid][pClan]][clHQ] == 0 ? ("{E72C23}Invalid") : ("{38DD33}Valid"));

	Dialog_Show(playerid, DIALOG_SPAWNCHANGE, DIALOG_STYLE_TABLIST_HEADERS, "{FCD482}Spawn {FFFFFF}Change", string, "Select", "Cancel");
	return true;
}


YCMD:unfreeze(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, COLOR_WHITE,"Nu ai acces la aceasta comanda.");
	new id;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/unfreeze <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	TogglePlayerControllable(id, 1);
	Freezed[id] = 0;
	new string[100];
	format(string, sizeof(string), "You have been unfrozen by %s.", GetName(playerid));
	SCM(id, -1, string);
	format(string, sizeof(string), "You have unfrozen %s.", GetName(id));
	SCM(playerid, -1, string);	
	return true;
}

function SlapPlayer(playerid) {
	TogglePlayerControllable(playerid, 0);
	new Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerPosEx(false, playerid, Pos[0], Pos[1], Pos[2]+2);
   	SetPlayerFreeze(playerid, 2);
	PlayerPlaySound(playerid, 1190, 0, 0, 10.0);
	return true;
}
YCMD:punish(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 3) return SCM(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	new id, time, string[180];
	if(sscanf(params, "ui",id, time)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/punish <playerid/name> <time>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(IsACop(id)) return true;
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(time < 1 || time > 300) return SCM(playerid, COLOR_GREY, "Invalid time! (1-300 seconds)");		
	if(PlayerInfo[id][pJailed] == 0) return SCM(playerid, COLOR_GREY, "Acel player nu este in jail!");
	TogglePlayerControllable(id, 0);
	Freezed[id] = 1;		
	FreezeTime[id] = time;
	PlayerInfo[id][pJailTime] += time;
	SpawnPlayer(id);
	format(string, sizeof(string), "Ban nhan duoc punish de la %s pentru %d secunde.", GetName(playerid), time);
	SCM(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "I-ai dat punish lui %s pentru %d secunde.", GetName(id), time);
	SCM(playerid, COLOR_LIGHTBLUE, string);					
	return true;
}
YCMD:freeze(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, COLOR_WHITE,"Nu ai acces la aceasta comanda.");
	new id;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/freeze <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	TogglePlayerControllable(id, 0);
	Freezed[id] = 1;
	new string[100];
	format(string, sizeof(string), "You have been frozen by %s.", GetName(playerid));
	SCM(id, -1, string);
	format(string, sizeof(string), "You have frozen %s.", GetName(id));
	SCM(playerid, -1, string);		
	return true;
}
YCMD:entercar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new testcar,loc;
	if(sscanf(params, "ii",testcar,loc)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/entercar <vehicleid>> <Seat ID>");
	if(loc < 0 || loc > 4) return SCM(playerid, -1, "Invalid Seat ID(0-4).");
	PutPlayerInVehicleEx(playerid, testcar, loc);
	return true;
}
YCMD:getcar(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new plo;
	if(sscanf(params, "i",plo)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/getcar <vehicleid>");
	new Float:plocx,Float:plocy,Float:plocz;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetVehiclePosEx(playerid, plo,plocx,plocy+4, plocz);
	SetVehicleVirtualWorld(plo, GetPlayerVirtualWorld(playerid));
	new string[100];
	format(string, sizeof(string), "Ai teleportat vehiculul %d la tine.", plo);
	SCM(playerid, COLOR_GRAD1, string);
	return true;
}

function GetGasStationID(playerid) {
	new x = 0, bool: good = false;
	for(new i = 1; i <= GpsBizzType[12]; i++) {
		x = BizzTypeID[12][i];
		if(PlayerToPoint(20, playerid, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ])) {
			good = true;
			break;
		}
	}
	return good ? x : -1;
}
YCMD:fill(playerid, params[], help) {
	new idcar = GetPlayerVehicleID(playerid);
	if(Refueling[playerid] == 1) return true;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
	if(GetPVarInt(playerid, "Engine") == 1) return SCM(playerid,COLOR_GREY,"* Dong co dang ban, hay tat no.");
	if(Gas[idcar] == 100) return SCM(playerid, COLOR_LGREEN, "Error: Day xang.");
	new gasid = GetGasStationID(playerid);
	if(gasid != -1) {
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~the tank is loaded~n~~w~~h~Wait...",RefuelWait,3);
		defer Fillup(playerid);
		Refueling[playerid] = 1;
	} else {
		new veh = GetPlayerVehicleID(playerid);
		if(PlayerInfo[playerid][pGasCan] == 0) return SCM(playerid, -1, "Nu ai o canistra.");
		if(PlayerInfo[playerid][pFuel] == 0) return SCM(playerid, COLOR_GREY, "Nu ai benzina in canistra!");
		if(Gas[veh] > 80) return true;
		SCM(playerid, COLOR_MONEY, "* Ai incarcat canistra cu 20%%");
		Gas[veh] += 20;
		PlayerInfo[playerid][pFuel] = 0;
		UpdateVar(playerid, "Fuel", 0);
		TogglePlayerControllable(playerid, true);				
	}
	return true;
}
YCMD:fillgascan(playerid, params[], help) {
	new gasid = GetGasStationID(playerid);
	if(gasid == -1) return SCM(playerid,COLOR_GREY,"* Nu esti la o benzinarie.");
	if(PlayerInfo[playerid][pFuel] != 0) return true;		
	if(PlayerInfo[playerid][pGasCan] == 0) return SCM(playerid, -1, "Nu ai o canistra.");
	new price = 20 * 50, string[64];
	format(string, sizeof(string), "* Ai incarcat canistra cu 20%%. Pret: $%s.",FormatNumber(price));
	SCM(playerid, COLOR_MONEY, string);
	PlayerInfo[playerid][pFuel] = 20;
	BizzInfo[gasid][bBalance] += price;
	GivePlayerCash(playerid, 0, price);
	new str[178];
	UpdateVar(playerid, "Fuel", 20);
	mysql_format(SQL, str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[gasid][bBalance], BizzInfo[gasid][bID]);
	mysql_tquery(SQL,str, "", "");
	return true;
}

function FactionVehicle(playerid) {
	if(!IsPlayerInAnyVehicle(playerid)) return false;
	new dbid = GetVehicleID(GetPlayerVehicleID(playerid));
	if(ServerVehicles[dbid][vFaction] == PlayerInfo[playerid][pMember]) return true;
	return false;
}
YCMD:fare(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 15 && PlayerInfo[playerid][pMember] != 12) 
		return true;

	new string[180], price, x;
	if(!FactionVehicle(playerid)) 
		return SCM(playerid, COLOR_GREY, "Khong o trong xe ce apartine factiunii tale!");

	if(TaxiDuty[playerid] == 1) {
		Fare[playerid] = 0;
		TaxiDuty[playerid] = 0;
		foreach(new i: Player) {
			if(IsPlayerConnected(i) && TaxiDriver[i] == playerid) UpdateTaxiTextdraw(i);
		}
		format(string, sizeof(string), "Acum nu mai esti la datorie si Ban nhan duoc $%s, banii facuti de tine.", FormatNumber(TaxiMoney[playerid]));
		SCM(playerid, COLOR_WHITE, string);
		GivePlayerCash(playerid, 1, TaxiMoney[playerid]);
		TaxiMoney[playerid] = 0;
		PlayerTextDrawHide(playerid, FareTD);
		return true;
	}
	x = PlayerInfo[playerid][pMember] == 12 ? 10000 : 30000;

	if(sscanf(params, "i", price)) price = x;

	if(price < 1 || price > x) 
		return SCM(playerid, -1, PlayerInfo[playerid][pMember] == 12 ? "Suma invalida! ($1-$10,000)" : "Suma invalida! ($1-$10,000)");
	
	Fare[playerid] = price;
	TaxiDuty[playerid] = 1;
	TaxiMoney[playerid] = 0;
	UpdateTaxiTextdraw(playerid);
	foreach(new i: Player) {
		if(PlayerInfo[playerid][pMember] == 12) format(string, sizeof(string), "Taxi Driver %s is now on duty for $%s, use [/service taxi].", GetName(playerid), FormatNumbers(price));
		else if(PlayerInfo[playerid][pMember] == 15) format(string, sizeof(string), "Uber Drive %s now on duty for $%s, user [/service uber].", GetName(playerid), FormatNumber(price));
		SCM(i, 0x00C700FF, string);
		if(GetPlayerState(i) == PLAYER_STATE_PASSENGER) {
			if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
				if(PlayerMoney(playerid, Fare[playerid])) {
					if(PlayerInfo[playerid][pMember] == 12) format(string, sizeof(string), "Ban khong co so tien $%d de vao taxi nay.", Fare[playerid]);
					else if(PlayerInfo[playerid][pMember] == 15) format(string, sizeof(string), "Nu ai $%d pentru a intra in acest uber.", Fare[playerid]);
					SCM(playerid, COLOR_GREY, string);
			 		RemovePlayerFromVehicle(playerid);
				}
				else {
					TaxiDriver[i] = playerid;
					TaxiMoney[i] = 0;
					TaxiTimer[i] = SetTimerEx("UpdateFare", 10000, true, "i", i);
					UpdateTaxiTextdraw(i);
				}
			}
		}
	}	
	return true;
}

function UpdateFare(playerid) {
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	if(TaxiDriver[playerid] == -1) return true;
	if(TaxiDuty[TaxiDriver[playerid]] == 0) return true;
	if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pMember] == 15) return true;
	new string[180];
	if(PlayerMoney(playerid, Fare[TaxiDriver[playerid]])) {
		if(TaxiMoney[playerid] != 0) {
			if(TaxiMoney[playerid] >= 20) UpdateFactionRaport(TaxiDriver[playerid], 0);	
			AcceptedService[TaxiDriver[playerid]] = -1;	
			foreach(new i: Player) {
				if(IsNearPlayer(playerid, i)) {
					if(PlayerInfo[playerid][pMember] == 12) format(string, sizeof(string), "* %s da tra cho tai xe %s so tien $%s chi phi taxi.", GetName(playerid), GetName(TaxiDriver[playerid]), FormatNumber(TaxiMoney[playerid]));
					else if(PlayerInfo[playerid][pMember] == 15) format(string, sizeof(string), "* %s a platit uberului %s suma de $%s pentru cursa efectuata.", GetName(playerid), GetName(TaxiDriver[playerid]), FormatNumber(TaxiMoney[playerid]));
					SCM(i, COLOR_PURPLE, string);
				}
			}
			TaxiMoney[playerid] = 0;
		}
		TaxiDriver[playerid] = -1;
		PlayerTextDrawHide(playerid, FareTD);
		KillTimer(TaxiTimer[playerid]);
		//RemovePlayerFromVehicle(playerid);
		return true;
	}
	TaxiMoney[TaxiDriver[playerid]] += Fare[TaxiDriver[playerid]];
	TaxiMoney[playerid] += Fare[TaxiDriver[playerid]];
	GivePlayerCash(playerid, 0, Fare[TaxiDriver[playerid]]);
	UpdateTaxiTextdraw(playerid);
	UpdateTaxiTextdraw(TaxiDriver[playerid]);
	return true;
}

function UpdateTaxiTextdraw(playerid) {
	new string[180];
	if(TaxiDuty[playerid] == 1) {
		if(Fare[playerid] == 0) format(string, sizeof(string), "Tarif: ~r~Oprit~n~~w~~h~Castig total: ~g~$%s", FormatNumber(TaxiMoney[playerid]));
		else format(string, sizeof(string), "Tarif: ~g~$%s~n~~w~~h~Castig total: ~g~$%s", FormatNumber(Fare[playerid]), FormatNumber(TaxiMoney[playerid]));
		PlayerTextDrawSetString(playerid, FareTD, string);
		PlayerTextDrawShow(playerid, FareTD);
	}
	else {
		if(Fare[TaxiDriver[playerid]] == 0) format(string, sizeof(string), "Tarif: ~r~Oprit~n~~w~~h~Costul cursei: ~g~$%s", FormatNumber(TaxiMoney[playerid]));
		else format(string, sizeof(string), "Tarif: ~g~$%s~n~~w~~h~Costul cursei: ~g~$%s", FormatNumber(Fare[TaxiDriver[playerid]]), FormatNumber(TaxiMoney[playerid]));
		PlayerTextDrawSetString(playerid, FareTD, string);
		PlayerTextDrawShow(playerid, FareTD);
	}
	return true;
}
YCMD:disarmrange(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new range,string[128], Float:x, Float:y, Float:z;
	if(sscanf(params, "i", range)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/disarmrange <Range>");
	foreach(new i: Player)  {
		if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,range*1000,x,y,z)) ResetWeapons(i);
	}
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a dat disarm pe o raza de %dm.", GetName(playerid),range);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,3);
	return true;
}
YCMD:lights(playerid, params[], help) {
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		new engine,lights,alarm,doors,bonnet,boot,objective;
		if(GetPVarInt(playerid, "Lights") == 0)
		{
			 GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 1);
		}
		else if(GetPVarInt(playerid, "Lights") == 1)
		{
			 GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 0);
		}
	}
	return true;
}
YCMD:engine(playerid, params[], help) {
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
	new idcar = GetPlayerVehicleID(playerid),string[128];
	new engine,lights,alarm,doors,bonnet,boot,objective;		
	if(Gas[idcar] == 0) return SCM(playerid,-1, "Acest vehicul nu are benzina.");
	if(IsABike(idcar)) return SCM(playerid,COLOR_WHITE,"Nu poti folosi aceasta comanda intr-o bicicleta.");
	if(FindSpawnID(idcar) != 0) {
		if(CarInfo[FindSpawnID(idcar)][cPoints] == 0) return SCM(playerid, COLOR_GREY, "Chiec xe nay chua thanh toan tien bao hiem");
	}
	new vehicle = GetVehicleModel(idcar) - 400;
	if(Refueling[playerid] != 0) return SCM(playerid,COLOR_WHITE,"Iti faci plinul, asteapta.");
	if(vehEngine[idcar] == 0) {
		vehEngine[idcar] = 1;
		GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		SetPVarInt(playerid, "Engine", 1);
		if(GetPVarInt(playerid, "Undercover") == 1) format(string, sizeof(string), "* Unknown starts the engine of his %s.",aVehicleNames[vehicle]);
		else format(string, sizeof(string), "* %s starts the engine of his %s.",GetName(playerid),aVehicleNames[vehicle]);				   
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	}
	else if(vehEngine[idcar] == 1) {
		vehEngine[idcar] = 0;
		GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		SetPVarInt(playerid, "Engine", 0);
		if(GetPVarInt(playerid, "Undercover") == 1) format(string, sizeof(string), "* Unknown stops the engine of his %s.",aVehicleNames[vehicle]);
		else format(string, sizeof(string), "* %s stops the engine of his %s.",GetName(playerid),aVehicleNames[vehicle]);				   
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	}
	return true;
}
YCMD:disarm(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE,AdminOnly);
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/disarm <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	ResetWeapons(id);
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a luat armele lui %s.",GetName(playerid), GetName(id));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,1);
	return true;
}
YCMD:suspend(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	new id,item[20],string[180], hours, query[256], reason[64];
	if(sscanf(params, "us[10]is[64]",id,item,hours,reason)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/suspend <playerid/name> <license> <hours> <reason>");
		SCM(playerid, COLOR_WHITE, "Driving, Sailing, Fly, Gun.");
		return true;
	}
	if(id == playerid && PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, -1, "Ban khong the su dung lenh nay len chinh minh!");
	if(hours < 0 || hours > 100) return SCM(playerid, COLOR_GREY, "Invalid hours! (0-100)");
	if(PlayerInfo[id][pAdmin] != 0 && PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un admin!");
	if(strcmp(item,"driving",true) == 0) {
		PlayerInfo[id][pCarLicS] = hours;
		PlayerInfo[id][pCarLic] = 0;
		PlayerInfo[id][pCarLicT] = 0;
		format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a confiscat lui %s licenta de condus pentru %d ore, motiv: %s", GetName(playerid), GetName(id), hours, reason);
		SCMTA(COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Admin %s ti-a confiscat licenta de condus pentru %d ore.", GetName(playerid), hours);
		SCM(id, COLOR_WARNING, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `CarLic`='0', `CarLicT`='0', `CarLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL, query, "", "");		
	}
	else if(strcmp(item,"sailing",true) == 0) {
		PlayerInfo[id][pBoatLicS] = hours;
		PlayerInfo[id][pBoatLic] = 0;
		PlayerInfo[id][pBoatLicT] = 0;
		format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a confiscat lui %s licenta de navigat pentru %d ore, motiv: %s", GetName(playerid), GetName(id), hours, reason);
		SCMTA(COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Admin %s ti-a confiscat licenta de navigat pentru %d ore.", GetName(playerid), hours);
		SCM(id, COLOR_WARNING, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `BoatLic`='0', `BoatLicT`='0', `BoatLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL, query, "", "");		
	}	
	else if(strcmp(item,"fly",true) == 0) {
		PlayerInfo[id][pFlyLicS] = hours;
		PlayerInfo[id][pFlyLic] = 0;
		PlayerInfo[id][pFlyLicT] = 0;
		format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a confiscat lui %s licenta de zbor pentru %d ore, motiv: %s", GetName(playerid), GetName(id), hours, reason);
		SCMTA(COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Admin %s ti-a confiscat licenta de zbor pentru %d ore.", GetName(playerid), hours);
		SCM(id, COLOR_WARNING, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `FlyLic`='0', `FlyLicT`='0', `FlyLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL, query, "", "");		
	}	
	else if(strcmp(item,"gun",true) == 0) {
		PlayerInfo[id][pGunLicS] = hours;
		PlayerInfo[id][pGunLic] = 0;
		PlayerInfo[id][pGunLicT] = 0;
		ResetPlayerWeapons(id);
		format(string, sizeof(string), "Admin %s i-a confiscat lui %s licenta de arme pentru %d ore.", GetName(playerid), GetName(id), hours);
		SendAdminMessage(COLOR_LIGHTRED, string, 1); 		
		format(string, sizeof(string), "Admin %s ti-a confiscat licenta de arme pentru %d ore.", GetName(playerid), hours);
		SCM(id, COLOR_WARNING, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `GunLic`='0', `GunLicT`='0', `GunLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL, query, "", "");				
	}		
	else return SCM(playerid, COLOR_WHITE, "Driving, Sailing, Fly, Gun.");
	return true;
}
YCMD:suspendo(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	new id[32],item[20],string[180], hours, query[256], reason[64];
	if(sscanf(params, "s[32]s[10]is[64]",id,item,hours,reason)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/suspendo <name> <license> <hours> <reason>");
		SCM(playerid, COLOR_WHITE, "Driving, Sailing, Fly, Gun.");
		return true;
	}
	new userID = GetPlayerID(id);
	if(userID != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel jucator este deja conectat!");
	new cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid,COLOR_ERROR,"error:{FFFFFF} Acest cont nu a fost gasit in baza de date!");
	if(hours < 0 || hours > 100) return SCM(playerid, COLOR_GREY, "Invalid hours! (0-100)");
	if(strcmp(item,"driving",true) == 0) {
		format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a confiscat lui %s (offline) licenta de condus pentru %d ore, motiv: %s", GetName(playerid), id, hours, reason);
		SCMTA(COLOR_LIGHTRED, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `CarLic`='0', `CarLicT`='0', `CarLicS`='%d' WHERE `name`='%s'", hours, id);
		mysql_tquery(SQL, query, "", "");		
	}
	else if(strcmp(item,"sailing",true) == 0) {
		format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a confiscat lui %s (offline) licenta de navigat pentru %d ore, motiv: %s", GetName(playerid), id, hours, reason);
		SCMTA(COLOR_LIGHTRED, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `BoatLic`='0', `BoatLicT`='0', `BoatLicS`='%d' WHERE `name`='%s'", hours, id);
		mysql_tquery(SQL, query, "", "");
	}	
	else if(strcmp(item,"fly",true) == 0) {
		format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a confiscat lui %s (offline) licenta de zbor pentru %d ore, motiv: %s", GetName(playerid), id, hours, reason);
		SCMTA(COLOR_LIGHTRED, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `FlyLic`='0', `FlyLicT`='0', `FlyLicS`='%d' WHERE `name`='%s'", hours, id);
		mysql_tquery(SQL, query, "", "");
	}	
	else if(strcmp(item,"gun",true) == 0) {
		format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a confiscat lui %s (offline) licenta de arme pentru %d ore.", GetName(playerid), id, hours);
		SendAdminMessage(COLOR_LIGHTRED, string, 1); 		
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `GunLic`='0', `GunLicT`='0', `GunLicS`='%d' WHERE `name`='%s'", hours, id);
		mysql_tquery(SQL, query, "", "");		
	}		
	else return SCM(playerid, COLOR_WHITE, "Driving, Sailing, Fly, Gun.");
	return true;
}
YCMD:agl(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,item[10],string[128], str[128];
	if(sscanf(params, "us[10]",id,item)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/agl <playerid/name> <License>");
		SCM(playerid, COLOR_WHITE, "Valabile: Driving, Fly, Sailing, Gun, All.");
		return true;
	}
	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(strcmp(item,"driving",true) == 0) {
		format(string, sizeof(string), "* I-ai dat licenta de condus lui %s.",GetName(id));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Adminul %s ti-a dat licenta de condus.",GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pCarLic] = 1;
		PlayerInfo[id][pCarLicT] = 50;
		PlayerInfo[id][pCarLicS] = 0;
		mysql_format(SQL, str,128,"UPDATE users SET `CarLic`='1',`CarLicT`='50',`CarLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "", "");
	}
	else if(strcmp(item,"fly",true) == 0) {
		format(string, sizeof(string), "* I-ai dat licenta de zbor lui %s.",GetName(id));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Adminul %s ti-a dat licenta zbor.",GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pFlyLic] = 1;
		PlayerInfo[id][pFlyLicT] = 50;
		PlayerInfo[id][pFlyLicS] = 0;
		mysql_format(SQL, str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='50',`FlyLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "", "");
	}
	else if(strcmp(item,"sailing",true) == 0) {
		format(string, sizeof(string), "* I-ai dat licenta de navigatie lui %s.",GetName(id));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Adminul %s ti-a dat licenta de navigatie",GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pBoatLic] = 1;
		PlayerInfo[id][pBoatLicT] = 50;
		PlayerInfo[id][pBoatLicS] = 0;
		mysql_format(SQL, str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='50',`BoatLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "","");
	}
	else if(strcmp(item,"gun",true) == 0) {
		format(string, sizeof(string), "* I-ai dat licenta de arme lui %s.",GetName(id));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Adminul %s ti-a dat licenta arme.",GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pGunLic] = 1;
		PlayerInfo[id][pGunLicT] = 50;
		PlayerInfo[id][pGunLicS] = 0;
		mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='50', `GunLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "","");
	}
	else if(strcmp(item,"all",true) == 0) {
		format(string, sizeof(string), "* I-ai dat toate licentele lui %s.",GetName(id));
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Adminul %s ti-a dat toate licentele.",GetName(playerid));
		SCM(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pGunLic] = 1;
		PlayerInfo[id][pGunLicT] = 50;
		PlayerInfo[id][pGunLicS] = 0;
		PlayerInfo[id][pBoatLic] = 1;
		PlayerInfo[id][pBoatLicT] = 50;
		PlayerInfo[id][pBoatLicS] = 0;
		PlayerInfo[id][pFlyLic] = 1;
		PlayerInfo[id][pFlyLicT] = 50;
		PlayerInfo[id][pFlyLicS] = 0;
		PlayerInfo[id][pCarLic] = 1;
		PlayerInfo[id][pCarLicT] = 50;
		PlayerInfo[id][pCarLicS] = 0;
		mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='50', `GunLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "","");
		mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='50',`BoatLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "","");
		mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='50',`FlyLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "","");
		mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='1',`CarLicT`='50',`CarLicS`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
		mysql_tquery(SQL,str, "","");
	}
	return true;
}
YCMD:carcolortemp(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_WHITE,AdminOnly);
	new color1,color2;
	if(sscanf(params, "ii",color1,color2)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/carcolortemp <Color 1> <Color 2>");
	if(color1 < 0 || color1 >= 255) return SCM(playerid, -1, "Invalid color id.");
	if(color2 < 0 || color2 >= 255) return SCM(playerid, -1, "Invalid color id.");
	if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) ChangeVehicleColorEx(GetPlayerVehicleID(playerid), color1, color2);
	else SCM(playerid, COLOR_GREY, "Nu esti intr-o masina.");
	return true;
}
YCMD:o(playerid, params[], help) {
	new text[250],string[250];
	if(PlayerInfo[playerid][pAdmin] > 0) {
		if(sscanf(params, "s[250]",text)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/o <text>");
		if(FaceReclama(text)) return RemoveFunction(playerid, text);
		if(FaceReclama(text)) return Reclama(playerid, text);
		format(string, sizeof(string), "(( Admin %s: %s ))", GetName(playerid), text);
		SCMTA(COLOR_CLIENT,string);
	}
	else if(PlayerInfo[playerid][pYouTuber] == 1) {
		if(DeelayCommand[playerid][11] != 0) return DeelayTime(playerid, 11);
		DeelayCommand[playerid][11] = 1800;
		if(sscanf(params, "s[250]",text)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/0 <text>");
		if(FaceReclama(text)) return RemoveFunction(playerid, text);
		if(FaceReclama(text)) return Reclama(playerid, text);
		format(string, sizeof(string), "(( YouTuber %s: %s ))", GetName(playerid), text);
		SCMTA(COLOR_CLIENT,string);
	}
	else return SCM(playerid, COLOR_RED, "Nu ai acces.");
	return true;
}
YCMD:pay(playerid, params[], help) {
	new id,moneys,sendername[25],giveplayer[25],string[180];
	if(sscanf(params, "ui",id,moneys)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/pay <playerid/name> <Suma>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, -1, "Ai nevoie de nivel 3 pentru a da mai mult de $1000.");
	if(moneys < 1 || moneys > 500000) return SCM(playerid, -1, "Poti da o suma intre 1$ si 500,000$.");
	if(id == playerid) return SCM(playerid,-1, "You can not give money to you.");
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(Spectate[id] != 255) return SCM(playerid,-1, "Acel player nu este langa tine.");
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	GetPlayerName(playerid, sendername, sizeof(sendername));
	new playermoney;
	playermoney = GetPlayerCash(playerid);
	if(moneys > 0 && playermoney >= moneys) {
		if(TradeID[playerid] != -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
		GivePlayerCash(playerid, 0, moneys);
		GivePlayerCash(id, 1, moneys);
		PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
		
		format(string, sizeof(string), "* %s scoate niste bani din buzunar si-i inmaneaza lui %s.", GetName(playerid) ,GetName(id));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		format(string, sizeof(string), "I-ai trimis lui %s suma de $%s.", giveplayer, FormatNumber(moneys));
		SCM(playerid, COLOR_WHITE, string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Ban nhan duoc $%s de la %s.", FormatNumber(moneys), GetName(playerid));
		SCM(id, COLOR_WHITE, string);
		Update(id, pCashx);
		Update(playerid, pCashx);
	}
	return true;
}
YCMD:number(playerid, params[], help) {
	new id,string[128];
	if(PlayerInfo[playerid][pPhoneBook] == 0) return SCM(playerid, -1, "Nu ai o carte de telefon");
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/number <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	
	if(PlayerInfo[id][pPhone] != 0) format(string, sizeof(string), "%s's phone number: %d",GetName(id),PlayerInfo[id][pPhone]);
	else format(string, sizeof(string), "%s's phone number: None",GetName(id),PlayerInfo[id][pPhone]);
	SCM(playerid, COLOR_WHITE, string);
	return true;
}
YCMD:changepass(playerid, params[], help) {
	Dialog_Show(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password","Scrie mai jos parola pe care o ai in acest moment.","Ok","Close");
	return true;
}
YCMD:ad(playerid, params[], help) {
	if(AdTimer[playerid] != 0) return SCM(playerid, COLOR_LGREEN, "Ai pus un anunt recent. Foloseste comanda /myad pentru a-l vedea.");
	new string[264],idx;
	if(!PlayerInfo[playerid][pPhone]) return SCM(playerid, COLOR_LGREEN, "Nu ai un telefon.");
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_GREY, "Ai nevoie de nivel 5 pentru a da un anunt!");
	new length = strlen(params);
	while ((idx < length) && (params[idx] <= ' ')) idx++;
	new offset = idx, result[264];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))) {
		result[idx - offset] = params[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	new totalads = TotalAds()+1;
	if(PlayerToPoint(10, playerid, BizzInfo[14][bEntranceX], BizzInfo[14][bEntranceY], BizzInfo[14][bEntranceZ])) {
		if(!strlen(result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/ad <Text>");
		if(FaceReclama(result)) return Reclama(playerid, result);
		new payout = BizzInfo[14][bFee];
		if(PlayerMoney(playerid, payout)) {
			format(string, sizeof(string), "* Ai folosit %d caractere si anuntul costa $%s, Nu ai banii necesari", offset, FormatNumbers(payout));
			SCM(playerid, COLOR_WHITE, string);
			return true;
		}
		GivePlayerCash(playerid, 0, payout);
		format(string, sizeof(string), "~r~Ai platit $%d~n~~w~Mesajul contine: %d caractere", payout, idx);
		GameTextForPlayer(playerid, string, 5000, 5);
		format(AdText[playerid], 256, result);

		format(string, sizeof(string), "(Preview ad) %s ({FFFFFF}%d{00D900}): %s", GetName(playerid), playerid, result);
		SendStaffMessage(0x00D900FF, string);
		AdTimer[playerid] = totalads*60;
		new timer;		
		timer = SetTimerEx("Advertisment", totalads*60000, 0, "d", playerid);
		SetPVarInt(playerid, "AdTimer", timer); 
		format(string, sizeof(string), "Anuntul tau va fi afisat in %d minute (%d secunde).", AdTimer[playerid]/60, AdTimer[playerid]);
		SCM(playerid, -1, string);
		BizzInfo[14][bBalance] += payout;
		new str[128];
		mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d',`Products`='%d' WHERE `ID`='1'",BizzInfo[14][bBalance],BizzInfo[14][bProducts]);
		mysql_tquery(SQL,str, "", "");
	}
	else SCM(playerid, -1, "Nu esti la CNN.");
	return true;
}

function Advertisment(playerid) {
	if(IsPlayerConnected(playerid) && AdTimer[playerid] != 0) {
		new string[1024];
		format(string, sizeof(string), "Ad by %s (phone: {FFFFFF}%d{00D900}): %s",GetName(playerid),PlayerInfo[playerid][pPhone],AdText[playerid]);
		SendMessage(0x00D900FF, string);
		AdTimer[playerid] = 0;
	}
	return true;
}

function TotalAds() {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && AdTimer[i] != 0) x++;
	}
	return x;
}
YCMD:as(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	new string[250],result[250];
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/as(hout) <text>");
	if(FaceReclama(result)) return Reclama(playerid, result);
	format(string, sizeof(string), "(( Admin %s striga: %s ))", GetName(playerid), result);
	ProxDetector(200.0, playerid, string,COLOR_YELLOW);
	return true;
}
YCMD:s(playerid, params[], help) {
	new string[250],result[250];
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/s(hout) <text>");
	if(FaceReclama(result)) return Reclama(playerid, result);
	format(string, sizeof(string), "%s striga: %s", GetName(playerid), result);
	ProxDetector(30.0, playerid, string,COLOR_WHITE);
	return true;
}
YCMD:unrentroom(playerid, params[], help) {
	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) return SCM(playerid, COLOR_WHITE, "Detii o casa.");
	if(PlayerInfo[playerid][pRented] == -1) return SCM(playerid, COLOR_GREY, "Nu ai chirie.");
	PlayerInfo[playerid][pHouse] = 999;
	PlayerInfo[playerid][pRented] = -1;
	SCM(playerid, COLOR_WHITE, "Nu mai ai chirie.");
	Update(playerid,pCashx);
	Update(playerid,pHousex);
	Update(playerid,pRentedx);
	return true;
}
YCMD:time(playerid, params[], help) {
	new sendername[25],string[180], hour, minute, second;
	gettime(hour, minute, second);
	format(string, sizeof(string), "The current time is %d:%d:%d", hour, minute, second);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Connected for %.0f minutes (%.0f seconds).", PlayerInfo[playerid][pSeconds]/60, PlayerInfo[playerid][pSeconds]);
 	SCM(playerid,COLOR_WHITE,string);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "* %s raises her hand and looks down at her watch.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return true;
}
YCMD:open(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /bizmenu respectiv /housemenu!");

YCMD:givegun(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid,COLOR_WHITE, AdminOnly);
	new id,gun,ammo,string[100],sendername[30],giveplayer[30];
	if(sscanf(params, "uii",id,gun,ammo)) return SCM(playerid,COLOR_GREY, "Sintaxa: {FFFFFF}/givegun <Nume/ID> <Weapon ID> <Gloante>");
	if(gun < 1||gun > 46||gun==19||gun==20||gun==21||gun==45) return SCM(playerid,COLOR_WHITE,"Invalid weapond ID.");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[id][pGunLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Acel player nu are licenta de arme.");
	ServerWeapon(id, gun, ammo);
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	GetPlayerName(playerid, sendername, sizeof(sendername));
	new gunname[32];
	GetWeaponName(gun, gunname, 32);
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a dat lui %s arma %s (%d ammo).",sendername,giveplayer,gunname, ammo);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,3);
	if(GetPlayerState(id) == PLAYER_STATE_PASSENGER) {
		new gun2,tmp;
		GetPlayerWeaponData(id,5,gun2,tmp);
		#pragma unused tmp
		if(gun2)SetPlayerArmedWeapon(id,gun2);
		else SetPlayerArmedWeapon(id,0);
	}
	return true;
}
YCMD:usedrugs(playerid, params[], help) {
	if(UsingDrugs[playerid] != 0) return SCM(playerid, COLOR_WHITE, "Te droghezi deja!");
	if(PlayerToPoint(300, playerid, -1423.5153,935.8321,1036.4756)) return SCM(playerid, -1, "Nu poti folosi droguri in arena de evente.");
	if(PaintType[playerid] != 0) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in paintball!");
	if(PlayerInfo[playerid][pDrugs] < 1) return SCM(playerid, COLOR_GREY, "Nu ai destule droguri.");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi droguri dintr-un vehicul!");
	PlayerStoned[playerid] += 2;
	new sendername[25];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	Freezed[playerid] = 1;
	new string[128];
	format(string, sizeof(string), "%s incearca sa se drogheze.", sendername);
	ProxDetector(20.0, playerid, string, COLOR_PURPLE);
	SCM(playerid, COLOR_WHITE, "Asteapta 30 de secunde pentru a isi face efectul.");
	UsingDrugs[playerid] = 1;
	drug[playerid] = SetTimerEx("DrugEffectGone", 30000, false,"d", playerid);
	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	for(new m; m < 2; m++) {
		if(PlayerInfo[playerid][pDailyMission][m] == 13) CheckMission(playerid, m);
	}			
	return true;
}

function DrugEffectGone(playerid) {
	if(IsPlayerConnected(playerid) && UsingDrugs[playerid] == 1) {		
		UsingDrugs[playerid] = 0;
		ClearAnimations(playerid);
		SetPlayerDrunkLevel (playerid, 0);
		PlayerStoned[playerid] = 0;
		KillTimer(drug[playerid]);
		Freezed[playerid] = 0;
		SetPlayerHealthEx(playerid, 99);
		PlayerInfo[playerid][pDrugs] -= 1;	
		new str2[128];
		mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d', `MStore`='%d',`Drugs`='%d' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,str2, "", "");		
	}
	return true;
}
YCMD:bizstatus(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /bizmenu!");

YCMD:gotohouse(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_WHITE,AdminOnly);
	new housenum;
	if(sscanf(params, "d",housenum)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/house <House ID>");
	if(housenum > sizeof(HouseInfo)) return SCM(playerid, COLOR_GREY, "ID Invalid!");
	SetPlayerInterior(playerid,HouseInfo[housenum][hInterior]);
	SetPlayerPosEx(false, playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
	PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInterior];
	PlayerInfo[playerid][pLocal] = housenum;
	InHouse[playerid] = housenum;
	SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hVirtual]);
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s s-a teleportat la casa %d.", GetName(playerid), housenum);
	SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:gotobiz(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_WHITE,AdminOnly);
	new housenum;
	if(sscanf(params, "d",housenum)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/biz <Biz ID>");
	if(housenum > sizeof(BizzInfo)) return SCM(playerid, COLOR_GREY, "ID Invalid!");
	if(BizzInfo[housenum][bStatic] == 0) {
		SetPlayerInterior(playerid,BizzInfo[housenum][bInterior]);
		SetPlayerPosEx(true, playerid,BizzInfo[housenum][bExitX],BizzInfo[housenum][bExitY],BizzInfo[housenum][bExitZ]);
		PlayerInfo[playerid][pInt] = BizzInfo[housenum][bInterior];
		PlayerInfo[playerid][pLocal] = housenum+99;		
		SetPlayerVirtualWorld(playerid,BizzInfo[housenum][bVirtual]);
		InBussines[playerid] = housenum;
	}
	else {
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(true, playerid,BizzInfo[housenum][bEntranceX],BizzInfo[housenum][bEntranceY],BizzInfo[housenum][bEntranceZ]);
	}
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s s-a teleportat la biz %d.", GetName(playerid), housenum);
	SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:buylevel(playerid, params[], help) {
	new nxtlevel = PlayerInfo[playerid][pLevel], costlevel, expamount,string[128];
	expamount = nxtlevel*levelexp;
	costlevel = nxtlevel*levelcost;
	if(PlayerMoney(playerid, costlevel)) return SCM(playerid,COLOR_GRAD1,"Nu ai banii necesari.");
	if(PlayerInfo[playerid][pExp] < expamount) return SCM(playerid,COLOR_GRAD1,"Nu ai destule RP-uri.");
	GivePlayerCash(playerid, 0, costlevel);
	PlayerInfo[playerid][pLevel]++;
	PlayerInfo[playerid][pExp] -= expamount;
	format(string, sizeof(string), "Chuc mung! Acum, ai nivel %d.",PlayerInfo[playerid][pLevel]);

	SCM(playerid,COLOR_LIGHTBLUE,string);
	format(string, sizeof(string), "%s are acum nivel %d.", GetName(playerid), PlayerInfo[playerid][pLevel]);
	InsertLog(playerid, string, LOG_LEVEL);				

	new total = PlayerInfo[playerid][pExp];
	if(total > 0) PlayerInfo[playerid][pExp] = total;
	else PlayerInfo[playerid][pExp] = 0;
	
	if(PlayerInfo[playerid][pReferral] != 0) {
		new type, money, rp;			
		if(PlayerInfo[playerid][pLevel] <= 3)  money = 10000*PlayerInfo[playerid][pLevel];
		else if(PlayerInfo[playerid][pLevel] > 3 && PlayerInfo[playerid][pLevel] < 10)  money = 15500*PlayerInfo[playerid][pLevel], rp = PlayerInfo[playerid][pLevel]/2-1;
		else money = 20000*PlayerInfo[playerid][pLevel], rp = PlayerInfo[playerid][pLevel]/2+2;
					
		PlayerInfo[playerid][pReferralRP] += rp;
		PlayerInfo[playerid][pReferralMoney] += money;
		UpdateVar(playerid, "ReferralRP", PlayerInfo[playerid][pReferralRP]);
		UpdateVar(playerid, "ReferralMoney", PlayerInfo[playerid][pReferralMoney]);
	
		foreach(new i: Player) {
			if(IsPlayerConnected(i) && PlayerInfo[i][pSQLID] == PlayerInfo[playerid][pReferral]) {
				type = 1;
				if(money != 0 && rp != 0) format(string, sizeof(string), "Ban nhan duoc $%s si %d RP-uri deoarece %s(%d) a avansat la nivel %d.", FormatNumber(money), rp, GetName(playerid), playerid, PlayerInfo[playerid][pLevel]);
				else format(string, sizeof(string), "Ban nhan duoc $%s deoarece %s(%d) a avansat la nivel %d.", FormatNumber(money), GetName(playerid), playerid, PlayerInfo[playerid][pLevel]);
				SCM(i, COLOR_MONEY, string);
				PlayerInfo[i][pExp] += rp;
				GivePlayerBank(i, money);	
				Update(i, pBankx);
				Update(i, pMBankx);
			}
		}
		
		if(type == 0) {
			new szResult[180], szQuery[256], name[64];
			format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `id`='%d'", PlayerInfo[playerid][pReferral]);
			new Cache: result = mysql_query(SQL, szQuery);
			cache_get_value_name(0, "name", szResult); format(name, 64, szResult);
			cache_delete(result);

			if(money != 0 && rp != 0) format(string, sizeof(string), "Ban nhan duoc $%s si %d RP-uri deoarece %s a avansat la nivel %d.", FormatNumber(money), rp, GetName(playerid), PlayerInfo[playerid][pLevel]);
			else format(string, sizeof(string), "Ban nhan duoc $%s deoarece %s a avansat la nivel %d.", FormatNumber(money), GetName(playerid), PlayerInfo[playerid][pLevel]);				
			InsertEmail(name, "AdmBot", string, 0);
		}
		new query[256];
		if(money != 0 && rp != 0) mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Bank`=`Bank`+'%d', `Respect`=`Respect`+'%d' WHERE `id`='%d'", money, rp, PlayerInfo[playerid][pReferral]);
		else mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Bank`=`Bank`+'%d' WHERE `id`='%d'", money, PlayerInfo[playerid][pReferral]);
		mysql_tquery(SQL, query, "", "");
	}
	Update(playerid,pCashx);
	Update(playerid,pRP);
	Update(playerid,pLevelx);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	UpdateProgress(playerid);
	return true;
}
YCMD:myreferral(playerid, params[], help) {
	new szDialog[1200], szDialog2[256], string[256], szQuery[256], name[64], r, on;
	
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Referral`='%d' ORDER BY `users`.`Level` DESC LIMIT 20", PlayerInfo[playerid][pSQLID]);
	new Cache: result = mysql_query(SQL, szQuery);	
	strcat(szDialog, "{FFB469}(+) Informatii{FFFFFF}\n");
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name(i, "name", string); format(name, 64, string);

		new userID = GetPlayerID( name );
		if(userID != INVALID_PLAYER_ID) format(szDialog2, sizeof(szDialog2), "{1FA612}(Conectat){FFFFFF} %s (%d)\n", name, userID), on++;
		else format(szDialog2, sizeof(szDialog2), "{D60909}(Neconectat){FFFFFF} %s\n", name);
		strcat(szDialog, szDialog2);
		format(Selected[playerid][r], MAX_PLAYER_NAME, name);	
		r++;
	}	
	cache_delete(result);
	new title[64];
	format(title, sizeof(title), "My referrals (%d/%d)", on, r);
	Dialog_Show(playerid, DIALOG_REFERRALS, DIALOG_STYLE_LIST, title, szDialog, "Ok", "Exit");
	return true;
}

function EarsMessage(color, string[]) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] >= 2 && BigEar[i] == 1) SCM(i, color, string);
	}
	return true;
}
YCMD:bigears(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_WHITE,AdminOnly);
	if(!BigEar[playerid]) {
		BigEar[playerid] = 1;
		SCM(playerid, COLOR_WHITE, "Acum vei vedea chat-ul.");
	}
	else if(BigEar[playerid]) {
		(BigEar[playerid] = 0);
		SCM(playerid, COLOR_GREY, "Nu o sa mai vezi chat-ul.");
	}
	return true;
}
YCMD:editclan(playerid, params[], help) {
	new
		szName[180],
		message[180],
		string[180],
		szQuery[256],
		clanid, code;

	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, "You are not authorized to use this command.");
	if(sscanf(params, "iis[128]", clanid, code, message)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/editclan <clanid> <code> <result>");
		SCM(playerid, COLOR_GREY, "Valabile: Name(0), Owner(1), Tag(2), Rank 1(4), Rank 2(5), Rank 3(6), [...]");
		SCM(playerid, COLOR_GREY, "Rank 4(7), Rank 5(8), Rank 6(9), Slots(11), Register Date(12), Days(13).");
		return true;
	}
	switch(code) {
		case 0: {
			format(string, sizeof(string), "Ai editat cu succes numele la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clName], 256, message);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `clans` SET `Name`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clName], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 1: {
			format(string, sizeof(string), "Ai editat cu succes detinatorul la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clOwner], 256, message);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `clans` SET `Owner`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clOwner], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 2: {
			format(string, sizeof(string), "Ai editat cu succes tagul la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clTag], 32, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `Tag`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clTag], clanid);
			mysql_tquery(SQL, szQuery, "", "");
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
					if(PlayerInfo[i][pClan] == clanid && PlayerInfo[playerid][pTag] == 0) {
						format(szName, sizeof(szName), "%s%s", ClanInfo[clanid][clTag], PlayerInfo[i][pUsername]);
						SetPlayerName(i, szName);
					}
					else if(PlayerInfo[i][pClan] == clanid && PlayerInfo[playerid][pTag] == 1) {
						format(szName, sizeof(szName), "%s%s", PlayerInfo[i][pUsername], ClanInfo[clanid][clTag]);
						SetPlayerName(i, szName);
					}
				}
			}
			new tagname[180];
			for(new i = 0; i < MAX_SAFEZONES; i++)
			{
				if(GraffitiInfo[i][gfOwned] == PlayerInfo[playerid][pClan]) {
					DestroyDynamicObject(GraffitiInfo[i][gfObject]);
					GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], 0.0, 0.0, GraffitiInfo[i][gfRot]);
					format(tagname, sizeof(tagname), "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
					SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, tagname, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				}
			}
		}
		case 4: {
			format(string, sizeof(string), "Ai editat cu succes numele la rank-ul 1 la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clRankName1], 256, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `RankName1`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clRankName1], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 5: {
			format(string, sizeof(string), "Ai editat cu succes numele la rank-ul 2 la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clRankName2], 256, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `RankName2`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clRankName2], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 6: {
			format(string, sizeof(string), "Ai editat cu succes numele la rank-ul 3 la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clRankName3], 256, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `RankName3`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clRankName3], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 7: {
			format(string, sizeof(string), "Ai editat cu succes numele la rank-ul 4 la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clRankName4], 256, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `RankName4`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clRankName4], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 8: {
			format(string, sizeof(string), "Ai editat cu succes numele la rank-ul 5 la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clRankName5], 256, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `RankName5`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clRankName5], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 9: {
			format(string, sizeof(string), "Ai editat cu succes numele la rank-ul 6 la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clRankName6], 256, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `RankName6`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clRankName6], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 10: {
			if(strval(message) < 5) return SCM(playerid, COLOR_GREY, "Clan slots invalid.");
			format(string, sizeof(string), "Ai editat cu succes sloturile la clanul cu ID-ul %d in %d.", clanid, strval(message));
			ClanInfo[clanid][clSlots] = strval(message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `Slots`='%d' WHERE `ID`='%d'", ClanInfo[clanid][clSlots], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 11: {
			format(string, sizeof(string), "Ai editat cu succes data inregistrarii la clanul cu ID-ul %d in %s.", clanid, message);
			format(ClanInfo[clanid][clRegisterDate], 256, message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `Slots`='%d' WHERE `ID`='%d'", ClanInfo[clanid][clRegisterDate], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}
		case 12: {
			if(strval(message) < 5) return SCM(playerid, COLOR_GREY, "Clan slots invalid.");
			format(string, sizeof(string), "Ai editat cu succes zilele la clanul cu ID-ul %d in %d.", clanid, strval(message));
			ClanInfo[clanid][clDays] = strval(message);
			mysql_format(SQL,szQuery, sizeof(szQuery), "UPDATE `clans` SET `Days`='%d' WHERE `ID`='%d'", ClanInfo[clanid][clDays], clanid);
			mysql_tquery(SQL, szQuery, "", "");
		}		
		default: SCM(playerid, COLOR_GREY, "Code id invalid.");
	}
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:editjob(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) 
		return SCM(playerid, 0xFFFFCCFF, AdminOnly);

	new job;
	if(sscanf(params, "i", job)) 
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/editjob <job id>");
	
	if(strlen(JobInfo[job][jName]) == 0) 
		return SCM(playerid, COLOR_LGREEN, "Invalid Job.");

	new szDialog[1024];
	format(szDialog, sizeof(szDialog),
		"Job Name\t\t%s\nLevel\t\t%d\nLegal\t\t%d\n\
		Skilll 1 Veh\t\t%d\nSkill 2 Veh\t\t%d\nSkill 3 Veh\t\t%d\nSkill 4 Veh\t\t%d\nSkill 5 Veh\t\t%d\nSkill 6 Veh\t\t%d",
	JobInfo[job][jName], JobInfo[job][jLevel], JobInfo[job][jLegal], JobInfo[job][jSkill1Veh], JobInfo[job][jSkill2Veh], JobInfo[job][jSkill3Veh], JobInfo[job][jSkill4Veh],
	JobInfo[job][jSkill5Veh], JobInfo[job][jSkill6Veh]);

	gString[0] = EOS;
	format(gString, sizeof(gString), "Edit job %d", job);
	Dialog_Show(playerid, DIALOG_EDITJOB, DIALOG_STYLE_TABLIST, gString, szDialog, "Seelct", "Cancel");
	EditJobID[playerid] = job;
	return true;
}

function JobTimeDeelay(playerid) {
	gString[0] = EOS;
	format(gString, sizeof(gString), "Please wait %d seconds!", JobDeelay[playerid][PlayerInfo[playerid][pJob]]);
	SCM(playerid, COLOR_LGREEN, gString);
	return true;
}
YCMD:startwork(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] == 11) 
		return SCM(playerid, -1, "Foloseste /fish pentru a incepe munca la acest job!");
	
	if(IsPlayerInAnyVehicle(playerid)) 
		return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the thuc hien hanh dong nay khi dang o trong mot phuong tien!");

	if(PlayerInfo[playerid][pJob] == 0) 
		return SCM(playerid, COLOR_LGREEN, "Error: Ban khong co mot cong viec.");

	if(JobWorking[playerid] == 1) 
		return SCM(playerid, COLOR_GREY, "Muncesti deja.");

	if(targetfind[playerid] != -1) 
		return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
	
	if(GetPlayerVirtualWorld(playerid) != 0) 
		return true;

	if(JobDeelay[playerid][PlayerInfo[playerid][pJob]] != 0 && PlayerInfo[playerid][pAdmin] < 6) 
		return JobTimeDeelay(playerid);

	new Float: Pos[3], Float: CarAngle, string[128];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	switch(PlayerInfo[playerid][pJob]) {
		case 1: {
			if(PlayerToPoint(7, playerid, -372.3956,-1458.6648,25.7209)) {
				if(KG[playerid] > 0) 
					return SCM(playerid, COLOR_GREY, "Ai deja un sac de faina.");
				
				if(PlayerInfo[playerid][pCarLic] == 0) 
					return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de o licenta de condus!");
				
				JobSeconds[playerid] = 60;
				CarAngle = 153.1984;
				DisablePlayerCheckpointEx(playerid);
			} else {
 				if(CP[playerid] != 0) 
 					return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
			  	
			  	CP[playerid] = 53;
				SCM(playerid, COLOR_GREY, "Nu esti in zona unde poti incepe munca, dute la checkpoint setat de noi.");
				SetPlayerCheckpointEx(playerid, -372.3956,-1458.6648,25.7209, 7.0);
				return true;
			}
		}
		case 2: {
			if(PlayerToPoint(7, playerid, 1636.2758,698.3583,10.8203)) {
				if(PlayerInfo[playerid][pCarLic] == 0) 
					return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de o licenta de condus!");

				CarAngle = 2.3953;
				CP[playerid] = 52;
				DisablePlayerCheckpointEx(playerid);

				new szDialog2[400];				
				strcat(szDialog2, "Category\tType\tSkill\n");
				strcat(szDialog2, "Clothes\t{35DE1F}Hop phap\t1+\n");
				strcat(szDialog2, "Food\t{35DE1F}Hop phap\t1+\n");
				strcat(szDialog2, "Furniture\t{35DE1F}Hop phap\t1+\n");
				strcat(szDialog2, "Explosible\t{35DE1F}Hop phap\t2+\n");
				strcat(szDialog2, "Guns\t{F21313}Bat hop phap\t3+\n");
				strcat(szDialog2, "Stolen cars\t{F21313}Bat hop phap\t3+\n");
				Dialog_Show(playerid, DIALOG_TRUCKER, DIALOG_STYLE_TABLIST_HEADERS, "Choose destination:", szDialog2, "Select", "Cancel");			
			}
			else {
 				if(CP[playerid] != 0) 
 					return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
			  	
			  	CP[playerid] = 53;
				SCM(playerid, COLOR_GREY, "Nu esti in zona unde poti incepe munca, dute la checkpoint setat de noi.");
				SetPlayerCheckpointEx(playerid, 1636.2758,698.3583,10.8203, 7.0);
				return true;
			}
		}
		case 3: {
			if(GetPlayerSkill(playerid) == 1) 
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Fura un vehicul public!");

			else if(GetPlayerSkill(playerid) == 2) 
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Fura un vehicul personal descuiat!");
			
			else if(GetPlayerSkill(playerid) == 3) 
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Fura un vehicul ce apartine unei mafii!");
			
			else if(GetPlayerSkill(playerid) == 4) 
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Fura un vehicul personal incuiat!");
			
			else if(GetPlayerSkill(playerid) == 5) 
				PlayerTextDrawSetString(playerid, InfosTD, "~y~Car Jacker~w~~h~~n~Fura un vehicul ce apartine unui departament de politie!");
			
			PlayerTextDrawShow(playerid, InfosTD);

			JobWorking[playerid] = 1;
			defer HideTextdraw(playerid);
			return true;
		}
		case 4: {
			if(PlayerInfo[playerid][pWantedLevel] != 0) 
				return SCM(playerid, COLOR_LGREEN, "Error: Nu poti munci deoarece ai wanted!");
			
			if(!PlayerToPoint(10, playerid, 2770.2822,-1610.9043,11.0418)) {				
				SCM(playerid, COLOR_GREY, "Nu esti la locul unde poti incepe munca. Ti-am pus un checkpoint, Den diem el!");
				SetPlayerCheckpointEx(playerid, 2770.2822,-1610.9043,11.0418, 10.0);
				CP[playerid] = 53;
				return true;
			}
			if(PlayerInfo[playerid][pCarLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
			CP[playerid] = 156;
			new rand = random(3);			
			switch(rand) {
				case 0: SetPlayerCheckpointEx(playerid, 2790.6213,-2523.6418,13.6704, 5.0);
				case 1: SetPlayerCheckpointEx(playerid, 2529.4214,-2009.4240,13.5798, 5.0);
				case 2: SetPlayerCheckpointEx(playerid, 2180.0774,-2317.1672,13.5703, 5.0); 
				case 3: SetPlayerCheckpointEx(playerid, 681.2267,-442.6591,16.3633, 5.0);
			}
			
			format(string, sizeof(string), "Den diem checkpoint tren ban do de livra materialele!");
			PlayerTextDrawSetString(playerid, InfosTD, string);
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);
			
			CarAngle = 277.2561;
			StartingWork[playerid] = 0;
			CurseFacute[playerid] = 0;
			MoneyEarned[playerid] = 0;		
		}
		case 5..6: return true;
		case 7: {
			if(PlayerToPoint(7, playerid, -2667.0920,270.6440,3.9366)) {
				if(PlayerInfo[playerid][pCarLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
				CarAngle = 0;
				CP[playerid] = 155;
				new j = random(housess)+1;
				if(j == 0) j = 1;
				SetPlayerCheckpointEx(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez], 7.0);
				format(string, sizeof(string), "Den diem ~r~~h~rosu~w~~h~ tren ban do de giao pizza.~n~khoang cach: ~y~%0.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]));
				PlayerTextDrawSetString(playerid, InfosTD, string);
				defer HideTextdraw(playerid);
				PlayerTextDrawShow(playerid, InfosTD);				
			}
			else {
 				if(CP[playerid] != 0) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
			  	CP[playerid] = 53;
				SCM(playerid, COLOR_GREY, "Nu esti la locul unde poti incepe munca. Ti-am pus un checkpoint, Den diem el!");
				SetPlayerCheckpointEx(playerid,-2667.0920,270.6440,3.9366, 7.0);
				return true;
			}
		}	
		case 8: {
			if(!PlayerToPoint(6, playerid, 2198.6216,929.7672,10.8876)) {
				SCM(playerid, COLOR_GREY, "Nu esti la locul unde poti incepe munca. Ti-am pus un checkpoint, Den diem el!");
				SetPlayerCheckpointEx(playerid, 2198.6216,929.7672,10.8876, 6.0);
				CP[playerid] = 53;
				return true;
			}
			if(PlayerInfo[playerid][pCarLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
			CP[playerid] = 57;
			
			new rand = random(3);
			switch(rand) {
				case 1: SetPlayerCheckpointEx(playerid, 2118.1729,955.7316,10.5437, 5.0);
				case 2: SetPlayerCheckpointEx(playerid, 2117.4365,950.1517,10.5437, 5.0);
				case 3: SetPlayerCheckpointEx(playerid, 2118.1729,955.7316,10.5437, 5.0);
				default: SetPlayerCheckpointEx(playerid, 2117.4365,950.1517,10.5437, 5.0);
			}
			
			Pos[0] = 2198.6753; 
			Pos[1] = 930.3242; 
			Pos[2] = 10.8888; 
			CarAngle = 180.7365;

			PlayerTextDrawSetString(playerid, InfosTD, "Den diem ~r~rosu~w~~h~ pentru a incarca coletele!");
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);	
		}	
		case 9: return true;	
		case 10: {
			if(!PlayerToPoint(7, playerid, 981.3931,2162.7891,10.5850)) {
				SCM(playerid, COLOR_GREY, "Nu esti la locul unde poti incepe munca. Ti-am pus un checkpoint, Den diem el!");
				SetPlayerCheckpointEx(playerid, 981.3931,2162.7891,10.5850, 7.0);
				CP[playerid] = 53;
				return true;
			}	
			if(PlayerInfo[playerid][pCarLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
			PlayerTextDrawSetString(playerid, InfosTD, "Den diem ~r~~h~checkpoint~w~~h~ tren ban do de lua marfa!");
			defer HideTextdraw(playerid);
			PlayerTextDrawShow(playerid, InfosTD);			
			DisablePlayerCheckpointEx(playerid);
			playerObject[playerid] = CreatePlayerObject(playerid, 1271, 925.8871,2069.3081,10.8203,   0.00000, 0.00000, 45.00000);
			SetPlayerCheckpointEx(playerid, 925.8871,2069.3081,10.8203, 2.0);			
			CP[playerid] = 170;
			UpdateJobStats(playerid);
		}
	}			
	SetPVarInt(playerid, "InHand", 0);				
	
	MoneyEarned[playerid] = 0;
	CurseFacute[playerid] = 0;
	if(PlayerInfo[playerid][pShowJob] == 0 && PlayerInfo[playerid][pJob] != 5 && PlayerInfo[playerid][pLevel] < 3) SCM(playerid, COLOR_YELLOW, "Daca doresti sa vezi mai multe informatii folositoare de la job, o poti face prin comanda (/hud > Informatii job).");
	new skill = GetPlayerSkill(playerid);
	switch(skill) {
		case 1: JobVehicle[playerid] = CreateVehicleEx(JobInfo[PlayerInfo[playerid][pJob]][jSkill1Veh], Pos[0], Pos[1], Pos[2], CarAngle, -1, -1, -1, 0);
		case 2: JobVehicle[playerid] = CreateVehicleEx(JobInfo[PlayerInfo[playerid][pJob]][jSkill2Veh], Pos[0], Pos[1], Pos[2], CarAngle, -1, -1, -1, 0);
		case 3: JobVehicle[playerid] = CreateVehicleEx(JobInfo[PlayerInfo[playerid][pJob]][jSkill3Veh], Pos[0], Pos[1], Pos[2], CarAngle, -1, -1, -1, 0);
		case 4: JobVehicle[playerid] = CreateVehicleEx(JobInfo[PlayerInfo[playerid][pJob]][jSkill4Veh], Pos[0], Pos[1], Pos[2], CarAngle, -1, -1, -1, 0);
		case 5: JobVehicle[playerid] = CreateVehicleEx(JobInfo[PlayerInfo[playerid][pJob]][jSkill5Veh], Pos[0], Pos[1], Pos[2], CarAngle, -1, -1, -1, 0);	
	}
	PutPlayerInVehicleEx(playerid, JobVehicle[playerid], 0);
	JobWorking[playerid] = 1;

	if(PlayerInfo[playerid][pJob] != 2) 
		UpdateJobStats(playerid);

	Gas[JobVehicle[playerid]] = 100;
	WorkingTime[playerid] = 0;

	SetPlayerVirtualWorld(playerid, 0);

	new engine,lights,alarm,doors,bonnet,boot,objective;
	vehEngine[JobVehicle[playerid]] = 1;
	GetVehicleParamsEx(JobVehicle[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(JobVehicle[playerid],VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);	
	return true;
}

function CheckSeconds(playerid) {
	if(GetTickCount() - JobTime[playerid] < 3500) {
		if(InDealer[playerid] == 1) return true;
		if(UsedFind[playerid] == 1) return true;
		if(CP[playerid] == 57 && JobWorking[playerid] == 1) return true;
		if(PlayerToPoint(20, playerid, CheckpointPos[playerid][0], CheckpointPos[playerid][1], CheckpointPos[playerid][2]) && JobWorking[playerid] == 1) return true;
		if(PlayerToPoint(100, playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]) && JobWorking[playerid] == 0) return true;
		if(ServerSystem[4] == 0) NightBot(playerid, "Cheats (teleport-hack)");
		WTimes[playerid] += 2;
	}
	return true;
}
YCMD:refill(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 8) return SCM(playerid, COLOR_GREY, "Nu esti mecanic!");
	new id,money,string[180];
	if(DeelayCommand[playerid][6] != 0) return DeelayTime(playerid, 6);
	if(sscanf(params, "ui",id,money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/refill <playerid/name> <Price>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(GetPlayerVehicleID(id),engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_ON) return SCM(playerid, -1, "Acel player are motorul pornit!");
	if(money < 1 || money > 10000) return SCM(playerid, COLOR_WHITE, "Pretul trebuie sa fie cuprins intre $1 si $10,000!");
	if(!ProxDetectorS(8.0, playerid, id)&& !IsPlayerInAnyVehicle(id)) return SCM(playerid, -1, "Acel player nu este in raza ta sau nu se afla intr-un vehicul.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	format(string, sizeof(string), "* I-ai oferit %s posibilitatea de a-i umple rezervorul vehiculul in schimbul a $%d .",GetName(id),money);
	SCM(playerid, COLOR_MONEY, string);
	format(string, sizeof(string), "* Mecanicul %s doreste sa-ti alimenteze vehiculul in schimbul a $%d, (scrie /accept refill %d) pentru a accepta.",GetName(playerid),money,playerid);
	SCM(id, COLOR_MONEY, string);
	RefillOffer[id] = playerid;
	RefillPrice[id] = money;
	Refillx[playerid] = id;
	return true;
}
YCMD:repair(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 8) return SCM(playerid, COLOR_GREY, "Nu esti mecanic!");
	new id,money,string[180];
	if(DeelayCommand[playerid][5] != 0) return DeelayTime(playerid, 5);
	if(sscanf(params, "ui",id,money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/repair <playerid/name> <Price>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(GetPlayerVehicleID(id),engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_ON) return SCM(playerid, -1, "Acel player are motorul pornit!");
	if(money < 1 || money > 20000) return SCM(playerid, COLOR_WHITE, "Pretul trebuie sa fie cuprins intre $1 si $20,000!");
	if(!ProxDetectorS(8.0, playerid, id)&& !IsPlayerInAnyVehicle(id)) return SCM(playerid, -1, "Acel player nu este in raza ta sau nu se afla intr-un vehicul.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	format(string, sizeof(string), "* I-ai oferit lui %s posibilitatea de a-i repara vehiculul in schimbul a $%s .",GetName(id),FormatNumber(money));
	SCM(playerid, COLOR_MONEY, string);
	format(string, sizeof(string), "* Mecanicul %s doreste sa-ti repare vehiculul in schimbul a $%s, (scrie /accept repair %d) pentru a accepta.",GetName(playerid),FormatNumber(money),playerid);
	SCM(id, COLOR_MONEY, string);
	RepairOffer[id] = playerid;
	RepairPrice[id] = money;
	Rapairx[playerid] = id;
	return true;
}
YCMD:getdrugs(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 5) return SCM(playerid,COLOR_WHITE,"Nu ai jobul 'Distribuitor de droguri'.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 322.1062,1119.2726,1083.8828)) return SCM(playerid, -1, "Nu esti in interior casei de droguri.");
	new cant;
	if(sscanf(params, "i", cant)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/getdrugs <cantitate>");
	if(cant < 1 || cant > 100000) return SCM(playerid, COLOR_GREY, "Cantitate prea mare! (1-100,000)");
	if(PlayerInfo[playerid][pDrugs] + cant > 100000) return SCM(playerid, COLOR_GREY, "Nu poti avea mai mult de 100,000 de droguri!");
	if(PlayerMoney(playerid, cant*1)) return SCM(playerid, -1, "Nu ai banii necesari!");
	new points = cant, money = cant*1;
	if(PlayerMoney(playerid, money)) return SCM(playerid,COLOR_GREY, "Nu ai aceasta suma de bani!");
	PlayerInfo[playerid][pDrugs] += points;
	GivePlayerCash(playerid, 0,money);
	gQuery[0] = EOS;
	gString[0] = EOS;
	format(gString, sizeof(gString), "Ai luat %d grame de droguri in schimbul a $%s.",points,FormatNumber(money));
	SCM(playerid,COLOR_LIGHTBLUE,gString);
	mysql_format(SQL, gQuery,sizeof(gQuery),"UPDATE users SET `Money`='%d', `MStore`='%d',`Drugs`='%d' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL,gQuery, "", "");
	return true;
}
YCMD:selldrugs(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 6) return SCM(playerid, COLOR_GREY, "Nu ai jobul 'Distribuitor de droguri'.");
	new id,needed,string[128],money;
	if(sscanf(params, "uii",id,needed,money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/selldrugs <playerid/name> <Drugs> <Price>");
	if(needed < 1 || needed > 50) return SCM(playerid, -1, "Gramele de droguri trebuie sa fie cuprinse intre 1 si 50 grame!");
	if(money < 1 || money > 50000) return SCM(playerid, -1, "Pretul trebuie sa fie cuprins intre $1 si $150.000!");
	if(needed > PlayerInfo[playerid][pDrugs]) return SCM(playerid, COLOR_WHITE,"Nu ai aceasta suma Drugs with you.");
	if(PlayerInfo[playerid][pJailTime] != 0) return SCM(playerid, COLOR_GREY, "Nu poti vinde lucruri atata timp cat esti in jail!");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	format(string, sizeof(string), "* I-ai oferit lui %s, %d grame de droguri pentru %s$.", GetName(id), needed, FormatNumber(money));
	SCM(playerid, COLOR_MONEY, string);
	format(string, sizeof(string), "* %s ti-a oferit %d grame de droguri pentru %s$, (scrie /accept drugs %d) pentru a accepta.", GetName(playerid), needed, FormatNumber(money),playerid);
	SCM(id, COLOR_MONEY, string);
	DrugOffer[id] = playerid;
	DrugPrice[id] = money;
	DrugGram[id] = needed;
	return true;
}
YCMD:setjob(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,jobid,string[100];
	if(sscanf(params, "ui",id,jobid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setjob <playerid/name> <Job ID>");
	if(jobid < 1 || jobid > 13) return SCM(playerid, -1, "ID invalid! (1-13)");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	PlayerInfo[id][pJob] = jobid;
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a schimbat lui %s jobul in %s (%d).", GetName(playerid),GetName(id),JobInfo[jobid][jName],jobid);
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string,3);
	format(string, sizeof(string), "Admin %s ti-a schimbat jobul in %s.", GetName(playerid),JobInfo[jobid][jName]);
	SCM(id,COLOR_LIGHTBLUE, string);
	new query[128];
	mysql_format(SQL, query,sizeof(query),"UPDATE users SET `Job`='%d' WHERE `ID`='%d'",PlayerInfo[id][pJob],PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, query, "", "");
	return true;
}
YCMD:sellmats(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 5) return SCM(playerid,COLOR_GREY, "Nu ai jobul 'Distribuitor de arme'.");
	new id,mats,string[128],sendername[25],giveplayer[25],price;
	if(sscanf(params, "uii",id,mats,price)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/sellmats <playerid/name> <Materials> <price>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(price < 1 || price > 150000) return SCM(playerid, -1, "Pretul trebuie sa fie cuprins intre $1 si $150.000!");
	if(playerid == id) return SCM(playerid, COLOR_GREY, "Nu poti executa aceasta comanda asupra ta!");   
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(mats < 1 || mats > 50000) return SCM(playerid, -1, "Poti vinde intre 1 si 50.000 de materiale.");
	if(mats > PlayerInfo[playerid][pMats]) return SCM(playerid, COLOR_GREY, "Nu ai atatea materiale.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	format(string, sizeof(string), "* I-ai oferit lui %s, %d materiale pentru %s$.",giveplayer,mats,FormatNumber(price));
	SCM(playerid, COLOR_MONEY, string);
	format(string, sizeof(string), "* %s ti-a oferit %d materiale pentru %s$, (scrie /accept materials %d) pentru a accepta.",sendername,mats,FormatNumber(price),playerid);
	SCM(id, COLOR_MONEY, string);
	MatsOffer[id] = playerid;
	MatsPrice[id] = price;
	MatsAmmo[id] = mats;
	return true;
}
YCMD:sellgun(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid,-1,"Nu ai jobul 'Distribuitor de arme'");
	new witem[10],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS],price2,id,string[128];
	if(sscanf(params, "us[10]d",id,witem,price2)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/sellgun <playerid/name> <Gun Name> <price>");
		SCM(playerid, COLOR_WHITE, "Weapons:{FFFFFF} SDPistol(100) Deagle(150)");
		SCM(playerid, COLOR_WHITE, "Weapons:{FFFFFF} MP5(200) Shotgun(300)");
		SCM(playerid, COLOR_WHITE, "Weapons:{FFFFFF} AK47(350) M4(400) Rifle(600)");
		return true;
	}
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(playerid == id) return SCM(playerid,COLOR_WHITE,"You can not sell yourself weapons.");
	if(PlayerInfo[playerid][pJailTime] != 0) return SCM(playerid, COLOR_GREY, "Nu poti vinde lucruri atata timp cat esti in jail!");
	if(IsPlayerInAnyVehicle(id)) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda atata timp cat acel player este intr-un vehicul.");
	if(PlayerToPoint(300, playerid, -1423.5153,935.8321,1036.4756)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in arena de evente.");
	
	if(PlayerInfo[id][pGunLic] == 0) return SCM(playerid,COLOR_WHITE,"This player does not have arms license.");
	if(strcmp(witem,"sdpistol",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 100) return SCM(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
		weapon[playerid] = 23;
		price[playerid] = 100;
		ammo[playerid] = 100;
	}
	else if(strcmp(witem,"deagle",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 150) return SCM(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
		weapon[playerid] = 24;
		price[playerid] = 150;
		ammo[playerid] = 100;
	}
	else if(strcmp(witem,"mp5",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 200) return SCM(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
		weapon[playerid] = 29;
		price[playerid] = 200;
		ammo[playerid] = 150;
	}
	else if(strcmp(witem,"shotgun",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 300) return SCM(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
		weapon[playerid] = 25;
		price[playerid] = 300;
		ammo[playerid] = 50;
	}
	else if(strcmp(witem,"ak47",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 350) return SCM(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
		weapon[playerid] = 30;
		price[playerid] = 350;
		ammo[playerid] = 150;
	}
	else if(strcmp(witem,"m4",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 400) return SCM(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
		weapon[playerid] = 31;
		price[playerid] = 400;
		ammo[playerid] = 150;
	}
	else if(strcmp(witem,"rifle",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 600) return SCM(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
		weapon[playerid] = 33;
		price[playerid] = 600;
		ammo[playerid] = 25;
	}
	else return SCM(playerid,COLOR_WHITE,"Numele armei este invalid.");
	if(price2 < 1 || price2 > 100000) return SCM(playerid,COLOR_WHITE,"Pretul trebuie sa fie intre $1 si $100000.");
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	SellgunOffer[id] = playerid;
	SellgunPrice[id] = price2;
	SellgunMats[id] = price[playerid];
	SellgunAmmo[id] = ammo[playerid];
	SellgunID[id] = weapon[playerid];
	new gunname[50];
	GetWeaponNameEx(weapon[playerid],gunname,sizeof(gunname));
	format(string, sizeof(string), "* I-ai oferit lui %s %s pentru %s$.",GetName(id),gunname,FormatNumber(price2));
	SCM(playerid, COLOR_MONEY, string);
	format(string, sizeof(string), "* %s ti-a oferit %s pentru %s$, (scrie /accept gun %d) pentru a accepta.",GetName(playerid),gunname,FormatNumber(price2),playerid);
	SCM(id, COLOR_MONEY, string);
	return true;
}
YCMD:getmats(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid,COLOR_GREY, "Nu ai jobul 'Distribuitor de arme'.");
	new cant;
	if(sscanf(params, "i", cant)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/getmats <cantitate>");
	if(cant < 1 || cant > 100000) return SCM(playerid, COLOR_GREY, "Cantitate prea mare! (1-100,000)");
	if(PlayerInfo[playerid][pMats] + cant > 100000) return SCM(playerid, COLOR_GREY, "Nu poti avea mai mult de 100,000 de materiale!");
	if(PlayerMoney(playerid, cant*1)) return SCM(playerid, -1, "Nu ai banii necesari!");
	gString[0] = EOS;
	if(PlayerToPoint(3,playerid,2770.4629,-1628.3237,12.1775)) {
		format(gString, sizeof(gString), "* Ai cumparat %d pachete cu materiale in schimbul a $%s.", cant, FormatNumber(cant*1));
		SCM(playerid, COLOR_LIGHTBLUE, gString);
		GivePlayerCash(playerid, 0, cant*1);
		Update(playerid, pCashx);
		PlayerInfo[playerid][pMats] += cant;
		gQuery[0] = EOS;
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pMats], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gQuery, "", "");				
	}
	else {
		if(CP[playerid] != 0) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
		CP[playerid] = 53;
		SCM(playerid, COLOR_GREY, "Nu esti la locul de unde se incep misiunile. Urmeaza punctul rosu de pe harta.");
		SetPlayerCheckpointEx(playerid, 2770.4629,-1628.3237,12.1775, 7.0);
	}
	return true;
}
YCMD:stopwork(playerid, params[], help) {
	if(JobWorking[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu muncesti!");
	CP[playerid] = 0;
	DisablePlayerCheckpointEx(playerid);
	JobWorking[playerid] = 0;
	if(HaveFish[0][playerid] != 0) {
		SCM(playerid, COLOR_YELLOW, "Den diem checkpoint de pe mapa!");
		SetPlayerCheckpointEx(playerid, 840.5792,-2150.7822,1.1482, 10.0);
		CP[playerid] = 373;	
	}
	else {
		if(playerObject[playerid] != 0) DestroyPlayerObject(playerid, playerObject[playerid]), playerObject[playerid] = 0;
		if(playerObject2[playerid] != 0) DestroyObject(playerObject2[playerid]), playerObject2[playerid] = 0;
		SCM(playerid, COLOR_LIGHTBLUE, "* Nu mai muncesti!");
		if(JobVehicle[playerid] != 0) { DestroyVehicle(JobVehicle[playerid]); JobVehicle[playerid] = 0; }
		if(Trailer[playerid] != 0) { DestroyVehicle(Trailer[playerid]); Trailer[playerid] = 0; }
		
		PlayerTextDrawHide(playerid, JobTD);
		PlayerTextDrawHide(playerid, InfosTD);	
		JobVehicle[playerid] = 0;
	}
	JobLeftTime[playerid] = 0;
	RemovePlayerAttachedObject(playerid, 6);
	SetPlayerSpecialAction(playerid, 0);	
	BagTime[playerid] = 0;
	return true;
}

function GetJobWorkers(jid) {
	new x;
	foreach(new i: Player) {
		if(PlayerInfo[i][pJob] == jid && JobWorking[i] == 1) x++;
	}
	return x;
}

YCMD:removeclan(playerid, params[], help) {
	new membrii, szQuery[256], string[180];
	if(PlayerInfo[playerid][pClan] == 0 || PlayerInfo[playerid][pClanRank] != 6) return SCM(playerid,-1,"Nu ai un clan!");
	new clanid = PlayerInfo[playerid][pClan];
	for(new h = 0; h < MAX_SAFEZONES; h++) {
		if(GraffitiInfo[h][gfOwned] == clanid && clanid != 0) {
			GraffitiInfo[h][gfOwned] = 0;
			DestroyDynamicObject(GraffitiInfo[h][gfObject]);
			GraffitiInfo[h][gfObject] = CreateDynamicObject(19373, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ], 0.0, 0.0, GraffitiInfo[h][gfRot]);
			format(string, sizeof(string), "None", ClanInfo[GraffitiInfo[h][gfOwned]][clColor], ClanInfo[GraffitiInfo[h][gfOwned]][clTag]);
			SetDynamicObjectMaterialText(GraffitiInfo[h][gfObject], 0, string, OBJECT_MATERIAL_SIZE_256x128, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, 1);
			GraffitiInfo[StartedSprayOn[playerid]][gfAttacked] = 0;
			new query[256];
			mysql_format(SQL, query, sizeof(query), "UPDATE `graffiti` SET `Owned`='0' WHERE `ID`='%d'", h);
			mysql_tquery(SQL, query, "", "");
		}
	}
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1 && PlayerInfo[i][pClan] == clanid && i != playerid) {
			SCM(i, COLOR_YELLOW, "Ai fost demis din acest clan! Motiv: Liderul a renuntat la clan.");
			SCM(i, COLOR_YELLOW, "Server: Tag-ul a fost scos. Numele tau nu a fost afectat.");
			PlayerInfo[i][pClan] = 0;
			PlayerInfo[i][pClanRank] = 0;
			SetPlayerName(i, PlayerInfo[i][pUsername]);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Name`='%s'", GetName(i));
			mysql_tquery(SQL, szQuery, "", "");
			membrii++;
		}
	}
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Clan` = '%d'", clanid);
	new Cache: result = mysql_query(SQL, szQuery);
	new idwtf[180];
	for(new i, j = cache_num_rows(); i < j; i++)
	{
		cache_get_value_name(i, "id", idwtf);
 		membrii++;
 		new szQuery2[256];
		mysql_format(SQL, szQuery2, sizeof(szQuery2), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `ID`='%d'", strval(idwtf));
		mysql_tquery(SQL,szQuery2, "", "");
	}
	cache_delete(result);

	format(string, sizeof(string), "Ai sters clanul cu succes! Nu-l mai poti recupera. [%d Membrii au fost scosi]", membrii);
	SCM(playerid, COLOR_YELLOW, string);
	SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);

	mysql_format(SQL, string,128,"DELETE FROM `clans` WHERE `ID`='%d'",clanid);
	mysql_query(SQL, string);

	PlayerInfo[playerid][pClan] = 0;
	PlayerInfo[playerid][pClanRank] = 0;
	return true;
}
YCMD:fmembers(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] == 0) return  SCM(playerid, COLOR_GREY, "Nu faci parte dintr-o factiune!");
	new string[1024], x;
	SCM(playerid, COLOR_SERVER, "-- Jucatori conectati din factiune --");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember]) {
			format(string, sizeof(string), "%s %s (%d),", string, GetName(i), i);
			x++;
		}
	}
	MesajLung(playerid, -1, string);
	format(string, sizeof(string), "* Sunt %d jucatori conectati din factiune.", x);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}
YCMD:cmembers(playerid, params[], help) {
	if(PlayerInfo[playerid][pClan] == 0) return  SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	new string[1024], x;
	SCM(playerid, COLOR_SERVER, "-- Jucatori conectati din clan --");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pClan] == PlayerInfo[playerid][pClan]) {
			format(string, sizeof(string), "%s %s (%d),", string, GetName(i), i);
			x++;
		}
	}
	MesajLung(playerid, -1, string);
	format(string, sizeof(string), "* Sunt %d jucatori conectati din clan.", x);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}
	

YCMD:clans(playerid, params[], help) {
	//SCM(playerid, COLOR_LGREEN, "Comanda dezacitvata deoarece provoca lag!");
	new szDialog[1024], szDialog2[4048], x;
	strcat(szDialog2, "#. Clan\tOwner\tMembers/Slots\tZones\n");
	for(new h = 0; h < MAX_CLANS; h++) {
		if(strlen(ClanInfo[h][clName]) > 0) {
			x++;
			format(szDialog, sizeof(szDialog), "%d. %s - %s{FFFFFF}\t%s\t%d/%d\t%d\n", x, ClanInfo[h][clName], ClanInfo[h][clTag], ClanInfo[h][clOwner], GetCMembers(h), ClanInfo[h][clSlots], GetClanTurfs(h));
			strcat(szDialog2, szDialog);
		}		
	}
	Dialog_Show(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Clans:", szDialog2, "Select", "Cancel");
	return true;
}


YCMD:deleteclan(playerid, params[], help) {
	new membrii, szQuery[256], string[180], clanid;
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_GREY, "Nu ai acces!");
	if(sscanf(params, "i", clanid)) {
 		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/deleteclan <id>");
		for(new h = 0; h < MAX_CLANS; h++) {
			if(strlen(ClanInfo[h][clName]) > 0) {
				format(string, sizeof(string), "%d. Clan: %s (%s) | Owner: %s", h, ClanInfo[h][clName], ClanInfo[h][clTag], ClanInfo[h][clOwner]);
				SCM(playerid, COLOR_WHITE, string);
			}
		}
		return true;
	}
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1 && PlayerInfo[i][pClan] == clanid && clanid != 0) {
			SCM(i, COLOR_YELLOW, "Ai fost demis din acest clan! Motiv: Clanul a fost sters de un admin.");
			SCM(i, COLOR_YELLOW, "Server: Tag-ul a fost scos. Numele tau nu a fost afectat.");
			PlayerInfo[i][pClan] = 0;
			PlayerInfo[i][pClanRank] = 0;
			SetPlayerName(i, PlayerInfo[i][pUsername]);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Name`='%s'", GetName(i));
			mysql_tquery(SQL, szQuery, "", "");
			membrii++;
			if(SpawnChange[i] == 2) SpawnChange[i] = 0;
		}
	}
	for(new h = 0; h < MAX_SAFEZONES; h++) {
		if(GraffitiInfo[h][gfOwned] == clanid && clanid != 0) {
			GraffitiInfo[h][gfOwned] = 0;
			DestroyDynamicObject(GraffitiInfo[h][gfObject]);
			GraffitiInfo[h][gfObject] = CreateDynamicObject(19373, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ], 0.0, 0.0, GraffitiInfo[h][gfRot]);
			format(string, sizeof(string), "None", ClanInfo[GraffitiInfo[h][gfOwned]][clColor], ClanInfo[GraffitiInfo[h][gfOwned]][clTag]);
			SetDynamicObjectMaterialText(GraffitiInfo[h][gfObject], 0, string, OBJECT_MATERIAL_SIZE_256x128, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, 1);
			GraffitiInfo[StartedSprayOn[playerid]][gfAttacked] = 0;
			new query[256];
			mysql_format(SQL, query, sizeof(query), "UPDATE `graffiti` SET `Owned`='%d' WHERE `ID`='%d'", h);
			mysql_tquery(SQL, query, "", "");
		}
	}
	format(ClanInfo[clanid][clName], 256, "");
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Clan` = '%d'", clanid);
	new Cache: result = mysql_query(SQL, szQuery);
	new idwtf[180];
	for(new i, j = cache_num_rows(); i < j; i++)
	{
		cache_get_value_name(i, "id", idwtf);
 		membrii++;
 		new szQuery2[256];
		mysql_format(SQL, szQuery2, sizeof(szQuery2), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `ID`='%d'", strval(idwtf));
		mysql_tquery(SQL,szQuery2, "", "");
	}
	cache_delete(result);
	format(string, sizeof(string), "Ai sters clanul cu succes! [%d Membrii au fost scosi]", membrii);
	SCM(playerid, COLOR_YELLOW, string);
	if(ClanInfo[clanid][clHQ] > 0) {
		new idd = ClanInfo[clanid][clHQ];
		mysql_format(SQL, string,128,"DELETE FROM `clanhq` WHERE `ID`='%d'", ClanInfo[clanid][clHQ]);
		mysql_query(SQL, string);
		DestroyDynamic3DTextLabel(ClanHqLabel[idd]);
		DestroyDynamicPickup(ClanHQInfo[idd][cPickup]);
	}
	mysql_format(SQL, string,128,"DELETE FROM `clans` WHERE `ID`='%d'",clanid);
	mysql_query(SQL, string);
	return true;
}

function RemoveClan(clanid) {
	new membrii, szQuery[256], string[180];
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1 && PlayerInfo[i][pClan] == clanid && clanid != 0) {
			SCM(i, COLOR_YELLOW, "Ai fost demis din acest clan! Motiv: Clanul a expirat.");
			SCM(i, COLOR_YELLOW, "Server: Tag-ul a fost scos. Numele tau nu a fost afectat.");
			PlayerInfo[i][pClan] = 0;
			PlayerInfo[i][pClanRank] = 0;
			SetPlayerName(i, PlayerInfo[i][pUsername]);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Name`='%s'", GetName(i));
			mysql_tquery(SQL, szQuery, "", "");
			membrii++;
		}
	}
	for(new h = 0; h < MAX_SAFEZONES; h++) {
		if(GraffitiInfo[h][gfOwned] == clanid && clanid != 0) {
			GraffitiInfo[h][gfOwned] = 0;
			DestroyDynamicObject(GraffitiInfo[h][gfObject]);
			GraffitiInfo[h][gfObject] = CreateDynamicObject(19373, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ], 0.0, 0.0, GraffitiInfo[h][gfRot]);
			format(string, sizeof(string), "None", ClanInfo[GraffitiInfo[h][gfOwned]][clColor], ClanInfo[GraffitiInfo[h][gfOwned]][clTag]);
			SetDynamicObjectMaterialText(GraffitiInfo[h][gfObject], 0, string, OBJECT_MATERIAL_SIZE_256x128, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, 1);
			new query[256];
			mysql_format(SQL, query, sizeof(query), "UPDATE `graffiti` SET `Owned`='%d' WHERE `ID`='%d'", h);
			mysql_tquery(SQL, query, "", "");
		}
	}
	format(ClanInfo[clanid][clName], 256, "");
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Clan` = '%d'", clanid);
	new Cache: result = mysql_query(SQL, szQuery);
	new idwtf[180];
	new szQuery2[256];
	for(new i, j = cache_num_rows(); i < j; i++)
	{
		cache_get_value_name(i, "id", idwtf);
 		membrii++;
		mysql_format(SQL, szQuery2, sizeof(szQuery2), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `ID`='%d'", strval(idwtf));
		mysql_tquery(SQL,szQuery2, "", "");
	}
	cache_delete(result);
	mysql_format(SQL, string,128,"DELETE FROM `clans` WHERE `ID`='%d'",clanid);
	mysql_query(SQL, string);
	return true;
}

function GetPlayerHealthEx(playerid, &Float:health) {
	health = Health[playerid];
	return true;
} 
function SetPlayerHealthEx(playerid, Float:health) {
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return true;
}
function GetPlayerArmourEx(playerid, &Float:armour) {
	armour = Armour[playerid];
	return true;
}
function SetPlayerArmourEx(playerid, Float:armour) {
	if(armour == 0) SetPVarInt(playerid, "Armour", 0);
	else SetPVarInt(playerid, "Armour", 1);
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;	
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	new iswar = 0, attackers, defenders;
	if(PlayerHit[playerid] != -1) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	for(new i = 0; i < sizeof(Turfs) && iswar == 0; i++) {
		attackers = WarInfo[i][wAttacker];
		defenders = WarInfo[i][wFaction];
		if(WarInfo[i][wTime] > 1 && attackers != 0 && defenders != 0) {
			if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) ) iswar = 1;
		}
	}
	
	if(PaintType[playerid] == PaintType[forplayerid] && PaintType[playerid] != 0 )
	{
		SetPlayerMarkerForPlayer( playerid, forplayerid, COLOR_LIGHTRED );
		SetPlayerMarkerForPlayer( forplayerid, playerid, COLOR_LIGHTRED );
	}
	else if(InEvent[playerid] == 1 && InEvent[forplayerid] == 1) {
		SetPlayerMarkerForPlayer( playerid, forplayerid, GetPlayerColor( forplayerid ) );
		SetPlayerMarkerForPlayer( forplayerid, playerid, GetPlayerColor( playerid ) );
	}	
	else if(IsACop(playerid) && OnDuty[playerid] == 1 && PlayerInfo[forplayerid][pWantedLevel] != 0) {
		SetPlayerMarkerForPlayer( playerid, forplayerid, 0xe3336d00 );
	}	
	else if(iswar == 1) {
		if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) ) {
			SetPlayerMarkerForPlayer( playerid, forplayerid, GetPlayerColor( forplayerid ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, GetPlayerColor( playerid ) );
		}
		else {
			SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
		}
	}	
	else
	{
		SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
		SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	}
	return true;
}
public OnPlayerStreamOut(playerid, forplayerid) {
	if(PlayerHit[playerid] != -1) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
	SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	return true;
}

stock IsACBUGWeapon(playerid) {
	if(IsPlayerConnected(playerid) && (IsPlayerLogged[playerid] == 1)) {
		new wID = GetPlayerWeapon ( playerid ) ;
		if(wID == 24 || wID == 25 || wID == 27 || wID == 34 ) return 1 ;
	}
	return 0 ;
}

stock GetPlayerID(playerName[]) {
  	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
	  		if(strcmp(PlayerInfo[i][pUsername], playerName, true) == 0) return i;
		}
  	}
  	return INVALID_PLAYER_ID;
}

stock GetNameEx(playerid) {
	new Name[32];
	GetPlayerName(playerid, Name, 32);
	return Name;
}

function AttachTrailer(playerid) {
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(Trailer[playerid],vX,vY,vZ);
	if((floatabs(pX-vX)<100.0)&&(floatabs(pY-vY)<100.0)&&(floatabs(pZ-vZ)<100.0)&&(Trailer[playerid]!=GetPlayerVehicleID(playerid)))  AttachTrailerToVehicle(Trailer[playerid],GetPlayerVehicleID(playerid));
	return true;
}

function ClearWanted(playerid) {
	new string[80];
	format(string, sizeof(string), "None");
	strmid(WantedName[playerid], string, 0, strlen(string), 255);
	WantedReason[playerid] = 999;
	KillTimer(WantedTimer[playerid]);
	return true;
}
YCMD:givevehicle(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, model, string[180],temporar;
	if(sscanf(params, "uii", id, model, temporar)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/givevehicle <playerid/name> <model> <temporar>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este conectat.");
	else if(GetSlots(id) <= Iter_Count(MyVehicle[id])) return SCM(playerid, -1, "Acel player are numarul maxim de masini personale! Isi poate cumpara un slot din /shop.");
	
	format(string, sizeof(string), "* Ban nhan duoc un %s de la administratorul %s.", aVehicleNames[model-400], GetName(playerid));
	SCM(id, COLOR_YELLOW, string);
	format(string, sizeof(string), "* I-ai dat lui %s un %s.", GetName(id), aVehicleNames[model-400]);
	SCM(playerid, COLOR_YELLOW, string);				
	GiveVehicle(id, model, 0, 0, 0, 0, temporar);	
	return true;
}
YCMD:buycar(playerid, params[], help) {
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_GREY, "Nu ai nivel 3!");
	if(InDealer[playerid] != 0) return 1;
	if(!PlayerToPoint(3,playerid,1487.0498,-2287.2930,13.7529)) return SCM(playerid, COLOR_GREY, "Nu esti la dealership.");
	if(TestingModel[playerid] == 1) return true;
	LoadDsVehs(playerid);
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SCM(playerid, -1, "Ai wanted, nu poti folosi aceasta comanda!");
	TestingModel[playerid] = 0;
	DealerCarType[playerid] = 1;
	InDealer[playerid] = 1;
	TogglePlayerControllable(playerid, 0);
	SetPlayerVirtualWorld(playerid, playerid+1);
	SetPlayerInterior(playerid, 0);
	DealerID[playerid] = 1;
	DealerCarColor1[playerid] = 1;
	DealerCarColor2[playerid] = 1;
	DealerCar[playerid] = CreateVehicleEx(DSModels[DealerID[playerid]][dModel],1463.3318,-2299.0806,13.6845,281.2260,DealerCarColor1[playerid],DealerCarColor2[playerid], -1, 0);
	SetVehicleVirtualWorld(DealerCar[playerid],playerid+1);
	LinkVehicleToInterior(DealerCar[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, DSTds[4], DSModels[DealerID[playerid]][dModel]);
	PlayerTextDrawShow(playerid, DSTds[4]);
	ShowDealershipTextdraws(playerid);
	SelectTextDraw(playerid, 0x15B864FF);
	ShowCamera(playerid);	
	return true;
}

stock GetFactionMembers(fid) {
	new string[180];
	if(FactionMembers[fid] >= 10) format(string, sizeof(string), "%d", FactionMembers[fid]);
	else format(string, sizeof(string), "0%d", FactionMembers[fid]);
	return string;
}

function CountReferrals(playerid) {
	new players, szQuery[256];
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Referral` = '%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: result = mysql_query(SQL, szQuery);
	players = cache_num_rows();
	cache_delete(result);	
	return players;
}

function GetFMembers() {
	for(new i = 1; i < 16; i++) {
		gQuery[0] = EOS;
		mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `Member` = '%d'", i);
		mysql_tquery(SQL, gQuery, "CheckFMembers", "i", i);
	}
	return true;
}
function CheckFMembers(id) return FactionMembers[id] = cache_num_rows();
function Accounts() return ServerAccounts;
function PlayersLoggedDay() {
	new players, szQuery[256];
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `DayLogin` = '1'");
	new Cache: result = mysql_query(SQL, szQuery);
 	players = cache_num_rows();
	cache_delete(result);
	return players;
}

function GetFactionMembers2(fid) {
	new membrii;
	new szQuery[256];
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Member` = '%d'", fid);
	new Cache: result = mysql_query(SQL, szQuery);
	for(new i, j = cache_num_rows(); i < j; i++) membrii++;
	cache_delete(result);
	return membrii;
}
YCMD:quitclan(playerid, params[], help) {
	new clanid = PlayerInfo[playerid][pClan];
	if(clanid == 0) return SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	if(PlayerInfo[playerid][pClanRank] == 6) return SCM(playerid, -1, "Nu poti parasi clanul deoarece esti lider!");
	Dialog_Show(playerid, DIALOG_QUITCLAN, DIALOG_STYLE_MSGBOX, "Server:", "Esti sigur ca vrei sa parasesti acest clan?", "Co", "Khong");
	return true;
}
YCMD:clanduty(playerid, params[], help) {
	new clanid = PlayerInfo[playerid][pClan];
	if(clanid == 0) return SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	switch(ClanDuty[playerid]) {
		case 0: SCM(playerid, -1, "Acum, esti la datoria clanului!"), ClanDuty[playerid] = 1;
		case 1: {
			if(StartedSpray[playerid] == 1 || ClanDuty[playerid] == 1) {
				SCM(playerid, COLOR_LGREEN, "Error: Nu mai esti la datoria clanului!");
				GraffitiInfo[StartedSpray2[playerid]][gfAttacked] = 0;
				StartedSpray[playerid] = 0;
				StartedSpray2[playerid] = 0;
				StartedSprayOn[playerid] = 0;
				ClanProces[playerid] = 0;
				ClanDuty[playerid] = 0;
			}
		}
	}
	return true;
}
YCMD:createclanhq(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti autorizat sa folosesti aceasta comanda.");
	if(clanhqid >= MAX_CLANHQ) return SCMf(playerid, COLOR_LGREEN, "Error: Poti pune maxim %d clan HQ.", MAX_CLANHQ);
	new price;
	if(sscanf(params, "i", price)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/createclanhq <price>");
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO clanhq (`Price`) VALUES ('%d')", price);
	mysql_tquery(SQL, gQuery, "CLanHQ", "ii", playerid, price);
	clanhqid ++;
	return true;
}

function CLanHQ(playerid, price) {
	new id = cache_insert_id(), Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	ClanHQInfo[id][cID] = id;
	ClanHQInfo[id][cPosX] = Pos[0];
	ClanHQInfo[id][cPosY] = Pos[1];
	ClanHQInfo[id][cPosZ] = Pos[2];
	ClanHQInfo[id][cEnterX] = 54.7276;
	ClanHQInfo[id][cEnterY] = 1677.4347;
	ClanHQInfo[id][cEnterZ] = -95.8061;
	ClanHQInfo[id][cPrice] = price;
	ClanHQInfo[id][cVirtualWorld] = id;
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `clanhq` SET `VirtualWorld`='%d' WHERE `ID`='%d'", id, id);
	mysql_tquery(SQL, gQuery, "", "");

	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `clanhq` SET `PosX`='%f', `PosY`='%f', `PosZ`='%f', `EnterX`='%f', `EnterY`='%f', `EnterZ`='%f' WHERE `ID`='%d'", 
		ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ], ClanHQInfo[id][cEnterX], ClanHQInfo[id][cEnterY], ClanHQInfo[id][cEnterZ], id);
	mysql_tquery(SQL, gQuery, "", "");
	UpdateLabel(4, id);

	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `clans` SET `HQ`='%d' WHERE `ID`='%d'", id, PlayerInfo[playerid][pClan]);
	mysql_tquery(SQL, gQuery, "", "");
	gString[0] = EOS;
	format(gString, sizeof(gString), "(/createclanhq) {FFFFFF}%s create a hq with the price %s.", GetName(playerid), FormatNumbers(price));
	SendAdminMessage(COLOR_GOLD, gString, 5);
	return true;
}
YCMD:findclanhq(playerid, params[], help) {
	if(CP[playerid] != 0 || targetfind[playerid] != -1) return Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
	new id;
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/findclanhq <HQ id>");
	SetPlayerCheckpointEx(playerid, ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ], 3.0);
	CP[playerid] = 53;
	SCMf(playerid, COLOR_YELLOW, "Ti-am pus un checkpoint pe mapa la HQ %d.", id);
	return true;
}
YCMD:moveclanhq(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti autorizat sa folosesti aceasta comanda.");
	new id;
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/moveclanhq <HQ id>");
	new Float: Pos[3], query[128];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	ClanHQInfo[id][cPosX] = Pos[0];
	ClanHQInfo[id][cPosY] = Pos[1];
	ClanHQInfo[id][cPosZ] = Pos[2];
	mysql_format(SQL, query, sizeof(query), "UPDATE `clanhq` SET `PosX`='%f', `PosY`='%f', `PosZ`='%f' WHERE `ID`='%d'", ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ], ClanHQInfo[id][cID]);
	mysql_tquery(SQL, query, "", "");
	SCMf(playerid, COLOR_GOLD, "Ai mutat cu succes clan HQ cu id %d.", id);
	UpdateLabel(4, id);
	return true;
}
YCMD:gotoclanhq(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 3) return true;
	new id;
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gotoclanhq <hq id>");
	if(ClanHQInfo[id][cPrice] == 0) return SCM(playerid, COLOR_GREY, "Invalid!");
	SetPlayerPosEx(false, playerid, ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SCMf(playerid, COLOR_WHITE, "Te-ai teleportat cu succes la clan hq-ul %d.", id);
	return true;
}
YCMD:buyclanhq(playerid, params[], help) {
	if(PlayerInfo[playerid][pClan] == 0 && PlayerInfo[playerid][pClanRank] != 6) return SCM(playerid, COLOR_LGREEN, "Error: Doar leader-ul clanului poate cumpara un clan.");
	new idd = PlayerInfo[playerid][pClan];
	if(ClanInfo[idd][clHQ] > 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai deja un clan HQ!");
	for(new i = 1; i < sizeof(ClanHQInfo); i++) {
		if(PlayerToPoint(2, playerid, ClanHQInfo[i][cPosX], ClanHQInfo[i][cPosY], ClanHQInfo[i][cPosZ])) {
			if(ClanHQInfo[i][cClan] != 0) return SCM(playerid, COLOR_LGREEN, "Error: Acest clan este cumparat deja.");
			if(ClanInfo[idd][clPremiumPoints] < ClanHQInfo[i][cPrice]) return SCM(playerid, COLOR_LGREEN, "Error: Fonduri insuficiente!");
			ClanInfo[idd][clPremiumPoints] -= ClanHQInfo[i][cPrice];
			ClanHQInfo[i][cClan] = PlayerInfo[playerid][pClan];
			ClanInfo[idd][clHQ] = i;
			gString[0] = EOS;
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `clans` SET `PremiumPoints`='%d', `HQ`='%d' WHERE `ID`='%d'", ClanInfo[idd][clPremiumPoints], i, idd);
			mysql_tquery(SQL, gQuery, "", "");
			mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `clanhq` SET `Clan`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pClan], i);
			mysql_tquery(SQL, gQuery, "", "");
			format(gString, sizeof(gString), "{%s}[CLAN INFO] {FFFFFF}%s a cumparat HQ %d pentru %d Premium Points.", ClanInfo[PlayerInfo[playerid][pClan]][clColor], GetName(playerid), i, ClanHQInfo[i][cPrice]);
			SendClanMessage(PlayerInfo[playerid][pClan], gString);
			UpdateLabel(4, i);
			break;
		}
	}
	return true;
}
function GetTimeEx(time) {
	new timex = gettime() - time, days=0;
	while(timex >= 86400) {
		timex -= 86400;
		days ++;
	}
	return days;
}


function GetTimeNew(days) {
	new timex = gettime();
	while(days >= 1) {
		days --;
		timex -= 86400;
	}
	return timex;
}
YCMD:clanzones(playerid, params[], help) {
	new clanid = PlayerInfo[playerid][pClan];
	if(clanid == 0) return SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	new szDialog[1024], szDialog2[1524], szZone[180];
	strcat(szDialog2, "#\tLocation\tOwned by\n");
	for(new j = 0; j < MAX_SAFEZONES; j++) {
		if(j != 0) {
			GetPlayer3DZone2(GraffitiInfo[j][gfX], GraffitiInfo[j][gfY], GraffitiInfo[j][gfZ], szZone, sizeof(szZone));
			if(GraffitiInfo[j][gfOwned] == 0) format(szDialog, sizeof(szDialog), "%d.\t%s\tServer\n", j, szZone);
			else format(szDialog, sizeof(szDialog), "%d.\t%s\t{%s}%s{FFFFFF}\n", j, szZone, ClanInfo[GraffitiInfo[j][gfOwned]][clColor], ClanInfo[GraffitiInfo[j][gfOwned]][clName]);
			strcat(szDialog2, szDialog);
		}
	}
	Dialog_Show(playerid, DIALOG_CLANTURFS, DIALOG_STYLE_TABLIST_HEADERS, "Clan Turfs", szDialog2, "Select", "Cancel");
	return true;
}
YCMD:spray(playerid, params[], help) {
	new clanid = PlayerInfo[playerid][pClan], string[180];
	if(clanid == 0) return SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	if(ClanDuty[playerid] == 0) return SCM(playerid,-1,"Nu esti la datorie!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda atata timp cat esti intr-un vehicul!");
	if(StartedSpray2[playerid] == 1) return true;
	if(StartedSpray[playerid] == 0) ClanProces[playerid] = 0;	
	new hour,minute,second, year, month, day;
	gettime(hour,minute,second);
	getdate(year, month, day);
	if(hour >= 00 && hour < 8) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in intervalul 00-08.");
	for(new h = 0; h < MAX_SAFEZONES; h++) {
		if(PlayerToPoint(8, playerid, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ])) {
			if(StartedSprayOn[playerid] != 0 && StartedSprayOn[playerid] != h) SCM(playerid, COLOR_LGREEN, "Error: Nu poti desena pe acest perete!");
			else if(GraffitiInfo[h][gfOwned] == PlayerInfo[playerid][pClan]) SCM(playerid, COLOR_LGREEN, "Error: Acest perete este detinut de clanul tau!");
			//else if(CountWallSpray(h) == 1) SCM(playerid, COLOR_LGREEN, "Error: Mai este o persoana care deseneaza pe acest perete!");
			else {
				if(StartedSpray[playerid] == 0) {
					if(GraffitiInfo[h][gfOwned] == 0) format(string, sizeof(string), "Ai inceput sa scrii pe peretele cu id-ul %d, detinut de clanul: Server", h);
					else format(string, sizeof(string), "Ai inceput sa scrii pe peretele cu id-ul %d, detinut de clanul: %s", h, ClanInfo[GraffitiInfo[h][gfOwned]][clName]);
					SCM(playerid, COLOR_LIGHTBLUE, string);
					GraffitiInfo[h][gfAttacked] = clanid;
					format(string, sizeof(string), "{%s}%s (din clanul %s) a inceput sa deseneze pe peretele clanului tau (turf id %d).", ClanInfo[GraffitiInfo[h][gfOwned]][clColor], GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clName], h);
					SendClanMessage(GraffitiInfo[h][gfOwned], string);
				}
				ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SetTimerEx( "FinalProces", 4000, 0, "d", playerid );
				StartedSpray[playerid] = 1;
				StartedSpray2[playerid] = 1;
				StartedSprayOn[playerid] = h;
			}
		}
	}
	return true;
}

function CountWallSpray(id) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && StartedSprayOn[i] == id) return true;
	}
	return false;
}

function FinalProces(playerid) {
	if(IsPlayerConnected(playerid) && StartedSpray[playerid] == 1) {
		ClearAnimations(playerid);
		new string[180];
		new test = 7 + random(6);
		ClanProces[playerid] += test;
		if(ClanProces[playerid] >= 100) {
			new tagname[180];
			new i = StartedSprayOn[playerid];
			format(string, sizeof(string), "{%s}%s (din clanul %s) a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clName], i);
			SendClanMessage(GraffitiInfo[i][gfOwned], string);
			format(string, sizeof(string), "{%s}%s a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], GetName(playerid), i);
			SendClanMessage(PlayerInfo[playerid][pClan], string);
			GraffitiInfo[i][gfOwned] = PlayerInfo[playerid][pClan];
			DestroyDynamicObject(GraffitiInfo[i][gfObject]);
			GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], 0.0, 0.0, GraffitiInfo[i][gfRot]);
			format(tagname, sizeof(tagname), "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
			SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, tagname, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			
			GraffitiInfo[StartedSprayOn[playerid]][gfAttacked] = 0;
			new query[256];
			mysql_format(SQL, query, sizeof(query), "UPDATE `graffiti` SET `Owned`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pClan], i);
			mysql_tquery(SQL, query, "", "");
			StartedSpray[playerid] = 0;
			StartedSpray2[playerid] = 0;
			StartedSprayOn[playerid] = 0;
		}
		else {
			format(string, sizeof(string), "Continua sa desenezi peretele! (%d%s)", ClanProces[playerid], "%%");
			SCM(playerid, COLOR_GOLD, string);
		}
		StartedSpray2[playerid] = 0;
	}
	return true;
}
YCMD:clan(playerid, params[], help) {
	if(PlayerInfo[playerid][pClan] == 0) return  SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	Dialog_Show(playerid, DIALOG_CLAN_COMMAND, DIALOG_STYLE_LIST, "Clan:", "Comenzile clanului\nMembrii clanului\nSetari\nTag\nDeposit Premium Points\nVehicles", "Select", "Close");
	return true;
}
YCMD:sellclan(playerid, params[], help) {
	if(PlayerInfo[playerid][pClan] == 0 || PlayerInfo[playerid][pClanRank] < 6) return SCM(playerid, COLOR_GREY, "Nu esti detinatorul unui clan!");
	new id, money;
	if(sscanf(params, "ui", id, money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/sellclan <playerid/name> <money>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(money < 500000 || money > 100000000) return SCM(playerid, COLOR_GREY, "Un clan se poate vinde pe Toi thieu $500,000 si va toi da $100,000,000.");
	if(PlayerInfo[id][pClan] != 0) return SCM(playerid, COLOR_GREY, "Acel player este deja intr-un clan!");
	if(PlayerMoney(id, money)) return SCM(playerid, COLOR_GREY, "Acel player nu are suma de bani necesara!");
	new string[180];
	format(string, sizeof(string), "I-ai oferit lui %s (%d) clanul tau (%s) in schimbul sumei de $%s", GetName(id), id, ClanInfo[PlayerInfo[playerid][pClan]][clName], FormatNumber(money));
	MesajLung(playerid, COLOR_MONEY, string);
	new cid = PlayerInfo[playerid][pClan];
	format(string, sizeof(string), "%s (%d) ti-a oferit clanul lui (%s) [%d sloturi, %d membrii, %d days, tag %s] in schimbul sumei de $%s", GetName(playerid), playerid, ClanInfo[PlayerInfo[playerid][pClan]][clName], ClanInfo[cid][clSlots], GetCMembers(PlayerInfo[playerid][pClan]), ClanInfo[cid][clDays], ClanInfo[cid][clTag], FormatNumber(money));
	MesajLung(id, COLOR_MONEY, string);	
	format(string, sizeof(string), "Foloseste comanda (/accept clan %d) pentru a accepta oferta primita.", playerid);
	SCM(id, COLOR_MONEY, string);
	SetPVarInt(id, "OfferedClan", playerid);
	SetPVarInt(id, "ClanMoney", money);
	SetPVarInt(id, "SellClan", PlayerInfo[playerid][pClan]);
	return true;
}
YCMD:clanchat(playerid, params[], help) {
	new
		message[220],
		string[220],
		clanid = PlayerInfo[playerid][pClan];

	//if(IsPlayerLogged[playerid] == 0) return true;
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}	
	if(clanid == 0) return SCM(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	if(sscanf(params, "s[160]", message)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/clanchat <text>");
	if(togclan[playerid] == 1) return SCM(playerid, COLOR_GREY, "Ai dezactivat chat-ul clanului.");
	if(FaceReclama(message)) return Reclama(playerid, message);
	switch(PlayerInfo[playerid][pClanRank]) {
		case 1: format(string, sizeof(string), "{%s}[CLAN] {%s}%s {%s}%s: %s", ClanInfo[clanid][clColor], ClanInfo[clanid][clRankColor1], ClanInfo[clanid][clRankName1], ClanInfo[clanid][clColor], GetName(playerid), message);
		case 2: format(string, sizeof(string), "{%s}[CLAN] {%s}%s {%s}%s: %s", ClanInfo[clanid][clColor], ClanInfo[clanid][clRankColor2], ClanInfo[clanid][clRankName2], ClanInfo[clanid][clColor], GetName(playerid), message);
		case 3: format(string, sizeof(string), "{%s}[CLAN] {%s}%s {%s}%s: %s", ClanInfo[clanid][clColor], ClanInfo[clanid][clRankColor3], ClanInfo[clanid][clRankName3], ClanInfo[clanid][clColor], GetName(playerid), message);
		case 4: format(string, sizeof(string), "{%s}[CLAN] {%s}%s {%s}%s: %s", ClanInfo[clanid][clColor], ClanInfo[clanid][clRankColor4], ClanInfo[clanid][clRankName4], ClanInfo[clanid][clColor], GetName(playerid), message);
		case 5: format(string, sizeof(string), "{%s}[CLAN] {%s}%s {%s}%s: %s", ClanInfo[clanid][clColor], ClanInfo[clanid][clRankColor5], ClanInfo[clanid][clRankName5], ClanInfo[clanid][clColor], GetName(playerid), message);
		case 6: format(string, sizeof(string), "{%s}[CLAN] {%s}%s {%s}%s: %s", ClanInfo[clanid][clColor], ClanInfo[clanid][clRankColor6], ClanInfo[clanid][clRankName6], ClanInfo[clanid][clColor], GetName(playerid), message);
	}
	SendClanMessage(clanid, string);
	return true;
}

stock SendClanMessage(clanid, text[]) {
	new string[180];
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1 && clanid != 0) {
			if(PlayerInfo[i][pClan] == clanid && togclan[i] == 0) SCM(i, COLOR_WHITE, text);
			if(SpecClan[i] == clanid) {
				format(string, sizeof(string), "{9C91FF}* %s", text);
				SCM(i, 0x9C91FFFF, string);
			}
		}
	}
	return true;
}
YCMD:cinvite(playerid, params[], help) {
	new userID, string[180], clanid = PlayerInfo[playerid][pClan];
	//if(IsPlayerLogged[playerid] == 0) return true;
	if(sscanf(params, "u", userID)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/cinvite <playerid/name>");
	if(!ProxDetectorS(5.0, playerid, userID)) return SCM(playerid, COLOR_GREY, "Nu esti langa acel player!");
	if(userID == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(!IsPlayerLogged[userID] && !IsPlayerConnected(playerid)) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(PlayerInfo[playerid][pClan] == 0) return SCM(playerid, COLOR_WHITE, "La aceasta comanda au acces doar cei care fac parte dintr-un clan oficial.");
	if(PlayerInfo[playerid][pClanRank] < 5) return SCM(playerid, COLOR_WHITE, "La aceasta categorie, are acces doar propietarul clanului si co-liderul.");
	if(PlayerInfo[userID][pClan] != 0) return SCM(playerid, COLOR_WHITE, "Jucatorul invitat este deja intr-un clan!");
	if(GetCMembers(PlayerInfo[playerid][pClan]) >= ClanInfo[clanid][clSlots]) return SCM(playerid, COLOR_GREY, "Nu mai poti baga membrii in clan deoarece e plin.");
	format(string, sizeof(string), "I-ai trimis o invitatie lui %s de intrare in clan.", GetName(userID));
	SCM(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Ai fost invitat in clanul %s cu tagul %s de catre %s.", ClanInfo[clanid][clName], ClanInfo[clanid][clTag], GetName(playerid));
	SCM(userID, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Foloseste /accept cinvite %d pentru a accepta invitatia de a intra in clan.", playerid);
	SCM(userID, COLOR_LIGHTBLUE, string);
	InvitedClan[userID] = clanid;
	InvitedBy[userID] = playerid;
	return true;
}
YCMD:rpforall(playerid, params[], help) {
	new szMessage[180], rp;
	if(sscanf(params, "i", rp)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/rpforall <amount>");
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			PlayerInfo[i][pExp] += rp;
			Update(i, pExp);
			format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat %d RP-uri ca bonus!",GetName(playerid), rp);
			SCM(i,COLOR_WHITE,szMessage);
			UpdateProgress(i);
		}
	}
	return true;
}
YCMD:levelupall(playerid, params[], help) {
	new szMessage[180];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			new playerlevel = PlayerInfo[i][pLevel];
			PlayerInfo[i][pLevel] = playerlevel + 1;
			Update(i, pLevelx);
			SetPlayerScore(i,PlayerInfo[i][pLevel]);
			format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat un level up ca bonus iar acum ai level %d! ",GetName(playerid), PlayerInfo[i][pLevel]);
			SCM(i,COLOR_WHITE,szMessage);
			UpdateProgress(i);
		}
	}
	return true;
}

YCMD:voucherforall(playerid, params[], help) {
	new type, crate, szMessage[180];
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	if(sscanf(params, "ii", type, crate)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/voucherforall <type> <amount>");
		SCM(playerid, COLOR_GREY, "Rare vouchers(1) | Epic vouchers(2)  | Legendary vouchers(3)");
		return true;
	}
	if(type < 1 && type > 3) return SCM(playerid, COLOR_GREY, "Invalid.");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			PlayerInfo[i][pVoucher][type-1] += crate;
			if(type == 1) format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat %d Rare vouchers ca bonus!", GetName(playerid), crate);
			if(type == 2) format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat %d Epic vouchers ca bonus!", GetName(playerid), crate);
			if(type == 3) format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat %d Legendary vouchers ca bonus!", GetName(playerid), crate);
			SCM(i,COLOR_WHITE,szMessage);
			save_vouchers(i);
		}
	}
	return true;
}
YCMD:ppforall(playerid, params[], help) {
	new money, szMessage[180];
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	if(sscanf(params, "i", money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/ppforall <amount>");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			PlayerInfo[i][pPremiumPoints] += money;
			Update(i, pPremiumPointsx);
			format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat %s Premium Points ca bonus!", GetName(playerid), FormatNumber(money));
			SCM(i,COLOR_WHITE,szMessage);
		}
	}
	return true;
}
YCMD:hpforall(playerid, params[], help) {
	new money, szMessage[180];
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	if(sscanf(params, "i", money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/hpforall <amount>");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			PlayerInfo[i][pHpoints] += money;
			Update(i, pHpointsx);
			format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat %s RPoints ca bonus!", GetName(playerid), FormatNumber(money));
			SCM(i,COLOR_WHITE,szMessage);
		}
	}
	return true;
}
YCMD:gpforall(playerid, params[], help) {
	new money, szMessage[180];
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	if(sscanf(params, "i", money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gpforall <amount>");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			PlayerInfo[i][pGiftPoints] += money;
			Update(i, pGiftPointsx);
			format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat %s Gift Points ca bonus!", GetName(playerid), FormatNumber(money));
			SCM(i,COLOR_WHITE,szMessage);
		}
	}
	return true;
}
YCMD:givemoney(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new money[25],id;
	if(sscanf(params, "us[25]",id,money)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/givemoney <playerid/name> <Suma>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");

	if(CheckerBigInt(money) != 0) return true;
	Translate32Bit(StoreMoney[id], MoneyMoney[id], money);

	gString[0] = EOS;
	format(gString, sizeof(gString), "(/givemoney) {FFFFFF}%s give %s, $%s money", GetName(playerid), GetName(id), FormatNumberss(money));
	SendAdminMessage(COLOR_WARNING, gString, 5);
	format(gString, sizeof(gString), "Admin-ul %s ti-a dat $%s", GetName(playerid), FormatNumberss(money));
	SCM(id, COLOR_WHITE, gString);
	Update(id, pCashx);
	format(gString, sizeof(gString), "%s a primit $%s de la %s", GetName(id), FormatNumberss(money), GetName(playerid));
	InsertLog(id, gString, LOG_MONEY);
	return true;
}
YCMD:moneyforall(playerid, params[], help) {
	new money[20], szMessage[180];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	if(sscanf(params, "s[20]", money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/moneyforall <money>");
	if(CheckerBigInt(money) != 0) return true;

	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			Translate32Bit(StoreMoney[i], MoneyMoney[i], money);
			format(szMessage, sizeof(szMessage), "* Administratorul {F03636}%s{FFFFFF} ti-a dat $%s ca bonus!", GetName(playerid), FormatNumberss(money));
			SCM(i,COLOR_WHITE,szMessage);
		}
	}
	return true;
}

stock GetNeedPointsR2(rank, faction) {
	new points;
	new x = faction;
	switch(rank) {
		case 1: points = FactionInfo[x][fRank1];
		case 2: points = FactionInfo[x][fRank2];
		case 3: points = FactionInfo[x][fRank3];
		case 4: points = FactionInfo[x][fRank4];
		case 5: points = FactionInfo[x][fRank5];
		case 6: points = FactionInfo[x][fRank6];
	}
	return points;
}
YCMD:blacklist(playerid, params[], help) {
	if(PlayerInfo[playerid][pLeader] == 0) return true;
	new szQuery[256], szString[180], szDialog[1024], szDialog2[1024], onf, x, szTitle[180];
	format(szQuery, sizeof(szQuery), "SELECT * FROM `blacklist` WHERE `Faction`='%d'", PlayerInfo[playerid][pLeader]);
	new Cache: result = mysql_query(SQL, szQuery);
	strcat(szDialog2, "{FFB469}(+) Adaugare jucator{FFFFFF}\n");
	for(new i, j = cache_num_rows(); i != j; ++i) {
		cache_get_value_name(i, "Name", szString);
		format(Selected[playerid][x], MAX_PLAYER_NAME, szString);
		new userID = GetPlayerID( szString );
		if(userID != INVALID_PLAYER_ID) {
			onf++;
			format(szDialog, sizeof(szDialog), "{13E300}%s (%d){FFFFFF}\n", szString, userID);
			strcat(szDialog2, szDialog);
		}
		else {
			format(szDialog, sizeof(szDialog), "{FF0000}%s{FFFFFF}\n", szString);
			strcat(szDialog2, szDialog);
		}
		x++;
	}
	cache_delete(result);
	format(szTitle, sizeof(szTitle), "Blacklist: %d", x);
	Dialog_Show(playerid, DIALOG_BLACKLIST, DIALOG_STYLE_LIST, szTitle, szDialog2, "Select", "Back");
	return true;
}
YCMD:myblacklist(playerid, params[], help) {
	new szQuery[256], szString[180], szDialog[1024], szDialog2[1024], x;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `blacklist` WHERE `Userid` = '%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: result = mysql_query(SQL, szQuery);

	new faction, addby[180];
	strcat(szDialog2, "Factiune\tAdaugat de\n");
	for(new i, j = cache_num_rows(); i != j; ++i)
	{
		cache_get_value_name(i, "Faction", szString);
		faction = strval(szString);
		cache_get_value_name(i, "Added", szString);
		format(addby, 256, szString);
		format(szDialog, 1024, "%d. %s\t%s\n", x+1, FactionName(faction), addby);
		strcat(szDialog2, szDialog);
		SelectedFaction2[playerid][x] = faction;
		x++;
	}
	cache_delete(result);
	if(x == 0) return SCM(playerid, -1, "Nu esti pe blacklist-ul unei factiuni!");
	Dialog_Show(playerid, DIALOG_MYBL, DIALOG_STYLE_TABLIST_HEADERS, "My blacklist:", szDialog2, "Ok", "Iesi");
	return true;
}

function IsInBlacklist(playerid, fid) {
	new szQuery[256], adev;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `blacklist` WHERE `Userid`='%d' AND `Faction`='%d'", PlayerInfo[playerid][pSQLID], fid);
	new Cache: result = mysql_query(SQL, szQuery);
	for(new i, j = cache_num_rows(); i != j; ++i) adev ++;
	cache_delete(result);
	if(adev != 0) return true;
	return false;
}
YCMD:myraport(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid, COLOR_LGREEN, "Nu faci parte dintr-o factiune!");
	new string[180], szDialog[1024];
	if(IsACop(playerid)) {
		format(string, sizeof(string), "Runners: %d\n", PlayerInfo[playerid][pCommands][0]);
		strcat(szDialog, string);	
		format(string, sizeof(string), "Arestari: %d\n", PlayerInfo[playerid][pCommands][1]);
		strcat(szDialog, string);
		format(string, sizeof(string), "Amenzi acordate: %d\n", PlayerInfo[playerid][pCommands][2]);
		strcat(szDialog, string);		
		format(string, sizeof(string), "Permise confiscate: %d\n", PlayerInfo[playerid][pCommands][3]);
		strcat(szDialog, string);	
		format(string, sizeof(string), "Droguri confiscate: %d\n", PlayerInfo[playerid][pCommands][4]);
		strcat(szDialog, string);	
	}
	else {
		format(string, sizeof(string), "Comenzi efectuate: %d/%d\n", PlayerInfo[playerid][pCommands][0], GetNeedPointsR2(PlayerInfo[playerid][pRank], PlayerInfo[playerid][pMember]));
		strcat(szDialog, string);
		format(string, sizeof(string), "Status raport: %s", (GetNeedPointsR2(PlayerInfo[playerid][pRank], PlayerInfo[playerid][pMember])-PlayerInfo[playerid][pCommands] <= 0) ? ("{0DFF00}Terminat{FFFFFF}") : ("{FF0000}Neterminat{FFFFFF}"));
		strcat(szDialog, string);
	}
	Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Raport", szDialog, "Ok", "");
	return true;
}

function JobProgress(playerid) {
	new string[128];	
	if(GetPlayerSkill(playerid) == 5) format(string, sizeof(string), "Progres job %s: %d (skill maxim)", JobInfo[PlayerInfo[playerid][pJob]][jName], JoPlayPoints(playerid));
	else format(string, sizeof(string), "Progres job %s: %d/%d (%d necesare pentru urmatorul skill)", JobInfo[PlayerInfo[playerid][pJob]][jName], JoPlayPoints(playerid), GetNeedPoints(playerid, PlayerInfo[playerid][pJob]), GetNeedPoints(playerid, PlayerInfo[playerid][pJob])-JoPlayPoints(playerid));
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}

function UpdateFactionRaport(playerid, type) {
	new query[256], string[128];
	if(type <= 4) {
		PlayerInfo[playerid][pCommands][type] ++;
		if(type == 0) format(query, sizeof(query), "UPDATE `users` SET `Commands`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pCommands][type], PlayerInfo[playerid][pSQLID]);
		else format(query, sizeof(query), "UPDATE `users` SET `Commands%d`='%d' WHERE `ID`='%d'", type+1, PlayerInfo[playerid][pCommands][type], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, query, "", "");
	}
	if(tograport[playerid] == 0) {	
		switch(type) {
			case 0: {
				if(IsACop(playerid)) format(string, sizeof(string), "Runners: %d", PlayerInfo[playerid][pCommands][type]);
				else if(IsAMember(playerid)) format(string, sizeof(string), "Activitate war: %d", PlayerInfo[playerid][pCommands][type]);
				else if(PlayerInfo[playerid][pMember] == 12) format(string, sizeof(string), "Playeri dusi la destinatie: %d", PlayerInfo[playerid][pCommands][type]);
				else if(PlayerInfo[playerid][pMember] == 9) format(string, sizeof(string), "Anunturi/Live-uri: %d", PlayerInfo[playerid][pCommands][type]);
				else if(PlayerInfo[playerid][pMember] == 8) format(string, sizeof(string), "Vehicule tractate/Servicii acordate: %d", PlayerInfo[playerid][pCommands][type]);
				else if(PlayerInfo[playerid][pMember] == 7) format(string, sizeof(string), "Licente acordate: %d", PlayerInfo[playerid][pCommands][type]);
				else if(PlayerInfo[playerid][pMember] == 13) format(string, sizeof(string), "Playeri salvati: %d", PlayerInfo[playerid][pCommands][type]);
				else if(PlayerInfo[playerid][pMember] == 11) format(string, sizeof(string), "Contracte: %d", PlayerInfo[playerid][pCommands][type]);
				else format(string, sizeof(string), "Progres raport: %d", PlayerInfo[playerid][pCommands][type]);
			}
			case 1: {
				if(IsACop(playerid)) format(string, sizeof(string), "Arrests: %d", PlayerInfo[playerid][pCommands][type]);
			}
			case 2: {
				if(IsACop(playerid)) format(string, sizeof(string), "Tickets: %d", PlayerInfo[playerid][pCommands][type]);
			}
			case 3: {
				if(IsACop(playerid)) format(string, sizeof(string), "Licences confiscated: %d", PlayerInfo[playerid][pCommands][type]);
			}
			case 4: {
				if(IsACop(playerid)) format(string, sizeof(string), "Drugs confiscated: %d", PlayerInfo[playerid][pCommands][type]);
			}	
		}
		SCM(playerid, COLOR_YELLOW, string);
	}
	return true;
}

YCMD:fly(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(IsPlayerInAnyVehicle(playerid)) {
		new Float: x, Float:y, Float:z;
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);		
		SetVehicleVelocity(GetPlayerVehicleID(playerid),x, y, z + 0.5);	
		return true;
	}

	if(UsedFly[playerid] == 0) {
		StartFly(playerid);
		UsedFly[playerid] = 1;
		SetPlayerHealthEx(playerid, 100000000);
	}
	else if(UsedFly[playerid] == 1) {
		StopFly(playerid);
		UsedFly[playerid] = 0;
		SetPlayerHealthEx(playerid, 99);
		SCM(playerid, 0xFFADADFF, "Fly mode off.");
	}
	return true;
}
	
function SaveMissions(playerid) {
	Update(playerid, pDailyMissionx);
	Update(playerid, pDailyMission2x);
	Update(playerid, pProgressx);
	Update(playerid, pProgress2x);
	return true;
}
YCMD:alias(playerid, params[], help) {	
	new userID, playerip[36], playersip[36], count, szMessage[180], text[180];
	if(sscanf(params, "u", userID)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/alias <playerid/name>");
	if(PlayerInfo[playerid][pAdmin] < 3) return true;
	GetPlayerIp(userID, playerip, sizeof(playerip));
	if(IsPlayerConnected(userID)) {
		foreach(new i: Player) {
			if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1 && PlayerInfo[i][pAdmin] < 5) {
				GetPlayerIp(i, playersip, sizeof(playersip));
				if(!strcmp(playerip, playersip)) {
					format(text, sizeof(text), "%s %s", text, GetName(i));
					format(szMessage, 256, "* %s", text);
					count ++;
				}
			}
		}
		if(count == 1) return SCM(playerid, -1, "Acest player nu are mai multe conturi online!");
		new string[180];
		format(string, sizeof(string), "> %s, are %d conturi conectate. <", GetName(userID), count);
		SCM(playerid, COLOR_LGREEN, string);
		SCM(playerid, COLOR_LGREEN, szMessage);
		return true;
	}
	return true;
}
YCMD:tpevent(playerid, params[], help) {
	if(EventStatus == 0) return SCM(playerid, COLOR_GREY, "Nu este un event activ!");
	if(InEvent[playerid] == 1) return true;
	if(JobWorking[playerid] == 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti participa la eveniment deoarece muncesti!");
	if(OnDuty[playerid] == 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti participa la eveniment deoarece esti la datorie!");
	if(PlayerInfo[playerid][pJailTime] != 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti participa la eveniment deoarece esti in inchisoare!");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti participa la eveniment deoarece esti urmarit de politie!");
	if(PlayerInfo[playerid][pSleeping] == 1) return true;
	if(InWar[PlayerInfo[playerid][pMember]] == 1) return SCM(playerid, COLOR_LGREEN, "Error: Esti la war, nu poti veni participa la eveniment!");
	if(PaintType[playerid] != 0) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti participa la eveniment deoarece esti in paintball. (/paintleave)");
	if(Escape[playerid] == 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti merge la event deoarece evadezi!");
	SCM(playerid, COLOR_YELLOW, "Bine ai venit la event!");
	SetPlayerInterior(playerid, EventInt);
	SetPlayerVirtualWorld(playerid, EventVW);
	SetPlayerPosEx(false, playerid, etp[0], etp[1], etp[2]);
	SetPlayerArmourEx(playerid, 0);
	ResetWeapons(playerid);
	return true;
}
YCMD:starttp(playerid, params[], help) {
	new result[180], szMessage[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces!");
	if(EventStatus == 0) {
		if(sscanf(params, "s[180]", result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/starttp <text>");
		if(FaceReclama(result)) return RemoveFunction(playerid, result);
		GetPlayerPos(playerid, etp[0], etp[1], etp[2]);
		SCMTA(0xFF8400FF, "Event Time:");
		format(szMessage, 256,"Admin %s face event %s.", GetName(playerid), result);
		SCMTA(0xFF8400FF, szMessage);
		SCMTA(0xFF8400FF, "Pentru a participa la event, foloseste /tpevent!");
		EventStatus = 1;
		EventInt = GetPlayerInterior(playerid);
		EventVW = GetPlayerVirtualWorld(playerid);
	}
	else {
		format(szMessage, 256,"Inscrierile pentru eveniment au fost incheiate!");
		SCMTA(0xFF8400FF, szMessage);
		EventStatus = 0;
	}
	return true;
}
YCMD:licitatie(playerid, params[], help) {
	new item[50], id, time, string[180];
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	if(Licitatie == 1) return SCM(playerid, -1, "Este deja o licitatie activa!");
	if(sscanf(params, "s[50]ii", item, id, time)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/licitatie <tip> <id> <minute>");
		SCM(playerid, COLOR_WHITE, "Valabile: Casa, Bizz.");
		return true;
	}
	if(strcmp(item, "casa", true, strlen(item)) == 0) TipLicitatie = 1;
	else if(strcmp(item, "bizz", true, strlen(item)) == 0) TipLicitatie = 2;
	else return SCM(playerid, COLOR_GREY, "Tip invalid!");

	Licitatie = 1;
	TimpLicitatie = time*60;
	TotalBani = 0;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) TotalMoney[i] = 0;
	}
	IDLicitatie = id;
	LastPlayer = -1;

	foreach(new i: Player) {
		if(IsPlayerConnected(i) && toglicitatie[i] == 0) {
			SCM(i, COLOR_YELLOW, "O licitatie tocmai a inceput. Optiunea de a vedea mesajele de la licitatie este dezactivata.");
			SCM(i, COLOR_YELLOW, "Daca vrei sa vezi mesajele, foloseste comanda /tog iar daca vrei sa vezi pentru ce se liciteaza, foloseste /info.");
		}
	}
	
	MesajLicitatie(0x7A45FFFF, "O noua licitatie tocmai a inceput!");
	switch(TipLicitatie) {
		case 1: format(string, sizeof(string), "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d). ", id, id);
		case 2: format(string, sizeof(string), "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d). ", id, id);
	}
	MesajLicitatie(0x7A45FFFF, string);
	format(string, sizeof(string), "Ai la dispozitie %d minute pentru a licita.", time);
	MesajLicitatie(0x7A45FFFF, string);
	MesajLicitatie(0x7A45FFFF, "Lenh co san: (/bid - licitezi), (/info - informatii)");
	return true;
}
YCMD:info(playerid, params[], help) {
	if(Licitatie == 0) return SCM(playerid, -1, "Nu este o licitatie activa!");
	new id = IDLicitatie, string[180];
	switch(TipLicitatie) {
		case 1: format(string, sizeof(string), "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d).", id, id);
		case 2: format(string, sizeof(string), "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d).", id, id);
	}
	SCM(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "Timp disponibil pentru a licita: %s", CalculeazaTimp2(TimpLicitatie));
	SCM(playerid, COLOR_YELLOW, string);
	if(LastPlayer == INVALID_PLAYER_ID || LastPlayer == -1) format(string, sizeof(string), "Ultimul care a licitat: Unknown | Suma: $%s", FormatNumber(TotalBani)); 
	else format(string, sizeof(string), "Ultimul care a licitat: %s | Suma: $%s", GetName(LastPlayer), FormatNumber(TotalBani));			
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
YCMD:auctions(playerid, params[], help) {
	new szDialog[1024], szDialog2[1024];
	SCM(playerid, COLOR_LGREEN, "> Houses");
	for(new i = 1; i < sizeof(HouseInfo); i++) {
		if(strcmp(HouseInfo[i][hOwner],"The State",true) == 0 && HouseInfo[i][hOwned] == 1) {
			format(szDialog, sizeof(szDialog), "%d, ", i);
			strcat(szDialog2, szDialog);
		}
	}
	MesajLung(playerid, COLOR_LGREEN, szDialog2);
	SCM(playerid, COLOR_LGREEN, "");
	szDialog2 = "";
	
	SCM(playerid, COLOR_LGREEN, "> Businesses");
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(strcmp(BizzInfo[i][bOwner],"The State",true) == 0 && BizzInfo[i][bOwned] == 1) {
			format(szDialog, sizeof(szDialog), "%d, ", i);
			strcat(szDialog2, szDialog);
		}
	}
	MesajLung(playerid, COLOR_LGREEN, szDialog2);
	return true;
}
YCMD:bid(playerid, params[], help) {
	new suma, string[180];
	if(Licitatie == 0) return SCM(playerid, -1, "Nu este o licitatie activa!");
	if(PlayerInfo[playerid][pLevel] < 5 && TipLicitatie == 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti licita pentru o casa daca nu ai level 5+!");
	if(PlayerInfo[playerid][pLevel] < 7 && TipLicitatie == 2) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti licita pentru o afacere daca nu ai level 5+!");
	if(sscanf(params, "i", suma)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/bid <suma>");
		new id = IDLicitatie;
		switch(TipLicitatie) {
			case 1: format(string, sizeof(string), "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d).", id, id);
			case 2: format(string, sizeof(string), "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d).", id, id);
		}
		SCM(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Timp disponibil pentru a licita: %s", CalculeazaTimp2(TimpLicitatie));
		SCM(playerid, COLOR_YELLOW, string);
		if(LastPlayer == INVALID_PLAYER_ID || LastPlayer == -1) format(string, sizeof(string), "Ultimul care a licitat: Unknown | Suma: $%s", FormatNumber(TotalBani)); 
		else format(string, sizeof(string), "Ultimul care a licitat: %s | Suma: $%s", GetName(LastPlayer), FormatNumber(TotalBani));			
		SCM(playerid, COLOR_YELLOW, string);
		return true;
	} 
	if(suma < 50000) return SCM(playerid, COLOR_GREY, "Suma minima este de $50,000!");
	if(PlayerMoney(playerid, TotalBani)) return SCM(playerid, -1, "Ban khong du tien!");
	if(PlayerMoney(playerid, suma)) return SCM(playerid, -1, "Ban khong du tien!");
	if(suma < TotalBani+50000 && TotalBani != 0) {
		format(string, sizeof(string), "Suma invalida! Poti licita minim $%s.", FormatNumber(TotalBani+50000));
		SCM(playerid, COLOR_GREY, string);
		return true;
	}	
	if(TipLicitatie == 1) {
		if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) return SCM(playerid, COLOR_WHITE, "Ai deja o casa!");
	}
	else if(TipLicitatie == 2 && PlayerInfo[playerid][pBizz] != 255) return SCM(playerid, -1, "Nu poti licita deoarece ai o afacere.");
	format(string, sizeof(string), "Esti sigur ca vrei sa pui $%s la licitatie?", FormatNumber(suma));
	Dialog_Show(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Server:", string, "Co", "Khong");
	SelectedMoney[playerid] = suma;
	return true;
}
		 
stock MesajLicitatie(color, string[]) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && toglicitatie[i] == 1) {
			SCM(i, color, string);
		}
	}
	return true;
}
YCMD:acover(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	new name[180];
	if(sscanf(params, "s[25]",name)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/acover <name>");
	if(strlen(name) < 1 || strlen(name) > 25) return true;
	SetPVarInt(playerid, "Cover", 1);
	SetPlayerColor(playerid, -1);
	SetPlayerScore(playerid, 1+random(2));
	SetPlayerSkinEx(playerid, 1+random(100));
	SetPlayerName(playerid, name);
	SCM(playerid, -1, "Ban dang cai trang (undercover)!");
	return true;
}
YCMD:acoveroff(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	if(GetPVarInt(playerid, "Cover") == 0) return SCM(playerid, -1, "Nu Ban dang cai trang (undercover)!");
	SetPVarInt(playerid, "Cover", 0);
	new clanid = PlayerInfo[playerid][pClan];
	new string[180];
	SCM(playerid, -1, "Nu mai Ban dang cai trang (undercover)!");
	if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == -1) {
		format(string, sizeof(string), "%s", PlayerInfo[playerid][pUsername]);
		SetPlayerName(playerid, string);
	}
	else if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 0) {
		format(string, sizeof(string), "%s%s", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername]);
		SetPlayerName(playerid, string);
	}
	else if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 1) {
		format(string, sizeof(string), "%s%s", PlayerInfo[playerid][pUsername], ClanInfo[clanid][clTag]);
		SetPlayerName(playerid, string);
	}
	else SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
	SetPlayerToTeamColor(playerid);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	if(PlayerInfo[playerid][pChar] > 0)
	{
		SetPlayerSkinEx(playerid, PlayerInfo[playerid][pChar]);
	}
	else
	{
		SetPlayerSkinEx(playerid, PlayerInfo[playerid][pModel]);
	}
	return true;
}
YCMD:colors(playerid, params[], help) {
	 new string[4000];
 	 format ( string, sizeof(string), "{FFFFFF}Culori normale:\n");
	 strcat ( string, "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009");
	 strcat ( string, " {46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019");
	 strcat ( string, " \n{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029");
	 strcat ( string, " {421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039");
	 strcat ( string, " \n{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049");
	 strcat ( string, " {848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059");
	 strcat ( string, " \n{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069");
	 strcat ( string, " {851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079");
	 strcat ( string, " \n{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089");
	 strcat ( string, " {AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099");
	 strcat ( string, " \n{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109");
	 strcat ( string, " {7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119");
	 strcat ( string, " \n{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127");
	 strcat ( string, " \n\n{FFFFFF}Culori hidden:\n");
	 strcat ( string, "{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137");
	 strcat ( string, " {B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147");
	 strcat ( string, " \n{1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157");
	 strcat ( string, " {992E1E}158 {2C1E08}159 {142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167");
	 strcat ( string, " \n{481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177");
	 strcat ( string, " {7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187");
	 strcat ( string, " \n{163012}188 {16301B}189 {642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197");
	 strcat ( string, " {2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207");
	 strcat ( string, " \n{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217");
	 strcat ( string, " {995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227");
	 strcat ( string, " \n{96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237");
	 strcat ( string, " {8A653A}238 {732617}239 {319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247");
	 strcat ( string, " \n{561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255");
	 Dialog_Show(playerid,0,DIALOG_STYLE_MSGBOX,"Vehicle Colors List", string,"Exit","");
	 return true;
}
YCMD:killcp(playerid, params[], help) {
	if(CP[playerid] == 0) return SCM(playerid, -1, "Nu ai un checkpoint.");
	Dialog_Show(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
	return true;
}
YCMD:vc(playerid, params[], help) {
	if(PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pAdmin] == 0) 
		return true;
	
	if(togvip[playerid] == 1) 
		return SCM(playerid, COLOR_WHITE, "/vc este dezactivat din (/tog)");
	
	gString[0] = EOS;
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(gString, 65, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, gString);
		return true;
	}	
	if(DeelayCommand[playerid][7] != 0) 
		return DeelayTime(playerid, 7);
	
	if(sscanf(params, "s[200]", gString)) 
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/vc <text>");
	
	if(FaceReclama(gString)) 
		return Reclama(playerid, gString);
	
	format(gString, sizeof(gString), "%s%s{6792A1}: %s", Iter_Contains(PlayerAdmins, playerid) ? ("Admin {ff0000}") : PlayerInfo[playerid][pVip] == 1 ? ("VIP ") : ("VIP Plus {D4AF37} "), GetName(playerid), gString);
	DeelayCommand[playerid][7] = 10;
	foreach(new i: PlayerVips) if(togvip[i] == 0) MesajLung(i, 0x6792A1FF, gString);
	return true;
}

YCMD:pc(playerid, params[], help) {
	gString[0] = EOS;
	if(PlayerInfo[playerid][pPremiumAccount] == 0 && PlayerInfo[playerid][pAdmin] == 0) 
		return true;
	
	if(togpremium[playerid] == 1) 
		return SCM(playerid, COLOR_WHITE, "/pc este dezactivat din (/tog)");
	
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(gString, 65, "You can't talk right now! You are muted. (%d seconds)", PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, gString);
		return true;
	}	
	if(DeelayCommand[playerid][8] != 0) 
		return DeelayTime(playerid, 8);
	
	if(sscanf(params, "s[200]", gString)) 
		return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/pc <text>");
	
	if(FaceReclama(gString)) 
		return Reclama(playerid, gString);
	
	format(gString, sizeof(gString), "%s%s: %s", Iter_Contains(PlayerAdmins, playerid) ? "Admin " : "{89aa49}[PREMIUM] {adce6f} ", GetName(playerid), gString);
	DeelayCommand[playerid][8] = 10;
	foreach(new i: PlayerPremiums) if(togpremium[i] == 0) MesajLung(i, 0xadce6fFF, gString);
	return true;
}
YCMD:dice(playerid, params[], help) {
	new userID, money, szMessage[180];
	if(!PlayerToPoint(100, playerid, 2016.1156,1017.1541,996.875)) return SCM(playerid, COLOR_GREY, "Nu te aflii intr-un casino.");
	if(sscanf(params, "ui", userID, money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dice <playerid/name> <money>");
	if(!IsPlayerConnected(userID) && userID == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!PlayerToPoint(100, userID, 2016.2699, 1017.7790, 996.8750)) return SCM(playerid, -1, "Acel player nu este in casino!");
	if(userID == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(money < 1000 || money > 50000000) return SCM(playerid, COLOR_GREY, "Nu poti juca barbut pe sume mai mari de $50.000.000 si mai mici de $1.000.");
	if(PlayerMoney(playerid, money)) return SCM(playerid,COLOR_WHITE,"Ban khong du tien!");
	if(PlayerMoney(userID, money)) return SCM(playerid,COLOR_WHITE,"Acest player nu are destui bani.");
	if(!ProxDetectorS(10.0, playerid, userID)) return SCM(playerid, COLOR_GREY, "Nu te esti langa acel jucator.");
	if(DiceMoney[userID] == playerid) return SCM(playerid, COLOR_LGREEN, "Error: I-ai trimis deja o invitatie acestui player!");
	DiceMoney[userID] = money;
	DiceID[userID] = playerid;
	format(szMessage, 256, "%s(%d) te-a invitat sa joci barbut cu el pe suma de $%s! (/accept dice %d).", GetName(playerid), playerid, FormatNumber(money), playerid);
	SCM(userID, 0xFAD4D4FF, szMessage);
	format(szMessage, 256, "L-ai invitat pe %s(%d) sa joace barbut cu tine pe suma de $%s.", GetName(userID), userID, FormatNumber(money));
	SCM(playerid, 0xFAD4D4FF, szMessage);
	return true;
}
YCMD:puthelmet(playerid, params[], help) {
	new szMessage[180];
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	if(!IsABike2(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_GREY, "Nu iti poti pune casca in acest vehicul!");
	if(Helmet[playerid] == 1) {
		RemovePlayerAttachedObject(playerid, 3);
		Helmet[playerid] = 0;
		format(szMessage, sizeof(szMessage), "* %s keo non bao hiem ra khoi dau.", GetName(playerid));
		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE);
	}
	else {
		SetPlayerAttachedObject(playerid, 3, 18645, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
		Helmet[playerid] = 1;
		format(szMessage, sizeof(szMessage), "* %s si-a pus casca pe cap.", GetName(playerid));
		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE);
	}
	return true;
}
YCMD:gsearch(playerid, params[], help) {
	new result[180], x, string[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gsearch <name/id>");
	SCM(playerid, -1, "--------------------------------------------------------------------");
	for(new v = 1; v < 48; v++) {
		if(strfind(GunNames[v], result, true) != -1 || v == strval(result)) {
			format(string, sizeof(string), "Rezultat: %s (%d)", GunNames[v], v);
			SCM(playerid, 0x9CE6FFFF, string);
			x++;
		}
	}
	if(x == 0) return SCM(playerid, COLOR_GREY, "* Nu au fost gasite rezultate!"), SCM(playerid, -1, "--------------------------------------------------------------------");	
	else {
		format(string, sizeof(string), "* Au fost gasite %d rezultate!", x);
		SCM(playerid, COLOR_LGREEN, string);
	}
	SCM(playerid, -1, "--------------------------------------------------------------------");	
	return true;
}
YCMD:vsearch(playerid, params[], help) {
	new result[180], x, string[180];
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/vsearch <name/model>");
	SCM(playerid, -1, "--------------------------------------------------------------------");
	for(new v = 0; v < 212; v++) {
		if(strfind(aVehicleNames[v], result, true) != -1 || v == strval(result)-400) {
			format(string, sizeof(string), "Rezultat: %s (%d)", aVehicleNames[v], v+400);
			SCM(playerid, 0x9CE6FFFF, string);
			x++;
		}
	}
	if(x == 0) return SCM(playerid, COLOR_GREY, "* Nu au fost gasite rezultate!"), SCM(playerid, -1, "--------------------------------------------------------------------");	
	else {
		format(string, sizeof(string), "* Au fost gasite %d rezultate!", x);
		SCM(playerid, COLOR_LGREEN, string);
	}
	SCM(playerid, -1, "--------------------------------------------------------------------");	
	return true;
}
YCMD:slapcar(playerid, params[], help) {
	new carid;
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(sscanf(params, "i",carid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/slapcar <carid>");
	if(!IsValidVehicle(carid)) return SCM(playerid, COLOR_GREY, "Vehicul invalid!");
	new Float: Pos[3];
	GetVehiclePos(carid, Pos[0], Pos[1], Pos[2]);
	SetVehiclePosEx(playerid, carid, Pos[0], Pos[1], Pos[2]+5);
	new string[180];
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a dat slap vehiculului %d.", GetName(playerid), carid);
	SendAdminMessage(COLOR_WHITE, string, 1);
	return true;
}
YCMD:friends(playerid, params[], help) return ShowPlayerFriends(playerid);
stock ShowPlayerFriends(playerid) {
	new szDialog[1024], szDialog2[1024], szQuery[256], szTitle[180], szString[180], x, onf;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `friends` WHERE `AddBy` = '%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: result = mysql_query(SQL, szQuery);
	strcat(szDialog2, "{FFB469}(+) Adaugare prieten{FFFFFF}\n");
	for(new i, j = cache_num_rows(); i != j; ++i) {
		cache_get_value_name(i, "friendName", szString);
		format(Selected[playerid][x], MAX_PLAYER_NAME, szString);
		new userID = GetPlayerID( szString );
		if(userID != INVALID_PLAYER_ID) {
			onf++;
			format(szDialog, sizeof(szDialog), "{1FA612}(Conectat){FFFFFF} %s (%d)\n", szString, userID);
			strcat(szDialog2, szDialog);
		}
		else {
			format(szDialog, sizeof(szDialog), "{D60909}(Neconectat){FFFFFF} %s\n", szString);
			strcat(szDialog2, szDialog);
		}
		x++;
	}
	cache_delete(result);
	format(szTitle, sizeof(szTitle), "Friends: %d", onf);
	Dialog_Show(playerid, DIALOG_FRIENDS, DIALOG_STYLE_LIST, szTitle, szDialog2, "Select", "Back");
	return true;
}

GetWeekDay(day=0, month=0, year=0) {
	if(!day) getdate(year, month, day);
	new weekday_str[10], j, e;
	if(month <= 2) {
		month += 12;
		--year;
	}

	j = year % 100;
	e = year / 100;

	switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7) {
		case 0: weekday_str = "Saturday";
		case 1: weekday_str = "Sunday";
		case 2: weekday_str = "Monday";
		case 3: weekday_str = "Tuesday";
		case 4: weekday_str = "Wednesday";
		case 5: weekday_str = "Thursday";
		case 6: weekday_str = "Friday";
	}
	return weekday_str;
}
						
YCMD:setfpo(playerid, params[], help) {
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id[25], fp;
	if(sscanf(params, "s[25]i",id,fp)) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/setfp <name> <FP>");
	new cont = MySQLCheckAccount(id);
	if(cont == 0) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Acest nume nu a fost gasit in baza de date!");
	new query[128];
	mysql_format(SQL, query,sizeof(query),"UPDATE users SET `FPunish`='%d' WHERE `name`='%s'",fp,id);
	mysql_tquery(SQL,query, "", "");
	return true;
}
			
YCMD:block(playerid, params[], help) {
	new id;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/block <playerid/name>");
	if(IsBlocked(playerid, id)) return SCM(playerid, COLOR_GREY, "Acest player este deja blocat!");
	if(id == playerid) return SCM(playerid, COLOR_LGREEN, "Ban khong the su dung lenh nay len chinh minh!");
	format(Blocked[playerid][EmptyID(playerid)], 256, GetName(id));
	new string[180];
	format(string, sizeof(string), "L-ai blocat pe %s (%d)! Acesta nu o sa te mai poate contacta pana la urmatoarea deconectare.", GetName(id), id);
	SCM(playerid, 0xFFBABAFF, string);
	return true;
}
YCMD:blocklist(playerid, params[], help) {
	new x, string[180];
	SCM(playerid, -1, "-- Playeri blocati --");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsBlocked(playerid, i)) {
			format(string, sizeof(string), "%s (%d)", GetName(i), i);
			SCM(playerid, COLOR_WHITE, string);
			x++;
		}
	}
	if(x == 0) SCM(playerid, -1, "Nu au fost gasiti playeri blocati!");
	else {
		format(string, sizeof(string), "Au fost gasiti %d playeri.", x);
		SCM(playerid, COLOR_WHITE, string);
	}
	return true;
}
	
YCMD:unblock(playerid, params[], help) {
	new id;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/unblock <playerid/name>");
	if(!IsBlocked(playerid, id)) return SCM(playerid, COLOR_GREY, "Acest player nu este blocat!");
	if(id == playerid) return SCM(playerid, COLOR_LGREEN, "Ban khong the su dung lenh nay len chinh minh!");
	Blocked[playerid][IsBlocked2(playerid, id)] = "-1";
	new string[180];
	format(string, sizeof(string), "L-ai deblocat pe %s (%d)! Acesta te poate contacta acum.", GetName(id), id);
	SCM(playerid, 0xFFBABAFF, string);
	return true;
}
	
function IsBlocked(playerid, id) {
	for(new i = 0; i < 100; i++) {
		if(strcmp(Blocked[playerid][i], GetName(id), true) == 0) return true;
	}
	return false;
}

function IsBlocked2(playerid, id) {
	for(new i = 0; i < 100; i++) {
		if(strcmp(Blocked[playerid][i], GetName(id), true) == 0) return i;
	}
	return false;
}	

function ResetBlockList(playerid) {
	for(new i = 0; i < 100; i++) {
		Blocked[playerid][i] = "-1";
	}
	return true;
}

function EmptyID(playerid) {
	for(new i = 0; i < 100; i++) {
		if(strcmp(Blocked[playerid][i], "-1", true) == 0) return i;
	}
	return false;
}
YCMD:systems(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new szDialog[1024], string[170];
	strcat(szDialog, "System name\tStatus\n");
	for(new i = 0; i < MAX_SYSTEMS; i++) {
		format(string, sizeof(string), "%s\t%s\n", SystemName(i), (ServerSystem[i] == 0) ? ("{16DE00}Activated") : ("{FF0000}Dezactivated"));
		strcat(szDialog, string);	
	}
	Dialog_Show(playerid, DIALOG_SYSTEMS, DIALOG_STYLE_TABLIST_HEADERS, "Server Systems", szDialog, "Ok", "Exit");	
	return true;
}

stock SystemName(id) {
	new string[120];
	switch(id) {
		case 0: string = "Anti Teleport Hack";
		case 1: string = "Anti Weapon Hack";
		case 2: string = "Anti Ammo Hack";
		case 3: string = "Anti Armour Hack";
		case 4: string = "Anti Checkpoint Teleport";
		case 5: string = "Anti Speed Hack";
		case 6: string = "Anti Fly Hack";	
		case 7: string = "Anti Vehicle Repair";	
		case 8: string = "Anti Health Hack";	
		case 9: string = "Anti Jetpack Hack";
		case 10: string = "Auctions";
		case 11: string = "Vehicle speed";
	}
	return string;
}

YCMD:santahat(playerid, params[], help) {
	if(GetPVarInt(playerid, "Santa") == 0) {
		SetPlayerAttachedObject(playerid, 0, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
		SCM(playerid, COLOR_LGREEN, "Caciula de craciun a fost pusa!");
		SetPVarInt(playerid, "Santa", 1);
	}
	else {
		RemovePlayerAttachedObject(playerid, 0);
		SCM(playerid, COLOR_LGREEN, "Caciula de craciun a fost scoasa!");
		SetPVarInt(playerid, "Santa", 0);	
	}
	return true;
}

YCMD:premium(playerid, params[], help) {
	new szDialog[512];
	format(szDialog, sizeof(szDialog), 
	"Avantajele contului premium:\n-Interes 0.2 la payday\n- 2 RP-uri o data la 5 ore\n- Poti avea 5 masini personale in total\n\
	- numarul (/carplate) o sa fie de culoare portocalie.\n- acces la comanda /pcolor.\n- Poti pune pana la 100 obiecte in casa.");
	Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Avantaje ale contului premium", szDialog, "Inchide", "");
	return true;
}
YCMD:editprice(playerid, params[], help) {	
	new carid, price, szMessage[180];
	if(sscanf(params, "ii", carid, price)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/editprice <carid> <price>");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		DSModels[carid][dPrice] = price;
		format(szMessage, sizeof(szMessage), "* Ai schimbat pretul la vehiculul %d in %d.", carid, DSModels[carid][dPrice]);
		SCM(playerid, COLOR_YELLOW, szMessage);
		new szQuery[256];
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE dsveh SET `Price` = '%d' WHERE `ID` = '%d'",price, carid);
		mysql_tquery(SQL, szQuery, "", "");
	}
	return true;
}
function DisablePlayerCheckpointEx(playerid) {
	DisablePlayerCheckpoint(playerid);
	PlayerTextDrawHide(playerid, CpTDD);
	return true;
}

function DisablePlayerRaceCheckpointEx(playerid) {
	DisablePlayerRaceCheckpoint(playerid);
	PlayerTextDrawHide(playerid, CpTDD);
	return true;
}	

YCMD:gotocp(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	if(CP[playerid] == 0) return SCM(playerid, COLOR_RED, "Error: Nu ai un checkpoints activ");
	if(GetPlayerState(playerid) == 2) SetVehiclePosEx(playerid, GetPlayerVehicleID(playerid), CheckpointPos[playerid][0], CheckpointPos[playerid][1], CheckpointPos[playerid][2]);
	else SetPlayerPosEx(false, playerid, CheckpointPos[playerid][0], CheckpointPos[playerid][1], CheckpointPos[playerid][2]);
	new vw = GetPlayerVirtualWorld(playerid);
	SetVehicleVirtualWorld(ExamCar[playerid], vw);
	SetPlayerVirtualWorld(playerid, vw);
	SetPlayerInterior(playerid, 0);
	return true;
}

function SetPlayerRaceCheckpointEx(playerid, type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size) {
	SetPlayerRaceCheckpoint(playerid, type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size);
	CheckpointPos[playerid][0] = x;
	CheckpointPos[playerid][1] = y;
	CheckpointPos[playerid][2] = z;
	return true;
}

function SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:size) {
	SetPlayerCheckpoint(playerid, x, y, z, size);
	CheckpointPos[playerid][0] = x;
	CheckpointPos[playerid][1] = y;
	CheckpointPos[playerid][2] = z;
	return true;
}
YCMD:a(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pManager] == 0) return SCM(playerid, COLOR_WHITE,AdminOnly);
	new string[250],result[250];
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/a <text>");
	if(PlayerInfo[playerid][pScripter] == 2) format(string, sizeof(string), "* Scripter %s: %s", GetName(playerid), result);
	else if(PlayerInfo[playerid][pScripter] == 1) format(string, sizeof(string), "* Fondator %s: %s", GetName(playerid), result);
	else if(PlayerInfo[playerid][pManager] > 0) format(string, sizeof(string), "* %s %s: %s", ManagerLevel(PlayerInfo[playerid][pManager]), GetName(playerid), result);
	else if(PlayerInfo[playerid][pAdmin] > 0) format(string, sizeof(string), "* (%d) admin %s: %s", PlayerInfo[playerid][pAdmin], GetName(playerid), result);
	SendAdminMessage(COLOR_ADMCHAT, string,1);
	return true;
}
YCMD:ao(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new string[250],result[250];
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/ao <text>");
	format(string, sizeof(string), "* (%d) %s %s: %s", PlayerInfo[playerid][pAdmin], GetAdminRank(playerid), GetName(playerid), result);
	SendAdminMessage(0xCC7529FF, string,6);
	return true;
}
YCMD:cw(playerid, params[], help) {
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	new result[250],string[250];
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/cw <text>");
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(FaceReclama(result)) return Reclama(playerid, result);
	format(string, sizeof(string), "(Car Whisper) %s: %s", GetName(playerid), result);
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) SCM(i,COLOR_YELLOW, string);
	}
	format(string, sizeof(string), "(car whisper) %s", result);
	ChatLog(GetName(playerid), playerid, string);		
	format(string, sizeof(string), "(CW LOG) %s(%d) vehicul %d: %s", GetName(playerid), playerid, GetPlayerVehicleID(playerid), result);
	if(PlayerInfo[playerid][pAdmin] < 6) EarsMessage(0xFFC400FF, string);
	return true;
}
YCMD:endlive(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, COLOR_GREY, "Ban khong thuoc News Reporters.");
	if(TalkingLive[playerid] == 255) return true;
	SCM(playerid, COLOR_LIGHTBLUE, "* Conversatie terminata.");
	SCM(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Conversatie terminata.");
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(TalkingLive[playerid], 1);
	TalkingLive[TalkingLive[playerid]] = 255;
	TalkingLive[playerid] = 255;
	UpdateFactionRaport(playerid, 0);
	Questions = 0;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && Question[i] == 1) Question[i] = 0;
	}			
	return true;
}
YCMD:live(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, COLOR_GREY, "Ban khong thuoc News Reporters.");
	if(TalkingLive[playerid] != 255) return SCM(playerid, COLOR_GREY, "Esti deja intr-un live.");
	if(PlayerInfo[playerid][pRank] < 3) return SCM(playerid, -1, "Trebuie sa ai minim rank 3 pentru a da live!");
	new id;
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/live <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	new hour,minute,second, year, month, day;
	gettime(hour,minute,second);
	getdate(year, month, day);	
	if(hour >= 00 && hour < 8) return SCM(playerid, COLOR_LIGHTRED, "Nu poti folosi aceasta comanda in intervalul 00-08.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	new sendername[25],giveplayer[25],string[128];
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "**(( NR Dispatch: Reporter %s (%d) e pe cale sa inceapa un interviu cu %s (%d). ))**", GetName(playerid), playerid, GetName(id), id);
	SCM(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* I-ai oferit lui %s o conversatie Live.", giveplayer);
	SCM(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* %s ti-a oferit o conversatie live. (/accept live %d) pentru a accepta.", sendername,playerid);
	SCM(id, COLOR_LIGHTBLUE, string);
	LiveOffer[id] = playerid;
	return true;
}
function PutHat(playerid) {
	if(GetPVarInt(playerid, "Santa") == 1) return SetPlayerAttachedObject(playerid, 0, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);	
	new skin = GetPlayerSkin(playerid);
	if(skin == 2 || skin == 6 || skin == 8 || skin == 13 || skin == 19 || skin == 22 || skin == 23 || skin == 24 || skin == 27 || skin == 29 || skin == 33 || skin == 34 || skin == 35 ||
	skin == 36 || skin == 37 || skin == 52 || skin == 61 || skin == 65 || skin == 71 || skin == 77 || skin == 78 || skin == 79 || skin == 99 || skin == 107 || skin == 115 || skin == 137 || skin == 143 ||
	skin == 149 || skin == 153 || skin == 155 || skin == 158 || skin == 161 || skin == 167 || skin == 173 || skin == 198 || skin == 205 || skin == 209 || skin == 249 || skin == 253 ||
	skin == 255 || skin == 260 || skin == 261 || skin == 264 || skin == 269 || skin == 270 || skin == 271 || skin == 277 || skin == 278 || skin == 279 || skin == 283 || skin == 284 ||
	skin == 285 || skin == 287 || skin == 288 || skin == 289 || skin == 293)
		return RemovePlayerAttachedObject(playerid, 0);
	new model = PlayerInfo[playerid][pHat];
	switch(skin) {
		case 1: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138505, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 1
		case 2: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158120, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 3
		case 3: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158120, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 3
		case 4: SetPlayerAttachedObject( playerid, 0, model, 2, 0.217011, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 4
		case 5: SetPlayerAttachedObject( playerid, 0, model, 2, 0.197443, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 5
		case 6: SetPlayerAttachedObject( playerid, 0, model, 2, 0.197443, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 6
		case 7: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166039, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 7
		case 8: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166039, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 8
		case 9: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137042, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 9
		case 10: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137042, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 10
		case 11: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137042, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 11
		case 12: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169248, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 12
		case 13: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169248, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 13
		case 14: SetPlayerAttachedObject( playerid, 0, model, 2, 0.176461, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 14
		case 15: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135116, -0.028391, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 15
		case 16: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135116, -0.028391, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 16
		case 17: SetPlayerAttachedObject( playerid, 0, model, 2, 0.176750, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 17
		case 18: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137032, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 18
		case 19: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137032, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 19
		case 20: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // HatBoater2 - 
		case 21: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 21
		case 22: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 22
		case 23: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 23
		case 24: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 24
		case 25: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153401, 0.006404, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 25
		case 26: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153401, 0.006404, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 26
		case 27: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153401, 0.006404, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 27
		case 28: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178765, 0.006345, -0.014876, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 28
		case 29: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178765, 0.006345, -0.014876, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 29
		case 30: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 30
		case 31: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 31
		case 32: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 32
		case 33: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 33
		case 34: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 34
		case 35: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 35
		case 36: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 36
		case 37: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 37
		case 38: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 38
		case 39: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137954, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 39
		case 40: SetPlayerAttachedObject( playerid, 0, model, 2, 0.148416, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 40
		case 41: SetPlayerAttachedObject( playerid, 0, model, 2, 0.148416, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 41
		case 42: SetPlayerAttachedObject( playerid, 0, model, 2, 0.148416, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 42
		case 43: SetPlayerAttachedObject( playerid, 0, model, 2, 0.092380, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 43
		case 44: SetPlayerAttachedObject( playerid, 0, model, 2, 0.118452, 0.014299, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 44
		case 45: SetPlayerAttachedObject( playerid, 0, model, 2, 0.133399, -0.000648, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 45
		case 46: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161029, 0.014299, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 46
		case 47: SetPlayerAttachedObject( playerid, 0, model, 2, 0.174838, 0.005146, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 47
		case 48: SetPlayerAttachedObject( playerid, 0, model, 2, 0.185725, -0.002868, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 48
		case 49: SetPlayerAttachedObject( playerid, 0, model, 2, 0.140534, 0.011140, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 49
		case 50: SetPlayerAttachedObject( playerid, 0, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 50
		case 51: SetPlayerAttachedObject( playerid, 0, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 51
		case 52: SetPlayerAttachedObject( playerid, 0, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 52
		case 53: SetPlayerAttachedObject( playerid, 0, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 53
		case 54: SetPlayerAttachedObject( playerid, 0, model, 2, 0.174966, 0.024967, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 54
		case 55: SetPlayerAttachedObject( playerid, 0, model, 2, 0.163809, -0.018255, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 55
		case 56: SetPlayerAttachedObject( playerid, 0, model, 2, 0.163809, -0.018255, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 56
		case 57: SetPlayerAttachedObject( playerid, 0, model, 2, 0.197187, -0.000997, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 57
		case 58: SetPlayerAttachedObject( playerid, 0, model, 2, 0.136419, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 58
		case 59: SetPlayerAttachedObject( playerid, 0, model, 2, 0.180506, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 59
		case 60: SetPlayerAttachedObject( playerid, 0, model, 2, 0.180506, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 60
		case 61: SetPlayerAttachedObject( playerid, 0, model, 2, 0.180506, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 61
		case 62: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.023522, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 62
		case 63: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, -0.004900, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 63
		case 64: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, -0.004900, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 64
		case 65: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, -0.004900, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 65
		case 66: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 66
		case 67: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 67
		case 68: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 68
		case 69: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 69
		case 70: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.009975, 0.011316, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 70
		case 71: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.009975, 0.011316, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 71
		case 72: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.020482, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 72
		case 73: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.020482, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 73
		case 74: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.002100, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 74
		case 75: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, 0.002100, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 75
		case 76: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 76
		case 77: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 77
		case 78: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 78
		case 79: SetPlayerAttachedObject( playerid, 0, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 79
		case 80: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138384, -0.015113, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 80
		case 81: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138384, -0.015113, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 81
		case 82: SetPlayerAttachedObject( playerid, 0, model, 2, 0.188178, 0.017015, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 82
		case 83: SetPlayerAttachedObject( playerid, 0, model, 2, 0.188178, 0.017015, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 83
		case 84: SetPlayerAttachedObject( playerid, 0, model, 2, 0.188178, -0.004219, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 84
		case 85: SetPlayerAttachedObject( playerid, 0, model, 2, 0.188178, -0.004219, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 85
		case 86: SetPlayerAttachedObject( playerid, 0, model, 2, 0.136243, -0.004046, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 86
		case 87: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158262, 0.028254, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 87
		case 88: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158262, 0.028254, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 88
		case 89: SetPlayerAttachedObject( playerid, 0, model, 2, 0.151486, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 89
		case 90: SetPlayerAttachedObject( playerid, 0, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 90
		case 91: SetPlayerAttachedObject( playerid, 0, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 91
		case 92: SetPlayerAttachedObject( playerid, 0, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 92
		case 93: SetPlayerAttachedObject( playerid, 0, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 93
		case 94: SetPlayerAttachedObject( playerid, 0, model, 2, 0.110970, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 94
		case 95: SetPlayerAttachedObject( playerid, 0, model, 2, 0.127067, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 95
		case 96: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158763, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 96
		case 97: SetPlayerAttachedObject( playerid, 0, model, 2, 0.139774, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 97
		case 98: SetPlayerAttachedObject( playerid, 0, model, 2, 0.164045, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 98
		case 99: SetPlayerAttachedObject( playerid, 0, model, 2, 0.164045, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 99
		case 100: SetPlayerAttachedObject( playerid, 0, model, 2, 0.181303, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 100
		case 101: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 101
		case 102: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 102
		case 103: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 103
		case 104: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 104
		case 105: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 105
		case 106: SetPlayerAttachedObject( playerid, 0, model, 2, 0.185643, -0.006704, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 106
		case 107: SetPlayerAttachedObject( playerid, 0, model, 2, 0.185643, -0.006704, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 107
		case 108: SetPlayerAttachedObject( playerid, 0, model, 2, 0.176239, -0.006704, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 108
		case 109: SetPlayerAttachedObject( playerid, 0, model, 2, 0.176239, 0.008243, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 109
		case 110: SetPlayerAttachedObject( playerid, 0, model, 2, 0.176239, 0.008243, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 110
		case 111: SetPlayerAttachedObject( playerid, 0, model, 2, 0.176239, -0.003313, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 111
		case 112: SetPlayerAttachedObject( playerid, 0, model, 2, 0.140058, -0.003313, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 112
		case 113: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172263, 0.006964, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 113
		case 114: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172263, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 114
		case 115: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172263, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 115
		case 116: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172263, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 116
		case 117: SetPlayerAttachedObject( playerid, 0, model, 2, 0.123344, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 117
		case 118: SetPlayerAttachedObject( playerid, 0, model, 2, 0.123344, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 118
		case 119: SetPlayerAttachedObject( playerid, 0, model, 2, 0.159842, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 119
		case 120: SetPlayerAttachedObject( playerid, 0, model, 2, 0.159842, -0.009245, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 120
		case 121: SetPlayerAttachedObject( playerid, 0, model, 2, 0.159842, -0.009245, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 121
		case 122: SetPlayerAttachedObject( playerid, 0, model, 2, 0.159842, -0.009245, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 122
		case 123: SetPlayerAttachedObject( playerid, 0, model, 2, 0.194358, -0.009245, -0.008579, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 123
		case 124: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168926, -0.009245, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 124
		case 125: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168926, 0.006851, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 125
		case 126: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168926, -0.009382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 126
		case 127: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168926, 0.000999, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 127
		case 128: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168926, 0.024238, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 128
		case 129: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144890, 0.004670, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 129
		case 130: SetPlayerAttachedObject( playerid, 0, model, 2, 0.109372, 0.004670, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 130
		case 131: SetPlayerAttachedObject( playerid, 0, model, 2, 0.141611, 0.004670, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 131
		case 132: SetPlayerAttachedObject( playerid, 0, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 132
		case 133: SetPlayerAttachedObject( playerid, 0, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 133
		case 134: SetPlayerAttachedObject( playerid, 0, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 134
		case 135: SetPlayerAttachedObject( playerid, 0, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 135
		case 136: SetPlayerAttachedObject( playerid, 0, model, 2, 0.131672, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 136
		case 137: SetPlayerAttachedObject( playerid, 0, model, 2, 0.131672, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 137
		case 138: SetPlayerAttachedObject( playerid, 0, model, 2, 0.145482, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 138
		case 139: SetPlayerAttachedObject( playerid, 0, model, 2, 0.145482, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 139
		case 140: SetPlayerAttachedObject( playerid, 0, model, 2, 0.186944, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 140
		case 141: SetPlayerAttachedObject( playerid, 0, model, 2, 0.177850, -0.020384, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 141
		case 142: SetPlayerAttachedObject( playerid, 0, model, 2, 0.162902, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 142
		case 143: SetPlayerAttachedObject( playerid, 0, model, 2, 0.162902, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 143
		case 144: SetPlayerAttachedObject( playerid, 0, model, 2, 0.205876, -0.027250, -0.004153, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 144
		case 145: SetPlayerAttachedObject( playerid, 0, model, 2, 0.160719, -0.005472, -0.004153, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 145
		case 146: SetPlayerAttachedObject( playerid, 0, model, 2, 0.160719, -0.005472, -0.004153, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 146
		case 147: SetPlayerAttachedObject( playerid, 0, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 147
		case 148: SetPlayerAttachedObject( playerid, 0, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 148
		case 149: SetPlayerAttachedObject( playerid, 0, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 149
		case 150: SetPlayerAttachedObject( playerid, 0, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 150
		case 151: SetPlayerAttachedObject( playerid, 0, model, 2, 0.173401, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 151
		case 152: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167766, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 152
		case 153: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167766, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 153
		case 154: SetPlayerAttachedObject( playerid, 0, model, 2, 0.131260, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 154
		case 155: SetPlayerAttachedObject( playerid, 0, model, 2, 0.131260, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 155
		case 156: SetPlayerAttachedObject( playerid, 0, model, 2, 0.192687, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 156
		case 157: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.014873, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 157
		case 158: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.014873, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 158
		case 159: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.014873, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 159
		case 160: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, -0.003556, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 160
		case 161: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, -0.003556, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 161
		case 162: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 162
		case 163: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 163
		case 164: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 164
		case 165: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 165
		case 166: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 166
		case 167: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 167
		case 168: SetPlayerAttachedObject( playerid, 0, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 168
		case 169: SetPlayerAttachedObject( playerid, 0, model, 2, 0.162078, -0.017747, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 169
		case 170: SetPlayerAttachedObject( playerid, 0, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 170
		case 171: SetPlayerAttachedObject( playerid, 0, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 171
		case 172: SetPlayerAttachedObject( playerid, 0, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 172
		case 173: SetPlayerAttachedObject( playerid, 0, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 173
		case 174: SetPlayerAttachedObject( playerid, 0, model, 2, 0.191174, 0.019861, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 174
		case 175: SetPlayerAttachedObject( playerid, 0, model, 2, 0.191174, 0.019861, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 175
		case 176: SetPlayerAttachedObject( playerid, 0, model, 2, 0.179688, -0.004609, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 176
		case 177: SetPlayerAttachedObject( playerid, 0, model, 2, 0.207318, -0.004609, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 177
		case 178: SetPlayerAttachedObject( playerid, 0, model, 2, 0.178637, -0.004609, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 178
		case 179: SetPlayerAttachedObject( playerid, 0, model, 2, 0.155398, 0.003675, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 179
		case 180: SetPlayerAttachedObject( playerid, 0, model, 2, 0.187603, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 180
		case 181: SetPlayerAttachedObject( playerid, 0, model, 2, 0.185789, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 181
		case 182: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137889, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 182
		case 183: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137889, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 183
		case 184: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167829, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 184
		case 185: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167829, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 185
		case 186: SetPlayerAttachedObject( playerid, 0, model, 2, 0.167829, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 186
		case 187: SetPlayerAttachedObject( playerid, 0, model, 2, 0.157367, -0.017958, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 187
		case 188: SetPlayerAttachedObject( playerid, 0, model, 2, 0.157367, -0.003010, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 188
		case 189: SetPlayerAttachedObject( playerid, 0, model, 2, 0.157367, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 189
		case 190: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 190
		case 191: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 191
		case 192: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 192
		case 193: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 193
		case 194: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 194
		case 195: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 195
		case 196: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138831, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 196
		case 197: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138831, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 197
		case 198: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138831, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 198
		case 199: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138831, 0.009363, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 199
		case 200: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138831, -0.003318, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 200
		case 201: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138831, -0.003318, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 201
		case 202: SetPlayerAttachedObject( playerid, 0, model, 2, 0.138831, 0.031243, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 202
		case 203: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 203
		case 204: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 204
		case 205: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 205
		case 206: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 206
		case 207: SetPlayerAttachedObject( playerid, 0, model, 2, 0.116949, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 207
		case 208: SetPlayerAttachedObject( playerid, 0, model, 2, 0.125234, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 208
		case 209: SetPlayerAttachedObject( playerid, 0, model, 2, 0.146650, -0.013561, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 209
		case 210: SetPlayerAttachedObject( playerid, 0, model, 2, 0.125317, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 210
		case 211: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 211
		case 212: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 212
		case 213: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 213
		case 214: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 214
		case 215: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 215
		case 216: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 216
		case 217: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 217
		case 218: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 218
		case 219: SetPlayerAttachedObject( playerid, 0, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 219
		case 220: SetPlayerAttachedObject( playerid, 0, model, 2, 0.122851, 0.018736, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 220
		case 221: SetPlayerAttachedObject( playerid, 0, model, 2, 0.187490, -0.009962, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 221
		case 222: SetPlayerAttachedObject( playerid, 0, model, 2, 0.187490, -0.009962, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 222
		case 223: SetPlayerAttachedObject( playerid, 0, model, 2, 0.187490, 0.007295, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 223
		case 224: SetPlayerAttachedObject( playerid, 0, model, 2, 0.148834, -0.016988, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 224
		case 225: SetPlayerAttachedObject( playerid, 0, model, 2, 0.148834, -0.016988, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 225
		case 226: SetPlayerAttachedObject( playerid, 0, model, 2, 0.148834, -0.016988, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 226
		case 227: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175808, 0.000124, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 227
		case 228: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175808, 0.000124, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 228
		case 229: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.009810, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 229
		case 230: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.009810, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 230
		case 231: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, 0.017909, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 231
		case 232: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.002900, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 232
		case 233: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.002900, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 233
		case 234: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.022515, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 234
		case 235: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.022515, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 235
		case 236: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 236
		case 237: SetPlayerAttachedObject( playerid, 0, model, 2, 0.137351, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 237
		case 238: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172246, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 238
		case 239: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172246, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 239
		case 240: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172469, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 240
		case 241: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172469, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 241
		case 242: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172469, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 242
		case 243: SetPlayerAttachedObject( playerid, 0, model, 2, 0.120642, 0.012000, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 243
		case 244: SetPlayerAttachedObject( playerid, 0, model, 2, 0.120642, 0.012000, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 244
		case 245: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172256, -0.006535, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 245
		case 246: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172256, -0.006535, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 246
		case 247: SetPlayerAttachedObject( playerid, 0, model, 2, 0.172256, 0.015483, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 247
		case 248: SetPlayerAttachedObject( playerid, 0, model, 2, 0.195495, 0.006421, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 248
		case 249: SetPlayerAttachedObject( playerid, 0, model, 2, 0.195495, 0.006421, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 249
		case 250: SetPlayerAttachedObject( playerid, 0, model, 2, 0.156291, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 250
		case 251: SetPlayerAttachedObject( playerid, 0, model, 2, 0.156291, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 251
		case 252: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 252
		case 253: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 253
		case 254: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 254
		case 255: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 255
		case 256: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.005231, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 256
		case 257: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, 0.012026, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 257
		case 258: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.012517, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 258
		case 259: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.014782, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 259
		case 260: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.014782, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 260
		case 261: SetPlayerAttachedObject( playerid, 0, model, 2, 0.166753, -0.014782, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 261
		case 262: SetPlayerAttachedObject( playerid, 0, model, 2, 0.142282, 0.013118, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 262
		case 263: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.013855, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 263
		case 264: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.013855, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 264
		case 265: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 265
		case 266: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 266
		case 267: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 267
		case 268: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 268
		case 269: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 269
		case 270: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 270
		case 271: SetPlayerAttachedObject( playerid, 0, model, 2, 0.175637, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 271
		case 272: SetPlayerAttachedObject( playerid, 0, model, 2, 0.182708, 0.001264, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 272
		case 273: SetPlayerAttachedObject( playerid, 0, model, 2, 0.133486, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 273
		case 274: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 274
		case 275: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 275
		case 276: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 276
		case 277: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 277
		case 278: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 278
		case 279: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 279
		case 280: SetPlayerAttachedObject( playerid, 0, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 280
		case 281: SetPlayerAttachedObject( playerid, 0, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 281
		case 282: SetPlayerAttachedObject( playerid, 0, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 282
		case 283: SetPlayerAttachedObject( playerid, 0, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 283
		case 284: SetPlayerAttachedObject( playerid, 0, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 284
		case 285: SetPlayerAttachedObject( playerid, 0, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 285
		case 286: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158825, 0.006832, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 286
		case 287: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158825, 0.006832, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 287
		case 288: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158825, 0.006832, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 288
		case 289: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158825, 0.017294, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 289
		case 290: SetPlayerAttachedObject( playerid, 0, model, 2, 0.158825, -0.002320, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 290
		case 291: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169287, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 291
		case 292: SetPlayerAttachedObject( playerid, 0, model, 2, 0.169287, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 292
		case 293: SetPlayerAttachedObject( playerid, 0, model, 2, 0.135447, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 293
		case 294: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168825, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 294
		case 295: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168825, -0.013864, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 295
		case 296: SetPlayerAttachedObject( playerid, 0, model, 2, 0.168825, -0.013864, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 296
		case 297: SetPlayerAttachedObject( playerid, 0, model, 2, 0.183773, -0.006650, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 297
		case 298: SetPlayerAttachedObject( playerid, 0, model, 2, 0.165301, -0.006650, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 298
		case 299: SetPlayerAttachedObject( playerid, 0, model, 2, 0.197506, 0.008296, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 299
		case 300: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 300
		case 301: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 301
		case 302: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 302
		case 303: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 303
		case 304: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 304
		case 305: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 305
		case 306: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 306
		case 307: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 307
		case 308: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 308
		case 309: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 309
		case 310: SetPlayerAttachedObject( playerid, 0, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 310
	}
	return true;
}	

YCMD:setskin(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	new id,level,string[180];
	if(sscanf(params, "ud",id,level)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setskin <playerid/name> <0-310>");
	if(level < 1 || level > 311) return SCM(playerid, -1, "Wrong skin ID.");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	PlayerInfo[id][pChar] = level;
	SetPlayerSkinEx(id, PlayerInfo[id][pChar]);
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s i-a setat skinul %d lui %s.", GetName(playerid), level, GetName(id));
	if(GetPVarInt(playerid, "Cover") == 0) SendAdminMessage(COLOR_WHITE, string, 1);
	format(string, sizeof(string), "I-ai setat lui {7BAABA}%s(%d){FFFFFF} skin %d.", GetName(id), id, level);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Admin {7BAABA}%s{FFFFFF} ti-a setat skin %d.", GetName(playerid), level);
	SCM(id, COLOR_WHITE, string);
	give_skin(id, level);
	new query[128];
	mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Money`='%d', `MStore`='%d',`CChar`='%d' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[id][pChar],PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL,query, "", "");
	return true;
}
YCMD:ticket(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti politist.");
	if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda!");
	if(OnDuty[playerid] != 1) return SCM(playerid, COLOR_LGREEN, "Error: Nu esti la datorie!");
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/ticket <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(IsACop(id)) return SCM(playerid, COLOR_GREY, "Nu poti da amenda unui politist!");
						
	new szDialog[1000], title[100];
	format(title, 100, "Ticket > %s", GetName(id));
	for(new i = 0; i < 7; i++) {
		format(string, sizeof(string), "%s ($%d)\n", ticketName(i), ticketValue(i)); 
		strcat(szDialog, string);
	}
	Dialog_Show(playerid, DIALOG_TICKET, DIALOG_STYLE_LIST, title, szDialog, "Ok", "Cancel");					
	SetPVarInt(playerid, "userID", id);					
	return true;
}
YCMD:help(playerid, params[], help) return Dialog_Show(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help", "Cont\nGeneral\nChat\nBanca\nAdmin\nVehicule\nCase\nBizz-uri\nFactiune\nLider\nTelefon\nJoburi", "Ok", "Exit");

stock IsPlayerFalling(playerid) {
	new index = GetPlayerAnimationIndex(playerid);
	if(index >= 958 && index <= 979 || index == 1130 || index == 1195 || index == 1132) return true;
	return false;
}
YCMD:stopanim(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return true;
	if(HaveBag[playerid] == 1) return true;
	if(InDealer[playerid] == 1) return true;
	if(Freezed[playerid] == 1) return true;
	if(IsPlayerFalling(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in timp ce cazi!");
	ClearAnimations(playerid);
	return true;
}
YCMD:tazer(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti politist.");
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(GetPlayerWeapon(playerid) != 24) return SCM(playerid,COLOR_GREY, "Pentru a activa tazer-ul, trebuie sa ai un Deagle in mana!");
	switch(tazer[playerid]) {
		case 0: {
			tazer[playerid] = 1;
			new string[128];
			format(string, sizeof(string), "* %s equiped a taser.", GetName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE);				
		}
		case 1: {
			tazer[playerid] = 0;
			SCM(playerid, -1, "Tazer off!");
		}
	}
	return true;
}
YCMD:cuff(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti politist.");
	new id,string[180];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/cuff <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(IsACop(id)) return true;
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(PlayerCuffed2[id] > 0) return true;
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	if(!IsPlayerInAnyVehicle(id)) return true;
	TogglePlayerControllable(id, 0);
	format(string, sizeof(string), "* %s has handcuffed %s.", GetName(playerid),GetName(id));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	PlayerCuffed2[id] = 1;
	SetPlayerAttachedObject(id, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(id,SPECIAL_ACTION_CUFFED);
	return true;
}
YCMD:uncuff(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti politist.");
	if(OnDuty[playerid] == 0) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	new giveplayerid,string[128];
	if(sscanf(params, "u",giveplayerid)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/uncuff <playerid/name>");
	if(!IsPlayerConnected(giveplayerid) && giveplayerid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(giveplayerid == playerid) return true;
	if(PlayerCuffed2[giveplayerid] == 0) return true;
	TogglePlayerControllable(giveplayerid, 1);
	format(string, sizeof(string), "* %s has uncuffed %s.", GetName(playerid),GetName(giveplayerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	format(string, sizeof(string), "* Ai fost descatusat de %s.", GetName(playerid));
	SCM(giveplayerid, COLOR_LIGHTBLUE, string);
	PlayerCuffed2[giveplayerid] = 0;
	SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(giveplayerid,1);
	return true;
}

function JoPlayPoints(playerid) {
	new level;
	switch(PlayerInfo[playerid][pJob]) {
		case 1: level = PlayerInfo[playerid][pFarmerSkill];
		case 2: level = PlayerInfo[playerid][pTruckerSkill];
		case 3: level = PlayerInfo[playerid][pJackerSkill];
		case 4: level = PlayerInfo[playerid][pMatSkill];
		case 5: level = PlayerInfo[playerid][pDrugsSkill];
		case 7: level = PlayerInfo[playerid][pPizzaSkill];
		case 8: level = PlayerInfo[playerid][pCurierSkill];
		case 9: level = PlayerInfo[playerid][pFishSkill];	
		case 10: level = PlayerInfo[playerid][pStivuitorSkill];
	}
	return level;
}

function GetPlayerSkill(playerid) {
	new level;
	switch(PlayerInfo[playerid][pJob]) {
		case 1: {
			level = PlayerInfo[playerid][pFarmerSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 2: {
			level = PlayerInfo[playerid][pTruckerSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 3: {
			level = PlayerInfo[playerid][pJackerSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 4: {
			level = PlayerInfo[playerid][pMatSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 5: {
			level = PlayerInfo[playerid][pDrugsSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 7: {
			level = PlayerInfo[playerid][pPizzaSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}	
		case 8: {
			level = PlayerInfo[playerid][pCurierSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}	
		case 9: {
			level = PlayerInfo[playerid][pFishSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}			
		case 10: {
			level = PlayerInfo[playerid][pStivuitorSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}	
	}
	return level;
}

function GetPlayerSkill2(playerid, id) {
	new level;
	switch(id) {
		case 1: {
			level = PlayerInfo[playerid][pFarmerSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 2: {
			level = PlayerInfo[playerid][pTruckerSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 3: {
			level = PlayerInfo[playerid][pJackerSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 4: {
			level = PlayerInfo[playerid][pMatSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 5: {
			level = PlayerInfo[playerid][pDrugsSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}
		case 7: {
			level = PlayerInfo[playerid][pPizzaSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}	
		case 8: {
			level = PlayerInfo[playerid][pCurierSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}	
		case 9: {
			level = PlayerInfo[playerid][pFishSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}			
		case 10: {
			level = PlayerInfo[playerid][pStivuitorSkill];
			if(level >= 0 && level < 30) level = 1;
			else if(level >= 30 && level < 90) level = 2;
			else if(level >= 90 && level < 210) level = 3;
			else if(level >= 210 && level < 450) level = 4;
			else if(level >= 450) level = 5;
		}		
	}
	return level;
}

function GetNeedPoints(playerid, jid) {
	new x;
	new skill = GetPlayerSkill2(playerid, jid);
	if(skill == 1) x = 30;
	else if(skill == 2) x = 90;
	else if(skill == 3) x = 210;
	else if(skill == 4) x = 450;
	return x;
}

function GetNeedPoints4(playerid, jid) {
	new x;
	new skill = GetPlayerSkill2(playerid, jid);
	if(skill == 1) x = 30;
	else if(skill == 2) x = 90;
	else if(skill == 3) x = 210;
	else if(skill == 4) x = 450;
	return x;
}
function GiveJobSalary(playerid) {
	// var
	new skill = GetPlayerSkill(playerid), money, TotalMoneyy;
	gString[0] = EOS;
	
	switch(PlayerInfo[playerid][pJob]) {
		case 1: money = skill*100*KG[playerid] + random(10000);
		case 2: {
			new category = GetPVarInt(playerid, "Category");
			switch(category) {
				case 0: money = skill*40000 + random(2000);
				case 1: money = skill*40000 + random(3000);
				case 2: money = skill*40000 + random(4000);
				case 3: money = skill*40000 + random(5000);
				case 4: money = skill*40000 + random(6000);
				case 5: money = skill*40000 + random(7000);
			}
		}
		case 3: money = skill*10000 + random(1000);
		case 4: money = skill*15000 + random(1000);
		case 7: money = skill*10000 + random(10000);
		case 8: money = skill*20000 + random(1000);
		case 9: money = skill*40000 + random(1000);
		case 10: money = skill*1000 + random(1000);
	}
	if(WorkingTime[playerid] < 60 && PlayerInfo[playerid][pJob] != 10) money -= 10000;

	JobDeelay[playerid][PlayerInfo[playerid][pJob]] = 180;
	TotalMoneyy = money;
	new premium[64], boost[64], skins[64], clans[64];
	if(PlayerInfo[playerid][pPremiumAccount] == 1) {
		format(premium, sizeof(premium), "Premium account: ~g~$%s ~w~~h~(25%s)~n~", FormatNumbers(money/3), "%");
		TotalMoneyy += money/3;
	}
	if(PlayerInfo[playerid][pJobBoost] > 0) {
		format(boost, sizeof(boost), "Boost: ~g~$%s~w~~h~ (50%s)~n~", FormatNumbers(money/2), "%");
		TotalMoneyy += money/2;
		PlayerInfo[playerid][pJobBoost] --;
		Update(playerid, pJobBoostx);
	}
	new skin = GetPlayerSkin(playerid);
	switch(skin) {
		case 170, 188, 249, 159, 260: {
			format(skins, sizeof(skins), "Skin rare: ~g~$%s~w~~h~ (10%s)~n~", FormatNumbers(money/4), "%");
			TotalMoneyy += money/4;		
		}
		case 228, 248, 264, 189, 185, 146: {
			format(skins, sizeof(skins), "Skin epic: ~g~$%s~w~~h~ (25%s)~n~", FormatNumbers(money/3), "%");
			TotalMoneyy += money/3;		
		}
		case 0, 104, 116, 149, 164, 285, 289, 294, 293, 306: {
			format(skins, sizeof(skins), "Skin legendar: ~g~$%s~w~~h~ (50%s)~n~", FormatNumbers(money/2), "%%");
			TotalMoneyy += money/2;
		}
		case 124, 181, 187, 241, 242, 292, 309: {
			format(skins, sizeof(skins), "Skin magic: ~g~$%s~w~~h~ (75%s)~n~", FormatNumbers(money-10000), "%");
			TotalMoneyy += money - 10000;	
		}	
	}	
	if(PlayerInfo[playerid][pClan] != 0) {
		format(clans, sizeof(clans), "Clan money: ~g~+%s ~w~~h~(10%s)~n~", FormatNumbers(money/4), "%");
		ClanInfo[PlayerInfo[playerid][pClan]][ClanBank] += money/4;
	}
	MoneyEarned[playerid] += TotalMoneyy;
	CurseFacute[playerid] ++;
	format(gString, sizeof(gString), "%s da nhan duoc $%s cho cong suc da bo ra cho cong viec %s.", GetName(playerid), FormatNumber(TotalMoneyy), JobInfo[PlayerInfo[playerid][pJob]][jName]);
	InsertLog(playerid, gString, LOG_MONEY);		
	PlayerTextDrawSetString(playerid, PayDayPTD[1], "Job Status");
	format(gString, sizeof(gString), "~n~Castig: ~g~$%s~w~~h~~n~%s%s%s%sCastig total: ~g~$%s~n~", FormatNumbers(money), premium, boost, skins, clans, FormatNumbers(TotalMoneyy));
	PlayerTextDrawSetString(playerid, PayDayPTD[0], gString);
	for(new l = 0; l < 3; l++) PlayerTextDrawShow(playerid, PayDayPTD[l]);
	TimerPayDay[playerid] = gettime()+7;
	GivePlayerCash(playerid, 1, TotalMoneyy);
	UpdateJobGoal(TotalMoneyy);
	Update(playerid, pCashx);
	
	WorkingTime[playerid] = 0;
	if(JoPlayPoints(playerid) == GetNeedPoints4(playerid, PlayerInfo[playerid][pJob])) {
		format(gString, sizeof(gString), "* Chuc mung! Noul tau skill la acest job este %d.", GetPlayerSkill(playerid));
		SCM(playerid, COLOR_YELLOW, gString);
	} else {
		if(togjob[playerid] == 0) JobProgress(playerid);	
	}	
	if(GetPlayerSkill(playerid) == 5) finishAchievement(playerid, 0);	
	return true;
}

function UpdateProgress(playerid) {
	if(PlayerInfo[playerid][pShowProgress][0] == 0) return true;
	new LevelProcent = ((PlayerInfo[playerid][pExp] * PlayerInfo[playerid][pLevel]) / PlayerInfo[playerid][pLevel]*levelexp) * 100;
	gString[0] = EOS;
	format(gString, sizeof(gString), "Level %d (%d%s)", PlayerInfo[playerid][pLevel], LevelProcent, "%%");
	PlayerTextDrawSetString(playerid, HudTD, gString);
	PlayerTextDrawShow(playerid, HudTD);
	SetPlayerProgressBarMaxValue(playerid, HudProgress[playerid][0], PlayerInfo[playerid][pLevel]*levelexp);
	SetPlayerProgressBarValue(playerid, HudProgress[playerid][0], PlayerInfo[playerid][pExp]);
	ShowPlayerProgressBar(playerid, HudProgress[playerid][0]);
	return true;
}

function DestroyProgress(playerid, bar) {
	HidePlayerProgressBar(playerid, HudProgress[playerid][bar]);
	PlayerTextDrawHide(playerid, HudTD);
	return true;
}
YCMD:skills(playerid, params[], help) {
	new needp[10], skill;
	gString[0] = EOS;
	SCM(playerid, COLOR_WHITE, "--------------------------- My Skills ---------------------------");
	skill = GetPlayerSkill2(playerid, 1);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 1));
	else needp = "-";
	format(gString, sizeof(gString), "* Farmer: %d (%d/%s)\n", GetPlayerSkill2(playerid, 1), PlayerInfo[playerid][pFarmerSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);

	skill = GetPlayerSkill2(playerid, 2);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 2));
	else needp = "-";
	format(gString, sizeof(gString), "* Trucker: %d (%d/%s)\n", GetPlayerSkill2(playerid, 2), PlayerInfo[playerid][pTruckerSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);

	skill = GetPlayerSkill2(playerid, 3);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 3));
	else needp = "-";
	format(gString, sizeof(gString), "* Car Jacker: %d (%d/%s)\n", GetPlayerSkill2(playerid, 3), PlayerInfo[playerid][pJackerSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);

	skill = GetPlayerSkill2(playerid, 4);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 4));
	else needp = "-";
	format(gString, sizeof(gString), "* Arms Dealer: %d (%d/%s)\n", GetPlayerSkill2(playerid, 4), PlayerInfo[playerid][pMatSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);

	skill = GetPlayerSkill2(playerid, 7);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 7));
	else needp = "-";
	format(gString, sizeof(gString), "* Pizza Boy: %d (%d/%s)\n", GetPlayerSkill2(playerid, 7), PlayerInfo[playerid][pPizzaSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);

	skill = GetPlayerSkill2(playerid, 8);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 8));
	else needp = "-";
	format(gString, sizeof(gString), "* Curier: %d (%d/%s)\n", GetPlayerSkill2(playerid, 8), PlayerInfo[playerid][pCurierSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);
	
	skill = GetPlayerSkill2(playerid, 9);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 9));
	else needp = "-";
	format(gString, sizeof(gString), "* Fisher: %d (%d/%s)\n", GetPlayerSkill2(playerid, 9), PlayerInfo[playerid][pFishSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);
	
	skill = GetPlayerSkill2(playerid, 10);
	if(skill < 5) format(needp, 10, "%d", GetNeedPoints(playerid, 10));
	else needp = "-";
	format(gString, sizeof(gString), "* Forklift: %d (%d/%s)\n", GetPlayerSkill2(playerid, 10), PlayerInfo[playerid][pStivuitorSkill], needp);
	SCM(playerid, COLOR_WHITE, gString);
	SCM(playerid, COLOR_WHITE, "-----------------------------------------------------------------");
	return true;
}
YCMD:creategun(playerid, params[], help) {
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai jobul Arms Dealer!");
	if(GetPlayerSkill(playerid) < 5) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai skill 5!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda dintr-un vehicul");
	
	new result[64];
	if(sscanf(params, "s[64]", result)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/creategun <gun name>");
		SCM(playerid, -1, "Deagle (1000), M4A4 (2000), AK47 (1500), Combat-Shotgun (5000), Rifle(3000).");
		return true;
	}	
	if(strcmp(result,"deagle",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 1000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 1000;
		UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
		ServerWeapon(playerid, 24, 50);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma Deagle cu 1000 de materiale.");
	}
	else if(strcmp(result,"m4a4",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 2000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 2000;
		UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
		ServerWeapon(playerid, 31, 120);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma M4A4 cu 2000 de materiale.");
	}	
	else if(strcmp(result,"ak47",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 1500) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 1500;
		UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
		ServerWeapon(playerid, 30, 120);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma AK47 cu 1500 de materiale.");
	}		
	else if(strcmp(result,"combat-shotgun",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 5000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 5000;
		UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
		ServerWeapon(playerid, 27, 20);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma Combat-Shotgun cu 1500 de materiale.");
	}		
	else if(strcmp(result,"rifle",true) == 0) {
		if(PlayerInfo[playerid][pMats] < 3000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 3000;
		UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
		ServerWeapon(playerid, 33, 120);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma Rifle cu 1500 de materiale.");
	}		
	else SCM(playerid, -1, "Deagle (1000), M4A4 (2000), AK47 (1500), Combat-Shotgun (5000), Rifle(3000).");
	return true;
}
	
stock GetHudColor(cid) {
	switch(cid) {
		case 0: return 0xFFFFFFFF;
		case 1: return 0xB8BFC2FF;
		case 2: return 0xFF0000FF;
		case 3: return 0x00FF2FFF;
		case 4: return 0x0E8C19FF;
		case 5: return 0x0022FFFF;
		case 6: return 0x00AAFFFF;
		case 7: return 0x00FFD0FF;
		case 8: return 0xFFFB00FF;
		case 9: return 0xFF8800FF;
		case 10: return 0xFFB957FF;
		case 11: return 0x8000FFFF;
		case 12: return 0xFF0077FF;						
	}
	return true;
}

stock GetHudColor2(cid) {
	switch(cid) {
		case 0: return 0xFFFFFF10;
		case 1: return 0xB8BFC210;
		case 2: return 0xFF000010;
		case 3: return 0x00FF2F10;
		case 4: return 0x0E8C1910;
		case 5: return 0x0022FF10;
		case 6: return 0x00AAFF10;
		case 7: return 0x00FFD010;
		case 8: return 0xFFFB0010;
		case 9: return 0xFF880010;
		case 10: return 0xFFB95710;
		case 11: return 0x8000FF10;
		case 12: return 0xFF007710;								
	}
	return true;
}

YCMD:hud(playerid, params[], help) {
	new szDialog[1024];
	strcat(szDialog, "HUD Type\tStatus\n");
	strcat(szDialog, PlayerInfo[playerid][pShowJob] == 0 ? "1. Job Info\t{FF0000}Disable{FFFFFF}\n" : "1. Job Info\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowCeas] == 0 ? "2. Time played\t{FF0000}Disable{FFFFFF}\n" : "2. Time played\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, PlayerInfo[playerid][pShowFP] == 0 ? "3. FPS and Ping\t{FF0000}Disable{FFFFFF}\n" : "3. FPS and Ping\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, PlayerInfo[playerid][pShowHP] == 0 ? "4. Desplay Health\t{FF0000}Disable{FFFFFF}\n" : "4. Desplay Health\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowAP] == 0 ? "5. Desplay Armour\t{FF0000}Disable{FFFFFF}\n" : "5. Desplay Armour\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, togalert[playerid] == 0 ? "6. Damage Alert\t{FF0000}Disable{FFFFFF}\n" : "6. Damage Alert\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowDMG] == 0 ? "7. Damage Informer\t{FF0000}Disable{FFFFFF}\n" : "7. Damage Informer\t{0AC917}Enabled{FFFFFF}\n");			
	strcat(szDialog, PlayerInfo[playerid][pShowBanca] == 0 ? "8. Bank Money Textdraw\t{FF0000}Disable{FFFFFF}\n" : "8. Bank Money Textdraw\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, PlayerInfo[playerid][pShowProgress][0] == 0 ? "9. Level Progress\t{FF0000}Disable{FFFFFF}\n" : "9. Level Progress\t{0AC917}Enabled{FFFFFF}\n");			
	strcat(szDialog, PlayerInfo[playerid][pHudGen] == 0 ? "10. Speedometer\t{FF0000}Disable{FFFFFF}\n" : "10. Speedometer\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowProgress][2] == 0 ? "11. Job Goal\t{FF0000}Disable{FFFFFF}\n" : "11. Job Goal\t{0AC917}Enabled{FFFFFF}\n");
	Dialog_Show(playerid, DIALOG_SHOW, DIALOG_STYLE_TABLIST_HEADERS, "{FFDD99}HUD {FFFFFF}Menu:", szDialog, "Ok", "Close");
	return true;
}
YCMD:questions(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 9) return true;
	switch(Questions) {
		case 0: {
			if(TalkingLive[playerid] == 255) return SCM(playerid, COLOR_LGREEN, "Nu esti intr-un live!");
			Questions = 1;
			SCM(playerid, COLOR_LGREEN, "Acum playerii pot trimite intrebari!");
		}
		case 1: {
			Questions = 0;
			SCM(playerid, COLOR_LGREEN, "Acum playerii nu mai pot trimite intrebari!");
		}		
	}
	return true;
}
YCMD:question(playerid, params[], help) {
	if(Question[playerid] == 1) return SCM(playerid, -1, "Nu poti pune mai multe intrebari!");
	if(Questions == 0) return SCM(playerid, COLOR_GREY, "Nu se pot pune intrebari acum!");
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_GREY, "Pentru a folosi aceasta comanda, ai nevoie de minim nivel 3!");
	new string[180], result[180];
	if(sscanf(params, "s[180]", result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/question <text>");
	if(strlen(result) < 10) return SCM(playerid, -1, "Intrebare prea mica!");
	format(string, sizeof(string), "Intrebare de la %s (%d): %s", GetName(playerid), playerid, result);
	SendFactionMessage(9, COLOR_YELLOW, string);
	Question[playerid] = 1;
	SCM(playerid, COLOR_YELLOW, "Intrebare trimisa!");
	format(QuestText[playerid], 256, result);
	return true;
}
YCMD:aq(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 9) return true;
	if(TalkingLive[playerid] == 255) return SCM(playerid, COLOR_LGREEN, "Nu esti intr-un live!");
	if(Questions == 0) return SCM(playerid, COLOR_GREY, "Nu poti accepta intrebari acum!");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/aq <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat!");
	if(Question[id] == 0) return SCM(playerid, -1, "Acel player nu a pus o intrebare!");
	Question[id] = 0;
	new string[180];
	format(string, sizeof(string), "Intrebare de la %s: %s", GetName(id), QuestText[id]);
	SCMTA(COLOR_LIGHTGREEN, string);
	return true;
}
YCMD:news(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, COLOR_GREY, "Ban khong thuoc News Reporters.");
	new string[128], hour, minute, second;
	gettime(hour, minute, second);
	if(minute < 50 || minute > 59) return SCMf(playerid, COLOR_LGREEN, "Error: Poti pune anuturi intre de la %d:50 pana la %d:00", hour, hour+1);
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	if(DeelayCommand[playerid][16] != 0) return DeelayTime(playerid, 16);
	new result[250];
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/news <text>");
	if(!FactionVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Khong o trong xe ce apartine factiunii tale!");
	format(string, sizeof(string), "News %s: %s", GetName(playerid), result);
	OOCNews(COLOR_NEWS,string);				
	UpdateFactionRaport(playerid, 0);	
	DeelayCommand[playerid][16] = 60;
	for(new m; m < 2; m++) {
		if(PlayerInfo[playerid][pDailyMission][m] == 15 || PlayerInfo[playerid][pDailyMission][m] == 16) CheckMission(playerid, m);
	}		
	return true;
}
YCMD:clothes(playerid, params[], help) {
	if(!IsAtClothShop(playerid)) return SCM(playerid,COLOR_GREY, "Nu esti intr-un magazin de haine.");
	if(Escape[playerid] == 1) {
		if(PlayerInfo[playerid][pChar] > 0) SetPlayerSkinEx(playerid, PlayerInfo[playerid][pChar]);
		else SetPlayerSkinEx(playerid, PlayerInfo[playerid][pModel]);
		Escape[playerid] = 0;
		new string[180];
		format(string, sizeof(string), "Dispatch: %s a reusit sa evadeze.", GetName(playerid));
		SendTeamMessage(14, 0x2e64feFF, string);
		SendTeamMessage(3, 0x2e64feFF, string);
		SendTeamMessage(2, 0x2e64feFF, string);
		SendTeamMessage(1, 0x2e64feFF, string);
		SCM(playerid, COLOR_YELLOW, "Ai reusit sa evadezi!");
		PlayerInfo[playerid][pWantedLevel] = 0;
		SetPlayerWantedLevel(playerid, 0);
		ClearCrime(playerid);
		Update(playerid,pWantedLevelx);	
		finishAchievement(playerid, 16);		
		return true;
	}
	if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)  {
		if(OnDuty[playerid] == 0 && IsACop(playerid)) return SCM(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
		ShowModelSelectionMenu (playerid, fskins[PlayerInfo[playerid][pMember]-1], "Haine");	
	}
	else ShowModelSelectionMenu (playerid, skinlist, "Haine");
	return true;
}
YCMD:removeglasses(playerid, params[], help) {
	new szMessage[180];
	if(PlayerInfo[playerid][pShowGlasses] == 0) return SCM(playerid, COLOR_GREY, "Nu ai ochelarii pe ochi.");
	StopPlayerHoldingObject(playerid);
	PlayerInfo[playerid][pShowGlasses] = 0;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `ShowGlasses` = '%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pShowGlasses], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	format(szMessage, 256, "%s si-a scos ochelarii de pe ochi.", GetName(playerid));
	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE);
	SCM(playerid, -1, "Pentru a-ti pune la loc ochelarii, trebuie sa folosesti comanda /putglasses.");
	return true;
}
YCMD:putglasses(playerid, params[], help) {
	new szMessage[180];
	if(PlayerInfo[playerid][pGlasses] == 0) return SCM(playerid, COLOR_GREY, "Nu ai o pereche de ochelari.");
	if(PlayerInfo[playerid][pShowGlasses] == 1) return SCM(playerid, COLOR_WHITE, "Ai deja ochelarii pe ochi.");
	PlayerInfo[playerid][pShowGlasses] = 1;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `ShowGlasses` = '%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pShowGlasses], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	new skin = PlayerInfo[playerid][pChar];
	SetPlayerHoldingObject(playerid, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
	format(szMessage, 256, "%s si-a pus ochelarii pe ochi.", GetName(playerid));
	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE);
	return true;
}
YCMD:glasses(playerid, params[], help) {
	if(IsAtClothShop(playerid)) ShowModelSelectionMenu(playerid, glasses, "Ochelari") ;
	return true;
}

total_skins(playerid) {
	new x;
	for(new i; i < 10; i++) {
		if (PlayerInfo[playerid][pSkins][i] != -1) x++;
	}
	return x;
}

are_acest_skin(playerid, model) {
	for(new i; i < 10; i++) {
		if (PlayerInfo[playerid][pSkins][i] == model) return true;
	}
	return false;
}


save_skin(playerid) {
	new string[128];
	mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Skin`='%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|' WHERE `ID`='%d'",
		PlayerInfo[playerid][pSkins][0], PlayerInfo[playerid][pSkins][1], PlayerInfo[playerid][pSkins][2], PlayerInfo[playerid][pSkins][3], PlayerInfo[playerid][pSkins][4],
		PlayerInfo[playerid][pSkins][5], PlayerInfo[playerid][pSkins][6], PlayerInfo[playerid][pSkins][7], PlayerInfo[playerid][pSkins][8], PlayerInfo[playerid][pSkins][9], 
	PlayerInfo[playerid][pSQLID]);

	mysql_tquery(SQL, string, "", "");
}

give_skin(playerid, model) {
	for(new i; i < 10; i++) {
		if (PlayerInfo[playerid][pSkins][i] == -1) {
			PlayerInfo[playerid][pSkins][i] = model;
			save_skin(playerid);
			break;
		}
	}
}

stock LoadSkins(crates, &skin) {
	switch(crates) {
		case 0: {
			new rand = random(4);
			switch(rand) {
				case 0: skin = 167;
				case 1: skin = 170;
				case 2: skin = 188;
				case 3: skin = 159;
				case 4:	skin = 160;
			}
		}
		case 1: {
			new rand = random(5);
			switch(rand) {
				case 0: skin = 228;
				case 1: skin = 248;
				case 2: skin = 264;
				case 3: skin = 189;
				case 4:	skin = 185;
				case 5: skin = 146;
			}
		}
		case 2: {
			new rand = random(9);
			switch(rand) {
				case 0: skin = 0;
				case 1: skin = 104;
				case 2: skin = 116;
				case 3: skin = 164;
				case 4:	skin = 149;
				case 5: skin = 306;
				case 6: skin = 293;
				case 7: skin = 285;
				case 8: skin = 289;
				case 9: skin = 294;
			}
		}
		case 3: {
			new rand = random(5);
			switch(rand) {
				case 0: skin = 93;
				case 1: skin = 108;
				case 2: skin = 171;
				case 3: skin = 177;
				case 4:	skin = 217;
				case 5:	skin = 271;
			}
		}
	}
	return true;
}
stock GetSkinRareCMD(skin) {
	new x;
	switch(skin) {
		case 167, 170, 188, 159, 260: x = 0x87CCEEFF;
		case 228, 248, 264, 189, 185, 146: x = 0xC844B2FF;
		case 0, 104, 116, 164, 149, 306, 293, 285, 289, 294: x = 0xFFA31FFF;
		case 93, 108, 171, 177, 217, 271: x = 0xe7331eFF;
		case 124, 187, 181, 241, 242, 292, 309: x = 0x00ffdcFF;
		default: x = 0xFFFFFFFF;
	}
	return x;
}
stock GetSkinType(skin) {
	new string[20];
	switch(skin) {
		case 167, 170, 188, 159, 260: string = "Rare";
		case 228, 248, 264, 189, 185, 146: string = "Epic";
		case 0, 104, 116, 164, 149, 293, 285, 289, 294: string = "Legendary";
		case 93, 108, 171, 177, 217, 271: string = "Transcendent";
		case 124, 187, 181, 241, 242, 292, 309: string = "Unique";
		default: string = "None";
	}
	return string;
}
function GetSkinRare(skin) {
	switch(skin) {
		case 167, 170, 188, 159, 260, 228, 248, 264, 189, 185, 146, 0, 104, 116, 149, 164, 293, 285, 289, 294, 124, 187, 181, 241, 242, 292, 309, 93, 108, 171, 177, 217, 271: return true;
	}
	return false;
}
YCMD:myskins(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) 
		return SCM(playerid, COLOR_LGREEN, "Error: Ban khong the thuc hien hanh dong nay khi dang o trong mot phuong tien!");
	
	if(OnDuty[playerid] == 1)
		return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda cand esti duti.");

	for(new i = 0; i < 10; i++) {
		if(PlayerInfo[playerid][pSkins][i] != -1) PlayerTextDrawSetPreviewModel(playerid, SkinsPTD[i], PlayerInfo[playerid][pSkins][i]);
		else if(PlayerInfo[playerid][pSkins][i] == -1) PlayerTextDrawSetPreviewModel(playerid, SkinsPTD[i], 18631);
		if(GetSkinRare(PlayerInfo[playerid][pSkins][i]) == 1) PlayerTextDrawBackgroundColor(playerid, SkinsPTD[i], GetSkinRareCMD(PlayerInfo[playerid][pSkins][i]));
		else PlayerTextDrawColor(playerid, SkinsPTD[i], GetSkinRareCMD(PlayerInfo[playerid][pSkins][i]));
	}
	IsSkins[playerid] = 1;
	for(new i = 0; i < 10; i++) PlayerTextDrawShow(playerid, SkinsPTD[i]);
	for(new i = 0; i < 9; i++) TextDrawShowForPlayer(playerid, SkinsTD[i]);
	SelectTextDraw(playerid, 0xF7E562FF);
	return true;
}

public OnPlayerModelSelection(playerid, response, listid, modelid) {
	if(listid == hats) {
		if(response) {
			if(PlayerMoney(playerid, 500)) return SCM(playerid, COLOR_GREY, "Ban khong du tien!");
			PlayerInfo[playerid][pHat] = modelid;
			PlayerInfo[playerid][pShowHat] = 1;
			PutHat(playerid);
			UpdateVar(playerid, "Hat", modelid);
			UpdateVar(playerid, "ShowHat", 1);
			SCM(playerid, COLOR_YELLOW, "Ti-ai cumparat o palarie! Lenh co san: /puthat, /removehat.");
			BizzInfo[InBussines[playerid]][bBalance] += 500;
			GivePlayerCash(playerid, 0,500);
			new query[128];
			mysql_format(SQL, query,sizeof(query),"UPDATE users SET `Money`='%d', `MStore`='%d' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,query, "", "");
			finishAchievement(playerid, 5);	
		}
		return true;
	}
	
	if(listid == glasses)
	{
		if(response)
		{
			if(PlayerMoney(playerid, 500)) return SCM(playerid, COLOR_GREY, "Ban khong du tien!");
			PlayerInfo[playerid][pGlasses] = modelid;
			PlayerInfo[playerid][pShowGlasses] = 1;
			new szQuery[256];
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `ShowGlasses` = '%d', `Glasses`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pShowGlasses], modelid, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, szQuery, "", "");
			new skin = PlayerInfo[playerid][pChar];
			SetPlayerHoldingObject(playerid, modelid, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
			BizzInfo[InBussines[playerid]][bBalance] += 500;
			GivePlayerCash(playerid, 0, 500);
			new query[184];
			mysql_format(SQL, query,sizeof(query),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance],InBussines[playerid]);
			mysql_tquery(SQL,query, "", "");
			SCM(playerid, COLOR_MONEY, "Ai cumparat o pereche de ochelari pentru $500.");
			SCM(playerid, -1, "Pentru a-ti scoate ochelarii de pe ochi, poti folosi comanda /removeglasses.");			
			finishAchievement(playerid, 4);	
		}
		return true;
	}

	if(listid == skinlist)
	{
		if(response) {
			if(PlayerMoney(playerid, 1000)) return SCM(playerid, COLOR_GREY, "Ban khong du tien!");
			if(total_skins(playerid) == 10) return SCM(playerid, COLOR_GREY, "Ai prea multe skin-uri! Sterge din ele!");
			if(are_acest_skin(playerid, modelid)) return SCM(playerid, COLOR_GREY, "Ai deja un skin de acest fel!");
			give_skin(playerid, modelid);
			PlayerInfo[playerid][pChar] = modelid;
			SetPlayerSkinEx(playerid, PlayerInfo[playerid][pChar]);
			BizzInfo[InBussines[playerid]][bBalance] += 1000;
			GivePlayerCash(playerid, 0,1000);
			new str2[128];
			mysql_format(SQL, str2,sizeof(str2),"UPDATE users SET `Money`='%d', `MStore`='%d',`CChar`='%d' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[playerid][pChar],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,str2, "", "");
			if(PlayerInfo[playerid][pTutorial] == 7) {
				if(GetPlayerSkin(playerid) != 250 || GetPlayerSkin(playerid) != 192) {
					Tutorial(playerid);
				}
			}
		}
		return true;
	}

	if(listid == fskins[PlayerInfo[playerid][pMember]-1])
	{
		if(response)
		{
			if(PlayerMoney(playerid, 1000)) return SCM(playerid, COLOR_GREY, "Ban khong du tien!");
			PlayerInfo[playerid][pChar] = modelid;
			if(IsACop(playerid) && OnDuty[playerid] == 0) SetPlayerSkinEx(playerid, 250);
			else SetPlayerSkinEx(playerid, PlayerInfo[playerid][pChar]);
			if(IsACop(playerid) && OnDuty[playerid] == 0) SCM(playerid, COLOR_CLIENT, "Ti-ai ales skin-ul cu succes. Nu l-Ban nhan duoc deoarece nu esti la datorie.");
			GivePlayerCash(playerid, 0,1000);
			new str2[128];
			mysql_format(SQL, str2,sizeof(str2),"UPDATE users SET `Money`='%d', `MStore`='%d',`CChar`='%d' WHERE `ID`='%d'",MoneyMoney[playerid], StoreMoney[playerid],PlayerInfo[playerid][pChar],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,str2, "", "");
			if(PlayerInfo[playerid][pTutorial] == 7) {
				if(GetPlayerSkin(playerid) != 250 || GetPlayerSkin(playerid) != 192) {
					Tutorial(playerid);
				}
			}
		}
	}		
	return true;
}
YCMD:frisk(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti politist.");
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/frisk <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, -1, "Acel player nu este langa tine.");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "Ban khong the su dung lenh nay len chinh minh!");
	new text1[20], text2[20], text4[20];
	if(PlayerInfo[id][pDrugs] > 0) { text1 = "| Droguri."; } else { text1 = "| Buzunar gol."; }
	if(PlayerInfo[id][pMats] > 0) { text2 = "| Materiale."; } else { text2 = "| Buzunar gol."; }
	if(PlayerInfo[id][pPhoneBook] > 0) { text4 = "| Phone Book."; } else { text4 = "| Buzunar gol."; }
	format(string, sizeof(string), "** Lucrurile lui %s{FFFFFF} **", GetName(id));
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "%s, grame de droguri: %d", text1,PlayerInfo[id][pDrugs]);
	SCM(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "%s, materiale: %d", text2,PlayerInfo[id][pMats]);
	SCM(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "%s.", text4);
	SCM(playerid, 0xFFFFFFAA, string);
	new Player_Weapons[13], Player_Ammos[13], i;
	for(i = 1;i <= 12;i++) {
		GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
		if(Player_Weapons[i] != 0) {
			new weaponName[180];
			GetWeaponName(Player_Weapons[i],weaponName,255);
			format(string,255,"* %s, vu khi:{FFFFFF} %s, Gloanta:{FFFFFF} %d",GetName(id),weaponName,Player_Ammos[i]);
			SCM(playerid,0xFFFFFFAA,string);
		}
	}
	format(string, sizeof(string), "* %s l-a verificat pe %s pentru lucruri ilegale.", GetName(playerid) ,GetName(id));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	return true;
}
YCMD:contract(playerid, params[], help) {
	new userID, money, szMessage[180];
	if(sscanf(params, "ui", userID, money)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/contract <playerid/name> <money>");
	if(!IsPlayerConnected(userID) && userID == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(money < 1000 || money > 1000000) return SCM(playerid, COLOR_GREY, "Poti pune un contract pe Toi thieu $1,000 sau va toi da $1,000,000.");
	if(PlayerMoney(playerid, money)) return SCM(playerid, COLOR_GREY, "Nu ai aceasta suma de bani!");
	if(userID == playerid) return SCM(playerid, COLOR_GREY, "Nu poti pune un contract pe tine!");
	if(PlayerInfo[userID][pMember] == 11 || PlayerInfo[userID][pLeader] == 11) return SCM(playerid, COLOR_GREY, "Nu poti pune un contract pe un Hitman!");
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda deoarece faci parte din aceasta factiune.");
	if(PlayerInfo[userID][pAdmin] != 0) return SCM(playerid, -1, "Acel player are admin.");
	GivePlayerCash(playerid, 0, money);
	Contract[userID] = 1;
	if(Contract[userID] == 1) HeadValue[userID] += money;
	else HeadValue[userID] = money;
	UsedContract[userID] = 0;
	format(szMessage, sizeof(szMessage), "Ai pus un contract pe %s pentru suma de $%s.", GetName(userID), FormatNumber(money));
	SCM(playerid, COLOR_WHITE, szMessage);
	format(szMessage, sizeof(szMessage), "# Un nou contract este disponibil pentru suma de $%s.", FormatNumber(money));
	SendFactionMessage(11, COLOR_LIGHTBLUE, szMessage);
	for(new m; m < 2; m++) {
		if(PlayerInfo[playerid][pDailyMission][m] == 18) CheckMission(playerid, m);
	}		
	return true;
}
YCMD:contracts(playerid, params[], help) {
	new contracts, szMessage[180];
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SCM(playerid, COLOR_GREY, "Nu esti Hitman!");
	SCM(playerid, COLOR_SERVER, "------------------- Contracte -------------------");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && UsedContract[i] == 0) {
			if(Contract[i] == 1) {
				contracts ++;
			}
		}
	}
	if(contracts == 0) return SCM(playerid, COLOR_WHITE, "Momentan, nu sunt contracte.");
	else {
		format(szMessage, 256,  "Au fost gasite %d contracte!", contracts);
		SCM(playerid, -1, szMessage);
	}
	SCM(playerid, COLOR_SERVER, "------------------- Contracte -------------------");
	return true;
}

stock FailRaport(playerid, id) {
	switch(id) {
		case 0: SCM(playerid, COLOR_YELLOW, "Ban nhan duoc un punct de raport invalid deoarece nu ai telefonul inchis.");
		case 1: SCM(playerid, COLOR_YELLOW, "Ban nhan duoc un punct de raport invalid deoarece nu esti undercover.");
		case 2: SCM(playerid, COLOR_YELLOW, "Ban nhan duoc un punct de raport invalid deoarece khoang cach dintre tine si tinta este mai mica de 100m.");
	}
	PlayerInfo[playerid][pInvalidCommands] ++;
	UpdateVar(playerid, "InvalidCommands", PlayerInfo[playerid][pInvalidCommands]);
	return true;
}
YCMD:undercover(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SCM(playerid, COLOR_GREY, "Nu esti Hitman!");
	new string[256];
	if(GetPVarInt(playerid, "Undercover") == 0) {
		if(!PlayerToPoint(100, playerid, -2162.3484,641.3492,1052.3750)) return SCM(playerid, COLOR_GREY, "Aceasta comanda se poate folosi doar in interiorul HQ-ului.");
		SetPVarInt(playerid, "Undercover", 1);		
		format(string, sizeof(string), "**(( HA Dispatch: Hitman %s (%d) este acum sub acoperire. ))**", GetName(playerid), playerid);
		SendTeamMessage(11, 0x2C6CBFFF, string);
		SCM(playerid, COLOR_WHITE, "Acum Ban dang cai trang (undercover). Playerii nu iti mai vor vedea numele.");
		foreach(new i: Player) ShowPlayerNameTagForPlayer(i, playerid, false);
		PlayerTextDrawShow(playerid, UndercoverTD);
	}
	else {
		SetPVarInt(playerid, "Undercover", 0);
		SCM(playerid, COLOR_WHITE, "Acum nu mai Ban dang cai trang (undercover).");
		foreach(new i: Player) ShowPlayerNameTagForPlayer(i, playerid, true);
		PlayerTextDrawHide(playerid, UndercoverTD);
	}	
	return true;
}	

YCMD:gethit(playerid, params[], help) {
	new userID, playerID[MAX_PLAYERS], contracts, szMessage[180];
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SCM(playerid, COLOR_GREY, "Nu esti Hitman!");
	if(!PlayerToPoint(100, playerid, -2162.3484,641.3492,1052.3750)) return SCM(playerid, COLOR_GREY, "Aceasta comanda se poate folosi doar in interiorul HQ-ului.");
	if(PlayerHit[playerid] != -1) return SCM(playerid, COLOR_WHITE, "Ai deja un contract.");
			
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(Contract[i] == 1 && UsedContract[i] == 0) {
				contracts ++;
				playerID[contracts] = i;
			}
		}
	}
	if(contracts == 0) return SCM(playerid, COLOR_WHITE, "Momentan, nu sunt contracte.");
	if(contracts == 1) userID = playerID[1];
	else userID = random(contracts);
	if(PlayerInfo[userID][pMember] == 11) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda acum!");
	UsedContract[userID] = 1;
	PlayerHit[playerid] = userID;
	format(szMessage, sizeof(szMessage), "**(( HA Dispatch: Hitman %s (%d) a preluat un nou contract pentru suma de %d$. ))**", GetName(playerid), playerid, HeadValue[userID]);
	SendFactionMessage(11, COLOR_LIGHTBLUE, szMessage);
	return true;
}
YCMD:leavehit(playerid, params[], help) {
	new szMessage[180];
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SCM(playerid, COLOR_GREY, "Nu esti Hitman!");
	if(PlayerHit[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu ai un contract.");
	new userID = PlayerHit[playerid];
	format(szMessage, sizeof(szMessage), "**(( HA Dispatch: Hitman %s (%d) a anulat contractul sau. ))**", GetName(playerid), playerid);
	SendFactionMessage(11, COLOR_LIGHTBLUE, szMessage);
	UsedContract[userID] = 0;
	PlayerHit[playerid] = -1;
	return true;
}
YCMD:mycontract(playerid, params[], help) {
	new szMessage[180];
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SCM(playerid, COLOR_GREY, "Nu esti Hitman!");
	if(PlayerHit[playerid] == -1) return SCM(playerid, COLOR_GREY, "Nu ai un contract.");
	format(szMessage, sizeof(szMessage), "Ai un contract pe %s(%d) pentru suma de $%s.", GetName(PlayerHit[playerid]), PlayerHit[playerid], FormatNumber(HeadValue[PlayerHit[playerid]]));
	SCM(playerid, COLOR_SERVER, szMessage);
	return true;
}
YCMD:quitfaction(playerid, params[], help) {
	if(PlayerInfo[playerid][pMember] == 0 && PlayerInfo[playerid][pLeader] == 0) return true;
	if(PlayerInfo[playerid][pLeader] != 0) return SCM(playerid, -1, "Nu poti iesi din aceasta factiune deoarece esti lider!");
 	Dialog_Show(playerid, DIALOG_QUITFACTION, DIALOG_STYLE_MSGBOX, "Server:", "Esti sigur ca vrei sa parasesti acesta factiune?\nDaca factiunea nu are lider, nu vei primi FP iar daca are vei primi 20 FP!", "Co", "Khong");
	return true;
}
YCMD:blockfc(playerid, params[], help) {
	if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai acces la aceasta comanda!");
	new string[180];
	switch(FactionChat[PlayerInfo[playerid][pMember]]) {
		case 0: {
			FactionChat[PlayerInfo[playerid][pMember]] = 1;
			format(string, sizeof(string), "%s a oprit chatul factiunii.", GetName(playerid));			
		}
		case 1: {
			FactionChat[PlayerInfo[playerid][pMember]] = 0;
			format(string, sizeof(string), "%s a activat chatul factiunii.", GetName(playerid));				
		}
	}
	SendFactionMessage(PlayerInfo[playerid][pMember], 0x0080FFFF, string);
	return true;
}
YCMD:f(playerid, params[], help) {
	new string[256];
	if(PlayerInfo[playerid][pMember] == 0 && PlayerInfo[playerid][pLeader] == 0) {
		if(SpecFaction[playerid] == 0) return true;
	}
	if(PlayerInfo[playerid][pMuted] == 1) {
		format(string, sizeof(string), "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
		SCM(playerid, COLOR_GREY, string);
		return true;
	}
	new result[250];
	if(FactionChat[PlayerInfo[playerid][pMember]] == 1 && PlayerInfo[playerid][pRank] < 6) return SCM(playerid, COLOR_GREY, "Chatul factiunii a fost oprit!");
	if(sscanf(params, "s[250]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/f <text>");
	if(FaceReclama(result)) return RemoveFunction(playerid, result);
	if(FaceReclama(result)) return Reclama(playerid, result);
	if(SpecFaction[playerid] != 0) {
		format(string, sizeof(string), "* Admin %s: %s", GetName(playerid), result); 
		SendFactionMessage(SpecFaction[playerid], 0x0080FFFF, string);
		ChatLog(GetName(playerid), playerid, string);			
		return true;
	}		
	new member = PlayerInfo[playerid][pMember];
	new leader = PlayerInfo[playerid][pLeader];
	if(IsACop(playerid)) return true;
	if(member == 3 || leader == 3) return true;
	if(member == 14) return true;
	if(PlayerInfo[playerid][pRank] >= 6) {
		format(string, sizeof(string), "(/f) %s %s: %s", GetRankName(playerid), GetName(playerid), result);
		SendFactionMessage(PlayerInfo[playerid][pMember], 0x00AAFFFF, string);
	}
	else {
		format(string, sizeof(string), "(/f) %s %s: %s", GetRankName(playerid), GetName(playerid), result); 
		SendFactionMessage(PlayerInfo[playerid][pMember], 0x00D5FFFF, string);
	}	
	ChatLog(GetName(playerid), playerid, string);	
	return true;
}
YCMD:animlist(playerid, params[], help) {
	SCM(playerid,COLOR_LGREEN,"Anim list:");
	SCM(playerid,COLOR_WHITE,"Lifejump, Robman, Exhaust, Carlock, Rcarjack1, Lcarjack1, Rcarjack2, Lcarjack2, Hoodfrisked;");
	SCM(playerid,COLOR_WHITE,"Lightcig, Tapcig, Bat, Lean, Clearanim, Dancing, Box, Lowthrow, Highthrow;");
	SCM(playerid,COLOR_WHITE,"Leftslap, Handsup, Fall, Fallback, Sup, Rap, Push, Akick, Lowbodypush;");
	SCM(playerid,COLOR_WHITE,"Spray, Headbutt, Pee, Koface, Kostomach, Kiss, Rollfall, Lay2, Hitch;");
	SCM(playerid,COLOR_WHITE,"Beach, Medic, Scratch, Sit, Drunk, Bomb, Getarrested, Laugh, Lookout;");
	SCM(playerid,COLOR_WHITE,"Aim, Crossarms, Lay, Hide, Vomit, Eating, Wave, Shouting, Chant;");
	SCM(playerid,COLOR_WHITE,"Frisked, Exhausted, Injured, Slapass, Deal, Dealstance, Crack, Wank, Gro;");
	SCM(playerid,COLOR_WHITE,"Sit, Chat, Fucku, Taichi, Knife, Basket, JumpWater.");
	return true;
}
YCMD:carhand(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	ApplyAnimation(playerid,"CAR","Tap_hand",4.1,0,1,1 ,1,1);
	return true;
}
YCMD:lifejump(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
	return true;
}
YCMD:robman(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:exhaust(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return true;
}
OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp) 
	return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
YCMD:rcarjack1(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
	return true;
}
YCMD:lcarjack1(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
	return true;
}
YCMD:rcarjack2(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
	return true;
}
YCMD:lcarjack2(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
	return true;
}
YCMD:hoodfrisked(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
	return true;
}
YCMD:lightcig(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
	return true;
}
YCMD:tapcig(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
	return true;
}
YCMD:bat(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
	return true;
}
YCMD:lean(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
	if(sscanf(params, "d",test)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/lean <1-2>");
	switch (test)
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		default: SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/lean <1-2>");
	}
	return true;
}
YCMD:clearanim(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	return true;
}
YCMD:dancing(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
	if(sscanf(params, "d",test)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dancing <1-7>");
	switch (test)
   	{
		case 1: LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
	 	case 3: LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4: LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5: LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6: LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
	 	case 7: LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
	 	default: SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/dancing <1-7>");
	}
	return true;
}
YCMD:box(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return true;
}
YCMD:lowthrow(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	return true;
}
YCMD:highthrow(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
	return true;
}
YCMD:leftslap(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	return true;
}
YCMD:handsup(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	if(Freezed[playerid] == 1) return true;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return true;
}
YCMD:fall(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
	return true;
}
YCMD:fallback(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:laugh(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return true;
}
YCMD:lookout(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return true;
}
YCMD:aim(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:crossarms(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
	return true;
}
YCMD:lay(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:hide(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:vomit(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return true;
}
YCMD:wave(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:shouting(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
	return true;
}
YCMD:chant(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
	return true;
}
YCMD:frisked(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
	return true;
}
YCMD:exhausted(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return true;
}
YCMD:injured(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:slapass(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return true;
}
YCMD:deal(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
	return true;
}
YCMD:dealstance(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
	return true;
}
YCMD:crack(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:wank(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	return true;
}
YCMD:salute(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	ApplyAnimation(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
	return true;
}
YCMD:gro(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:sup(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
	if(sscanf(params, "d",test)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/sup <1-3>");
	switch (test)
  	{
		case 1: OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
	 	case 2: OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
	 	case 3: OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
		default: SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/sup <1-3>");
	}
	return true;
}
YCMD:rap(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
	if(sscanf(params, "d",test)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/rap <1-4>");
	switch (test)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
	 	case 4: LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
		default: SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/rap <1-4>");
	}
	return true;
}
YCMD:push(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return true;
}
YCMD:akick(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return true;
}
YCMD:lowbodypush(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
	return true;
}
YCMD:headbutt(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
	return true;
}
YCMD:pee(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	if(Freezed[playerid] == 1) return true;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return true;
}
YCMD:koface(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
	return true;
}
YCMD:kostomach(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
	return true;
}
YCMD:kiss(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"KISSING", "Grlfrd_Kiss_02", 1.800001, 1, 0, 0, 1, 600);
	return true;
}
YCMD:rollfall(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	return true;
}
YCMD:lay2(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
	return true;
}
YCMD:hitch(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:beach(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
	return true;
}
YCMD:medic(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
	return true;
}
YCMD:scratch(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:sit(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	return true;
}
YCMD:drunk(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
	return true;
}
YCMD:bomb(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
   	ClearAnimations(playerid);
   	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return true;
}
YCMD:getarrested(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
	return true;
}
YCMD:chat(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
	return true;
}
YCMD:fucku(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return true;
}
YCMD:taichi(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return true;
}
YCMD:knife(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
	if(sscanf(params, "d",test)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/knife <1-4>");
	switch (test)
	{
		case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
	 	case 2: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
	  	case 3: OnePlayAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
	 	case 4: LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
		default: SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/knife <1-4>");
	}
	return true;
}
YCMD:basket(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
	if(sscanf(params, "d",test)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/basket <1-6>");
	switch (test)
 	{
		case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		case 2: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	 	case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
	 	case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
	   	case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
		default: SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/basket <1-6>");
	}
	return true;
}
YCMD:dance(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatia aceasta atata timp cat esti intr-un vehicul.");new test;
	if(sscanf(params, "d",test)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dance <1-4>");
	if(test < 1 || test > 4) return SCM(playerid,COLOR_GREY, "Syntax: {FFFFFF}/dance <1-4>");
	if(test == 1) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	else if(test== 2) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	else if(test == 3) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	else if(test == 4) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	return true;
}
YCMD:jumpwater(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi animatia aceasta atata timp cat esti intr-un vehicul.");
	ApplyAnimation(playerid,"DAM_JUMP","DAM_LAUNCH",2,0,1,1,0,0);
	return true;
}

function ValidBizPrice(biz) {
	new price = 2000;
	return price;
}
YCMD:bizwithdraw(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /bizmenu!");
YCMD:bizfee(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /bizmenu!");
YCMD:bizname(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /bizmenu!");
YCMD:sellbiz(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece a fost adaugata comanda /bizmenu!");
YCMD:sellbizto(playerid, params[], help) return SCM(playerid, COLOR_LGREEN, "Aceasta comanda a fost dezactivata deoarece acum se pot face afaceri prin intermediul comenzii /trade.");
YCMD:sellbiztostate(playerid, params[], help) {
		
	if(TradeID[playerid] != -1) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
	new playername[25];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerInfo[playerid][pBizz] == 255) return SCM(playerid, COLOR_GREY, "Nu detii o afacere.");
	Dialog_Show(playerid, DIALOG_SELLBIZ, DIALOG_STYLE_MSGBOX, "Server:", "Esti sigur ca vrei sa-ti vinzi afacearea pentru $100,000 la stat?\nDaca apesi pe butonul 'Da', nu mai exista cale de intoarcere!", "Co", "Khong");
	return true;
}
YCMD:buybiz(playerid, params[], help) {
	new id, string[256];
	if(PlayerInfo[playerid][pBizz] != 255) return SCM(playerid, COLOR_WHITE, "Ai deja un biz! Foloseste /sellbiztostate pentru a-l vinde.");
	for(new b = 1; b < sizeof(BizzInfo); b++) {
		if(PlayerToPoint(2, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bBuyPrice] != 0) {
			if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevel]) {
				format(string, sizeof(string), "Ai nevoie de nivel %d pentru a cumpara.",BizzInfo[b][bLevel]);
				SCM(playerid, COLOR_WHITE, string);
				return true;
			}
			if(PlayerMoney(playerid, BizzInfo[b][bBuyPrice])) return SCM(playerid, COLOR_GREY, "Ban khong du tien pentru a face asta.");
			gQuery[0] = EOS;
			id = GetPlayerID(BizzInfo[b][bOwner]);
			if(id != INVALID_PLAYER_ID) {
				PlayerInfo[id][pBizz] = 255;
				Update(id, pBizzx);
				GivePlayerBank(id, BizzInfo[b][bBuyPrice]);
				Update(id, pBankx);
				Update(id, pMBankx);
				format(string, sizeof(string), "* %s ti-a cumparat afacerea pentru {19CF2E}$%s{239931}. Banii au fost transferati in contul tau bancar.", GetName(playerid), FormatNumber(BizzInfo[b][bBuyPrice]));
				SCM(id, 0x239931FF, string);
				mysql_format(SQL, gQuery,sizeof(gQuery),"UPDATE users SET `Bank`='%d', `MBank`='%d' WHERE `ID`='%d'",PlayerInfo[id][pAccount],PlayerInfo[id][pStoreAccount], PlayerInfo[id][pSQLID]);
				mysql_tquery(SQL, gQuery, "", "");					
			}
			else {
				mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `name` = '%s'", BizzInfo[b][bOwner]);
				mysql_tquery(SQL, gQuery, "CheckUsers", "ii", 1, b);
			}				
			PlayerInfo[playerid][pBizz] = b;
			BizzInfo[b][bOwned] = 1;
			format(BizzInfo[b][bOwner], 256, GetName(playerid));			
			GivePlayerCash(playerid, 0, BizzInfo[b][bBuyPrice]);
			BizzInfo[b][bBuyPrice] = 0;
			mysql_format(SQL, gQuery,sizeof(gQuery),"UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `ID`='%d'",MoneyMoney[playerid],PlayerInfo[playerid][pBizz],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, gQuery, "", "");
			mysql_format(SQL, gQuery,sizeof(gQuery),"UPDATE `bizz` SET `Owned`='1',`Owner`='%s',`BuyPrice`='0' WHERE `ID`='%d'",BizzInfo[b][bOwner],b);
			mysql_tquery(SQL, gQuery, "", "");
			UpdateLabel(2,b);
			finishAchievement(playerid, 2);	
			SCM(playerid, COLOR_MONEY, "Chuc mung! Ai cumparat aceasta afacere.");
		}
	}
	return true;
}
YCMD:eat(playerid, params[], help) {
	if(IsPlayerInRangeOfPoint(playerid, 50.0, 377.8164,-119.4989,1001.4922) || IsPlayerInRangeOfPoint(playerid, 50.0, 371.5085,-6.9538,1001.8589) || IsPlayerInRangeOfPoint(playerid, 50.0, 377.7664,-68.4227,1001.5151), IsPlayerInRangeOfPoint(playerid, 50.0, -227.0988,1404.4338,27.7734)) {
		if(PlayerMoney(playerid, 100)) return SCM(playerid,COLOR_GREY, "Nu ai banii necesari.");
		new Float:health, str[180];
		GetPlayerHealthEx(playerid,health);
		if(health >= 75) {
			SetPlayerHealthEx(playerid, 99);
			ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			GivePlayerCash(playerid, 0, 100);
			if(InBussines[playerid] != -1) {
				BizzInfo[InBussines[playerid]][bBalance] += 100;
				mysql_format(SQL, str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance], InBussines[playerid]);
				mysql_tquery(SQL,str, "", "");
			}	
		}
		else {
			SetPlayerHealthEx (playerid, health+24);
			ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			GivePlayerCash(playerid, 0, 100);
			if(InBussines[playerid] != -1) {
				BizzInfo[InBussines[playerid]][bBalance] += 100;
				mysql_format(SQL, str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bBalance], InBussines[playerid]);
				mysql_tquery(SQL,str, "", "");
			}
		}
	}
	return true;
}
YCMD:goup(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, "Nu esti politist.");
	if(IsPlayerInAnyVehicle(playerid)) return true;
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.7828,-1690.9587,5.8906)) SetPlayerPosEx(false, playerid,1564.8662,-1666.4962,28.3956);
	return true;
}
YCMD:godown(playerid, params[], help) {
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, "Nu esti politist.");
	if(IsPlayerInAnyVehicle(playerid)) return true;
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.8662,-1666.4962,28.3956)) SetPlayerPosEx(false, playerid,1568.7828,-1690.9587,5.8906);
	return true;
}

function ExistaTagClan(text[]) {
	new szQuery[256], adev;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `clans` WHERE `Tag`='%s'", text);
	new Cache: result = mysql_query(SQL, szQuery);
	adev = cache_num_rows();
	cache_delete(result);
	if(adev != 0) return true;
	return false;
}

function ExistaNumeClan(text[]) {
	new szQuery[256], adev;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `clans` WHERE `Name`='%s'", text);
	new Cache: result = mysql_query(SQL, szQuery);
	adev = cache_num_rows();
	cache_delete(result);
	if(adev != 0) return true;
	return false;
}

function ExistaComanda(YCMD[]) {
	new szQuery[256], adev;
	format(szQuery, sizeof(szQuery), "SELECT * FROM `commands` WHERE `Name`='%s'", YCMD);
	new Cache: result = mysql_query(SQL, szQuery);
	adev = cache_num_rows();
	cache_delete(result);
	if(adev != 0) return true;
	return false;
}
YCMD:addcmd(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new reason[64];
	if(sscanf(params, "s[64]", reason)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/addCMD <reason>");
	Dialog_Show(playerid, DIALOG_ADDCOMMAND, DIALOG_STYLE_INPUT, "Add command", "Scrie numele comenzii pe care vrei s-o dezactivezi.\n* Comanda trebuie scrisca cu tot cu '/' in fata comenzii.", "Ok", "Exit");
	SetPVarString(playerid, "Reason", reason);
	return true;
}
YCMD:removecmd(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new YCMD[126], query[256], string[180];
	if(sscanf(params, "s[126]", YCMD)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/removeCMD <CMD name>");
	if(!ExistaComanda(YCMD)) return SCM(playerid, COLOR_GREY, "Aceasta comanda nu a fost gasita in baza de date.");
	format(query, sizeof(query), "DELETE FROM `commands` WHERE `Name`='%s'", YCMD);
	mysql_query(SQL, query);
	format(string, sizeof(string), "Comanda '%s' a fost reactivata cu succes!", YCMD);
	SCM(playerid, COLOR_YELLOW, string);	
	return true;
}

public e_COMMAND_ERRORS:OnPlayerCommandReceived(playerid, cmdtext[], e_COMMAND_ERRORS:success) 
{
	if(Iter_Count(MySpec[playerid]) != 0) {
		foreach(new i: MySpec[playerid]) SCMf(i, 0xFFADADFF, "%s used command '%s'.", GetName(playerid), cmdtext);
	}	
	if(strlen(PlayerInfo[playerid][pPin]) != 0 && PlayerInfo[playerid][pPinLogged] == 0) { 
		SCM(playerid, COLOR_LIGHTRED, "(PIN): {FFFFFF}Nu poti folosi comenzi atata timp cat nu ai introdus codu PIN!"); 
		return COMMAND_HIDDEN;
	}
	if(IsPlayerLogged[playerid] == 0) return COMMAND_DENIED;
	if(success == COMMAND_UNDEFINED) {
		SCM(playerid, COLOR_GREY, "You have entered an invalid command. Type /help to see our server commands.");
		return COMMAND_HIDDEN;
	}
	return COMMAND_OK;
}
public e_COMMAND_ERRORS:OnPlayerCommandPerformed(playerid, cmdtext[], e_COMMAND_ERRORS:success) {
	if(success == COMMAND_OK) SpamCheck[playerid] = GetTickCount();
	// if(success == COMMAND_UNDEFINED) SCM(playerid, COLOR_GREY, "You have entered an invalid command. Type /help to see our server commands.");
	return COMMAND_OK;
}


function ProxDetectorr(Float:radi, playerid, string[], col1) {
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	foreach(new i: Player) {
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)) {
			if(!BigEar[i]) {
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					SCM(i, col1, string);
			}
			else SCM(i, col1, string);
		}
	}
	return true;
}

function ProxDetector(Float:radi, playerid, string[], color) {
	new Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	foreach(new i: Player) {
		if(GetPlayerInterior(playerid) != GetPlayerInterior(i) || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i))
			continue;
		
		if(!PlayerToPoint(radi, i, Pos[0], Pos[1], Pos[2]) && BigEar[i] == 0) 
			continue;
		
		SCM(i, color, string);
	}
	return true;
}

function CrimInRange(Float:radi, playerid,copid) {
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	GetPlayerPos(copid, posx, posy, posz);
	tempposx = (oldposx -posx);
	tempposy = (oldposy -posy);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi))) return true;
	return false;
}

function ProxDetectorS(Float:radi, playerid, targetid) {
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	GetPlayerPos(targetid, posx, posy, posz);
	tempposx = (oldposx -posx);
	tempposy = (oldposy -posy);
	tempposz = (oldposz -posz);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return true;
	return false;
}

function PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z) {
	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	if((((oldposx -x) < radi) && ((oldposx -x) > -radi)) && (((oldposy -y) < radi) && ((oldposy -y) > -radi)) && (((oldposz -z) < radi) && ((oldposz -z) > -radi))) return true;
	return false;
}

stock Carspeed(vehicleid, mode = 1) {
	new Float:Velocity [3];
	GetVehicleVelocity (vehicleid, Velocity [ 0 ] , Velocity [ 1 ] , Velocity [ 2 ] ) ;
	return floatround ( ( ( floatsqroot ( ( ( Velocity [ 0 ] * Velocity [ 0 ] ) + ( Velocity [ 1 ] * Velocity [ 1 ] ) + ( Velocity [ 2 ] * Velocity [ 2 ] ) ) ) * ( !mode ? 105.0 : 170.0 ) ) ) * 1 );
}

stock stringContainsIP(string[]) {
	new dotCount;
	for(new i; string[i] != EOS; ++i) {
		if(('0' <= string[i] <= '9') || string[i] == '.' || string[i] == ':') {
			if((string[i] == '.') && (string[i + 1] != '.') && ('0' <= string[i - 1] <= '9')) ++dotCount;
			continue;
		}
	}
	return (dotCount > 2);
}

AntiFlood_Check( playerid, bool:inc=true ) {
	AntiFlood_Data[playerid][floodRate] += inc ? RATE_INC : 0;
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] - ( GetTickCount() - AntiFlood_Data[playerid][lastCheck] );
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] < 0 ? 0 : AntiFlood_Data[playerid][floodRate];
	if( AntiFlood_Data[playerid][floodRate] >= RATE_MAX ) {
		#if THRESOLD_ACTION == 1
			SCM(playerid,COLOR_WARNING,"Ban nhan duoc kick deoarece ai facut spam!");
			KickEx(playerid);
		#elseif THRESOLD_ACTION == 2
			SCM(playerid,COLOR_WARNING,"Ban nhan duoc kick deoarece ai facut spam!");
			KickEx(playerid);
		#else
			SCM(playerid,COLOR_WARNING,"Inceteaza sa mai faci spam!");
		#endif

		return false;
	}
	return true;
}

AntiFlood_InitPlayer( playerid ) {
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = 0;
}

function RemoveFunction(playerid, text[]) {
	new string[180];
	if(PlayerInfo[playerid][pAdmin] != 0) {
		format(string, sizeof(string), "Warning: %s (%d) a ramas fara functia de admin %d deoarece a facut reclama prin intermediul functiei.", GetName(playerid), playerid, PlayerInfo[playerid][pAdmin]);
		PlayerInfo[playerid][pAdmin] = 0;
		UpdateVar(playerid, "Admin", 0);		
		SendAdminMessage(COLOR_WARNING, string, 1);
		format(string, sizeof(string), "Text: %s", text);
		SendAdminMessage(COLOR_WARNING, string, 1);	
	}
	if(PlayerInfo[playerid][pHelper] != 0) {
		format(string, sizeof(string), "Warning: %s (%d) a ramas fara functia de helper %d deoarece a facut reclama prin intermediul functiei.", GetName(playerid), playerid, PlayerInfo[playerid][pHelper]);
		SendAdminMessage(COLOR_WARNING, string, 1);
		format(string, sizeof(string), "Text: %s", text);
		SendAdminMessage(COLOR_WARNING, string, 1);
		PlayerInfo[playerid][pHelper] = 0;
		UpdateVar(playerid, "Helper", 0);		
	}	
	if(PlayerInfo[playerid][pLeader] != 0) {
		format(string, sizeof(string), "Warning: %s (%d) a ramas fara functia de lider (%s) deoarece a facut reclama prin intermediul functiei.", GetName(playerid), playerid, FactionName(PlayerInfo[playerid][pLeader]));
		SendAdminMessage(COLOR_WARNING, string, 1);
		format(string, sizeof(string), "Text: %s", text);
		SendAdminMessage(COLOR_WARNING, string, 1);
		PlayerInfo[playerid][pMember]=0;
		PlayerInfo[playerid][pLeader]=0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pChar] = 0;
		PlayerInfo[playerid][pFACWarns] = 0;
		PlayerInfo[playerid][pFpunish] = 0;
		PlayerInfo[playerid][pDays] = 0;
		WarSeconds[playerid] = 0;
		PlayerInfo[playerid][pLW] = 0;
		UpdateVar(playerid, "LW", 0);				
		gTeam[playerid] = 3;
		PlayerInfo[playerid][pTeam] = 3;
		OnDuty[playerid] = 0;
		tazer[playerid] = 0;
		SetPlayerArmourEx(playerid, 0);
		SetPlayerSkinEx(playerid,PlayerInfo[playerid][pModel]);
		SetPlayerToTeamColor(playerid);
		new str[180];
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`CChar`='0',`FWarn`='0',`FPunish`='0',`Team`='3',`Days`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		PlayerInfo[playerid][pCommands][0] = 0;
		new rquery[256];

		mysql_format(SQL, rquery, sizeof(rquery), "UPDATE `users` SET `Commands`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pCommands][0], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, rquery, "", "");
		SpawnPlayer(playerid);
	}				
	return true;
}

function ValidClanTag(text[]) {
	if(strfind(text, "[", true) != -1 ||  strfind(text, ".", true) != -1 ||  strfind(text, "]", true) != -1) return true;
	return false;
}

function InvalidClanTag(text[]) {
	if(strfind(text, "#", true) != -1 || strfind(text, "(", true) != -1 || strfind(text, ";", true) != -1 || strfind(text, "{", true) != -1  || strfind(text, "<", true) != -1  || strfind(text, ">", true) != -1 || strfind(text, "}", true) != -1 || strfind(text, "@", true) != -1) return true;
	return false;
}

function FaceReclama(text[]) {
	
	if(strfind(text, "u-network", true) != -1 || strfind(text, "unnic", true) != -1 || strfind(text, "ne-am mutat pe rpg.", true) != -1 || strfind(text, "t4p", true) != -1 || strfind(text, "og-times", true) != -1 ||
		strfind(text, "ruby", true) != -1 || strfind(text, "union-zone", true) != -1 || strfind(text, "nephrite", true) != -1 || strfind(text, "pro-gaming", true) != -1 || strfind(text, "playnion", true) != -1 || strfind(text, "just2play", true) != -1 ||
		strfind(text, "b-game", true) != -1 || strfind(text, "b-gaming", true) != -1 || strfind(text, "egaming", true) != -1 || strfind(text, "dty", true) != -1 || strfind(text, "lupmax", true) != -1 || strfind(text, "bhood", true) != -1 ||
		strfind(text, "bugged", true) != -1 || strfind(text, "b-zone", true) != -1 || strfind(text, "b-zone", true) != -1 || strfind(text, "nolimit", true) != -1 || strfind(text, "nqgaming", true) != -1 || strfind(text, "b-hood", true) != -1 ||
		strfind(text, "t4p", true) != -1 || strfind(text, "time4play", true) != -1 || strfind(text, "redgame", true) != -1 || strfind(text, "blue-game", true) != -1 || strfind(text, "egaming", true) != -1 || strfind(text, "bigzone", true) != -1 ||
		strfind(text, "evil-zone", true) != -1 || strfind(text, "expertgame", true) != -1 || strfind(text, "ogtimes", true) != -1 || strfind(text, "red-game", true) != -1 || strfind(text, ":7777", true) != -1 || strfind(text, "jadenephrite", true) != -1 || 
		strfind(text, "tryhard", true) != -1 || strfind(text, "jadenephrite", true) != -1 || strfind(text, "old times", true) != -1 || strfind(text, "oldtimes", true) != -1 || strfind(text, "redtimes", true) != -1 || strfind(text, "red-times", true) != -1) return true;
	return false;
}	


function CuvinteCheie(text[]) {
	if(strfind(text, "HPQ123", true) != -1 || strfind(text, "Sebba", true) != -1) return true;
	return false;
}	

function Reclama(playerid, text[]) {
	if(PlayerInfo[playerid][pAdmin] > 5) return true;
	SCM(playerid, -1, "Ban nhan duoc mute timp de 2 minute deoarece ai facut reclama.");
	PlayerInfo[playerid][pMuteTime] += 2*60;
	PlayerInfo[playerid][pMuted] = 1;
	new str[180];
	mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL,str, "", "");
	new string[180];
	format(string, sizeof(string), "AdmWarning: %s posibil ca face reclama (%s)", GetName(playerid), text);
	SendAdminMessage(COLOR_WARNING, string, 1);
	return true;
}

function GetAdmins() return Iter_Count(PlayerAdmins);

function NightBot(playerid, reason[]) {
	if(GetPVarInt(playerid, "Kicked") == 1) return true;
	gString[0] = EOS;
	InsereazaSanctiune(playerid, -1, KICK, reason);
	SetPVarInt(playerid, "Kicked", 1);
	if(PlayerInfo[playerid][pAdmin] < 6) {
		format(gString, 70, "Stop cheating (%s)", reason);
		SCM(playerid, -1, gString);
		KickEx(playerid);
	}
	return true;
}

function FixHour(hour) {
	hour = timeshift+hour;
	if(hour < 0) hour = hour+24;
	else if(hour > 23) hour = hour-24;
	shifthour = hour;
	return true;
}

function UnFreezeStation2(playerid) {
	TogglePlayerControllable(playerid, 1);
	Freezed[playerid] = 0;
	new j = random(housess)+1;
	if(j == 0) j = 1;
	SetPlayerCheckpointEx(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez], 7.0);
	new string[170];
	format(string, sizeof(string), "Den diem ~r~~h~rosu~w~~h~ tren ban do de giao buu kien.~n~De lay goi hang, ra sau xe va bam Y!~n~khoang cach: ~y~%0.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]));
	PlayerTextDrawSetString(playerid, InfosTD, string);
	defer HideTextdraw(playerid);
	PlayerTextDrawShow(playerid, InfosTD);	
	CP[playerid] = 58;
	return true;
}
	
function UnFreezeStation(playerid) {
	TogglePlayerControllable(playerid, 1);
	UnFreezeTimer[playerid] = -1;
	return true;
}
function lspdgateclose() return MoveObject(gatelspd, 1588.6552, -1637.9025, 15.0358, 1.5);
function nggateclose() return MoveObject(gateng, 135.2833, 1941.3331, 21.6932, 1.5);
function lspdbarclose() return MoveObject(lspdbar, 1544.7007, -1630.7527, 13.2983, 1.5,0.0000, 90.0200, 90.0000);
function jailclosegate() return MoveObject(cell2, 1767.6273, -1583.4294, 1745.0659, 1.5);

stock strvalEx( const string[] ) {
   if( strlen( string ) >= 50 ) return false;
   return strval(string);
}

function Float:GetDistance(playerid, Float:x, Float:y) {
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

stock TempBanCheck(playerid) {
	new str[128];
	new year, month, day;
	getdate(year, month, day);
	if(PlayerInfo[playerid][pBTemp] == 1) {
		if(!(year >= PlayerInfo[playerid][pBYear] && month >= PlayerInfo[playerid][pBMonth] && day >= PlayerInfo[playerid][pBDay])) {
			SCM(playerid, COLOR_WARNING, "Acest cont este banat temporar!");
			format(str, sizeof str, "Admin-ul care te-a banat este %s.",PlayerInfo[playerid][pBBy],PlayerInfo[playerid][pBDay], PlayerInfo[playerid][pBMonth], PlayerInfo[playerid][pBYear],PlayerInfo[playerid][pBReason]);
			SCM(playerid, COLOR_CLIENT, str);
			format(str, sizeof str, "Banul expira pe data de %d.%d.%d",PlayerInfo[playerid][pBDay], PlayerInfo[playerid][pBMonth], PlayerInfo[playerid][pBYear],PlayerInfo[playerid][pBReason]);
			SCM(playerid, COLOR_CLIENT, str);
			format(str, sizeof str, "Motivul: %s",PlayerInfo[playerid][pBReason]);
			SCM(playerid, COLOR_CLIENT, str);
			SetPlayerCameraPos(playerid, 1183.0143, -965.7394, 129.6071);
			SetPlayerCameraLookAt(playerid, 1183.7214, -965.0270, 129.2470);		
			return KickEx(playerid);		
		}
		else {
			PlayerInfo[playerid][pBTemp] = 0;
			PlayerInfo[playerid][pBYear] = 0;
			PlayerInfo[playerid][pBMonth] = 0;
			PlayerInfo[playerid][pBDay] = 0;
			Update(playerid,pBTempx);
			Update(playerid,pBYearx);
			Update(playerid,pBMonthx);
			Update(playerid,pBDayx);
		}
	}
	return true;
}

stock IsMonth31(month) {
 	switch (month) {
		case 1: return true;
		case 3: return true;
		case 5: return true;
		case 7: return true;
		case 8: return true;
		case 10: return true;
		case 12: return true;
		default: return false;
	}
	return false;
}

stock IsMonth29(year) {
 	new y = 2000;
 	for(new i = 4; i < 3000; i += 4) if((y+i) == year) return true;
 	return false;
}

stock strtok2(const string[], &idx) {
	new length = strlen(string);
	while ((idx < length) && (string[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[128];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = string[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	return result;
}

function PutPlayerInJail(playerid) {
	new rand = random(sizeof(JailPos));
	SetPlayerPosEx(false, playerid, JailPos[rand][0], JailPos[rand][1], JailPos[rand][2]);
	SetPlayerSkinEx(playerid, 62);
	TogglePlayerControllable(playerid, 0);
	SetPlayerFreeze(playerid, 2);
	return true;
}

function MySQLCheckAccount(sqlplayersname[]) {
	gQuery[0] = EOS;
	new Cache: result;
	mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `name`='%s' LIMIT 1", sqlplayersname);
 	mysql_query(SQL, gQuery);
	if(cache_num_rows() != 0) return true;
	cache_delete(result);
	return false;
}
stock SetPlayerWalkingStyle(playerid, style) WalkStyle[playerid] = style;
stock GetPlayerWalkingStyle(playerid) return WalkStyle[playerid];
stock YoutubeStreamForPlayer(playerid, link[]) PlayAudioStreamForPlayer(playerid, link);

stock GetPlayerCash(playerid) {
	new money;
	switch(StoreMoney[playerid]) {
		case 0: money = MoneyMoney[playerid];
		case 1: money = MoneyMoney[playerid] + 1000000000;
		default: money = 2147483647;
	}
	return money;
}
GivePlayerBank(playerid, amount) return Add64Bit(PlayerInfo[playerid][pStoreAccount], PlayerInfo[playerid][pAccount], amount);
GetPlayerBank(playerid) {
	if(PlayerInfo[playerid][pStoreAccount] > 1) return 2000000000;
	return PlayerInfo[playerid][pAccount] + 1000000000;
}
stock ResetPlayerCash(playerid) return StoreMoney[playerid] = 0, MoneyMoney[playerid] = 0;

stock CalculeazaTimp(secunde) {
	new time = secunde;
	new ora = time/3600;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string, sizeof(string), "%02d:%02d:%02d",ora,minute,secunde2);
	return string;
}

stock CalculeazaTimp2(secunde) {
	new time = secunde;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string, sizeof(string), "%02d:%02d",minute,secunde2);
	return string;
}

stock GetVehicleSpeed(vehicleid, get3d) {
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock PlayAudioStreamForPlayersInCar(vehicleid,url[]) {
	foreach(new i: Player) {
		if(IsPlayerInAnyVehicle(i)) {
			if(GetPlayerVehicleID(i) == vehicleid) PlayAudioStreamForPlayer(i,url);
		}
	}
	return true;
}

stock StopAudioStreamForPlayersInCar(vehicleid) {
	foreach(new i: Player) {
		if(IsPlayerInAnyVehicle(i)) {
			if(GetPlayerVehicleID(i) == vehicleid) StopAudioStreamForPlayer(i);
		}
	}
	return true;
}

function HideTextdraw2(playerid, tdid) {
	if(!IsPlayerConnected(playerid)) return true;
	PlayerTimer[playerid] = 0;
	PlayerCase[playerid] = 0;
	return true;
}
stock PlayerMoney(playerid, amount) return GetPlayerCash(playerid) < amount ? (true) : (false);

stock Value64Bit(ammount_store, ammount_more, value[]) {
	if(ammount_store == 0) format(value, 128, "#%d", ammount_more);
	else format(value, 128, "#%d%09d", ammount_store, ammount_more);
}
stock GetCashStr(playerid) {
	new rezult[64], string[128];
	Value64Bit(StoreMoney[playerid], MoneyMoney[playerid], string);
	format(rezult, 64, FormatNumberr(string));
	return rezult;
}
stock FormatBigInt(ammount_store, ammount_more) {
	new rezult[70], values[64];
	Value64Bit(ammount_store, ammount_more, values);
	format(rezult, 70, FormatNumberr(values));
	return rezult;
}
stock GetBankMoney(playerid) {
	new string[64], rezult[64];
	Value64Bit(PlayerInfo[playerid][pStoreAccount], PlayerInfo[playerid][pAccount], string);
	format(rezult, 64, FormatNumberr(string));
	return rezult;
}
stock formatpassword(password[]) {
	new x[40];
	for(new i = 0; i < strlen(password); i++) strcat(x, "x");
	return x;
}

stock Add64Bit(&ammount_store, &ammount_more, value) {
	if(value == 0) return true;
	new rest = 0;
	new allowed = 2000000000-ammount_more;
	if(value <= allowed) ammount_more += value;
	else ammount_more += allowed, value -= allowed, rest = value;
	if(ammount_more >= 1000000000) {
		ammount_more -= 1000000000;
		ammount_store++;
	}
	else if(ammount_store > 0 && ammount_more < 1000000000) {
		ammount_store--;
		ammount_more+= 1000000000;
	}
	if(rest > 0) {
		if(ammount_more+rest > 2000000000) allowed = 2000000000-ammount_more, ammount_more += allowed, rest -= allowed;
		else ammount_more += rest, rest = 0;
	}
	for(new i = 0; i < 3; i++) {
		if(ammount_more >= 1000000000) {
			ammount_more -= 1000000000;
			ammount_store++;
		}	
	}
	if(ammount_more < 0) ammount_more = 0;
	return true;
}
stock GivePlayerCash(playerid, type, money) {
	switch(type) {
		case 0: Add64Bit(StoreMoney[playerid], MoneyMoney[playerid], -money), ArataMoney(playerid, 1, money);
		case 1: Add64Bit(StoreMoney[playerid], MoneyMoney[playerid], money), ArataMoney(playerid, 0, money);
 	}
 	UpdatePlayer(playerid);
	return true;
}
stock checker(string[]) {
	new valid = true;
	new patterns[3][] = {
		{ "ABCDEFGHIJKLMNOPRSTUWXYZ" },
		{ "abcdefghijklmnoprstuwxyz" },
		{ "0123456789" }
	};  
	for(new i = 0; i < sizeof(patterns); i++) {
		for(new j = 0; j < strlen(patterns[i]); j++) {
			new cchar = patterns[i][j];
			new sub[2];
			format(sub, sizeof(sub), "%s", cchar);
			if(-1 != strfind(string, sub)) break; 
			else {
				if(j == (strlen(patterns[i])-1)) {
					valid = false;
					goto finish_now;
				}
			}
		}
	}
	finish_now:
	return valid;
}
FormatIntNumber(Number, const Delimitator[] = ".")
{
	new Result[16], bool:NegativeNumber = false;

	if (Number < 0)
	{
		Number *= -1;
		NegativeNumber = true;
	}

	format(Result, sizeof(Result), "%i", Number);

	for (new i = strlen(Result) - 3; i > 0; i -= 3)
	{
		strins(Result, Delimitator, i);
	}

	if (NegativeNumber == true)
	{
		strins(Result, "", 0);
	}
	
	return Result;
}
stock IsMail(email[]) {
  	new len=strlen(email), cstate=0, i;
  	for(i=0;i<len;i++) {
		if((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z')||(email[i]>='0' && email[i]<='9') || (email[i]>='a' && email[i]<='z')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_')) { }
		else {
		   if((cstate==0) &&(email[i]=='@')) cstate=1;
		   else return false;
	 	}
	}
  	if(cstate<1) return false;
  	if(len<6) return false;
  	if((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.')) return true;
  	return false;
}


stock Getspec(i) {
	new 
		Float:health, Float: armour, szTD[1024]
	;

	if(Spectate[i] < 253 && Spectate[i] != 255 && InWar[PlayerInfo[i][pMember]] == 0) {	
		new targetid = Spectate[i];	
		if(IsPlayerConnected(targetid)) {
			GetPlayerHealthEx(targetid, health);
			GetPlayerArmourEx(targetid, armour);
		
			if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER) {							
				new Float:Valoarea;
				new carid = GetPlayerVehicleID(targetid);
				GetVehicleHealth(carid,Valoarea);
				new speed = Carspeed(GetPlayerVehicleID(targetid));
				format(szTD, sizeof(szTD), "%s (ID: %d)~n~Level: ~y~~h~~h~%d (%.2fh)~n~~w~~h~Health: ~y~~h~~h~%.1f ~w~~h~Armour: ~y~~h~~h~%.1f~n~~w~~h~FPS: ~y~~h~~h~%d ~w~~h~Ping: ~y~~h~~h~%d~n~~w~~h~Vehicle (ID: ~y~~h~~h~%d~w~~h~)~n~Speed: ~y~~h~~h~%d~n~~w~~h~Cheat warnings: ~r~%d", GetName(targetid), targetid, PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pConnectTime], health, armour, FPS2[targetid], GetPlayerPing(targetid), carid, speed, CheatWarnings[targetid]);
				PlayerTextDrawSetString(i, SpectatorTD, szTD);					
			}
			else {
				format(szTD, sizeof(szTD), "%s (ID: %d)~n~Level: ~y~~h~~h~%d (%.2fh)~n~~w~~h~Health: ~y~~h~~h~%.1f ~w~~h~Armour: ~y~~h~~h~%.1f~n~~w~~h~FPS: ~y~~h~~h~%d ~w~~h~Ping: ~y~~h~~h~%d~n~~w~~h~Cheat warnings: ~r~%d", GetName(targetid), targetid, PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pConnectTime], health, armour, FPS2[targetid], GetPlayerPing(targetid), CheatWarnings[targetid]);
				PlayerTextDrawSetString(i, SpectatorTD, szTD);
			}
			if(GetPlayerInterior(targetid) >= 0) SetPlayerInterior(i,GetPlayerInterior(targetid));
			if(GetPlayerVirtualWorld(targetid) >= 0) SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(targetid));
		}
	}
	return true;
}

task Spectator[2000]() {
	foreach(new i: PlayerAdmins) Getspec(i);
	return true;
}

stock GetVehicleRadio(vehid) {
	new string[100];
	if(CarRadio[vehid] == 0) string = "none";
	else if(CarRadio[vehid] == sizeof(RadioLink)) string = "Youtube url";
	else format(string, sizeof(string), RadioNames2[CarRadio[vehid]]);
	return string;
}  

function IsAMember(playerid) {
	new leader = PlayerInfo[playerid][pLeader], member = PlayerInfo[playerid][pMember];
	if(member == 4 || member == 5 || member == 6 || member == 10) return true;
	if(leader==4 || leader==5 || leader==6 || leader==10) return true;
	return false;
}

function IsACop(playerid) {
	new leader = PlayerInfo[playerid][pLeader], member = PlayerInfo[playerid][pMember];
	if(member==1 || member==2 || member==3 || member==14) return true;
	else if(leader==1 || leader==2 || leader==3 || leader==14) return true;
	return false;
}

function IsAtClothShop(playerid) {
	if(IsPlayerInRangeOfPoint(playerid, 50.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid, 50.0,203.9068,-41.0728,1001.8047)) return true;
	else if(IsPlayerInRangeOfPoint(playerid, 50.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid, 50.0,161.3765,-83.8416,1001.8047) || IsPlayerInRangeOfPoint(playerid, 50.0,204.2205,-168.3091,1000.5234)) return true;
	return false;
}

function IsAtBank(playerid) return PlayerToPoint(50, playerid, -554.8836,1798.7966,1393.2959) ? (true) : (false);
function IsAtOrderPlace(playerid) return PlayerToPoint(50, playerid, 2766.9136, -76.1481, 1318.8390) ? (true) : (false);

function IsABoat(carid) {
	if(GetVehicleModel(carid) == 430 || GetVehicleModel(carid) == 446 || GetVehicleModel(carid) == 452 || GetVehicleModel(carid) == 453 || GetVehicleModel(carid) == 454 || GetVehicleModel(carid) == 472 || GetVehicleModel(carid) == 473 || GetVehicleModel(carid) == 484 || GetVehicleModel(carid) == 493 || GetVehicleModel(carid) == 595)
		return true;
	return false;
}

function IsABoat2(carid) {
	switch(carid) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return true;
	}
	return false;
}

function IsAPlane2(carid) {
	switch(carid) {
		case 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return true;
	}
	return false;
}

function IsAPlane(carid) {
	switch(carid) {
		case 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return true;
	}
	return false;
}

function IsACopCar(carid) {
	if(ServerVehicles[carid][vFaction] == 1) return true;
	return false;
}
function Copcar2(carid) return ServerVehicles[carid][vFaction] == 1 || ServerVehicles[carid][vFaction] == 2 || ServerVehicles[carid][vFaction] == 3 ? (true) : (false);

YCMD:picklock(playerid, params[], help) {
	if(JobWorking[playerid] == 0 || PlayerInfo[playerid][pJob] != 4) return true;
	if(GetPlayerSkill(playerid) != 4) return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de skill 4 pentru a folosi aceasta comanda!");
	if(IsPlayerInAnyVehicle(playerid)) return true;
	new idd, car;
	car = GetClosestVehicle(playerid);
	idd = FindSpawnID(car);
	if(CarInfo[idd][Spawned] == 0) return SCM(playerid, COLOR_GREY, "Vehicul invalid!");
	if(CarInfo[idd][cLock] == 0) return SCM(playerid, COLOR_GREY, "Acest vehicul nu este inchis!");
	if(CarInfo[idd][Userid] == PlayerInfo[playerid][pSQLID]) return SCM(playerid, COLOR_LGREEN, "Error: Nu iti poti fura propria masina!");
	if(IsAFLYCar(car) || IsABOATCar(car)) return SCM(playerid, COLOR_LGREEN, "Error: Nu poti folosi aceasta comanda pe un avion/barca/elicopter!");
	
	new engine,lights,alarm,doors,bonnet,boot,objective;
	CarInfo[idd][cLock] = 0;
	GetVehicleParamsEx(CarInfo[idd][Spawned],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(CarInfo[idd][Spawned],engine,lights,alarm,0,bonnet,boot,objective);
	new string[128];
	format(string, sizeof(string), "~w~%s~n~~g~Deschis",aVehicleNames[CarInfo[idd][cModel]-400]);
	GameTextForPlayer(playerid, string, 5000, 4);
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], CarInfo[idd][cID]);
	mysql_tquery(SQL, string, "", "");
	PlayerInfo[playerid][pWantedLevel] += 1;
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	SetPlayerCriminal(playerid,255, "car jacker");
	WantedTime[playerid] = 0;
	Update(playerid,pWantedLevelx);
	ShowWanted[playerid] = 1;	
	return true;
}

function IsAGangCar(carid) return ServerVehicles[carid][vFaction] == 4 || ServerVehicles[carid][vFaction] == 5 || ServerVehicles[carid][vFaction] == 6 || ServerVehicles[carid][vFaction] == 10 ? (true) : (false);
function IsAFbiCar(carid) return ServerVehicles[carid][vFaction] == 2 ? (true) : (false);
function IsANgCar(carid) return ServerVehicles[carid][vFaction] == 3 ? (true) : (false);
function IsAnAmbulance(carid) return ServerVehicles[carid][vFaction] == 13 ? (true) : (false);
function IsAnTaxi(carid) return ServerVehicles[carid][vFaction] == 12 ? (true) : (false);
function IsABike(carid) {
	switch(carid) {
		case 481, 509, 510: return true;
	}
	return false;
}
function IsABike2(vehicleid) {
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 523, 568, 571, 581, 586: return true;
	}
	return false;
}

new RandomMSG[][] = {
	"Daca ai nevoie de ajutor, nu ezita sa folosesti comanda (/n) iar un helper te va ajuta in cel mai scurt timp.",
	"Ai vazut un codat? Foloseste comanda (/report) iar un admin se va ocupa de el.",
	"Vrei sa faci o sugestie? Atunci, nu ezita sa faci un topic in sectiunea 'Sugestii' de pe forum-ul nostru. (/forum)",
	"Ai aptitudini speciale in manuirea armelor? Atunci dovedeste asta in arena de paintball. (/gps)",
	"Ai nevoie de o licenta? Foloseste comanda (/service instructor) iar un instructor te va ajuta!",
	"Ai ramas pe jos in pustietate? Poti chema un taxi folosind comanda (/service taxi) iar un taximetrist te va ajuta.",
	"Vrei sa vezi misiunile tale zilnice? Atunci foloseste comanda (/quests)",
	"Vrei sa faci parte dintr-o factiune? Foloseste comanda (/factions) pentru a vedea factiunile cu locuri libere.",
	"Ai nevoie de un vehicul? Foloseste comanda (/buycar) atunci cand esti la Dealership.",
	"Doresti sa iti vizualizezi statisticile? Foloseste comanda (/stats).",
	"Foloseste comanda (/gps) pentru a vedea locatiile importante ale server-ului.",
	"Te-a suparat cineva? Foloseste comanda (/contract) iar un hitman se va ocupa de el!",
	"Vrei sa te intreci cu prietenii tai pe un circuit de curse? Arena de curse va asteapta, folositi comanda (/gps)",
	"Ai noroc la pariuri? Atunci casino-ul este locul vostru!"
};

task SendMSG[60000*10]() {
	new randMSG = random(sizeof(RandomMSG));
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && gNews[i] == 0) SCM(i,COLOR_GREEN, RandomMSG[randMSG]);
	}
	return true;
}

function ShowCamera(playerid) {
	SetPlayerCameraPos(playerid, 1474.197998, -2292.872802, 16.677284);
	SetPlayerCameraLookAt(playerid, 1470.340698, -2295.870361, 15.611624);
	return true;
}

stock CheckObjects(playerid) {
	new x;
	for(new i = 0; i < sizeof(QuestPos); i++) {
		if(PlayerInfo[playerid][pSpecialQuest][i] == 1) x ++;
	}
	return x;
}

function Camera(playerid) {
	InterpolateCameraPos(playerid, 2206.400146, 2485.206787, 104.116271, 2065.331054, 2227.627197, 63.345684, 40000);
	InterpolateCameraLookAt(playerid, 2203.034667, 2482.306396, 101.822631, 2067.583007, 2231.956542, 62.256824, 40100);
	SetPlayerPosEx(false, playerid, 2269.6230, -74.9329, 26.7724);
	SetPlayerVirtualWorld(playerid, 9999);
	return true;
}

stock CountIP(ip[]) {
	new c = 0;
	foreach(new i: Player) if(IsPlayerConnected(i) && !strcmp(GetIP(i),ip)) c++;
	return c;
}

// stock GetIP(playerid) {
// 	new ip[16];
// 	GetPlayerIp(playerid,ip,sizeof(ip));
// 	return ip;
// }
YCMD:setstock(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return true;
	new value, string[128];
	if(sscanf(params, "i",value)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setstock <amount>");
	if(value < 0) return true;
	
	for(new i = 0; i < 59; i++) DSModels[i][dStock] = value;
	
	format(string, sizeof(string), "({FF0000}Admin Info{FFFFFF}) %s a modificat numarul disponibil de vehicule in dealership in %d.", GetName(playerid), value);
	SendAdminMessage(COLOR_WHITE, string, 1);
	format(string, sizeof(string), "UPDATE `dsveh` SET `Stock`='%d'", value);
	mysql_tquery(SQL, string, "", "");
	return true;
}


YCMD:dsprice(playerid, params[], help) {
	new result[180], x, string[180], car;
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return true;
	if(sscanf(params, "s[180]",result)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dsprice <name/model>");
	for(new v = 0; v < 212; v++) {
		if(strfind(aVehicleNames[v], result, true) != -1 || v == strval(result)-400) car = v+400;
	}
	printf("%d", car);
	for(new i = 0; i < 59; i++) {
		if(DSModels[i][dModel] == car) {
			x = 1;
			format(string, sizeof(string), "Dealership Price - %s: {B9FF80}$%s speed %d km/h, %d on stock.", aVehicleNames[DSModels[i][dModel]-400], FormatNumber(DSModels[i][dPrice]), Model_TopSpeed(DSModels[i][dModel]-400), DSModels[i][dStock]);
			SCM(playerid, -1, string);
		}	
	}
	if(x == 0) return SCM(playerid, COLOR_GREY, "* Nu au fost gasite rezultate!");	
	return true;
}

YCMD:speed(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	EnableBoast[playerid] = EnableBoast[playerid] ? (false) : (true);
	SCM(playerid, -1, EnableBoast[playerid] ? "Speed boost: {128C14}Enable" : "Speed boost: {D60F0F}Disable");
	return true;
}

stock ResetVariables(playerid) {
	MyVehicleSpawn[playerid] = 0;
	PnsTimer[playerid] = -1;
	InClanHQ[playerid] = -1;
	HaveGift[playerid] = -1;
	IsRegister[playerid] = false;
	login[playerid] = -1;
	HiddenTrade[playerid] = -1;
	IsEditVip[playerid] = 0;
	HavePestele[playerid] = 0;
	StepExam[playerid] = 0;
	ExamTime[playerid] = 0;
	TradeID[playerid] = -1;
	SkinTrade[playerid] = -1;
	MiliardTrade[playerid] = 0; 
	TradeTicket[playerid][0] = 0;
	TradeTicket[playerid][1] = 0;
	DiceMoney[playerid] = -1;
	MoneyTrade[playerid] = 0;
	HouseTrade[playerid] = -1;
	BusinessTrade[playerid] = -1;
	CarTrade[playerid] = -1;
	VoucherTrade[playerid][0] = 0;
	VoucherTrade[playerid][1] = 0;
	VoucherTrade[playerid][2] = 0;
 	KillTimer(CARrainbow[playerid]);
 	VehicleHealth[playerid] = 0;
	Connected[playerid] = 0;
	vipLabel[playerid] = Create3DTextLabel("", -1, 0.0, 0.0, 0.0, 10.0, 0, 0);
	deathLabel[playerid] = Create3DTextLabel("", -1, 0.0, 0.0, 0.0, 10.0, 0, 0);
	IsStage[playerid] = 0;
	GunID[playerid] = 0;
	RainbowOn[playerid] = 0;
	PinInsert[playerid] = "";
	IsGunShop[playerid] = 0;
	BetPacanele[playerid] = 0;
	TimerPacanele[playerid] = 0;
	IsPacanele[playerid] = 0;
	IsDublaj[playerid] = 0;
	TotalBet[playerid] = 0;
	PlayerInfo[playerid][pPin] = 0;
 	RegisrationStep[playerid][0] = false;
	RegisrationStep[playerid][1] = false;
	RegisrationStep[playerid][2] = false;
	RegisrationStep[playerid][3] = false;
	SchimbaCuloare[playerid] = 0;
	TimerPayDay[playerid] = -1;
	CarEID[playerid] = -1;
	CrateTime[playerid] = 0;
	IsCrates[playerid] = 0;
	EditVehicleID[playerid] = -1;
	DaiWanted[playerid] = 0;
	GiftStep[playerid] = 19;
	AlegeCrates[playerid] = 0;
	RollTime[playerid] = 0;
	StartQuest[playerid] = 0;
	SkinsActions[playerid] = 0;
	IsSkins[playerid] = 0;

	reportcheater[playerid] = -1;
	Step[playerid] = 0;
	IsRentCar[playerid] = 0;
	petstatusv[playerid] = 0;
	ResetBlockList(playerid);
	BagTime[playerid] = 0;
	CrateModel[playerid] = -1;
	
	SetPVarInt(playerid, "Reported", 0);
	SetPVarInt(playerid, "ReportType", 0);
	SetPVarString(playerid, "ReportedBy", "");
	SetPVarInt(playerid, "ReportScore", 0);
	SetPVarString(playerid, "ReportText", "");	

	SetPVarInt(playerid, "InHand", 0);
	SetPVarInt(playerid, "OfferedClan", -1);
	SetPVarInt(playerid, "ClanMoney", 0);
	SetPVarInt(playerid, "SellClan", 0);
	SetPVarInt(playerid, "OfferBy", -1);	
	SetPVarInt(playerid, "Lesson", -1);
	SetPVarInt(playerid, "InLesson", -1);
	SetPVarInt(playerid, "PlayMine", 0);
	SetPVarInt(playerid, "BetAmount", 0);
	SetPVarInt(playerid, "Mines", 0);
	SetPVarInt(playerid, "StartedGame", 0);
	SetPVarInt(playerid, "MineType", 0);
	SetPVarInt(playerid, "MoneyEarned", 0);
	SetPVarInt(playerid, "Kicked", 0);

	Aduty[playerid] = 0;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pClan] = 0;
	PlayerInfo[playerid][pVip] = 0;
	PlayerInfo[playerid][pPremiumAccount] = 0;

	JobLeftTime[playerid] = 0;				EnableBoast[playerid] = 0;
	InDealer[playerid] = 0;					SpamTimes[playerid] = 0;
	Exception[playerid] = 0;		
	WarningsCheat[playerid] = 0;		
	WarKills[playerid] = 0;					WarDeaths[playerid] = 0;		
	ReportedPlayer[playerid] = -1;			TaxiDuty[playerid] = 0;
	AcceptedReport[playerid] = -1; 			requestingevent[playerid] = 0;
	Escape[playerid] = 0;  					Escape2[playerid] = 0;
	EscapeProces[playerid] = 0;				TaxiService[1][playerid] = 0;
	TeleportDest[playerid][0] = 0; 			InTraining[playerid] = 0;
	Combo[playerid] = 0; 					DMGTimer[playerid] = 0;
	Question[playerid] = 0; 				SFID[playerid] = 0;
	Showed[playerid] = 0; 					FreezeTime[playerid] = 0; 	
	LastCP[playerid] = 0; 					CheatWarnings[playerid] = 0;
	TaxiService[0][playerid] = 0; 			togevent[playerid] = 0;
	togding[playerid] = 0; 					MedicCall[playerid] = -1;
	MechanicCall[playerid] = -1; 			InstructorCall[playerid] = -1;
	MDCOn[playerid] = -1; 		 			AcceptedService[playerid] = -1;
	PlayerInfo[playerid][pSleeping] = 0;	SpecClan[playerid] = 0;
	StartFish[playerid] = 0;				eventorganizer[playerid] = 0;
	InstructorCall[playerid] = 0;			License[playerid] = 0;
	LicenseOffer[playerid] = -1;			togclan[playerid] = 0;
	SpecFaction[playerid] = 0;				WarSeconds[playerid] = 0;
	Helped[playerid] = 0;					OnHelper[playerid] = 0;
	PlayerInfo[playerid][pPinLogged] = 0;	TradePlayer[playerid] = -1;
	Helmet[playerid] = 0;					ShowWanted[playerid] = -1;
	ReportTimer[playerid] = 0;				SetPVarInt(playerid,"KilledFlood",0);
	PlayerInfo[playerid][pMember] = 0;		PlayerInfo[playerid][pLeader] = 0;
	DiceID[playerid] = -1;					AdTimer[playerid] = 0;
	PlayerInfo[playerid][pAdmin] = 0;		PlayerInfo[playerid][pHelper] = 0;
	Reply[playerid] = -1;				
	Helped[playerid] = 0;					Freezed[playerid]=0;
	WTimes[playerid] = 0;					Farming[playerid] = 0;
	
	PlayerInfo[playerid][pDailyMission][0] = -1; 
	PlayerInfo[playerid][pDailyMission][1] = -1;
	PlayerInfo[playerid][pWantedLevel] = 0;
	gPlayerUsingLoopingAnim[playerid] = 0;
	InitFly(playerid);	
	 
	PlayerTime[playerid][0] = 0;			PlayerInfo[playerid][pGlasses] = 0;
	PlayerInfo[playerid][pShowGlasses] = 0; StartingWork[playerid] = 0;
	AFKSeconds[playerid] = 0;				Contract[playerid] = 0;
	HeadValue[playerid] = 0;				UsedContract[playerid] = 0;
	PlayerHit[playerid] = -1;				
	AcceptedBy[playerid] = 0;				gDice[playerid] = 0;
	DiceInvited[playerid] = -1;				InDice[playerid] = 0;
	PlayWith[playerid] = -1;				SafeRTime[playerid] = 0;
	InRob[playerid] = 0;					toglicitatie[playerid] = 0;
	Invited[playerid] = -1;					PlayerInfo[playerid][pShowHud] = 0;
	TotalMoney[playerid] = 0;				Team[playerid] = 0;
	Ajutor[playerid] = 0;					PaintType[playerid] = 0;
	IsPlayerSpec[playerid] = 0;				SpecPlayers[playerid] = 0;
	DutyAFK[playerid] = 0;					HaveFish[0][playerid] = 0;
	PlayerTimer[playerid] = 0;				SecondsQuestion[playerid] = 0;
	HaveHelp[playerid] = -1;				HelperDuty[playerid] = 0;
	NewbieChat[playerid] = 0;   			Helped[playerid]=0;
	HelpMuted[playerid] = 0;		  		LastRecon[playerid] = 0;
	IsPlayerLogged[playerid] = 0;			WantedTime[playerid] = 0;
	LastCar[playerid] = 0;					InEvent[playerid] = 0;
	CreateHouse[playerid] = 0;				InShop[playerid] = 0;
	ClanDuty[playerid] = 0; 				StartedSpray[playerid] = 0; 
	StartedSpray2[playerid] = 0;			pDrunkLevelLast[playerid] = 0;
	FPS2[playerid] = 0;						
	TruckerStep[playerid] = 0;				AntiFlood_InitPlayer(playerid);
	XDeaths[playerid] = 0;					LastDeath[playerid] = 0;
	HaveFish[1][playerid] = 0;
	SelectChar[playerid] = 0; 				HidePM[playerid] = 0;
	PhoneOnline[playerid] = 0; 				SelectCharID[playerid] = 0;
	SelectCharPlace[playerid] = 0;			ChosenSkin[playerid] = 0;
	UsingDrugs[playerid] = 0; 		
	UsedFind[playerid] = 0; 				CP[playerid] = 0;
	SpawnChange[playerid] = 1;			 			
	RepairOffer[playerid] = 999; 			RepairPrice[playerid] = 0;
	RepairCar[playerid] = 0; 				TalkingLive[playerid] = 255;
	LiveOffer[playerid] = 999; 				TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; 			RefillPrice[playerid] = 0;
	DrugOffer[playerid] = 999; 				PlayerCuffed[playerid] = 0;
	PlayerCuffedTime[playerid] = 0; 		DrugPrice[playerid] = 0;
	PlayerCuffed2[playerid] = 0;
	DrugGram[playerid] = 0; 				HouseOffer[playerid] = 999;
	HouseID[playerid] = 0;				 	HousePrice[playerid] = 0;
	JailPrice[playerid] = 0; 				MedicTime[playerid] = 0;
	NeedMedicTime[playerid] = 0; 			PlacedNews[playerid] = 0;
	GoChase[playerid] = 999; 				GetChased[playerid] = 999;
	OnDuty[playerid] = 0; 					ConnectedToPC[playerid] = 0;
	OrderReady[playerid] = 0;				
	GotHit[playerid] = 0; 					MedicCall[playerid] = -1;
	gOoc[playerid] = 0;						TradeAccepted[playerid] = -1;
	PlayerTied[playerid] = 0; 				TaxiCallTime[playerid] = 0;
	TaxiCall[playerid] = -1; 				MedicCallTime[playerid] = 0;
	MechanicCallTime[playerid] = 0; 		NoFuel[playerid] = 0;
	Mobile[playerid] = 255; 				MechanicCall[playerid] = -1;
	Spectate[playerid] = 255; 				PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0; 			Unspec[playerid][sLocal] = 255;
	gLastCar[playerid] = 0; 				FirstSpawn[playerid] = 0;
	gNews[playerid] = 0; 					BigEar[playerid] = 0;
	gDice[playerid] = 0; 					gFam[playerid] = 0;	
	gPlayerLogTries[playerid] = 0; 			PlayerAccount[playerid] = 0; 	
	gPlayerSpawned[playerid] = 0; 			FreeOffer[playerid] = -1;
	FreePrice[playerid] = 0; 				PlayerTazeTime[playerid] = 0;
	PlayerStoned[playerid] = 0; 			AcceptOffer[playerid] = -1;
	AcceptPrice[playerid] = 0; 				TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0; 				TutTime[playerid] = 0;
	TaxiAccepted[playerid] = 999;
	TurfsDisp[playerid] = 0; 				PlayerInfo[playerid][pCash] = dollah;
	HireCar[playerid] = -1; 				gPlayerAnimLibsPreloaded[playerid] = 0;
	TransferOffer[playerid] = 999;			ConsumingMoney[playerid] = 0;
	TransferMoney[playerid] = 0; 			IsSmoking[playerid] = 0;
	InHouse[playerid] = -1; 				InBussines[playerid] = -1;
	targetfind[playerid] = -1; 				MatsHolding[playerid] = 0;
	MatsOffer[playerid] = -1; 				MatsPrice[playerid] = 0;
	MatsAmmo[playerid] = 0; 				SellgunOffer[playerid] = -1;
	SellgunPrice[playerid] = 0; 			SellgunMats[playerid] = 0;
	SellgunAmmo[playerid] = 0; 				SellgunID[playerid] = 0;
	togfind[playerid] = 0;				 	SwitchKey[playerid] = 2;
	bizid[playerid] = 0; 					bizprice[playerid] = 0;
	bizoffer[playerid] = 999; 				biztype[playerid] = 0;
	playerDeath[playerid] = -1; 			InHQ[playerid] = -1;
	tazer[playerid] = 0; 					togip[playerid] = 0;
	Speedlimit[playerid] = 0;				Dicem[playerid] = 999; 
	WTChannel[playerid] = 0; 				Refueling[playerid] = 0;
	radio[playerid] = 0; 								
	radiop[playerid] = 0; 					balem[playerid] = 0;						
	toglc[playerid] = 0;					taxim[playerid] = 0;
	Wartimeon[playerid] = 1;				DeathP[playerid] = 0;
	towcarm[playerid] = 0;					shotTime[playerid] = 0;
	shot[playerid] = 0;						tuningenter[playerid] = 0;
	KillP[playerid] = 0;					InExamen[playerid] = 0;
	ExamCar[playerid] = 0;				  VehicleRent[playerid] = 0;
	

	WeaponData[playerid][0] = false; 			WeaponData[playerid][1] = false;
	WeaponData[playerid][2] = false;			WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; 			WeaponData[playerid][5] = false;
	WeaponData[playerid][6] = false; 			WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; 			WeaponData[playerid][9] = false;
	WeaponData[playerid][10] = false; 			WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;	
	
	for(new i = 0; i < 7; i++) DeelayCommand[playerid][i] = 0;
	return true;
}

function ClearCrime(playerid) {
	new string[50];
	format(string, sizeof(string), "********");
	strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
	strmid(PlayerInfo[playerid][pAccused], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Fara Crima");
	strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
	strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
	strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
	Update(playerid,pCrime1x);
	Update(playerid,pCrime2x);
	Update(playerid,pCrime3x);
	Update(playerid,pAccusedx);
	Update(playerid,pVictimx);
	
	foreach(new i: Player) {
		if(IsACop(i) && OnDuty[i] == 1 && GetDistanceBetweenPlayers(i, playerid) < 250) OnPlayerStreamOut(i, playerid);
	}
	return true;
}

function SendLeaderMessage(leader, color, string[]) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pLeader] == leader) SCM(i, color, string);
		}	
	}
	return true;
}

function IsNearPlayer(playerid, targetid) {
	new Float: Coordss[3];
	GetPlayerPos(playerid, Coordss[0], Coordss[1], Coordss[2]);
	if(IsPlayerInRangeOfPoint(targetid, 20.0, Coordss[0], Coordss[1], Coordss[2]) && (GetPlayerVirtualWorld(targetid) == GetPlayerVirtualWorld(playerid))) return true;
	return false;
}

function IsNearPlayer2(Float:range, playerid, targetid) {
	new Float: Coordss[3];
	GetPlayerPos(playerid, Coordss[0], Coordss[1], Coordss[2]);
	if(IsPlayerInRangeOfPoint(playerid, range, Coordss[0], Coordss[1], Coordss[2]) && (GetPlayerVirtualWorld(targetid) == GetPlayerVirtualWorld(playerid))) return true;
	return false;
}
function ResetSpawn(playerid) return IsPlayerSpec[playerid] = 0;
function SetPlayerSpawn(playerid) {
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	InHQ[playerid] = -1;
	if(PlayerInfo[playerid][pHat] != 0 && PlayerInfo[playerid][pShowHat] == 1) PutHat(playerid);
	
	SetPlayerSkinEx(playerid, OnDuty[playerid] == 0 && IsACop(playerid) ? 305 : PlayerInfo[playerid][pChar]);
	
	if(IsPlayerSpec[playerid] == 1) {
		IsPlayerSpec[playerid] = 0;
		Iter_Remove(MySpec[Spectate[playerid]], playerid);
		Spectate[playerid] = 255;
		SetPlayerPosEx(false, playerid, SpecPos[playerid][0], SpecPos[playerid][1], SpecPos[playerid][2]);
		SetPlayerInterior(playerid, pInteriorID[playerid]);
		SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
		SpecPlayers[playerid] = 0;
		SetTimerEx("ResetSpawn", 500, 0, "d", playerid);
		return true;
	}	
	new house = PlayerInfo[playerid][pHouse];	
	if(PlayerInfo[playerid][pJailed] >= 1) {
		SetPlayerWantedLevel(playerid, 0);
		if(PlayerInfo[playerid][pAJail] == 1) {
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 64);
			new randd = random(4);
			switch(randd) {
				case 0: SetPlayerPosEx(false, playerid, 215.16264, 109.91039, 999.04541);
				case 1: SetPlayerPosEx(false, playerid, 219.32300, 109.51270, 999.04541); 
				case 2: SetPlayerPosEx(false, playerid, 223.18578, 109.69960, 999.04541);
				case 3: SetPlayerPosEx(false, playerid, 227.50655, 109.76337, 999.04541);
			}
		}
		else PutPlayerInJail(playerid);	
		return true;
	}
	switch(SpawnChange[playerid]) {
		case 1: {
			if(house != 999) {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
				SetPlayerPosEx(true, playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
				SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
				SetPlayerFreeze(playerid, 3);
				PlayerInfo[playerid][pLocal] = house;
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInterior];
				InHouse[playerid] = house;
				HouseRadio(playerid, house);
				return true;
			}
		} 
		case 2: {
			if(ClanInfo[PlayerInfo[playerid][pClan]][clHQ] > 0) {
				new 
					clanid = PlayerInfo[playerid][pClan],
					idd = ClanInfo[clanid][clHQ]
				;
			 	SetPlayerToTeamColor(playerid);
			 	SetPlayerInterior(playerid, 1);
			 	SetPlayerFreeze(playerid, 3);
			 	SetPlayerPosEx(true, playerid, ClanHQInfo[idd][cEnterX], ClanHQInfo[idd][cEnterY], ClanHQInfo[idd][cEnterZ]);
			 	SetPlayerVirtualWorld(playerid, ClanHQInfo[idd][cVirtualWorld]);
			 	PlayerInfo[playerid][pInt] = 1;
			 	InClanHQ[playerid] = PlayerInfo[playerid][pClan];	
			 	return true;
			}		
		}
	}
	FactionsSpawns(playerid);		
	return true;
}
YCMD:lockhq(playerid, params[], help) {
	if(PlayerInfo[playerid][pLeader] == 0) return true;
	new i = PlayerInfo[playerid][pLeader];
	if(DynamicFactions[i][fLock] == 0) DynamicFactions[i][fLock] = 1;
	else DynamicFactions[i][fLock] = 0;
	SCM(playerid, 0xFFADADFF, "Modificari actualizate!");
	Delete3DTextLabel(DynamicFactions[i][fLabel]);
	new query[128], label[128];
	format(query, sizeof(query), "UPDATE `factions` SET `Lock`='%d' WHERE `ID`='%d'", DynamicFactions[i][fLock], i);
	mysql_tquery(SQL, query, "", "");
	if(DynamicFactions[i][fLock] == 0) format(label, sizeof(label), "%s's HQ\n(locked)", DynamicFactions[i][fName]);
	else format(label, sizeof(label), "%s's HQ\n(unlocked)", DynamicFactions[i][fName]);
	DynamicFactions[i][fLabel] = Create3DTextLabel(label,COLOR_WHITE,DynamicFactions[i][extX], DynamicFactions[i][extY], DynamicFactions[i][extZ],20.0, 0, 1);
	return true;
}
function FactionsSpawns(playerid) {
	SetPlayerToTeamColor(playerid);
	new fid = PlayerInfo[playerid][pMember];
	if(fid == 0) {
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pTutorial] < 10 ? playerid + 10 : 0);
		SetPlayerPosEx(false, playerid, 2127.6489,2372.3713,10.8203);
		SetPlayerFacingAngle(playerid, 176.4550);
		return true;
	}
	SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
	SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVW]);
	TogglePlayerControllable(playerid, 0);
	ClearAnimations(playerid);
	SetPlayerFreeze(playerid, 3);
	SetPlayerPosEx(true, playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]); 
	InHQ[playerid] = fid;
	return true;
}

function OnPlayerDateUpdateX2(playerid) {
	new playerName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playerName, sizeof(playerName));
	new var[556];
	mysql_format(SQL, var,sizeof(var),"UPDATE `users` SET `CarLic`='%d',`FlyLic`='%d',`BoatLic`='%d',`GunLic`='%d',`CarLicT`='%d',`FlyLicT`='%d',`BoatLicT`='%d',`GunLicT`='%d',`Rob`='%d',`Jailed`='%d',`Muted`='%d',`MuteTime`='%d' WHERE `ID`='%d'",
	PlayerInfo[playerid][pCarLic], PlayerInfo[playerid][pFlyLic], PlayerInfo[playerid][pBoatLic], PlayerInfo[playerid][pGunLic], PlayerInfo[playerid][pCarLicT], PlayerInfo[playerid][pFlyLicT],
	PlayerInfo[playerid][pBoatLicT], PlayerInfo[playerid][pGunLicT], PlayerInfo[playerid][pRob], PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pMuted],
	PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL,var, "", "");
	return true;
}
function UnfreezePlayer(playerid) return TogglePlayerControllable(playerid, true);

stock GetName(playerid) {
	new pName[MAX_PLAYER_NAME];
	format(pName, MAX_PLAYER_NAME, PlayerInfo[playerid][pUsername]);
	if(GetPVarInt(playerid, "Cover") == 1) format(pName, MAX_PLAYER_NAME, GetNameEx(playerid));
	return pName;
}

function CalculateVote(paintid) {
	PaintTime[paintid] = 0;
	PaintTimer[paintid] = 0;
	if(PlayersOnPaint(paintid) < 2) return SendPaintMessage(paintid+1, COLOR_CLIENT, "Votarea a fost anulata deoarece este un singur player.");

	new string[180], map;
	PaintVote[paintid] = 0;
	if(MapVotes[paintid][0] >= MapVotes[paintid][1] && MapVotes[paintid][0] >= MapVotes[paintid][2] && MapVotes[paintid][0] >= MapVotes[paintid][3] && MapVotes[paintid][0] >= MapVotes[paintid][4] && MapVotes[paintid][0] >= MapVotes[paintid][5]) map = 0;
	else if(MapVotes[paintid][1] >= MapVotes[paintid][0] && MapVotes[paintid][1] >= MapVotes[paintid][2] && MapVotes[paintid][1] >= MapVotes[paintid][3] && MapVotes[paintid][1] >= MapVotes[paintid][4] && MapVotes[paintid][1] >= MapVotes[paintid][5]) map = 1;
	else if(MapVotes[paintid][2] >= MapVotes[paintid][0] && MapVotes[paintid][2] >= MapVotes[paintid][1] && MapVotes[paintid][2] >= MapVotes[paintid][3] && MapVotes[paintid][2] >= MapVotes[paintid][4] && MapVotes[paintid][2] >= MapVotes[paintid][5]) map = 2;
	else if(MapVotes[paintid][3] >= MapVotes[paintid][0] && MapVotes[paintid][3] >= MapVotes[paintid][1] && MapVotes[paintid][3] >= MapVotes[paintid][2] && MapVotes[paintid][3] >= MapVotes[paintid][4] && MapVotes[paintid][3] >= MapVotes[paintid][5]) map = 3;
	else if(MapVotes[paintid][4] >= MapVotes[paintid][0] && MapVotes[paintid][4] >= MapVotes[paintid][1] && MapVotes[paintid][4] >= MapVotes[paintid][2] && MapVotes[paintid][4] >= MapVotes[paintid][3] && MapVotes[paintid][4] >= MapVotes[paintid][5]) map = 4;
	else if(MapVotes[paintid][5] >= MapVotes[paintid][0] && MapVotes[paintid][5] >= MapVotes[paintid][1] && MapVotes[paintid][5] >= MapVotes[paintid][2] && MapVotes[paintid][5] >= MapVotes[paintid][3] && MapVotes[paintid][5] >= MapVotes[paintid][4]) map = 5;
	
	format(string, sizeof(string), "Votarea s-a terminat. Mapa %s a castigat cu %d voturi.", MapName2(map), MapVotes[paintid][map]);
	PaintMap[paintid] = map;
	if(paintid == 2) PaintTime[paintid] = 600;
	else PaintTime[paintid] = 300;
	SendPaintMessage(paintid+1, COLOR_CLIENT, string);
	MapVotes[paintid][0] = 0; MapVotes[paintid][1] = 0; MapVotes[paintid][2] = 0; MapVotes[paintid][3] = 0; MapVotes[paintid][4] = 0; MapVotes[paintid][5] = 0; 
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1)  {
			if(PaintType[i] == paintid+1) Voted[i] = 0, SpawnPlayer(i);
		}
	}
	return true;
}

stock MapName(paint) {
	new string[180];
	switch(PaintMap[paint]) {
		case 0: string = "rc_arena";
		case 1: string = "farm";
		case 2: string = "island";
		case 3: string = "desert";
		case 4: string = "beach";
		case 5: string = "forest";		
	}
	return string;
}

stock MapName2(paint) {
	new string[180];
	switch(paint) {
		case 0: string = "rc_arena";
		case 1: string = "farm";
		case 2: string = "island";
		case 3: string = "desert";
		case 4: string = "beach";
		case 5: string = "forest";
	}
	return string;
}


function ChangeNameReset(playerid) {
	new string[180];
	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) {
		new houseid = PlayerInfo[playerid][pHouse];
		strmid(HouseInfo[houseid][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);
		if(HouseInfo[houseid][hGarage] != 0) strmid(GarageInfo[HouseInfo[houseid][hGarage]][gOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255), UpdateLabel(3, HouseInfo[houseid][hGarage]);
		mysql_format(SQL, string, sizeof(string), "UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'",GetName(playerid),houseid);
		mysql_tquery(SQL,string, "", "");
		mysql_format(SQL, string, sizeof(string), "UPDATE `garages` SET `Owner`='%s' WHERE `ID`='%d'",GetName(playerid), HouseInfo[houseid][hGarage]);
		mysql_tquery(SQL,string, "", "");
		UpdateLabel(1,PlayerInfo[playerid][pHouse]);
	}
	if(PlayerInfo[playerid][pBizz] != 255) {
		new bizid2 = PlayerInfo[playerid][pBizz];
		strmid(BizzInfo[bizid2][bOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);
		mysql_format(SQL, string, sizeof(string), "UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'",GetName(playerid),bizid2);
		mysql_tquery(SQL,string, "", "");
		UpdateLabel(2,PlayerInfo[playerid][pBizz]);
	}
	new clanid = PlayerInfo[playerid][pClan];
	if(clanid != 0) SCM(playerid, COLOR_GOLD, "Deoarece faci parte dintr-un clan, tagul ti-a fost dat inapoi fara sa se intample vreo problema.");
	if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 0) {
		format(string, sizeof(string), "%s%s", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername]);
		SetPlayerName(playerid, string);
	}
	else if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 1) {
		format(string, sizeof(string), "%s%s", PlayerInfo[playerid][pUsername], ClanInfo[clanid][clTag]);
		SetPlayerName(playerid, string);
	}						
	return true;
}

stock DistanceToPlayer(playerid, targetid) {
	new Float: Pos[3];
	GetPlayerPos(targetid, Pos[0], Pos[1], Pos[2]); 
	return floatround(GetPlayerDistanceFromPoint(playerid, Pos[0], Pos[1], Pos[2]));
}

function ADeathMessage(playerid, killerid, reason) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] >= 1) {
			SendDeathMessageToPlayer(i, killerid, playerid, reason);
		}	
	}
	return true;
}

function PlayCopSound() {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsACop(i)) {
			PlayerPlaySound(i, 2606, 0, 0, 0);
		}
	}
	return true;
}

function CheckSpec(playerid) {
	if(IsPlayerSpec[playerid] == 1) {
		Iter_Remove(MySpec[Spectate[playerid]], playerid);
		Spectate[playerid] = 255;
		SetPlayerPosEx(false, playerid, SpecPos[playerid][0], SpecPos[playerid][1], SpecPos[playerid][2]), IsPlayerSpec[playerid] = 0;
		SetPlayerInterior(playerid, pInteriorID[playerid]);
		SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
		SpecPlayers[playerid] = 0;
	}
	return true;
}

function SetPlayerSkinEx(playerid, skin) {
	SetPlayerSkin(playerid, skin);
	if(PlayerInfo[playerid][pHat] != 0 && PlayerInfo[playerid][pShowHat] == 1) PutHat(playerid);
	if(PlayerInfo[playerid][pGlasses] > 0 && PlayerInfo[playerid][pShowGlasses] == 1) {
		if(skin < 300) SetPlayerHoldingObject(playerid, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
	}			
	return true;
}

function Banlog(ip[],name[],admin[],reason[],day) {
	new query[256];
	mysql_format(SQL, query, sizeof(query),"INSERT INTO banlog (`ip`,`player`,`admin`,`reason`,`day`) VALUES ('%s','%s','%s','%s','%d')",ip,name,admin,reason,day);
	mysql_tquery(SQL, query, "", "");
	return true;
}

function FactionLog(factionid,name[],action[]) {
	new query[256];
	mysql_format(SQL, query, sizeof(query),"INSERT INTO factionlog (`factionid`,`player`,`action`) VALUES ('%d','%s','%s')",factionid,name,action);
	mysql_tquery(SQL,query, "", "");
	return true;
}

function Transferlog(ip1[],ip2[],psql1,psql2,money) {
	new query[500];
	new y,m,d,h,mi,s;
	getdate(y,m,d);
	gettime(h,mi,s);
	mysql_format(SQL, query, sizeof(query),"INSERT INTO transferlog (`ip1`,`ip2`,`psql1`,`psql2`,`money`,`time`) VALUES ('%s','%s','%d','%d','%d','%02d/%02d/%d %02d:%02d:%02d')",ip1,ip2,psql1,psql2,money,d,m,y,h,mi,s);
	mysql_tquery(SQL, query, "", "");
	return true;
}

function LogIP(string[],psql) {
	new query[256];
	mysql_format(SQL, query, 256,"INSERT INTO iplogs (`ip`,`playerid`) VALUES ('%s','%d')", string,psql);
	mysql_tquery(SQL, query, "", "");
	return true;
}

function IsAttached(vehid) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(GetVehicleTrailer(GetPlayerVehicleID(i)) == vehid && vehid != 0) return true;
		}	
	}
	return false;
}

function UpdateJobStats(playerid) {
	new i = playerid, string[300];
	if(JobWorking[i] == 1 && PlayerInfo[i][pShowJob] == 1 && PlayerInfo[i][pShowHud] == 0) {
		switch(PlayerInfo[i][pJob]) {
			case 1: {
				if(GetPlayerSkill(playerid) == 5) {
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Ai skill maxim la acest job.~n~Mai trebuie sa muncesti inca %d secunde.~n~Muncitori la datorie: %d.",
					GetPlayerSkill(i), PlayerInfo[i][pFarmerSkill], JobSeconds[i], GetJobWorkers(1));
				}
				else {
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Pentru a avansa, ai nevoie de inca %d puncte.~n~Mai trebuie sa muncesti inca %d secunde.~n~Muncitori la datorie: %d.",
					GetPlayerSkill(i), PlayerInfo[i][pFarmerSkill], GetNeedPoints(i, PlayerInfo[i][pJob])-PlayerInfo[i][pFarmerSkill], JobSeconds[i], GetJobWorkers(1));
				}	
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
			}
			case 2: {				
				
				new szZone[180], category = GetPVarInt(playerid, "Category"), result[64];
				switch(category) {
					case 0: result = "Clothes";
					case 1: result = "Food";
					case 2: result = "Furniture";
					case 3: result = "Explosible";
					case 4: result = "Guns";
					case 5: result = "Stolen cars";				
				}
				GetPlayer3DZone2(CheckpointPos[playerid][0], CheckpointPos[playerid][1], CheckpointPos[playerid][2], szZone, sizeof(szZone));
				if(GetPlayerSkill(playerid) == 5) {
					format(string, sizeof(string), "Locatie aleasa: %s (%s)~n~Ai skill %d si ai muncit de %d ori.~n~Ai skill maxim la acest job.~n~Curse facute %d, bani castigati $%s.~n~Muncitori la datorie: %d",
					szZone, result, GetPlayerSkill(i), PlayerInfo[i][pTruckerSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(1));								
				}
				else {				
					format(string, sizeof(string), "Locatie aleasa: %s (%s)~n~Ai skill %d si ai muncit de %d ori.~n~Pentru a avansa, ai nevoie de inca %d puncte.~n~Curse facute %d, bani castigati $%s.~n~Muncitori la datorie: %d",
					szZone, result, GetPlayerSkill(i), PlayerInfo[i][pTruckerSkill], GetNeedPoints(i, PlayerInfo[i][pJob])-PlayerInfo[i][pTruckerSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(1));
				}
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
			}						
			case 4: {
				if(GetPlayerSkill(playerid) == 5) {
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Ai skill maxim la acest job.~n~Ai dus %d inghetate si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pJackerSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(4));
				}
				else {				
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Pentru a avansa, ai nevoie de inca %d puncte.~n~Ai dus %d inghetate si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pJackerSkill], GetNeedPoints(i, PlayerInfo[i][pJob])-PlayerInfo[i][pJackerSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(4));
				}
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
			}
			case 9: {
				if(GetPlayerSkill(playerid) == 5) {
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Ai skill maxim la acest job.~n~Ai dus %d cutii cu pizza si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pPizzaSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(9));
				}
				else {				
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Pentru a avansa, ai nevoie de inca %d puncte.~n~Ai dus %d cutii cu pizza si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pPizzaSkill], GetNeedPoints(i, PlayerInfo[i][pJob])-PlayerInfo[i][pPizzaSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(9));
				}
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
			}	
			case 10: {
				if(GetPlayerSkill(playerid) == 5) {
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Ai skill maxim la acest job.~n~Ai facut %d drumuri si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pCurierSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(10));
				}
				else {				
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Pentru a avansa, ai nevoie de inca %d puncte.~n~Ai facut %d drumuri si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pCurierSkill], GetNeedPoints(i, PlayerInfo[i][pJob])-PlayerInfo[i][pCurierSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(10));
				}
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
			}	
			case 12: {
				if(GetPlayerSkill(playerid) == 5) {
					format(string, sizeof(string), "Ai skill %d la acest job (%d drumuri).~n~Ai skill maxim la acest job.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pPilotSkill], GetJobWorkers(12));
				}
				else {					
					format(string, sizeof(string), "Ai skill %d la acest job (%d drumuri).~n~Pentru a avansa, ai nevoie de inca %d puncte.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pPilotSkill], GetNeedPoints(i, PlayerInfo[i][pJob])-PlayerInfo[i][pPilotSkill], GetJobWorkers(12));
				}	
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
			}	
			case 13: {
				if(GetPlayerSkill(playerid) == 5) {
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Ai skill maxim la acest job.~n~Ai facut %d drumuri si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pStivuitorSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(13));
				}
				else {					
					format(string, sizeof(string), "Ai skill %d si ai muncit de %d ori.~n~Pentru a avansa, ai nevoie de inca %d puncte.~n~Ai facut %d drumuri si ai castigat in total $%s.~n~Muncitori la datorie: %d",
					GetPlayerSkill(i), PlayerInfo[i][pStivuitorSkill], GetNeedPoints(i, PlayerInfo[i][pJob])-PlayerInfo[i][pStivuitorSkill], CurseFacute[i], FormatNumber(MoneyEarned[i]), GetJobWorkers(13));
				}
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
			}				
		}
	}
	return true;
}	
	
function SetPlayerCriminal(playerid, declare,reason[]) {
	PlayerInfo[playerid][pCrimes] += 1;
	Update(playerid,pCrimesx);
	new turned[MAX_PLAYER_NAME],turner[MAX_PLAYER_NAME], wantedmes[128], ini;
	ini = PlayerInfo[playerid][pWantedLevel];
	GetPlayerName(playerid, turned, sizeof(turned));
	if(declare == 255) {
		format(turner, sizeof(turner), "Unknown");
		strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
		Update(playerid,pVictimx);
	}
	else {
		if(IsPlayerConnected(declare)) {
			GetPlayerName(declare, turner, sizeof(turner));
			strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
			Update(playerid,pVictimx);
		}
	}
	new string[184];
	if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0) {
		format(string, sizeof(string), "%s - reporter: %s",reason,turner);
		strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
		Update(playerid,pCrime1x);
	}
	else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0) {
		format(string, sizeof(string), "%s - reporter: %s",reason,turner);
		strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
		Update(playerid,pCrime2x);
	}
	else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) {
		format(string, sizeof(string), "%s - reporter: %s",reason,turner);
		strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
		Update(playerid,pCrime3x);
	}
	else if(strcmp(PlayerInfo[playerid][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
	else {
		format(string, sizeof(string), "%s - reporter: %s",reason,turner);
		strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
		Update(playerid,pCrime1x);
		format(string, sizeof(string), "Fara Crima");
		strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
		Update(playerid,pCrime2x);
		Update(playerid,pCrime3x);
	}
	WantedTime[playerid] = 0;
	Update(playerid,pWantedLevelx);
	

	format(wantedmes, sizeof(wantedmes), "Ai comis o noua crima (%s), raportata de %s. Wanted actual: %d.", reason,turner,PlayerInfo[playerid][pWantedLevel]);
	SCM(playerid, COLOR_WARNING, wantedmes);
	ini = PlayerInfo[playerid][pWantedLevel]-ini;
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(IsACop(i) && OnDuty[i] == 1) {
				if(GetDistanceBetweenPlayers(i, playerid) < 250) {
					OnPlayerStreamOut(i, playerid);
					OnPlayerStreamIn(i, playerid);
				}
				format(cbjstore, sizeof(cbjstore), "Dispatch: %s [%d] has commited a crime: %s. Reporter: %s. New wanted level: %d.",GetName(playerid),playerid,reason,turner,PlayerInfo[playerid][pWantedLevel]);
				SCM(i, 0x2e64feFF, cbjstore);
			}
		}
	}
	return true;
}

function DeelayTime(playerid, id) {
	new string[64];
	format(string, sizeof(string), "Please wait %d seconds!", DeelayCommand[playerid][id]);
	SCM(playerid, COLOR_LGREEN, string);
	return true;
}

task LocalTimer[1000]() {
	new string[200], query[200];
	// licitatii automate
	new year, month, day;
	getdate(year, month, day);
	new days[180];
	format(days, sizeof(days), GetWeekDay(day, month, year));	
	new hour,minute,second;
	gettime(hour,minute,second);	

	format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(DataT[0], string);
	format(string, sizeof(string), ":%02d", second);
	TextDrawSetString(DataT[1], string);
	format(string, sizeof(string), "%d %s", day, MonthName[month-1]);
	TextDrawSetString(DataT[2], string);
	if(strcmp(days,"Monday",true) == 0 && hour == 00 && second == 0) {
		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `HelpedPlayersToday`='0' WHERE `Admin`>='1'");
		mysql_tquery(SQL ,query, "", "");
		
		foreach(new i: Player) {
			if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
				if(PlayerInfo[i][pAdmin] != 0) PlayerInfo[i][pHelpedPlayersToday] = 0;
			}
		}			
	}
	if(strcmp(days,"Saturday",true) == 0 || strcmp(days,"Sunday",true) == 0 || strcmp(days,"Friday",true) == 0) {
		if(ServerSystem[10] == 0) {
			if(hour == 20 && Licitatie == 0 || hour == 21 && Licitatie == 0) {
				if(FreeBusinesses() > 0) {
					new id = GetBizzID();
					Licitatie = 1;
					TipLicitatie = 2;
					TimpLicitatie = 5*60;
					TotalBani = 0;
					foreach(new i: Player) {
						if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) TotalMoney[i] = 0;
					}
					IDLicitatie = id;
					LastPlayer = -1;

					foreach(new i: Player) {
						if(IsPlayerConnected(i) && toglicitatie[i] == 0) {
							SCM(i, COLOR_YELLOW, "O licitatie tocmai a inceput. Optiunea de a vedea mesajele de la licitatie este dezactivata.");
							SCM(i, COLOR_YELLOW, "Daca vrei sa vezi mesajele, foloseste comanda /tog iar daca vrei sa vezi pentru ce se liciteaza, foloseste /info.");
						}
					}
					
					MesajLicitatie(0x7A45FFFF, "O noua licitatie tocmai a inceput!");
					switch(TipLicitatie) {
						case 1: format(string, sizeof(string), "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d). ", id, id);
						case 2: format(string, sizeof(string), "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d). ", id, id);
					}
					MesajLicitatie(0x7A45FFFF, string);
					format(string, sizeof(string), "Ai la dispozitie 5 minute pentru a licita.");
					MesajLicitatie(0x7A45FFFF, string);
					MesajLicitatie(0x7A45FFFF, "Lenh co san: (/bid - licitezi), (/info - informatii)");		
				}
				else if(FreeHouses() > 0) {
					new id = GetHouseID();
					Licitatie = 1;
					TipLicitatie = 1;
					TimpLicitatie = 5*60;
					TotalBani = 0;
					foreach(new i: Player) {
						if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) TotalMoney[i] = 0;
					}
					IDLicitatie = id;
					LastPlayer = -1;

					foreach(new i: Player) {
						if(IsPlayerConnected(i) && toglicitatie[i] == 0) {
							SCM(i, COLOR_YELLOW, "O licitatie tocmai a inceput. Optiunea de a vedea mesajele de la licitatie este dezactivata.");
							SCM(i, COLOR_YELLOW, "Daca vrei sa vezi mesajele, foloseste comanda /tog iar daca vrei sa vezi pentru ce se liciteaza, foloseste /info.");
						}
					}
					
					MesajLicitatie(0x7A45FFFF, "O noua licitatie tocmai a inceput!");
					switch(TipLicitatie) {
						case 1: format(string, sizeof(string), "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d). ", id, id);
						case 2: format(string, sizeof(string), "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d). ", id, id);
					}
					MesajLicitatie(0x7A45FFFF, string);
					format(string, sizeof(string), "Ai la dispozitie 5 minute pentru a licita.");
					MesajLicitatie(0x7A45FFFF, string);
					MesajLicitatie(0x7A45FFFF, "Lenh co san: (/bid - licitezi), (/info - informatii)");
				}			
				else if(minute == 0 && second == 0) SendAdminMessage(COLOR_WHITE, "AdmBot: Nu sunt proprietati ce poti fi scoase la licitatie.", 1);
			}
		}	
	}
	// War deelay	
	for(new i = 0; i < 15; i++) {
		if(FactionDeelay[i] >= 1) {
			FactionDeelay[i] --;
			if(FactionDeelay[i] == 0) {
				SendFactionMessage(i, COLOR_MONEY, "[WAR] Acum mafia ta poate ataca un teritoriu!");
			}
		}
	}
	
	// Paintball arena
	if(painttime > 0) painttime--;	
	if(PaintText[0] != 0) {
		PaintText[0] --;
		if(PaintText[0] == 0) format(string, sizeof(string), "~w~Runda a inceput~n~Succes tuturor!");
		else format(string, sizeof(string), "~w~Runda incepe in ~n~~b~%d secunde", PaintText[0]);
		GameTextForPaint(string, 0);
	}
	if(PaintText[1] != 0) {
		PaintText[1] --;
		if(PaintText[1] == 0) format(string, sizeof(string), "~w~Runda a inceput~n~Succes tuturor!");
		else  format(string, sizeof(string), "~w~Runda incepe in ~n~~b~%d secunde", PaintText[1]);
		GameTextForPaint(string, 1);
	}	
	if(PaintText[2] != 0) {
		PaintText[2] --;
		if(PaintText[2] == 0) format(string, sizeof(string), "~w~Runda a inceput~n~Succes tuturor!");
		else  format(string, sizeof(string), "~w~Runda incepe in ~n~~b~%d secunde", PaintText[2]);
		GameTextForPaint(string, 2);
	}						
	if(PlayersOnPaint(0) >= 2 && PaintTime[0] > 0) {
		PaintTime[0] --;
		if(PaintTime[0] == 0) {
			SendPaintMessage(1, COLOR_YELLOW, "Runda va incepe peste un minut. Pentru a vota o mapa, folositi comanda /votemap.");
			PaintVote[0] = 1;	
			if(PaintTimer[0] != 0) KillTimer(PaintTimer[0]), PaintTimer[0] = 0;
			PaintTimer[0] = SetTimerEx("CalculateVote", 60000, 0, "i", 0);		
		}
	}
	if(PlayersOnPaint(1) >= 2 && PaintTime[1] > 0) {
		PaintTime[1] --;
		if(PaintTime[1] == 0) {
			SendPaintMessage(1+1, COLOR_YELLOW, "Runda va incepe peste un minut. Pentru a vota o mapa, folositi comanda /votemap.");
			PaintVote[1] = 1;	
			if(PaintTimer[1] != 0) KillTimer(PaintTimer[1]), PaintTimer[1] = 0;
			PaintTimer[1] = SetTimerEx("CalculateVote", 60000, 0, "i", 1);		
		}		
	}
	if(PlayersOnPaint(2) >= 2 && PaintTime[2] > 0) {
		PaintTime[2] --;
		if(PaintTime[2] == 0) {
			SendPaintMessage(2+1, COLOR_YELLOW, "Runda va incepe peste un minut. Pentru a vota o mapa, folositi comanda /votemap.");
			PaintVote[2] = 1;	
			if(PaintTimer[2] != 0) KillTimer(PaintTimer[2]), PaintTimer[2] = 0;
			PaintTimer[2] = SetTimerEx("CalculateVote", 60000, 0, "i", 2);		
		}		
	}

	// Restart Server
	if(RestartTime >= 1) {
		RestartTime--;
		
		if(RestartTime <= 60) {
			format( string, sizeof(string), "~w~Urmeaza un restart in~n~~r~%d secunde", RestartTime);
			GameTextForAll( string, 1100, 4 );
		}
		if(RestartTime == 3) {
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1 && PlayerInfo[i][pAdmin] < 7) KickEx(i);
			}
		}
		if(RestartTime == 0) GameModeExit();
	}
	
	// Licitatie
	if(Licitatie == 1) {
		TimpLicitatie --;
		if(TimpLicitatie == 0) {
			Licitatie = 0;
			if(LastPlayer == -1) SCMTA(COLOR_YELLOW, "Licitatia a fost anulata deoarece nu s-a licitat nicio suma.");
			else {
				if(!IsPlayerConnected(LastPlayer) || TotalMoney[LastPlayer] == 0) SCMTA(COLOR_YELLOW, "Licitatia a fost anulata deoarece ultimul jucator care a licitat nu mai este conectat.");
				else {
					SCMTA(0x7A45FFFF, "Licitatia s-a terminat.");
					format(string, sizeof(string), "Cel mai mult a licitat %s(%d) cu suma de $%s.", GetName(LastPlayer), LastPlayer, FormatNumber(TotalMoney[LastPlayer]));
					SCMTA(0x7A45FFFF, string);
					GivePlayerCash(LastPlayer, 0, TotalBani);
					switch(TipLicitatie) {
						case 1: {
							format(string, sizeof(string), "Ai pierdut casa (%d) deoarece a fost licitata din cauza inactivitatii tale.", IDLicitatie);
							InsertEmail(HouseInfo[IDLicitatie][hOwner], "AdmBot", string, 0);
							format(string, sizeof(string), "Ban nhan duoc casa %d cu succes. Chuc mung!", IDLicitatie);
							SCM(LastPlayer, COLOR_YELLOW, string);
							finishAchievement(LastPlayer, 3);	
							mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `House`='999' WHERE `House`='%d'", IDLicitatie);
							mysql_tquery(SQL, query, "", "");
							foreach(new i: Player) {
								if(IsPlayerConnected(i) && PlayerInfo[i][pHouse] == IDLicitatie) {
									SCM(i, COLOR_YELLOW, "Ai ramas fara casa deoarece a fost luata la licitatie. Motivul: probabil ai fost inactiv.");
									PlayerInfo[i][pHouse] = 999;
									Update(i,pHousex);
								}
							}
							PlayerInfo[LastPlayer][pHouse] = IDLicitatie;
							PlayerInfo[LastPlayer][pRented] = -1;
							HouseInfo[IDLicitatie][hOwned] = 1;
							HouseInfo[IDLicitatie][hValue] = 0;
							
							strmid(HouseInfo[IDLicitatie][hOwner], GetName(LastPlayer), 0, strlen(GetName(LastPlayer)), 255);
							if(HouseInfo[IDLicitatie][hGarage] != 0) {
								strmid(HouseInfo[IDLicitatie][hOwner], GetName(LastPlayer), 0, strlen(GetName(LastPlayer)), 255);
 								UpdateLabel(3, HouseInfo[IDLicitatie][hGarage]);
 								mysql_format(SQL, query, sizeof(query),"UPDATE `garages` SET `Owner`='%s' WHERE `ID`='%d'",GetName(LastPlayer),HouseInfo[IDLicitatie][hGarage]);
								mysql_tquery(SQL,query, "", "");
							}
							Update(LastPlayer,pHousex);
							mysql_format(SQL, query, sizeof(query),"UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Value`='0' WHERE `ID`='%d'",GetName(LastPlayer),IDLicitatie);
							mysql_tquery(SQL,query, "", "");
							UpdateLabel(1,IDLicitatie);
						}
						case 2: {
							format(string, sizeof(string), "Ai pierdut afacerea (%d) deoarece a fost licitata din cauza inactivitatii tale.", IDLicitatie);
							InsertEmail(BizzInfo[IDLicitatie][bOwner], "AdmBot", string, 0);					
							format(string, sizeof(string), "Ban nhan duoc afacerea %d cu succes. Chuc mung!", IDLicitatie);
							SCM(LastPlayer, COLOR_YELLOW, string);
							finishAchievement(LastPlayer, 2);	
							mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Bizz`='255' WHERE `Bizz`='%d'", IDLicitatie);
							mysql_tquery(SQL, query, "", "");
							foreach(new i: Player) {
								if(IsPlayerConnected(i) && PlayerInfo[i][pBizz] == IDLicitatie) {
									SCM(i, COLOR_YELLOW, "Ai ramas fara afacere deoarece a fost luata la licitatie. Motivul: probabil ai fost inactiv.");
									PlayerInfo[i][pBizz] = 255;
									Update(i,pBizzx);
								}
							}
							PlayerInfo[LastPlayer][pBizz] = IDLicitatie;
							BizzInfo[IDLicitatie][bOwned] = 1;
							BizzInfo[IDLicitatie][bBuyPrice] = 0;
							strmid(BizzInfo[IDLicitatie][bOwner], GetName(LastPlayer), 0, strlen(GetName(LastPlayer)), 255);
							mysql_format(SQL, query, sizeof(query),"UPDATE users SET `Money`='%d', `MStore`='%d', `Bizz`='%d' WHERE `ID`='%d'", MoneyMoney[LastPlayer],StoreMoney[LastPlayer], PlayerInfo[LastPlayer][pBizz],PlayerInfo[LastPlayer][pSQLID]);
							mysql_tquery(SQL,query, "", "");
							mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Owned`='1',`Owner`='%s',`BuyPrice`='0' WHERE `ID`='%d'",BizzInfo[IDLicitatie][bOwner],IDLicitatie);
							mysql_tquery(SQL,query, "", "");
							UpdateLabel(2,IDLicitatie);
						}
					}
				}
			}
		}
	}
	return true;
}
task DecreaseTimer[5000]() {
	new string[256];
	foreach(new idd: PersonalVSpawned) if(CarInfo[idd][cTime] < gettime() && CarInfo[idd][cTime] != -1) DestroyPlayerCar(idd); 
	
	foreach(new i: Player) {
		if(!IsPlayerConnected(i) && IsPlayerLogged[i] != 1)
			continue;

		new Float: playerArmour; 
		GetPlayerArmour(i, playerArmour);			
		if(playerArmour == 100 && PlayerInfo[i][pAdmin] == 0 && GetPVarInt(i, "Armour") == 0) {
			if(ServerSystem[3] == 0) NightBot(i, "Cheats (armour-hack)");	
		}
		//if(FPS2[i] == 0 && AFKSeconds[i] > 120 && PlayerInfo[i][pSleeping] == 0) NightBot(i, "rakdroid");
		new Float: playerHealth; 
		GetPlayerArmour(i, playerHealth);			
		if(playerHealth == 100 && PlayerInfo[i][pAdmin] == 0) {
			if(ServerSystem[8] == 0) NightBot(i, "Cheats (health-hack)");	
		}			
					
		if(PlayerInfo[i][pWantedLevel] >= 1 && WantedTime[i] == 10) {
   			WantedTime[i] = 0;
			PlayerInfo[i][pWantedLevel] --;
			SetPlayerWantedLevel(i, PlayerInfo[i][pWantedLevel]);
			Update(i, pWantedLevelx);
			if(PlayerInfo[i][pWantedLevel] == 0) {
				SCM(i, COLOR_YELLOW, "Acum nu mai ai wanted deoarece politia ti-a pierdut urma!");
				PlayerTextDrawHide(i, WantedTD[i]);
				ClearCrime(i);
				finishAchievement(i, 15);
			}
			else {
				format(string, sizeof(string), "Politia iti pierde urma! Wanted Actual: %d", PlayerInfo[i][pWantedLevel]);
				SCM(i, COLOR_YELLOW, string);
			}
			format(string, sizeof(string), "%s [%d] lost 1 wanted level. W: %d", GetName(i), i, PlayerInfo[i][pWantedLevel]);
			SendTeamMessage(14, 0x2e64feFF, string);
			SendTeamMessage(3, COLOR_DBLUE, string);
			SendTeamMessage(2, COLOR_DBLUE, string);
			SendTeamMessage(1, COLOR_DBLUE, string);			
		}
		
		if(IsPlayerInRangeOfPoint(i, 30.0, 184.3529,-1825.4983,8.7530)) {	
			if(GetPVarInt(i, "Listening") == 0) {
				PlayAudioStreamForPlayer(i, beachlink, 184.3529,-1825.4983,8.7530, 30.0, 1);
				SetPVarInt(i, "Listening", 1);
			}	
		}
		else {
			if(GetPVarInt(i, "Listening") == 1) SetPVarInt(i, "Listening", 0);
		}
		
		// -- Variables
		for(new t = 0; t < 18; t++) {
			if(DeelayCommand[i][t] != 0) {
				DeelayCommand[i][t] -= 5;	
				if(DeelayCommand[i][t] < 0) DeelayCommand[i][t] = 0;
			}				
		}
		for(new t = 0; t < 13; t++) {
			if(JobDeelay[i][t] != 0) {
				JobDeelay[i][t] -= 5;	
				if(JobDeelay[i][t] < 0) JobDeelay[i][t] = 0;
			}				
		}			

		if(PlayerTime[i][0] != 0) PlayerTime[i][0] -= 5;
		if(PlayerTime[i][0] < 0) PlayerTime[i][0] = 0;
		
		if(PlayerInfo[i][pReportTime] >= 1) {
			PlayerInfo[i][pReportTime] -= 5;	
			if(PlayerInfo[i][pReportTime] < 0) PlayerInfo[i][pReportTime] = 0;
		}
		if(PlayerInfo[i][pNewbieMute] >= 1) {
			PlayerInfo[i][pNewbieMute] -= 5;
			if(PlayerInfo[i][pNewbieMute] < 0) PlayerInfo[i][pNewbieMute] = 0;
		}
		if(FreezeTime[i] != 0) {
			FreezeTime[i] -= 5;
			if(FreezeTime[i] < 0) FreezeTime[i] = 0;
			if(FreezeTime[i] == 0) {
				SCM(i, COLOR_LIGHTBLUE, "Acum nu mai ai freeze!");
				TogglePlayerControllable(i, 1);
			}
		}						

		if(PlayerToPoint(50, i, -2317.8091,-1637.5575,483.7031)) {
			for(new m; m < 2; m++) {
				if(PlayerInfo[i][pDailyMission][m] == 7) CheckMission(i, m);
			}		
		}
		if(PlayerToPoint(50, i, 1962.4126,-2193.3279,13.5469)) {
			for(new m; m < 2; m++) {
				if(PlayerInfo[i][pDailyMission][m] == 8) CheckMission(i, m);
			}		
		}
		if(PlayerToPoint(100, i, 1338.6273,2153.1045,11.0578)) {
			for(new m; m < 2; m++) {
				if(PlayerInfo[i][pDailyMission][m] == 9) CheckMission(i, m);
			}		
		}		
	}	
	return true;
}
function nearPNS(playerid) {
	new const Float:paynspray[][] = {
	{1025.05, -1024.23, 32.1}, // LS Temple
	{487.68, -1740.87, 11.13}, // LS Santa Maria
			{-1420.73, 2583.37, 55.56}, // El Quebrados
			{-1904.39, 284.97, 40.75}, // Wang Cars
			{-2425.91, 1022.33, 50.10}, // Juniper Hill
			{1975.60, 2162.16, 10.77}, // LV Redsands
			{2065.38, -1831.51, 13.25}, // Idlewood
			{-99.55, 1118.36, 19.44}, // Fort Carson
			{721.07, -455.94, 16.04}, // Dillimore
			{2393.74, 1493.01, 10.52}, // LV Unused (Pyramid)
			{2160.9758,1414.4552,10.8203} // LV RentCar
	};
	for(new i=0; i<sizeof(paynspray); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 20, paynspray[i][0], paynspray[i][1], paynspray[i][2])) return true;
	}
	return false;
}
function nearPNS2(playerid) {
	new const Float:paynspray[][] = {
	{1025.05, -1024.23, 32.1}, // LS Temple
	{487.68, -1740.87, 11.13}, // LS Santa Maria
			{-1420.73, 2583.37, 55.56}, // El Quebrados
			{-1904.39, 284.97, 40.75}, // Wang Cars
			{-2425.91, 1022.33, 50.10}, // Juniper Hill
			{1975.60, 2162.16, 10.77}, // LV Redsands
			{2065.38, -1831.51, 13.25}, // Idlewood
			{-99.55, 1118.36, 19.44}, // Fort Carson
			{721.07, -455.94, 16.04}, // Dillimore
			{2393.74, 1493.01, 10.52}, // LV Unused (Pyramid)
			{2160.9758, 1414.4552, 10.8203} // LV RentCar
	};
	for(new i=0; i<sizeof(paynspray); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 50, paynspray[i][0], paynspray[i][1], paynspray[i][2])) return true;
	}
	return false;
}
YCMD:tutorial(playerid, params[], help) {
	switch(PlayerInfo[playerid][pTutorial]) {
		case 1..2: {
			SCM(playerid, COLOR_LIGHTGOLD, "Mergi la checkpoint marcat pe minimap si tasteaza </exam> pentru a obtine permisul de conducere auto.");
			if(InExamen[playerid] < 1) {
				CP[playerid] = 53;
				SetPlayerCheckpointEx(playerid, 2333.3345,-17.7633,26.4844, 2.0);
			}
		}
		case 3..4: {
			SCM(playerid, COLOR_LIGHTGOLD, "Mergi si achizitioneaza-ti un telefon din magazinul marcat pe minimap.");				
			CP[playerid] = 53;
			SetPlayerCheckpointEx(playerid, 2242.7649,52.7174,26.6671, 2.0);
		}
		case 5..6: {
			SCM(playerid, COLOR_LIGHTGOLD, "Mergi si schimba-ti look-ul la afacerea de tip 'Clothing store' marcata pe minimap.");	
			SCM(playerid, COLOR_LIGHTGOLD, "Pentru a schimba skin-ul tasteaza comanda </clothes> in business. Un meniu iti va aparea pe ecran. Alege un skin.");
			CP[playerid] = 53;
			SetPlayerCheckpointEx(playerid, 2277.7778,51.3101,26.4844, 2.0);
		}
	}
	return true;
}
function Tutorial(playerid) {
	switch(PlayerInfo[playerid][pTutorial]) {
		case 0: {
			PlayerInfo[playerid][pTutorial] ++;
			UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
			SCM(playerid, COLOR_LIGHTGOLD, "-- Tutorial Step 1/5 --");
			gString[0] = EOS;
			format(gString, 111, "Contul tau este al #%d-lea inregistrat iar in momentul de fata sunt %d/%d playeri connectati.", GetPlayerInregisters(), Iter_Count(Player), MAX_PLAYERS);
			SCM(playerid, COLOR_LIGHTGOLD, gString);
			SCM(playerid, COLOR_LIGHTGOLD, "Pentru ca esti nou pe server, vei fi nevoit sa parcurgi un mic tutorial pentru a cunoaste o parte din server.");
			SCM(playerid, COLOR_LIGHTGOLD, "Ai fost transferat intr-o alta lume virtuala iar pentru inceput trebuie sa dai de permis.");
			SCM(playerid, COLOR_LIGHTGOLD, "--");
			GameTextForPlayer(playerid, "Step: 1/5", 5000, 1);
			SetPlayerCheckpointEx(playerid, 2183.7578,2295.5403,10.8203, 2.0);
			CP[playerid] = 53;
		}
		case 1: {
			SCM(playerid, COLOR_YELLOW, "Nu ai terminat tutorialul!");
			SCM(playerid, COLOR_LIGHTGOLD, "-- Tutorial Step 1/5 --");
			SCM(playerid, COLOR_LIGHTGOLD, "Pentru ca esti nou pe server, vei fi nevoit sa parcurgi un mic tutorial pentru a cunoaste o parte din server.");
			SCM(playerid, COLOR_LIGHTGOLD, "Ai fost transferat intr-o alta lume virtuala iar pentru inceput trebuie sa dai de permis.");
			SCM(playerid, COLOR_LIGHTGOLD, "--");
			GameTextForPlayer(playerid, "Step: 1/5", 5000, 1);
			SetPlayerCheckpointEx(playerid, 2183.7578,2295.5403,10.8203, 2.0);
			CP[playerid] = 53;
		}		
	}
	return true; 
}

YCMD:setjobowner(playerid, params[], help) {
	new job, id, string[260], query[128];
	if(sscanf(params, "ui", id, job)) return SCM(playerid, COLOR_SERVER, "Syntaxa: {FFFFFF}/setjobowner <playerid> <job>");
	if(job < 1 || job > 13) return SCM(playerid, -1, "invaild!");
	if(!IsPlayerConnected(playerid)) return SCM(playerid, COLOR_GREY, "Acest player nu este online!");
	format(JobInfo[job][jOwner], 24, GetName(id));
	PlayerInfo[id][pJobOwner] = job;
	UpdateVar(id, "JobOwner", PlayerInfo[playerid][pJobOwner]);
	format(string, sizeof(string), "AdmBot: Adminul %s i-a setat lui %s owner la jobul %s", GetName(playerid), JobInfo[job][jOwner], JobInfo[job][jName]);
	SendAdminMessage(COLOR_ADMCHAT, string,1);
	format(string, sizeof(string), "Chuc mung! Esti noul owner la jobul %s.", JobInfo[job][jName]);
	SCM(id, COLOR_YELLOW, string);
	mysql_format(SQL, query, sizeof(query),"UPDATE jobs SET Owner='%s' WHERE ID='%d'",JobInfo[job][jOwner],job);
	mysql_tquery(SQL, query, "", "");
	DestroyDynamic3DTextLabel(JobInfo[job][jLabel]);
	format(string, sizeof(string), "{ffffff}Job ID: {15B864}%d{FFFFFF}\n{ffffff}Job: {15B864}%s{FFFFFF}\n{ffffff}Owner: {15B864}%s{FFFFFF}\nLevel: {15B864}%d{FFFFFF}\nPress {15B864}Y{FFFFFF} to get the job\nPress {15B864}N{FFFFFF} to quit job", job, JobInfo[job][jName], JobInfo[job][jOwner], JobInfo[job][jLevel]);
	JobInfo[job][jLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF00, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
	JobInfo[job][jPickup] = CreateDynamicPickup(1275, 23, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], -1, -1, -1, 100.0);
	return true;
}
YCMD:movejob(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new job, string[256], query[180], Float: Pos[3];
	if(sscanf(params, "i", job)) return SendClientMessage(playerid, COLOR_WHITE, "{F91212}USAGE: {FFFFFF}/movejob <job id>");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	JobInfo[job][jPosX] = Pos[0];
	JobInfo[job][jPosY] = Pos[1];
	JobInfo[job][jPosZ] = Pos[2];
	DestroyDynamic3DTextLabel(JobInfo[job][jLabel]);
	DestroyDynamicPickup(JobInfo[job][jPickup]);
	format(string, sizeof(string), "{ffffff}Job ID: {15B864}%d{FFFFFF}\n{ffffff}Job: {15B864}%s{FFFFFF}\n{ffffff}Owner: {15B864}%s{FFFFFF}\nLevel: {15B864}%d{FFFFFF}\nPress {15B864}Y{FFFFFF} to get the job\nPress {15B864}N{FFFFFF} to quit job", job, JobInfo[job][jName], JobInfo[job][jOwner], JobInfo[job][jLevel]);
	JobInfo[job][jLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF00, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
	JobInfo[job][jPickup] = CreateDynamicPickup(1275, 23, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], -1, -1, -1, 100.0);
	format(string, sizeof(string), "Job-ul %d a fost mutat in aceasta locatie.", job);
	SendClientMessage(playerid, COLOR_WHITE, string);
	mysql_format(SQL, query, sizeof(query), "UPDATE `jobs` SET `PosX`='%f', `PosY`='%f', `PosZ`='%f' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], job);
	mysql_tquery(SQL, query, "", "");
	return true;
}
YCMD:givecrate(playerid, params[], help) {
	new id;
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Nu ai adminul necesar pentru a folosi aceasta comanda.");
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_ERROR, "Usage: {FFFFFF}/givecrate <playerid/name>");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_WHITE, "Invalid");
	SetPVarInt(playerid, "id", id);
	gString[0] = EOS;
	for(new i = 0; i < sizeof(CrateName); i++) format(gString, sizeof(gString), "%s{%s}%s crate\n", gString, CrateColors[i], CrateName[i]);
	Dialog_Show(playerid, DIALOG_GIVECRATES, DIALOG_STYLE_LIST, "Give crates", gString, "Select", "Cancel");
	return true;
}
function totalcrates(playerid) {
	new x; 
	x = PlayerInfo[playerid][pCrates][0] + PlayerInfo[playerid][pCrates][1] + PlayerInfo[playerid][pCrates][2] + PlayerInfo[playerid][pCrates][3] + PlayerInfo[playerid][pCrates][4];
	return x;
}
timer Pacanele[600](playerid) {
	if(TimerPacanele[playerid] > 0) {
		TimerPacanele[playerid] --;
		PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
		for(new i = 0; i < 9; i++) Slot[i][playerid] = random(6), PacaneleString(playerid, i);
		if(TimerPacanele[playerid] == 0) {
			stop Pacanele(playerid);
			new string[300], AmPierdut = 0;
			for(new gg = 0; gg < 6; gg++) {
				if(Slot[0][playerid] == gg && Slot[4][playerid] == gg && Slot[8][playerid] == gg) AmPierdut = 1, GiveBet(playerid, gg, 1, 1);
				else if(Slot[3][playerid] == gg && Slot[4][playerid] == gg && Slot[6][playerid] == gg) AmPierdut = 1, GiveBet(playerid, gg, 2, 1);
				else if(Slot[0][playerid] == gg && Slot[3][playerid] == gg && Slot[6][playerid] == gg) AmPierdut = 1, GiveBet(playerid, gg, 1, 0);
				else if(Slot[1][playerid] == gg && Slot[4][playerid] == gg && Slot[7][playerid] == gg) AmPierdut = 1, GiveBet(playerid, gg, 2, 0);
				else if(Slot[2][playerid] == gg && Slot[5][playerid] == gg && Slot[8][playerid] == gg) AmPierdut = 1, GiveBet(playerid, gg, 3, 0);
			}
			format(string, sizeof(string), "~g~$%s", GetCashStr(playerid));
			PlayerTextDrawSetString(playerid, PacaneleTD[9], string);
			if(AmPierdut == 0) {
				format(string, sizeof(string), "Ai pierdut $%s.", FormatNumbers(BetPacanele[playerid]));
				SCM(playerid, COLOR_DARKNICERED, string);
				GameTextForPlayer(playerid, "~r~YOU LOSE", 1000, 6);
			}
		}
	}
	return true;
}
function GiveBet(playerid, prize, linie, type) {
	new string[128];
	switch(prize) {
		case 0: TotalBet[playerid] = BetPacanele[playerid] * 10;
		case 1: TotalBet[playerid] = BetPacanele[playerid] * 4;
		case 2: TotalBet[playerid] = BetPacanele[playerid] * 4;
		case 3: TotalBet[playerid] = BetPacanele[playerid] * 5;
		case 4: TotalBet[playerid] = BetPacanele[playerid] * 6;
		case 5: TotalBet[playerid] = BetPacanele[playerid] * 5;
	}
	if(type == 0) format(string, sizeof(string), "Chuc mung! Ai castigat $%s (daca vrei, ii poti dubla) [ linie (#%d) ]", FormatNumbers(TotalBet[playerid]), linie);
	else if(type == 1) format(string, sizeof(string), "Chuc mung! Ai castigat $%s (daca vrei, ii poti dubla) [ diagonala (#%d) ]", FormatNumbers(TotalBet[playerid]), linie);
	SCM(playerid, COLOR_LGREEN, string);
	GivePlayerCash(playerid, 1, TotalBet[playerid]);
	GameTextForPlayer(playerid, "~g~YOU WIN", 1000, 6);
	Update(playerid, pCashx);
	SetTimerEx("Dublaje", 1000, 0, "%d", playerid);
	return true;
}
function Dublaje(playerid) {
	new string[128];
	for(new i = 0; i < 9; i++) PlayerTextDrawHide(playerid, SlotTD[i]);
	for(new i = 0; i < 11; i++) PlayerTextDrawHide(playerid, PacaneleTD[i]);
	IsPacanele[playerid] = 0;
	IsDublaj[playerid] ++;
	for(new i = 0; i < 7; i++) PlayerTextDrawShow(playerid, DublajTD[i]);
	format(string, sizeof(string), "You win: ~g~$%s~n~~w~~h~Nhan RED hoac BLACK de nhan doi chien thang cua ban.", FormatNumbers(TotalBet[playerid]));
	PlayerTextDrawSetString(playerid, DublajTD[2], string);
	return true;
}
function PacaneleString(playerid, id) {
	switch(Slot[id][playerid]) {
		case 0: PlayerTextDrawSetString(playerid, SlotTD[id], "LD_SLOT:r_69");
		case 1: PlayerTextDrawSetString(playerid, SlotTD[id], "LD_SLOT:grapes");
		case 2: PlayerTextDrawSetString(playerid, SlotTD[id], "LD_SLOT:cherry");
		case 3: PlayerTextDrawSetString(playerid, SlotTD[id], "LD_SLOT:bell");
		case 4: PlayerTextDrawSetString(playerid, SlotTD[id], "LD_SLOT:bar2_o");
		case 5: PlayerTextDrawSetString(playerid, SlotTD[id], "LD_SLOT:bar1_o");
	}
	return true;
}
function ShowCrates(playerid) {
	new string[64];
	PlayerTextDrawSetPreviewModel(playerid, CratePTD[0], 18631);
	format(string, sizeof(string), "select action ~n~you have %d crates.", totalcrates(playerid));
	PlayerTextDrawSetString(playerid, CratePTD[1], string);
	for(new i = 0; i < 6; i++) TextDrawShowForPlayer(playerid, CrateTD[i]);
	PlayerTextDrawShow(playerid, CratePTD[1]);
	PlayerTextDrawShow(playerid, CratePTD[0]);
	SelectTextDraw(playerid, 0xCA3ADBFF);
	IsCrates[playerid] = 1;
	return true;
}
function startcrates(playerid) {
	for(new l = 0; l < 6; l++) TextDrawShowForPlayer(playerid, CrateTD[l]);
	opencrates(playerid);
	PlayerTextDrawShow(playerid, CratePTD[1]);
	TimerCratesEx[playerid] = SetTimerEx("opencrates", 500, true, "d", playerid);
	return true;
}
function opencrates(i) {
	gString[0] = EOS;
	CrateTime[i] --;
	new amount, rand = random(100), x = !CrateModel[i] ? 0 : CrateModel[i]-1;
	if(CrateModel[i] != 5) {
		switch(rand) {
			case 0..10: {
				LoadSkins(x, amount);
				format(gString, 70, "skin %d (%s)~n~~w~~h~you have %d crates.", amount, CrateName[x], totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], amount);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] == 0) {
					if(CrateModel[i] <= 0) { 
						format(gString, 100,"%s, a deschis o cutie de test si puteai skinul %d (%s).", GetName(i), amount, CrateName[x]);
						SCM(i, COLOR_WHITE, gString);
					} else {
						if(total_skins(i) == 10) {
							PlayerInfo[i][pCrates][x] ++;
							save_crates(i);
							SCM(i, COLOR_LGREEN, "You won the skin, because you already have 10 skins you got the craft back!");
						} else {
							format(gString, 120,"(( {%s}%s Crate {A9C4E4}- %s opened a box and won skin %d [%s]. ))", CrateColors[x], CrateName[x], GetName(i), amount, CrateName[x]);
							SCMTA(COLOR_CLIENT, gString);  
							give_skin(i, amount);
						}	
					}
					KillTimer(TimerCratesEx[i]);
					CrateModel[i] = -1;
				}
			}
			case 11..30: {
				amount = random(5) + x * 4;
				format(gString, 75, "~y~%s Respect points~n~~w~~h~you have %d crates.", FormatNumber(amount), totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 1275);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] == 0) {
					if(CrateModel[i] <= 0) {
						format(gString, 120,"%s, a deschis o cutie de test si puteai castiga %d Respect points.", GetName(i),amount);
						SCM(i, COLOR_WHITE, gString);
					} else {
						format(gString, 120,"(( {%s}%s Crate {A9C4E4}- %s opened a box and won %d Respect points. ))", CrateColors[x], CrateName[x], GetName(i),amount, CrateName[x]);
						SCMTA(COLOR_CLIENT, gString); 
						PlayerInfo[i][pExp] += amount;
						Update(i, pRP);
					}
					KillTimer(TimerCratesEx[i]);
					CrateModel[i] = -1;
				}
			}
		   	case 31..40: {
				amount = random(10) + x * 20;
				format(gString, 75, "~y~%s Premium points~n~~w~~h~you have %d crates.", FormatNumber(amount), totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 1275);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] == 0) {
					if(CrateModel[i] <= 0) {
						format(gString, 120,"%s, a deschis o cutie de test si puteai castiga %d Premium points.", GetName(i),amount);
						SCM(i, COLOR_WHITE, gString);
					} else {
						format(gString, 120,"(( {%s}%s Crate {A9C4E4}- %s opened a box and won %d Premium points. ))", CrateColors[x], CrateName[x], GetName(i),amount);
						SCMTA(COLOR_CLIENT, gString); 
						PlayerInfo[i][pPremiumPoints] += amount;
						Update(i, pPremiumPointsx);
					}
					KillTimer(TimerCratesEx[i]);
					CrateModel[i] = -1;
				}
			}
			default: {
				amount = random(2000000) + x * 2000000;
				format(gString, 65, "~g~%s~n~~w~~h~you have %d crates.", FormatNumber(amount), totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 1274);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] == 0) {
					if(CrateModel[i] <= 0) {
						format(gString, 120,"%s, a deschis o cutie de test si puteai castiga $%s.", GetName(i), FormatNumber(amount));
						SCM(i, COLOR_WHITE, gString);
					} else {
						format(gString, 120,"(( {%s}%s Crate {A9C4E4}- %s opened a box and won {50DB6F}$%s{A9C4E4}. ))", CrateColors[x], CrateName[x], GetName(i), FormatNumber(amount));
						SCMTA(COLOR_CLIENT, gString); 
						GivePlayerCash(i, 1, amount);
					}
					KillTimer(TimerCratesEx[i]);
					CrateModel[i] = -1;
				}
			}
		}
	} else {
		switch(rand) {
   			case 0..5: {
				amount = RandomEx(30, 250);
				format(gString, 65, "Infernus (PREMIUM)~n~~w~~h~you have %d crates.", totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 411);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] <= 0) {
					if(Iter_Count(MyVehicle[i]) >= GetSlots(i)) { PlayerInfo[i][pCrates][4] ++; save_crates(i); SCM(i, COLOR_LIGHTGREEN, "Nu ai un slot liber");  CrateModel[i] = -1; KillTimer(TimerCratesEx[i]); return true; }
					else {
						KillTimer(TimerCratesEx[i]);
						CrateModel[i] = -1;
						GiveVehicle(i, 411, 0, 0, 1, 0, 0);
						format(gString, 120, "(( {7556ff}Vehicle Crate {A9C4E4}- %s opened a box and won Infernus PREMIUM. ))", GetName(i));
						SCMTA(COLOR_CLIENT, gString);
					}
				}
			}
			case 6..33: {
				amount = random(20) + 20;
				format(gString, 64, "Picador~n~~w~~h~you have %d crates.", totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 600);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] == 0) {
					if(Iter_Count(MyVehicle[i]) >= GetSlots(i)) { PlayerInfo[i][pCrates][4] ++; save_crates(i); SCM(i, COLOR_LIGHTGREEN, "Nu ai un slot liber");  CrateModel[i] = -1; KillTimer(TimerCratesEx[i]); return true; }
					else {
						KillTimer(TimerCratesEx[i]);
						CrateModel[i] = -1;
						GiveVehicle(i, 600, 0, 0, 0, 0, 0);
						format(gString, 120,"(( {7556ff}Vehicle Crate {A9C4E4}- %s opened a box and won Picador. ))", GetName(i));
						SCMTA(COLOR_CLIENT,gString);
					}
				}
			}
			case 34..40: {
				format(gString, 65, "hpv1000~n~~w~~h~you have %d crates.", totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 523);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] <= 0) {
					if(Iter_Count(MyVehicle[i]) >= GetSlots(i)) { PlayerInfo[i][pCrates][4] ++; save_crates(i); SCM(i, COLOR_LIGHTGREEN, "Nu ai un slot liber");  CrateModel[i] = -1; KillTimer(TimerCratesEx[i]); return true; }
					else {
						KillTimer(TimerCratesEx[i]);
						CrateModel[i] = -1;
						GiveVehicle(i, 523, 0, 0, 0, 0, 0);
						format(gString, 120,"(( {7556ff}Vehicle Crate {A9C4E4}- %s opened a box and won hpv1000. ))", GetName(i));
						SCMTA(COLOR_CLIENT, gString);
					}
				}
			}
		   	case 41..46: {
				format(gString, 65, "NRG-500 (PREMIUM)~n~~w~~h~you have %d crates.", totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 522);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] <= 0) {
					if(Iter_Count(MyVehicle[i]) >= GetSlots(i)) { PlayerInfo[i][pCrates][4] ++; save_crates(i); SCM(i, COLOR_LIGHTGREEN, "Nu ai un slot liber");  CrateModel[i] = -1; KillTimer(TimerCratesEx[i]); return true; }
					else {
						KillTimer(TimerCratesEx[i]);
						CrateModel[i] = -1;
						GiveVehicle(i, 522, 0, 0, 1, 0, 0);
						format(gString, 120,"(( {7556ff}Vehicle Crate {A9C4E4}- %s opened a box and won NRG-500 PREMIUM. ))", GetName(i));
						SCMTA(COLOR_CLIENT,gString);
					}
				}
			}
		   	case 47..53: {
				format(gString, 65, "ticket (RAINBOW)~n~~w~~h~you have %d crates.", totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 1581);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] <= 0) {
					KillTimer(TimerCratesEx[i]);
					CrateModel[i] = -1;
					PlayerInfo[i][pTickete][0] ++;
					save_tickete(i);
					format(gString, 120,"(( {7556ff}Vehicle Crate {A9C4E4}- %s opened a box and won Rainbow Ticket. ))", GetName(i));
					SCMTA(COLOR_CLIENT, gString);
				}
			}
		   	case 54..66: {
				format(gString, 65, "ticket (VIP)~n~~w~~h~you have %d crates.", totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 1581);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] <= 0) {
					KillTimer(TimerCratesEx[i]);
					CrateModel[i] = -1;
					PlayerInfo[i][pTickete][1] ++;
					save_tickete(i);
					format(gString, 120,"(( {7556ff}Vehicle Crate {A9C4E4}- %s opened a box and won Vip Ticket. ))", GetName(i));
					SCMTA(COLOR_CLIENT,gString);
				}
			}
			default: {
				format(gString, 65, "Savanna~n~~w~~h~you have %d crates.", totalcrates(i));
				PlayerTextDrawSetPreviewModel(i, CratePTD[0], 567);
				PlayerTextDrawSetString(i, CratePTD[1], gString);
				PlayerTextDrawShow(i, CratePTD[0]);
				if(CrateTime[i] <= 0) {
					if(Iter_Count(MyVehicle[i]) >= GetSlots(i)) { PlayerInfo[i][pCrates][4] ++; save_crates(i); SCM(i, COLOR_LIGHTGREEN, "Nu ai un slot liber");  CrateModel[i] = -1; KillTimer(TimerCratesEx[i]); return true; }
					else {
						KillTimer(TimerCratesEx[i]);
						CrateModel[i] = -1;
						GiveVehicle(i, 567, 0, 0, 0, 0, 0);
						format(gString, 120,"(( {7556ff}Vehicle Crate {A9C4E4}- %s opened a box and won Savanna. ))", GetName(i));
						SCMTA(COLOR_CLIENT, gString);
					}
				}
			}
		}
	}
	return true;
}
stock CalculateTime(seconds) {
	new time = seconds;
	time = time%3600;
	new minutes = time/60;
	time = time%60;
	new seconds2 = time;
	new string[10];
	format(string, sizeof(string), "%02d:%02d", minutes, seconds2);
	return string;
}
YCMD:resetquest(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, AdminOnly);
	mysql_tquery(SQL, "UPDATE `users` SET `SpecialQuest`='0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0'", "", "");
	foreach(new i: Player) {
		for(new qq = 0; qq < sizeof(QuestPos); qq++) PlayerInfo[i][pSpecialQuest][qq] = 0;	
	}
	SCM(playerid, COLOR_LGREEN, "Ai resetat cu success");
	return true;
}
YCMD:resetgoal(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, AdminOnly);
	ServerGoal = 0;
	TerminatJobGoal = 0;
	gString[0] = EOS;
	format(gString, sizeof(gString), "(/resetgoal) {FFFFFF}%s a resetat goalul.", GetName(playerid));
	SendAdminMessage(COLOR_DARKNICERED, gString, 5);
	mysql_tquery(SQL, "UPDATE `stuff` SET `goal`='0'", "", "");
	return true;
}

stock GetPlayerSpeed(playerid) { 
	new Float:Pos[3]; 
	GetPlayerVelocity(playerid, Pos[0], Pos[1], Pos[2]); 
	return floatround(200*floatsqroot(Pos[0]*Pos[0] + Pos[1]*Pos[1] + Pos[2]*Pos[2])); 
}

function FailExam(playerid) {
	for(new i = 0; i < 13; i++) PlayerTextDrawHide(playerid, ExamTD[i]);
	CancelSelectTextDraw(playerid);
	SetPlayerInterior(playerid, 1);
	TogglePlayerControllable(playerid, 1);
	if(PlayerInfo[playerid][pTutorial] < 10) SetPlayerVirtualWorld(playerid, playerid + 10);
	else SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	ExamTime[playerid] = 0;
	StepExam[playerid] = 0;
	InExamen[playerid] = 0;
	return 1;
}


function HaveFlyHack(playerid) {
	new anim = GetPlayerAnimationIndex(playerid);
	if(anim == 958 || anim == 1231 || anim == 1189) return true;
	return false;
}

function UpdateJobGoal(update) {
	ServerGoal += update;
	gString[0] = EOS;
	format(gString, 60, "~y~$%s ~w~/ ~r~$%s", ServerGoal >= MAXGOAL ? FormatNumbers(MAXGOAL) : FormatNumbers(ServerGoal), FormatNumbers(MAXGOAL));
	TextDrawSetString(GoalTD[0], gString);

	if(TerminatJobGoal != 1) {
		if(ServerGoal >= MAXGOAL) {
			foreach(new b: Player) {
				new amount, rand = random(30);
				switch(rand) {
					case 0..10: {
						amount = RandomEx(50, 100);
						format(gString, 100, "Job Goal: {FFFFFF}Chuc mung! Ban nhan duoc %d Gift Points pentru ca sa umplut golul.", amount);
						SCM(b, 0xF5C738FF, gString);
						PlayerInfo[b][pGiftPoints] += amount;
						if(PlayerInfo[b][pGiftPoints] >= 500) PlayerInfo[b][pGiftPoints] = 500;
						Update(b, pGiftPointsx);		
					}
					case 11..19: {
						amount = RandomEx(15, 30);
						format(gString, 100, "Job Goal: {FFFFFF}Chuc mung! Ban nhan duoc %d Premium Points pentru ca sa umplut golul.", amount);
						SCM(b, 0xF5C738FF, gString);
						PlayerInfo[b][pPremiumPoints] += amount;
						Update(b, pPremiumPointsx);		
					}
					default: {
						amount = RandomEx(200, 300);
						format(gString, 100, "Job Goal: {FFFFFF}Chuc mung! Ban nhan duoc %d RPoints pentru ca sa umplut golul.", amount);
						SCM(b, 0xF5C738FF, gString);
						PlayerInfo[b][pHpoints] += amount;
						Update(b, pHpointsx);
					}
				}
			}
			TerminatJobGoal = 1;
		}
	}
	return true;
}

function UpdateGift(i) {
	new rand = random(5), ParizeRandom[30]; gString[0] = EOS;
	switch(rand) {
		case 0: { 
			ParizeRandom = "~p~HIDDEN COLOR"; 
			if(GiftStep[i] == 15) {
				SCM(i, COLOR_GREEN, "GiftBox: {FFFFFF}Felicitari ai castigat o culoare hidden."); 
				PlayerInfo[i][pHidden] ++; 
				UpdateVar(i, "Hidden", PlayerInfo[i][pHidden]);
				PlayerInfo[i][pGiftPoints] -= 200;
				Update(i, pGiftPointsx); 
			}
		}
		default: {
			new money = RandomEx(3000000, 15000000);
			format(ParizeRandom, 30, "~g~$%s", FormatNumbers(money));
			if(GiftStep[i] == 15) { 
				format(gString, 100, "GiftBox: {FFFFFF}Chuc mung! Ban nhan duoc $%s.", FormatNumbers(money));
				SCM(i, COLOR_GREEN, gString); 
				GivePlayerCash(i, 1, 3000000);
				PlayerInfo[i][pGiftPoints] -= 200;
				Update(i, pGiftPointsx);
			} 
		}
	}
	if(GiftStep[i] <= 15) {
		format(gString, 50, "prize: %s~w~~h~~n~step: ~r~%d/15", ParizeRandom, GiftStep[i]);
		PlayerTextDrawSetString(i, GiftTD[16], gString);
		PlayerTextDrawShow(i, GiftTD[GiftStep[i]]);
	}
	GiftStep[i] ++;
	if(GiftStep[i] == 19) {
		GiftStep[i] = 19;
		for(new d = 0; d < 17; d++) PlayerTextDrawHide(i, GiftTD[d]);
	}
	return true;
}
function RepairVehiclePns(i) {
	if(GetPlayerState(i) != PLAYER_STATE_DRIVER)
		return true;

	new idd, veh = GetPlayerVehicleID(i);

	for(new h = 1; h <= GpsBizzType[14]; h++) {
		idd = BizzTypeID[14][h];
		if(IsPlayerInRangeOfPoint(i, 30.0,BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ])) {
			GivePlayerCash(i, 0, 1000);
			BizzInfo[idd][bBalance] += BizzInfo[idd][bFee];	
			for(new m; m < 2; m++) {
				if(PlayerInfo[i][pDailyMission][m] == 19) CheckMission(i, m);
			}								
		}
	}
	PnsTimer[i] = -1;
	TogglePlayerControllable(i, true);
	new carid = FindSpawnID(veh), b = LastPns[i];
	if(carid != -1) SetVehicleHealth(veh, CarInfo[carid][cVip] ? 2000 : 999);
	else SetVehicleHealth(veh, 999);
	ChangeVehicleColor(veh, VehicleStats[veh][vColorOne], VehicleStats[veh][vColorTwo]);
	SetVehiclePos(veh, ExitVehiclePNS[b][0], ExitVehiclePNS[b][1], ExitVehiclePNS[b][2]);
	SetVehicleZAngle(veh, ExitVehiclePNS[b][3]);
	return true;
}
task Timers[1000]() {
	new 
		string[180], szTD[600], 
		Float: ppHealth, Float: ppArmour,
		Float: x, Float: y, Float: z, swinner[180];

	if(RulettStatus == 1) MainRuletta();
	if(RulettStatus == 4) UpdateRuletta();
	foreach(new i : Rainbows[3]) ChangeRainbowColors(i);

	foreach(new i: Player) {
		if(login[i] < gettime() && login[i] != -1) SCM(i, COLOR_WARNING, "Ban nhan duoc kick deoarece nu ti-ai logat/inregistrat la timp!!"), KickEx(i);
		
		if(IsPlayerLogged[i] != 1)
			continue;

		if(UnFreezeTimer[i] < gettime() && UnFreezeTimer[i] != -1) UnFreezeStation(i);
		if(JobWorking[i] != 0 && PlayerInfo[i][pJob] == 2 && !IsTrailerAttachedToVehicle(GetPlayerVehicleID(i)) && CP[i] == 52 && !IsTrailerAttachedToVehicle(GetPlayerVehicleID(i)) && CP[i] == 52) AttachTrailer(i);
		if(TimerMoney[i] < gettime() && TimerMoney[i] != -1) PlayerTextDrawHide(i, PlayerInfo[i][pShowBanca] ? MoneyTD1 : MoneyTD0), TimerMoney[i] = -1;
		if(TimerInfo[i] < gettime() && TimerInfo[i] != -1) PlayerTextDrawHide(i, InfoPTD), TimerInfo[i] = -1;
		if(PnsTimer[i] <= gettime() && PnsTimer[i] != -1) RepairVehiclePns(i);
		if(TimerPayDay[i] < gettime()) {
			for(new l = 0; l < 3; l++) PlayerTextDrawHide(i, PayDayPTD[l]);
			TimerPayDay[i] = -1;
		}
		if(FishTimer[i] > 0) {
			FishTimer[i] --;
			switch(FishTimer[i]) {
				case 5: GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~y~YOU'RE FISHING~n~~w~~h~Waiting...", 5000, 3);
				case 0: {
					PickUpFish[i] = CreateDynamicPickup(19630, 23, LastPos[i][0], LastPos[i][1], LastPos[i][2]+1.1, -1, -1, i, 10.0);
					HavePestele[i] = 10;
				}
			}
		}
		if(PlayerInfo[i][pShowCeas] != 0) {
			format(string, 35, "~y~%s (%.2f)", CalculateTime(Connected[i]), PlayerInfo[i][pSeconds]/3600);
			PlayerTextDrawSetString(i, CeasPTD, string);
		}
		if(HavePestele[i] > 0) {
			HavePestele[i] --;
			if(HavePestele[i] == 0) {
				SCM(i, COLOR_LGREEN, "Ai pierdut pestele.");
				TogglePlayerControllable(i, true);
				RemovePlayerAttachedObject(i, 0);
				DestroyDynamicPickup(PickUpFish[i]);
				StartFish[i] = 0;
				Freezed[i] = 0;
			}
		}
		if(GiftStep[i] < 19) UpdateGift(i);
		if(JobWorking[i] == 1) WorkingTime[i] ++;
		if(JobLeftTime[i] > 0) {
			JobLeftTime[i] --;
			if(JobLeftTime[i] == 0) {
				SendClientMessage(i, COLOR_GREY, "Cong viec that bai! Ban da roi khoi xe.");
				if(playerObject[i] != 0) DestroyPlayerObject(i, playerObject[i]), playerObject[i] = 0;
				if(playerObject2[i] != 0) DestroyObject(playerObject2[i]), playerObject2[i] = 0;
				JobWorking[i] = 0;
				PlayerTextDrawHide(i, JobTD);
				if(JobVehicle[i] != 0) { DestroyVehicle(JobVehicle[i]); JobVehicle[i] = 0; }
				if(Trailer[i] != 0) { DestroyVehicle(Trailer[i]); Trailer[i] = 0;  }
				PlayerTextDrawHide(i, InfosTD);
				DisablePlayerCheckpointEx(i);
				DisablePlayerRaceCheckpointEx(i);
				RemovePlayerAttachedObject(i, 6);
				RemovePlayerAttachedObject(i, 2);
				CP[i] = 0;
				JobVehicle[i] = 0;
				JobDeelay[i][PlayerInfo[i][pJob]] = 180;	
			}
		}
		if(ExamTime[i] > 0) {
			ExamTime[i] --;
			format(string, sizeof(string), "~y~00:%02d", ExamTime[i]);
			PlayerTextDrawSetString(i, ExamTD[4], string);
			if(ExamTime[i] == 0) FailExam(i), SCM(i, COLOR_LIGHTRED, "Licenses: {FFFFFF}Timp-ul pentru a raspunde la intrebari a expirat.");
		}
		
		if(InTraining[i] == 1 && PlayerInfo[i][pWantedLevel] != 0) {
			InTraining[i] = 0;
			FactionsSpawns(i);
			new t = GetPVarInt(i, "Training");
			SetPlayerPosEx(false, i, Training[t][0], Training[t][1], Training[t][2]);
			DeletePVar(i, "Training");
			ResetPlayerWeapons(i);
			SCM(i, COLOR_YELLOW, "Ai fost scos din sala de antrenament deoarece ai wanted!");			   
		}	
	  		
		if(!PlayerToPoint(50, i, LastPos[i][0], LastPos[i][1], LastPos[i][2]) && !IsPlayerInArea(i, -3000, -2274.5, -1776, -859.5) && PlayerInfo[i][pAdmin] == 0 && Exception[i] == 0 && AFKSeconds[i] < 15 && InDealer[i] == 0 && ArenaSpec[i] == -1 && Spectate[i] == 255 && GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID) {
			if(ServerSystem[0] == 0) {	
				if(IsPlayerInAnyVehicle(i)) SetVehicleToRespawn(GetPlayerVehicleID(i));			
				SendAdminMessage(COLOR_WARNING, string, 1);
				NightBot(i, "Cheats (teleport-hack)");
				WarningsCheat[i] = -3;	
			}	
		}
		if(WarningsCheat[i] > 0) WarningsCheat[i] --;
		if(Exception[i] > 0) Exception[i] --;
		if(GetPlayerWeapon(i) >= 8 && GetPlayerWeapon(i) != 23 && GetPlayerWeapon(i) != 46 && GetPlayerWeapon(i) != 43 && PlayerInfo[i][pGunLic] == 0) {
			if(ServerSystem[1] == 0 ) NightBot(i, "Cheats (weapon-hack)");
		}
				
		
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerInterior(i) == 0) {
			if(!nearPNS2(i) && NearPNS[i] == 1) DisableRemoteVehicleCollisions(i, 0), NearPNS[i] = 0;
			if(nearPNS2(i)) {
				DisableRemoteVehicleCollisions(i, 1);
				NearPNS[i] = 1;
			}
		}	
		
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER) Checkvehinfo(i);
		if(TradeTime[i] > 0) {
			TradeTime[i] --;
			new id = TradeID[i];
			format(string, sizeof(string), "00:0%d", TradeTime[i]);
			PlayerTextDrawSetString(i, TradePTD[6], string);
			PlayerTextDrawSetString(id, TradePTD[6], string);			
			if(TradeTime[i] == 0) {
				FinishTrade(i);
				PlayerTextDrawHide(i, TradePTD[6]);
				PlayerTextDrawHide(id, TradePTD[6]);					
			}
		}
		
		if(SafeRTime[i] > 0) {
			SafeRTime[i] --;
			if(SafeRTime[i] == 0) {
				TogglePlayerControllable(i,1);
				BagTime[i] = 60;
				Freezed[i] = 0;
				SCM(i, COLOR_YELLOW, "* Ai la dispozitie un minut sa duci sacul in spatele unui vehicul. (Apasa tasta Y)");
				SetPlayerAttachedObject( i, 0, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000 );
				ClearAnimations(i);
			}
		}					
						
		// AdmBot - Kick
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsAPlane(GetPlayerVehicleID(i))) {
			new speed = Carspeed(GetPlayerVehicleID(i));		
			if(speed > 400 && PlayerInfo[i][pAdmin] < 1 && !IsPlayerInArea(i, -3000, -2274.5, -1776, -859.5))
			{	
				if(GetVehicleModel(i) == 522 && speed < 250) 
					continue;

				if(GetAdmins() > 0) {
					format(string, sizeof(string), "%s(%d) is suspected of using Speed-Hack (vehicle %s, speed %d)", GetName(i), i, aVehicleNames[GetVehicleModel(GetPlayerVehicleID(i))-400], speed);
					if(GetPVarInt(i, "Cover") == 0) SendAdminMessage(COLOR_WARNING, string,1);
				}
				else if(ServerSystem[5] == 0) NightBot(i, "Cheats (speed-hack)");
			}
		}

		if(PlayerInfo[i][pAdmin] < 1) {
			if(GetPlayerSpeed(i) > 150 && HaveFlyHack(i)) {
				if(GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID) {					
					SCM(i, COLOR_WHITE, "Stop cheating (fly-hack).");
					KickEx(i);
				}
			}
		}		
		if(CheatWarnings[i] > 0) CheatWarnings[i] --;
			
		if(PlayerToPoint(1.1, i, LastPos[i][0], LastPos[i][1], LastPos[i][2])) {

			AFKSeconds[i] ++;
			if(AFKSeconds[i] >= 3600 && PlayerInfo[i][pSleeping] == 0 && PlayerInfo[i][pAdmin] < 6) {
				format(string, sizeof(string), "AdmCmd: %s was kicked by AdmBot, reason: AFK fara /sleep mai mult de 60 minute.", GetNameEx(i));
				SCMTA(COLOR_LIGHTRED, string);
				KickEx(i);
			}				
			if(AFKSeconds[i] >= 120) {
				if(JobWorking[i] == 1) {
					SCM(i, COLOR_GREY, "Job esuat! Ai stat AFK timp de 2 minute.");
					if(playerObject[i] != 0) DestroyPlayerObject(i, playerObject[i]), playerObject[i] = 0;
					if(playerObject2[i] != 0) DestroyObject(playerObject2[i]), playerObject2[i] = 0;
					JobWorking[i] = 0;
					PlayerTextDrawHide(i, JobTD);
					if(JobVehicle[i] != 0) { DestroyVehicle(JobVehicle[i]); JobVehicle[i] = 0; }
					if(Trailer[i] != 0) { DestroyVehicle(Trailer[i]); Trailer[i] = 0; }
					PlayerTextDrawHide(i, InfosTD);
					DisablePlayerCheckpointEx(i);
					DisablePlayerRaceCheckpointEx(i);
					CP[i] = 0;
					JobVehicle[i] = 0;
					JobDeelay[i][PlayerInfo[i][pJob]] = 180;
					RemovePlayerAttachedObject(i, 6);
					RemovePlayerAttachedObject(i, 2);
					SetPlayerSpecialAction(i, 0);		
					SetPlayerSpecialAction(i, 0);
				}
			}
		}	
		else AFKSeconds[i] = 0;
		if(PlayerInfo[i][pSleeping] == 0 && Spectate[i] == 255 && AFKSeconds[i] < 15) PlayerInfo[i][pSeconds] ++, Connected[i] ++;

		
		GetPlayerPos(i, LastPos[i][0], LastPos[i][1], LastPos[i][2]);
		
		if(GetPlayerWeapon(i) != 0 && AFKSeconds[i] == 0) {
			if(ServerSystem[1] == 0 && GetPlayerWeapon(i) != 0) CheckWeapons(i, GetPlayerWeapon(i));
			if(ServerSystem[2] == 0 && GetPlayerWeapon(i) != 0) CheckAmmo(i, GetPlayerWeapon(i));
		}	
	
		if(PlayerInfo[i][pAdmin] == 0 && GetPlayerSpecialAction(i) == 2 && ServerSystem[9] == 0) NightBot(i, "Cheats (jetpack)");
		
		if(WTimes[i] != 0) WTimes[i] -= 2;
		
		if(GetPlayerDrunkLevel(i) < 100) SetPlayerDrunkLevel(i, 2000);
		else {
			if(pDrunkLevelLast[i] != GetPlayerDrunkLevel(i)) {
				new wfps = pDrunkLevelLast[i] - GetPlayerDrunkLevel(i);
				if((wfps > 0) && (wfps < 200)) FPS2[i] = wfps;
				pDrunkLevelLast[i] = GetPlayerDrunkLevel(i);
			}
		}	
	 
		if(PlayerInfo[i][pShowFP] == 1 && PlayerInfo[i][pShowHud] == 0) {
			gString[0] = EOS;
			if(PlayerInfo[i][pAdmin] == 0) format(gString, 20, "FPS: ~y~%d", FPS2[i]-1);
			else format(gString, 60, "TICK: ~r~%d ~w~~w~~h~MYSQL: ~b~%d ~w~~h~FPS: ~y~%d", GetServerTickRate(), mysql_unprocessed_queries(), FPS2[i]-1);
			PlayerTextDrawSetString(i, ShowFPS, gString);
			PlayerTextDrawShow(i, ShowFPS);
		}
		if(GetPlayerAnimationIndex(i) == 1660) OnPlayerUseVending(i);	
		if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && !IsABoat(GetPlayerSurfingVehicleID(i))) {
			if(GetPlayerWeapon(i) != 0) {
				SetPlayerArmedWeapon(i, 0);
				SCM(i, COLOR_WARNING, "Nu poti folosi armele atata timp cat esti pe vehicul!");
			}	
		}			
		
		if(PaintType[i] != 0 && PlayersOnPaint(PaintType[i]-1) >= 2) {
			new pp = PaintType[i]-1;
			if(pp < 2) {
				format(string, sizeof(string), "Paintball time: %s~n~Current map: %s~n~Stats: %d kills, %d deaths.~n~Total score: %d~n~Best player: %s (kills: %d)~n~%d players in paintball.",
				CalculeazaTimp2(PaintTime[pp]), MapName(pp), PKills[i], PDeaths[i], PKills[i]-PDeaths[i], GetName(PaintballWinner[pp]), PKills[PaintballWinner[pp]], PlayersOnPaint(pp));
			}
			else {
				new masadenume[32];
				GetWeaponNameEx(GetPlayerWeapon(i), masadenume, sizeof(masadenume));

				format(string, sizeof(string), "Paintball time: %s~n~Current map: %s~n~Stats: %d kills, %d deaths.~n~Total score: %d~n~Level %d, Weapon: %s~n~Best player: %s (kills: %d)~n~%d players in paintball.",
				CalculeazaTimp2(PaintTime[pp]), MapName(pp), PKills[i], PDeaths[i], PKills[i]-PDeaths[i], GetPaintLevel(i), masadenume, GetName(PaintballWinner[pp]), PKills[PaintballWinner[pp]], PlayersOnPaint(pp));
			}
			
			if(PaintTime[pp] == 0 && PaintballWinner[pp] != -1) {
				for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(i, 1001, 1001, 200);
				format(string, sizeof(string), "Statistica ta in aceasta runda: %d ucideri si %d decese.", PKills[i], PDeaths[i]);
				SCM(i, COLOR_YELLOW, string);					
				format(swinner, 256, "* %s a castigat runda cu %d ucideri.", GetName(PaintballWinner[pp]), PKills[PaintballWinner[pp]]);								
				PKills[i] = 0, PDeaths[i] = 0;
				ResetWeapons(i);				
				PaintballWinnerScore[pp] = 0;					
				SendPaintMessage(PaintType[i], COLOR_YELLOW, swinner);
				PaintballWinner[pp] = -1;					
			}
			if(PaintTime[pp] != 0 && PaintText[pp] == 0) {
				PlayerTextDrawSetString(i, PaintTD, string);
				PlayerTextDrawShow(i, PaintTD);					
			}	
			else {					
				PlayerTextDrawHide(i, PaintTD);	
			}	
		}
		else PlayerTextDrawHide(i, PaintTD);			   

		if(PlayerInfo[i][pWantedLevel] >= 1) {
			format(string, sizeof(string), "Nivel wanted actual: ~y~%d~n~~w~~h~Scade un nivel in: ~y~%d min.", PlayerInfo[i][pWantedLevel], 10-WantedTime[i]);
			PlayerTextDrawSetString(i, WantedTD[i], string);
			PlayerTextDrawShow(i, WantedTD[i]);
		}
		else PlayerTextDrawHide(i, WantedTD[i]);
	
		if(PlayerInfo[i][pJob] == 1 && JobWorking[i] == 1) {
			if(PlayerToPoint(200, i, -379.0663,-1436.2332,25.7266) && Carspeed(GetPlayerVehicleID(i)) > 25) {
				JobSeconds[i] --;
				UpdateJobStats(i);
				if(DaiWanted[i] > 0) DaiWanted[i] = 0;
				if(JobSeconds[i] == 0) {
					new rand = 10 + random(30);
					KG[i] = rand;
					format(string, sizeof(string), "Ban nhan duoc %d kilograme de faina. Den diem un Burger Shot pentru a vinde faina.", KG[i]);
					SCM(i, COLOR_MONEY, string);
					SCM(i, COLOR_WHITE, "Pentru a afla unde este un Burger Shot, foloseste comanda /locations.");
					JobWorking[i] = 0;
					PlayerTextDrawHide(i, JobTD);
					if(JobVehicle[i] != 0) { DestroyVehicle(JobVehicle[i]); JobVehicle[i] = 0; }
					PlayerTextDrawHide(i, InfosTD);
					DisablePlayerCheckpointEx(i);
					JobVehicle[i] = 0;						
				}
			}
			else if(!PlayerToPoint(200, i, -379.0663,-1436.2332,25.7266)) {
				format(string, sizeof(string), "(!) Nu esti in zona de work~n~Intuarcete inapoi pentru a nu primi wanted.");
				PlayerTextDrawSetString(i, JobTD, string);
				PlayerTextDrawShow(i, JobTD);
				if(DaiWanted[i] == 0) DaiWanted[i] = 10;
			}
		}
		if(DaiWanted[i] > 0) {
			DaiWanted[i] --;
			if(DaiWanted[i] == 0) {
				if(JobWorking[i] == 0)
					continue; 

				if(PlayerInfo[i][pWantedLevel] == 6) 
					continue;

				PlayerInfo[i][pWantedLevel] ++;
				SetPlayerWantedLevel(i, PlayerInfo[i][pWantedLevel]);
				Update(i, pWantedLevelx);	
				DaiWanted[i] = 0;
			}
		}

		GetPlayerHealthEx(i, ppHealth);
		GetPlayerArmourEx(i, ppArmour);
			
		if(PlayerInfo[i][pShowHP] != 0 && ppHealth >= 1)
		{
			format(string, sizeof(string), "%.0f", ppHealth);
			PlayerTextDrawSetString(i, CleoTD[0], string);
			PlayerTextDrawShow(i, CleoTD[0]);
			PlayerTextDrawColor(i, CleoTD[0], GetHudColor(PlayerInfo[i][pShowHP]));
		}
		else PlayerTextDrawHide(i, CleoTD[0]);

		if(PlayerInfo[i][pShowAP] != 0 && ppArmour >= 1)
		{
			format(string, sizeof(string), "%.0f", ppArmour);
			PlayerTextDrawSetString(i, CleoTD[1], string);
			PlayerTextDrawShow(i, CleoTD[1]);
			PlayerTextDrawColor(i, CleoTD[1], GetHudColor(PlayerInfo[i][pShowAP]));
		}
		else PlayerTextDrawHide(i, CleoTD[1]);
		
		PlayerInfo[i][pPayCheck] += ((PlayerInfo[i][pLevel]+1) * 2);
		
		if(PlayerInfo[i][pJailed] > 0) {
			if(PlayerInfo[i][pJailTime] > 0) {
				if(IsPlayerLogged[i] == 1) {
					PlayerInfo[i][pJailTime]--;
					TextDrawShowForPlayer(i, Jailtime[i]);
					if(PlayerInfo[i][pJailTime]/60 > 1) format(string, sizeof(string), "Jail time: ~r~%d minute", PlayerInfo[i][pJailTime]/60);
					else if(PlayerInfo[i][pJailTime]/60 == 1) format(string, sizeof(string), "Jail time: ~r~%d minut", PlayerInfo[i][pJailTime]/60);
					else if(PlayerInfo[i][pJailTime]/60 == 0) format(string, sizeof(string), "Jail time: ~r~%d secunde", PlayerInfo[i][pJailTime]);
					TextDrawSetString(Jailtime[i], string);
				}
			}
			if(PlayerInfo[i][pJailTime] <= 0) {
				PlayerInfo[i][pJailTime] = 0;
				if(PlayerInfo[i][pJailed] == 1) {
					PutPlayerInJail(i);
				}
				PlayerInfo[i][pJailed] = 0;
				Update(i, pJailTimex);
				Update(i, pJailedx);
				SpawnPlayer(i);
				SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(i,1);
				TextDrawHideForPlayer(i, Jailtime[i]);
				if(PlayerInfo[i][pChar] > 0) SetPlayerSkinEx(i, PlayerInfo[i][pChar]); 
				else SetPlayerSkinEx(i, PlayerInfo[i][pModel]);
				ClearCrime(i);
				PlayerInfo[i][pAJail] = 0;
				UpdateVar(i, "AJail", 0);
				SetPlayerToTeamColor(i);
				TogglePlayerControllable(i, 1);
			}
		}
	
		if(PlayerInfo[i][pMuted] > 0) {
			if(PlayerInfo[i][pMuteTime] > 0) PlayerInfo[i][pMuteTime]--;
			if(PlayerInfo[i][pMuteTime] <= 0){
				PlayerInfo[i][pMuteTime] = 0;
				SCM(i, COLOR_GREY, "You have now been automatically unmuted.");
				PlayerInfo[i][pMuted] = 0;
			}
		}
		if(targetfind[i] >= 0 && UsedFind[i] == 1) {
			new target, j;
			target = targetfind[i];
			if(Spectate[target] != 255) {
				PlayerTextDrawHide(i, FindTD);
				PlayerTextDrawHide(i, FindSkinTD);
				DisablePlayerCheckpointEx(i);
				SCM(i, COLOR_YELLOW, "Acel admin este ocupat! Checkpoint dezactivat.");
				targetfind[i] = -1;
				CP[i] = 0;
				UsedFind[i] = 0;	
			}
			else {
				if(InBussines[target] > 0) {
					j = InBussines[target];
					SetPlayerCheckpointEx(i,BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ],4);
					format(szTD, sizeof(szTD), "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~~h~[%s]", GetName(targetfind[i]), targetfind[i], GetPlayerDistanceFromPoint(i, BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ]), GetCity(target));
					PlayerTextDrawSetString(i, FindTD, szTD);
					PlayerTextDrawShow(i, FindTD);
				}
				else if(InHouse[target] > 0) {
					j = InHouse[target];
					SetPlayerCheckpointEx(i,HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez],4);
					format(szTD, sizeof(szTD), "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~~h~[%s]", GetName(targetfind[i]), targetfind[i], GetPlayerDistanceFromPoint(i, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]), GetCity(target));
					PlayerTextDrawSetString(i, FindTD, szTD);
					PlayerTextDrawShow(i, FindTD);
				}
				else if(InHQ[target] != -1) {
					j = InHQ[target]-1;
					SetPlayerCheckpointEx(i,DynamicFactions[j][fcX],DynamicFactions[j][fcY],DynamicFactions[j][fcZ],4);
					format(szTD, sizeof(szTD), "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~~h~[%s]", GetName(targetfind[i]), targetfind[i], GetPlayerDistanceFromPoint(i, DynamicFactions[j][fcX],DynamicFactions[j][fcY],DynamicFactions[j][fcZ]), GetCity(target));
					PlayerTextDrawSetString(i, FindTD, szTD);
					PlayerTextDrawShow(i, FindTD);
				}
				else {
					GetPlayerPos(target,x,y,z);
					SetPlayerCheckpointEx(i,x,y,z,4);
					format(szTD, sizeof(szTD), "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~~h~[%s]", GetName(targetfind[i]), targetfind[i], GetPlayerDistanceFromPoint(i, x,y,z), GetCity(target));
					PlayerTextDrawSetString(i, FindTD, szTD);
					PlayerTextDrawShow(i, FindTD);
				}
			}	
		}
		
		if(PlayerTazeTime[i] >= 1) {
			PlayerTazeTime[i] += 1;
			if(PlayerTazeTime[i] == 15) PlayerTazeTime[i] = 0;
			else {
				new Float:angle;
				GetPlayerFacingAngle(i, angle);
				SetPlayerFacingAngle(i, angle + 90);
			}
		}
		if(PlayerDrunk[i] >= 5) {
			PlayerDrunkTime[i] += 1;
			if(PlayerDrunkTime[i] == 8) {
				PlayerDrunkTime[i] = 0;
				LoopingAnim(i,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
				SetPlayerDrunkLevel (i, 5000);
			}
		}
		
		if(PlayerStoned[i] >= 2) SetPlayerDrunkLevel (i, 5000);
		
		if(IsSmoking[i] > 0) {
			if(IsSmoking[i] == 0) {
				format(string, sizeof(string), "* %s a terminat de fumat tigara.", GetName(i));
				ProxDetector(30.0, i, string, COLOR_PURPLE);
				new Float: PlayerHealth;
				GetPlayerHealthEx(i, PlayerHealth);
				if(PlayerHealth >= 93) SetPlayerHealthEx(i, 99);
				else SetPlayerHealthEx(i, PlayerHealth+6);
			}
			IsSmoking[i] -= 1;
		}
		if(PlayerCuffed[i] == 1) {
			if(PlayerCuffedTime[i] <= 0) {
				TogglePlayerControllable(i, 1);
				PlayerCuffed[i] = 0;
				PlayerCuffedTime[i] = 0;
				PlayerTazeTime[i] = 1;
			}
			else PlayerCuffedTime[i] -= 1;
		}

		if(PlayerCuffed[i] == 2) {
			if(PlayerCuffedTime[i] <= 0) {
				GameTextForPlayer(i, "~r~~h~Esti liber acum!", 2500, 3);
				TogglePlayerControllable(i, 1);
				PlayerCuffed[i] = 0;
				PlayerCuffedTime[i] = 0;
			}
			else PlayerCuffedTime[i] -= 1;
		}
		
		if(IsAMember(i)) {
			if(InWar[PlayerInfo[i][pMember]] == 1) {	
				new faction = PlayerInfo[i][pMember];
				for(new wi = 1; wi < sizeof(TurfInfo);wi++) {
					if((WarInfo[wi][wFaction] == faction) || (WarInfo[wi][wAttacker] == faction)) {
						new attackers = WarInfo[wi][wAttacker];
						new defenders = WarInfo[wi][wFaction];
						new uciderii = 0;
						uciderii += ucideri[i][wi];
						new decesee = 0;
						decesee += decese[i][wi];
						new Float: atscore = 0.0;
						new Float: defscore = 0.0;
						atscore = WarScoreF[attackers][wi];
						defscore = WarScoreF[defenders][wi];						
				
						if(playerDeath[i] == -1 && GetPlayerInterior(i) == 0 && IsAMember(i) && GetPlayerVirtualWorld(i) == 0 && PlayerInfo[i][pWantedLevel] == 0 && PlayerInfo[i][pJailTime] == 0) {							
							SetPlayerVirtualWorld(i, wi);
							format(string, sizeof(string), "Ai fost teleportat in virtual world-ul %d deoarece mafia ta este intr-un war.", wi);
							SCM(i, COLOR_YELLOW, string);
						}

						if(WarInfo[wi][wFaction] == faction)
						{
							format(string, sizeof(string), "Turf: %s (%d)~n~%s %.1f - %.1f %s~n~Ucideri: %d Decese: %d Scor: %d~n~Secunde pe turf: %d~n~Timp war: ~y~~h~%s~w~~h~",
							TurfInfo[wi][zName],wi,FactionName(attackers),atscore,defscore,FactionName(defenders),
							uciderii, decesee, uciderii-decesee, WarSeconds[i], CalculeazaTimp2(WarInfo[wi][wTime]));
						}
						if(WarInfo[wi][wAttacker] == faction)
						{
							format(string, sizeof(string), "Turf: %s (%d)~n~%s %.1f - %.1f %s~n~Ucideri: %d Decese: %d Scor: %d~n~Secunde pe turf: %d~n~Timp war: ~y~~h~%s~w~~h~",
							TurfInfo[wi][zName],wi,FactionName(attackers),atscore,defscore,FactionName(defenders),
							uciderii, decesee, uciderii-decesee, WarSeconds[i], CalculeazaTimp2(WarInfo[wi][wTime]));
						}							
					}
				}
				PlayerTextDrawSetString(i, WarTime, string);
				PlayerTextDrawShow(i, WarTime);							
			}				
		
			if(IsPlayerInTurf(i, InWarTurf[PlayerInfo[i][pMember]])) {
				new turf = InWarTurf[PlayerInfo[i][pMember]];
				if(WarInfo[turf][wFaction] == PlayerInfo[i][pMember] || WarInfo[turf][wAttacker] == PlayerInfo[i][pMember]) {
					if(IsPlayerPaused(i) == false) WarSeconds[i] ++;
					if(TurfTime[i] == 0 && IsPlayerInAnyVehicle(i)) SCM(i, COLOR_YELLOW, "Ai intrat pe teritoriu. Peste 10 secunde o sa fii dat jos din vehicul.");
					if(TurfTime[i] < 10) TurfTime[i] ++;
					if(TurfTime[i] == 10) {
						if(IsPlayerInAnyVehicle(i)) {
							new Float: Pos[3];
							GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
							SetPlayerPosEx(false, i, Pos[0], Pos[1], Pos[2]+1);
						}
					}
				}
			}			
		}				
	}	
	for(new i = 0; i < 3; i++) {
		if(PaintTime[i] == 0) {
			PaintTime[i] = -1; PaintText[i] = 60;
		}	
	}		
	OtherTimer();
	return true;
}
function CheckAdmins(caz) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) { 
			if(caz == 0) {
				if(PlayerInfo[i][pAdmin] != 0) x++;
			}
			else if(caz == 1) {
				if(PlayerInfo[i][pAdmin] != 0 && AFKSeconds[i] >= 10) x++;
			}			
		}	
	}
	return x;
}
function CheckHelpers(caz) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) { 
			if(caz == 0) {
				if(PlayerInfo[i][pHelper] != 0) x++;
			}
			else if(caz == 1) {
				if(PlayerInfo[i][pHelper] != 0 && AFKSeconds[i] >= 10) x++;
			}			
		}	
	}
	return x;
}
function CheckLeaders(caz) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) { 
			if(caz == 0) {
				if(PlayerInfo[i][pLeader] != 0) x++;
			}
			else if(caz == 1) {
				if(PlayerInfo[i][pLeader] != 0 && AFKSeconds[i] >= 10) x++;
			}			
		}	
	}
	return x;
}
function FreeHouses() {
	new x;
	for(new i = 1; i < sizeof(HouseInfo); i++) {
		if(strcmp(HouseInfo[i][hOwner], "The State", true) == 0 && HouseInfo[i][hOwned] == 1) x++;
	}
	return x;
}
function GetHouseID() {
	for(new i = 1; i < sizeof(HouseInfo); i++) {
		if(strcmp(HouseInfo[i][hOwner], "The State", true) == 0 && HouseInfo[i][hOwned] == 1) return i;
	}
	return false;
}
function FreeBusinesses() {
	new x;
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(strcmp(BizzInfo[i][bOwner], "The State", true) == 0 && BizzInfo[i][bOwned] == 1) x++;
	}
	return x;
}
function GetBizzID() {
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(strcmp(BizzInfo[i][bOwner], "The State", true) == 0 && BizzInfo[i][bOwned] == 1) return i;
	}
	return false;
}
function GetAFKPlayers() {
	new x;
	foreach(new i: Player) if(AFKSeconds[i] >= 60) x++;
	return x;
}
function OtherTimer() {
	new stringg[180], iswar;
	for(new w = 0; w < 16; w++) if(InWar[w] == 1) iswar = 1;

	if(iswar != 1)
		return true;

	for(new i = 0; i < sizeof(Turfs); i++) {
		new attackers = WarInfo[i][wAttacker];
		new defenders = WarInfo[i][wFaction];
		if(WarInfo[i][wTime] >= 2) {
			foreach(new j: Player) {
				if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders) {
					if(WarInfo[i][wAttacker] == 4) GangZoneFlashForPlayer(j,Turfs[i], 0x0CAB3C99);
					else if(WarInfo[i][wAttacker] == 5) GangZoneFlashForPlayer(j,Turfs[i], 0x11F2F299);
					else if(WarInfo[i][wAttacker] == 6) GangZoneFlashForPlayer(j,Turfs[i], 0xFAD40099);
					else if(WarInfo[i][wAttacker] == 10) GangZoneFlashForPlayer(j,Turfs[i], 0xAB00FA99);
				}
			}
		}
		if(WarInfo[i][wTime] > 0) {
			WarInfo[i][wTime] -= 1;
			foreach(new j: Player) {
				if(IsPlayerInTurf(j,i) == 1) {
					if(PlayerInfo[j][pMember] == attackers) WarScoreF[attackers][i] += 0.002;
					if(PlayerInfo[j][pMember] == defenders) WarScoreF[defenders][i] += 0.002;
				}
			}
			if(WarInfo[i][wTime] == 1) {
				new Float: atscore = 0.0;
				new Float: defscore = 0.0;
				atscore = WarScoreF[attackers][i];
				defscore = WarScoreF[defenders][i];
				new winner;
				SetVehicle(attackers, 0);
				SetVehicle(defenders, 0);
				foreach(new j: Player) {
					if(PlayerInfo[j][pMember] == attackers) {
						SCM(j, COLOR_MONEY, "--------------------- Statistici WAR ---------------------");
						RespawnVehicle(attackers);
						GangZoneStopFlashForPlayer(j,Turfs[i]);
						format(stringg,sizeof(stringg),"Razboiul dintre %s si %s pentru turf %d s-a terminat.",FactionName(attackers),FactionName(defenders),i);
						SCM(j, COLOR_MONEY,stringg);
						for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(j, 1001, 1001, 200);
						PlayerTextDrawHide(j, WarTime);
					}
					if(PlayerInfo[j][pMember] == defenders) {
						SCM(j, COLOR_MONEY, "--------------------- Statistici WAR ---------------------");
						RespawnVehicle(defenders);
						GangZoneStopFlashForPlayer(j,Turfs[i]);
						format(stringg,sizeof(stringg),"Razboiul dintre %s si %s pentru turf %d s-a terminat.",FactionName(attackers),FactionName(defenders),i);
						SCM(j, COLOR_MONEY,stringg);
						for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(j, 1001, 1001, 200);
						PlayerTextDrawHide(j, WarTime);
					}
				}
				DestroyPickups(i);
				if(atscore > defscore) winner = 1;
				else winner = 2;
				new winbest, losebest;
				new winbestj = -1, losebestj = -1;
				new bestname1[25],bestname2[25],bestname[25],worstname[25];
				FactionDeelay[attackers] = 300;
				foreach(new j: Player) {
					if(winner == 1) {
						if(PlayerInfo[j][pMember] == attackers) {
							winbest = bestscoreat[i];
							if(bestmemberat[i] != 999) {
								if(PlayerInfo[bestmemberat[i]][pMember] == attackers) {
									winbestj = bestmemberat[i];
									GetPlayerName(winbestj,bestname1,sizeof(bestname1));
									strmid(bestname, bestname1, 0, strlen(bestname1), 255);
								}
							}
							else {
								format(bestname,sizeof(bestname),"Null");
								strmid(bestname, bestname, 0, strlen(bestname), 255);
							}
						}
						if(PlayerInfo[j][pMember] == defenders) {
							losebest = worstscoredf[i];
							if(worstmemberdf[i] != 999) {
								if(PlayerInfo[worstmemberdf[i]][pMember] == defenders) {
									losebestj = worstmemberdf[i];
									GetPlayerName(losebestj,bestname2,sizeof(bestname2));
									strmid(worstname, bestname2, 0, strlen(bestname2), 255);
								}
							}
							else {
								format(worstname,sizeof(worstname),"Null");
								strmid(worstname, worstname, 0, strlen(worstname), 255);
							}
						}
					}
					if(winner == 2) {
						if(PlayerInfo[j][pMember] == defenders) {
							winbest = bestscoredf[i];
							if(bestmemberdf[i] != 999) {
								if(PlayerInfo[bestmemberdf[i]][pMember] == defenders) {
									winbestj = bestmemberdf[i];
									GetPlayerName(winbestj,bestname1,sizeof(bestname1));
									strmid(bestname, bestname1, 0, strlen(bestname1), 255);
								}
							}
							else {
								format(bestname,sizeof(bestname),"Null");
								strmid(bestname, bestname, 0, strlen(bestname), 255);
							}
						}
						if(PlayerInfo[j][pMember] == attackers) {
							losebest = worstscoreat[i];
							if(worstmemberat[i] != 999) {
								if(PlayerInfo[worstmemberat[i]][pMember] == attackers) {
									losebestj = worstmemberat[i];
									GetPlayerName(losebestj,bestname2,sizeof(bestname2));
									strmid(worstname, bestname2, 0, strlen(bestname2), 255);
								}
							}
							else {
								format(worstname,sizeof(worstname),"Null");
								strmid(worstname, worstname, 0, strlen(worstname), 255);
							}
						}
					}
				}
				foreach(new j: Player) {
					new uciderii = 0;
					uciderii += ucideri[j][i];
					new decesee = 0;
					decesee += decese[j][i];
					ucideri[j][i] = 0;
					decese[j][i] = 0;
					
					if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders)) {
						SetPlayerVirtualWorld(j, 0);
						if(WarSeconds[j] >= 300) {
							UpdateFactionRaport(j, 0);
						}
						WarSeconds[j] = 0;
						if(winner == 1) {					
							format(stringg,sizeof(stringg),"%s (%.1f) vs %s (%.1f)",FactionName(WarInfo[i][wAttacker]),atscore,FactionName(WarInfo[i][wFaction]),defscore);
							SCM(j, COLOR_MONEY,stringg);
							format(stringg,sizeof(stringg),"Cel mai bun: %s(%d). Cel mai slab: %s(-%d)", bestname, winbest, worstname, losebest);
							SCM(j, COLOR_MONEY,stringg);
							format(stringg,sizeof(stringg),"Statisticile tale: Scor %d (%d ucideri si %d decese)",uciderii-decesee, uciderii, decesee);
							SCM(j, COLOR_MONEY,stringg);
							TurfInfo[i][zOwned] = WarInfo[i][wAttacker];
							Wartimeon[j] = 0;
						}
						if(winner == 2) {
							format(stringg,sizeof(stringg),"%s (%.1f) vs %s (%.1f)",FactionName(WarInfo[i][wFaction]),defscore,FactionName(WarInfo[i][wAttacker]),atscore);
							SCM(j, COLOR_MONEY,stringg);
							format(stringg,sizeof(stringg),"Cel mai bun: %s(%d). Cel mai slab: %s(-%d)", bestname, winbest, worstname, losebest);
							SCM(j, COLOR_MONEY,stringg);
							format(stringg,sizeof(stringg),"Statisticile tale: Scor %d (%d ucideri si %d decese)",uciderii-decesee,uciderii, decesee);
							SCM(j, COLOR_MONEY,stringg);
							Wartimeon[j] = 0;
						}
						SCM(j, COLOR_MONEY, "---------------------------------------------------------------");
						WarScoreF[defenders][i] = 0.0;
						WarScoreF[attackers][i] = 0.0;
						InWar[attackers] = 0;
						InWar[defenders] = 0;
					}
					if(winner == 1) {
						HideZoneForPlayer(j,Turfs[i]);
						if(attackers == 4) ShowZoneForPlayer(j,Turfs[i],0x0CAB3C99);
						if(attackers == 5) ShowZoneForPlayer(j,Turfs[i],0x11F2F299);
						if(attackers == 6) ShowZoneForPlayer(j,Turfs[i],0xFAD40099);
						if(attackers == 10) ShowZoneForPlayer(j,Turfs[i],0xAB00FA99);
					}
				}
				if(winner == 1) {
					new str[128];
					mysql_format(SQL, str,128,"UPDATE `turfs` SET `Owned`='%d' WHERE `ID`='%d'",TurfInfo[i][zOwned],i);
					mysql_tquery(SQL,str, "", "");
				}
				WarInfo[i][wTime] = 0;
				WarInfo[i][wFaction] = 0;
				WarInfo[i][wAttacker] = 0;
				worstscoreat[i] = 0;
				worstmemberat[i] = 999;
				bestscoreat[i] = 0;
				bestmemberat[i] = 999;
				worstscoredf[i] = 0;
				worstmemberdf[i] = 999;
				bestscoredf[i] = 0;
				bestmemberdf[i] = 999;
				mysql_tquery(SQL, "UPDATE `users` SET `WarTurf`='0', `WarKills`='0', `WarDeaths`='0'", "", "");
			}
		}
	}
	return true;
}
stock SetPlayerPosEx(bool: Types, playerid, Float:x, Float:y, Float:z) {
	SetPlayerPos(playerid, x, y, z);
	GetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
	Exception[playerid] += 1;
	foreach(new i: Player) {
		if(Spectate[i] == playerid) {
			TogglePlayerSpectating(i, 1);
			SetPlayerInterior(i, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			if(IsPlayerInAnyVehicle(playerid)) PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			else PlayerSpectatePlayer(i, playerid);	
		}
	}
	if(GetPVarInt(playerid, "Undercover") == 1) {
		foreach(new i: Player) ShowPlayerNameTagForPlayer(i, playerid, false);
		PlayerTextDrawShow(playerid, UndercoverTD);
	}	
	LastPos[playerid][0] = x;
	LastPos[playerid][1] = x;
	LastPos[playerid][2] = x;

	if(!Types) return true;
	InHouse[playerid] = -1;
	InHQ[playerid] = -1;
	InBussines[playerid] = -1;
	return true;
}
stock CreateVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay, clanson) {
	new vehid = CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay, clanson);
	//VehicleOccupied[vehid] = 0;
	VehicleStats[vehid][vColorOne] = color1;
	VehicleStats[vehid][vColorTwo] = color2;
	SetVehicleHealth(vehid, 999);
	VehicleExist[vehid] = 1;
	return vehid;
}
stock DestroyVehicleEx(vehid) {
	VehicleStats[vehid][vColorOne] = 0;
	VehicleStats[vehid][vColorTwo] = 0;
	SetVehicleHealth(vehid, 999);
	VehicleExist[vehid] = 0;
	return true;
}
stock ChangeVehicleColorEx(vehicleid, color1, color2) {
	VehicleStats[vehicleid][vColorOne] = color1;
	VehicleStats[vehicleid][vColorTwo] = color2;	
	ChangeVehicleColor(vehicleid, color1, color2);
	return true;
}
stock SetVehicleColor(vehicleid) {
	ChangeVehicleColor(vehicleid, VehicleStats[vehicleid][vColorOne], VehicleStats[vehicleid][vColorTwo]);
	return true;
}
stock SetVehiclePosEx(playerid, vehicleid, Float:x, Float:y, Float:z) {
	if(GetPlayerVehicleID(playerid) == vehicleid) GetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
	SetVehiclePos(vehicleid, x, y, z);
	return true;
}
stock SetVehicleZAngleEx(vehicleid, Float:z_angle) {
	SetVehicleZAngle(vehicleid, z_angle);
	return true;
}
function CheckWeapons(playerid, i) {
	if(Spectate[playerid] != 255 || playerDeath[playerid] == -1 || ArenaSpec[playerid] != -1) return true;
	if(Weapons[playerid][i] == 0 && i != 0 && i != 43 && i != 46) NightBot(playerid, "Cheats (weapon-hack)");
	return true;
}
function CheckAmmo(playerid, i) {
	if(Spectate[playerid] != 255 || playerDeath[playerid] == -1 || ArenaSpec[playerid] != -1) return true;
	if(IsPlayerInAnyVehicle(playerid) || GetPlayerWeapon(playerid) == 34) return true;
	new result = GetPlayerAmmo(playerid) - WeaponAmmo[playerid][GetWeaponSlot(i)];
	if(result >= 30) {
		if(ServerSystem[2] == 0) NightBot(playerid, "Cheats (ammo-hack)");
	}	 
	return true;
}
stock ResetWeapons(playerid) {
	ResetPlayerWeapons(playerid);
	for(new i = 0; i < 47; i++) {
		Weapons[playerid][i] = 0;
		WeaponAmmo[playerid][i] = 0;
	}
	return true;
}
stock GetWeaponSlot(weaponid) {
	new slot;
	switch(weaponid) {
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}
function HaveWeapons(playerid) {
	new x, Player_Weapons[13], Player_Ammos[13];
	for(new i = 1;i <= 12;i++) {
		GetPlayerWeaponData(playerid,i,Player_Weapons[i],Player_Ammos[i]);
		if(Player_Weapons[i] != 0) x++;
	}	
	return x;
}
ServerWeapon(playerid, weaponid, ammo) {
	if(PlayerInfo[playerid][pGunLic] == 0 && weaponid >= 8 && weaponid != 43 || weaponid == 9 && PlayerInfo[playerid][pJob] == 0 && JobWorking[playerid] == 0 && PlayerInfo[playerid][pGunLic] == 0) return true;
	Weapons[playerid][weaponid] = 1;
	WeaponAmmo[playerid][GetWeaponSlot(weaponid)] += ammo;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return true;
}
function GetPlayers() {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) x++;
	}
	return x;
}
YCMD:jetpack(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "Nu ai acces!");
	SetPlayerSpecialAction(playerid, 2);
	SCM(playerid, COLOR_WHITE, "Ban nhan duoc un jetpack.");
	return true;
}
function GetReports() {
	new reports;
	foreach(new f: Player) {
		if(IsPlayerConnected(f) && IsPlayerLogged[f] == 1) {
			if(Ajutor[f] == 1) reports++;
		}
	}
	return reports;
}
task MesajStaff[360000]() {
	new helpss, reports, string[180];
	foreach(new f: Player) {
		if(IsPlayerConnected(f) && IsPlayerLogged[f] == 1) {
			if(Helped[f] == 1) helpss++;
			if(GetPVarInt(f, "Reported") == 1) reports++;
		}
	}
	foreach(new i : PlayerHelpers) {
		if(helpss != 0 || reports != 0) {
			format(string, sizeof(string), "In acest moment sunt %d intrebari.", helpss, reports);
			SCM(i, COLOR_YELLOW, string);
		}	
	}
	HideDeathMessage();
	return true;
}
stock GetVehicleDriver(vid) {
	for(new i; i < GetMaxPlayers(); i++) {
		if(GetPlayerVehicleID(i) == vid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock GetOnLinePlayers() return Iter_Count(Player);

function GameTextForPaint(string[], paint) {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && PaintType[i] == paint+1) {
			GameTextForPlayer(i, string, 1500, 4);	
		}
	}
	return true;
}
task HelperQuestions[10000]() {
	new string[180], helpers;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pHelper] != 0 && HelperDuty[i] == 1 && HaveHelp[i] == -1) {
				HaveHelper[helpers] = i;
				helpers ++;
			}
		}
	}

	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(Helped[i] == 1 && OnHelper[i] == 0) {
				if(helpers >= 1) {
					new userID = HaveHelper[random(helpers)], playerid = i;
					if(HaveHelp[userID] == -1) {
						PlayerPlaySound(userID, 1056, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "Intrebarea ta a fost preluata de helperul %s (%d). Asteapta sa-ti raspunda.", GetName(userID), userID);
						SCM(i, COLOR_YELLOW, string);
						SCM(userID, COLOR_YELLOW, "Intrebare noua:");
						format(string, 512, "* %s (%d) intreaba: %s", GetName(playerid), playerid, HelpText[i]);
						SCM(userID, 0x4FB021FF, string);
						HaveHelp[userID] = playerid;
						OnHelper[i] = 1;
					}	
				}	
			}
		}
	}
	return true;
}

stock GetVehicleConsum(i) return i >= 200 ? 7 : i >= 165 ? 6 : i >= 135 ? 5 : i >= 100 ? 4 : i >= 65 ? 3 : i >= 35 ? 2 : i != 0 ? 1 : 0;

function Checkvehinfo(i) {
	if(GetPlayerState(i) == PLAYER_STATE_DRIVER && InDealer[i] == 0) {

		new 
			str2[10], km[60], fuel[50],
			engine,lights,alarm,doors,bonnet,boot,objective,
			vehicle = GetPlayerVehicleID(i), spe = Carspeed(GetPlayerVehicleID(i)), carid = FindSpawnID(vehicle);
			
		GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);

		if(!PlayerInfo[i][pHudGen])
			return true;

		gString[0] = EOS;
		format(str2, sizeof(str2), "%s%d", spe < 100 ? ("~g~") : spe >= 150 ? ("~r~") : ("~y~"), spe);
		PlayerTextDrawSetString(i, SpeedometerPTD[0], str2);
		if(carid != 0) format(km, sizeof(km), "~n~odomter: %.2f", CarInfo[carid][KM]);
		if(!IsABike(vehicle) && !IsAPlane(vehicle)) format(fuel, sizeof(fuel), "~n~fuel: %s%d~w~~h~ (c: %dl)", Gas[vehicle] > 60 ? ("~g~") : Gas[vehicle] <= 30 ? ("~r~") : ("~y~"), Gas[vehicle], GetVehicleConsum(spe));
		format(gString, 120, "doors: %s~w~~h~%s%s", doors != 1 ? ("~g~unlocked") : ("~r~locked"), fuel, km);
		if(InExamen[i]) format(gString, 150, "%s~n~Checkpoints: ~r~%d/17", gString, CP[i]-100);
		PlayerTextDrawSetString(i, SpeedometerPTD[2], gString);
	}
	return true;
}
task CheckGas[RunOutTime]()
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
 
	foreach(new i : Player)
	{
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new vehicle = GetPlayerVehicleID(i), query[128];
 
			if(Gas[vehicle] >= 1)
			{
				if(vehEngine[vehicle] == 1)
				{
					if(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || ExamCar[i] == vehicle || JobVehicle[i] == vehicle) { Gas[vehicle]++; }
 
					if(!IsPlayerPaused(i)) Gas[vehicle]--;
 
					new carid = FindSpawnID(vehicle);
 
					if(CarInfo[carid][cID] != 0 && carid != 0)
					{
						new spe = Carspeed(GetPlayerVehicleID(i));
 
						if(spe > 5 && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle && !IsPlayerPaused(i))
						{
							CarInfo[carid][KM] += (spe * 0.27) / 100;
 
							mysql_format(SQL, query, sizeof query, "UPDATE `cars` SET `KM` = '%f' WHERE `ID` = '%d'", CarInfo[carid][KM], CarInfo[carid][cID]);
							mysql_tquery(SQL, query, "", "");
						}
					}
				}
			}
 
			else if(!IsAFLYCar(vehicle))
			{
				NoFuel[i] = 1;

				GameTextForPlayer(i, "Fara benzina", 1500, 3);
 
				vehEngine[vehicle] = 0;
 
				GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicle, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
 
				SetPVarInt(i, "Engine", 0);
			}
		}
	}
	return true;
}

timer Fillup[RefuelWait](playerid) {
	new VID, FillUp, string[180];		
	VID = GetPlayerVehicleID(playerid);
	FillUp = GasMax - Gas[VID];
	new Incarcare = GasMax - Gas[VID];
	FillUp = FillUp *200;
	if(Refueling[playerid] == 1) {
		if(!PlayerMoney(playerid, FillUp)) {
			Gas[VID] += Incarcare;
			format(string, sizeof(string), "* Rezervor incarcat! Pret: $%s.",FormatNumber(FillUp));
			SCM(playerid,COLOR_MONEY,string);
			TogglePlayerControllable(playerid, 1);
			GivePlayerCash(playerid, 0, FillUp);
			BizzInfo[GetGasStationID(playerid)][bBalance] += FillUp;
			Refueling[playerid] = 0;
			new str[184];
			Update(playerid, pCashx);
			mysql_format(SQL, str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[GetGasStationID(playerid)][bBalance], GetGasStationID(playerid));
			mysql_tquery(SQL,str, "", "");
		}
		else {
			TogglePlayerControllable(playerid, 1);
			Refueling[playerid] = 0;
			format(string, sizeof(string), "Error: {FFFFFF}Ai nevoie de $%d pentru a face plinul.",FillUp);
			SCM(playerid,COLOR_ERROR,string);
		}
	}
	return true;
}

function ShowStats(playerid,targetid) {
	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return true;
	new
		string[500],
		atext[20],
		ttext[180],
		rtext[180],
		jtext[100],
		drank[20],
		vtext[20],
		infostring2[600],
		playersip[180],
		radios[64],
		infostring[600],
	
		crimes = PlayerInfo[targetid][pCrimes],
		arrests = PlayerInfo[targetid][pArrested],
		drugs = PlayerInfo[targetid][pDrugs],
		mats = PlayerInfo[targetid][pMats],
		level = PlayerInfo[targetid][pLevel],
		exp = PlayerInfo[targetid][pExp],
		nxtlevel = PlayerInfo[targetid][pLevel],
		expamount,
		costlevel,
		pnumber = PlayerInfo[targetid][pPhone],
		rob = PlayerInfo[targetid][pRob],	
		warn = PlayerInfo[targetid][pWarns],
		hkey = PlayerInfo[targetid][pHouse],
		bkey = PlayerInfo[targetid][pBizz],
		clan = PlayerInfo[targetid][pClan];

	if(PlayerInfo[targetid][pMember] == 0) ttext = "None";
	else format(ttext, sizeof(ttext), "%s (rank %d)", FactionName(PlayerInfo[targetid][pMember]), PlayerInfo[targetid][pRank]);
	
	if(PlayerInfo[targetid][pSex] == 1) atext = "Male"; 
	else if(PlayerInfo[targetid][pSex] == 2) atext = "Female"; 
	
	if(PlayerInfo[targetid][pRank] != 0) format(rtext, 256, GetRankName(targetid));
	else rtext = "-";
   
	if(PlayerInfo[targetid][pJob] == 0) jtext = "None";
	else format(jtext, sizeof(jtext), "%s", JobInfo[PlayerInfo[targetid][pJob]][jName]);
	
	if(PlayerInfo[targetid][pPremiumAccount] == 0) { drank = "No"; }
	else if(PlayerInfo[targetid][pPremiumAccount] == 1) { drank = "Yes"; }
	else { drank = "Nu"; }
	new vouchers = PlayerInfo[targetid][pVoucher][0] + PlayerInfo[targetid][pVoucher][1] + PlayerInfo[targetid][pVoucher][2];

	if(PlayerInfo[targetid][pVip] == 0) { vtext = "No"; }
	else if(PlayerInfo[targetid][pVip] == 1) { vtext = "Yes"; }		
	
	expamount = nxtlevel*levelexp;
	costlevel = nxtlevel*levelcost;


	if(WTChannel[playerid] == 0) radios = "Disabled";
	else format(radios, sizeof(radios), "#%d khz", WTChannel[playerid]);
	format(string, sizeof(string), "%s[%d], Playing hours: %.2f, Warns: %d/3 | Money: $%s | Bank: $%s | Phone: %d (%d credit)", GetNameEx(targetid), targetid,PlayerInfo[targetid][pConnectTime], warn, GetCashStr(targetid), GetBankMoney(targetid), pnumber, PlayerInfo[targetid][pCredit]);
	SCM(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "Level: %d, Respect Points: %d/%d | Next Level: %s | Premium Account: %s | Vip Account: %s | Premium Points: %s",level,exp,expamount,FormatNumber(costlevel),drank,vtext, FormatNumber(PlayerInfo[targetid][pPremiumPoints]));
	SCM(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "Crimes: %d | Arrests: %d | Drugs: %d | Materials: %d | Freq: %s | Rob: %d/10 | Escape: %d/20 | Hiddens: %d", crimes, arrests, drugs, mats, radios, rob, PlayerInfo[targetid][pEscapePoints], PlayerInfo[targetid][pHidden]);
	SCM(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "Faction: %s | Faction Warns: %d/3 | Faction Punish: %d/30", ttext, PlayerInfo[targetid][pFACWarns],PlayerInfo[targetid][pFpunish]);
	SCM(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "Rare Crates: %d | Epic Crates: %d | Legendary Crates: %d | Vouchers: %d | RPoints: %s | Gift Points: %d/500", PlayerInfo[targetid][pCrates][0], PlayerInfo[targetid][pCrates][1], PlayerInfo[targetid][pCrates][2], vouchers, FormatNumber(PlayerInfo[targetid][pHpoints]), PlayerInfo[targetid][pGiftPoints]);
	SCM(playerid, COLOR_WHITE,string);
	if(clan != 0) {
		if(PlayerInfo[targetid][pClanRank] < 6) format(string, sizeof(string), "%s (%d) | Tag: %s | Rank: %d | Clan Warns: %d/3", ClanInfo[clan][clName], clan, ClanInfo[clan][clTag], PlayerInfo[targetid][pClanRank], PlayerInfo[targetid][pClanWarn]);
		else format(string, sizeof(string), "%s (%d) | Tag: %s | Rank: %d | Clan Warns: %d/3 | Clan Days: %d", ClanInfo[clan][clName], clan, ClanInfo[clan][clTag], PlayerInfo[targetid][pClanRank], PlayerInfo[targetid][pClanWarn], ClanInfo[clan][clDays]);						
		SCM(playerid, COLOR_WHITE, string);
	}
	if(Iter_Count(MyVehicle[targetid]) >= 0) {
		format(string, sizeof(string), "Propieters: Vehicles: %d/%d", Iter_Count(MyVehicle[targetid]), GetSlots(targetid));
		strcat(infostring, string);		
	}
	if(hkey != 999) {
		if(hkey != 999 && strcmp(GetName(targetid), HouseInfo[hkey][hOwner], true) == 0) format(string, sizeof(string), " | House: %d", hkey);
		else format(string, sizeof(string), " | Rent House: %d", hkey);
		strcat(infostring, string);
	}	
	if(bkey != 255) {
		if(bkey >= 100) format(string, sizeof(string), " | Static Business: %d", bkey-100);
		else  format(string, sizeof(string), " | Business: %d", bkey);
		strcat(infostring, string);
	}	
	if(PlayerInfo[targetid][pAdmin] != 0) {
		format(string, sizeof(string), " | Admin warns: %d/3", PlayerInfo[targetid][pAW]);
		strcat(infostring, string);		
	}		
	if(PlayerInfo[targetid][pHelper] != 0) {
		format(string, sizeof(string), " | Helper warns: %d/3", PlayerInfo[targetid][pHW]);
		strcat(infostring, string);		
	}		
	if(PlayerInfo[targetid][pLeader] != 0) {
		format(string, sizeof(string), " | Leader warns: %d/3", PlayerInfo[targetid][pLW]);
		strcat(infostring, string);		
	}					
	format(infostring2, strlen(infostring)-1, "%s", infostring);
	SCM(playerid, COLOR_WHITE, infostring2);
		
	if(PlayerInfo[targetid][pAdmin] >= 1 || PlayerInfo[targetid][pHelper] >= 1) {
		if(PlayerInfo[targetid][pAdmin] != 0) {
			if(targetid == playerid) format(string, sizeof(string), "Ai ajutat %d jucatori pana acum. Jucatori ajutati saptamana aceasta: %d", PlayerInfo[targetid][pHelpedPlayers], PlayerInfo[targetid][pHelpedPlayersToday]);
			else format(string, sizeof(string), "A ajutat %d jucatori pana acum. Jucatori ajutati saptamana aceasta: %d", PlayerInfo[targetid][pHelpedPlayers], PlayerInfo[targetid][pHelpedPlayersToday]);
		}
		else {
			if(targetid == playerid) format(string, sizeof(string), "Ai ajutat %d jucatori pana acum. Jucatori ajutati azi: %d", PlayerInfo[targetid][pHelpedPlayers], PlayerInfo[targetid][pHelpedPlayersToday]);
			else format(string, sizeof(string), "A ajutat %d jucatori pana acum. Jucatori ajutati azi: %d", PlayerInfo[targetid][pHelpedPlayers], PlayerInfo[targetid][pHelpedPlayersToday]);
		}		
		
		SendClientMessage(playerid, COLOR_WHITE, string);	
	}	
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		GetPlayerIp(targetid,playersip,sizeof(playersip));
		format(string, sizeof(string), "Seconds: %.0f | AFK: %d | Interior ID: %d | Virtual World: %d | SQLID: %d",PlayerInfo[targetid][pSeconds],AFKSeconds[targetid],GetPlayerInterior(targetid),GetPlayerVirtualWorld(targetid),PlayerInfo[targetid][pSQLID]);
		SendClientMessage(playerid, COLOR_LIGHTGOLD,string);		
	}
	return true;
}
function SetPlayerToTeamColor(playerid) {
	if(IsPlayerConnected(playerid)) {
		if(IsACop(playerid) && OnDuty[playerid] == 0) return SetPlayerColor(playerid, COLOR_WHITE);
		switch(PlayerInfo[playerid][pMember]) {
			case 0: SetPlayerColor(playerid,COLOR_WHITE);
			case 1: SetPlayerColor(playerid, 0x112ef2FF); 
			case 2: SetPlayerColor(playerid, 0x2b45f5FF); 
			case 3: SetPlayerColor(playerid, 0x01026bFF); 
			case 4: SetPlayerColor(playerid, 0x0CAB3CFF); 
			case 5: SetPlayerColor(playerid, 0x11F2F2FF);
			case 6: SetPlayerColor(playerid, 0xFAD400FF);
			case 7: SetPlayerColor(playerid, 0x00FF80FF); 
			case 8: SetPlayerColor(playerid, 0xFFFFA8FF); 
			case 9: SetPlayerColor(playerid, 0xFFABFCFF); 
			case 10: SetPlayerColor(playerid, 0xAB00FAFF); 
			case 11: SetPlayerColor(playerid, 0x7E3937FF); 
			case 12: SetPlayerColor(playerid, COLOR_YELLOW); 
			case 13: SetPlayerColor(playerid, 0xf86448FF); 	
			case 14: SetPlayerColor(playerid, 0x112ef2FF);
			case 15: SetPlayerColor(playerid, 0x32905CFF);
		}	
	}
	return true;
}
function PlayersOnline() {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) x++;
	}
	return x;
}
function SQL_loadTurfs() {
	printf("Turfs: %d", cache_num_rows());	
	if(cache_num_rows() == 0)
		return true;

	new ORM:ormid;
 	for(new i = 0; i < cache_num_rows(); i++) {
 		ormid = orm_create("turfs");
 		orm_addvar_int(ormid, TurfInfo[i][zID], "ID");
 		orm_addvar_int(ormid, TurfInfo[i][zOwned], "Owned");
 		orm_addvar_float(ormid, TurfInfo[i][zMinX], "MinX");
 		orm_addvar_float(ormid, TurfInfo[i][zMinY], "MinY");
 		orm_addvar_float(ormid, TurfInfo[i][zMaxX], "MaxX");
 		orm_addvar_float(ormid, TurfInfo[i][zMaxY], "MaxY");

 		orm_apply_cache(ormid, i);	
	}	
	for(new i = 0; i < sizeof(TurfInfo); i++) Turfs[i] = CreateZone(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY]);
	return true;
}
function LoadFactions() {
	new factions = cache_num_rows(), y;
	for(new x = 1; x <= factions; x++) {
		new i = x - 1;
		cache_get_value_name(i, "Name", DynamicFactions[x][fName], 32);
		cache_get_value_name(i, "Anunt", DynamicFactions[x][fAnn], 64);
		cache_get_value_name_int(i, "ID", 	DynamicFactions[x][fID]);				
		cache_get_value_name_float(i, "IntX", 	DynamicFactions[x][fcX]); 				
		cache_get_value_name_float(i, "IntY", 	DynamicFactions[x][fcY]); 				
		cache_get_value_name_float(i, "IntZ", 	DynamicFactions[x][fcZ]); 				
		cache_get_value_name_float(i, "X", 	DynamicFactions[x][extX]);				
		cache_get_value_name_float(i, "Y", 	DynamicFactions[x][extY]);				
		cache_get_value_name_float(i, "Z", 	DynamicFactions[x][extZ]);				
		cache_get_value_name_int(i, "VW", 	DynamicFactions[x][fVW]);			
		cache_get_value_name_int(i, "Interior", 	DynamicFactions[x][fInterior]); 			
		cache_get_value_name_int(i, "Mats", 	DynamicFactions[x][fMats]);			
		cache_get_value_name_int(i, "Drugs", 	DynamicFactions[x][fDrugs]);				
		cache_get_value_name_int(i, "Bank", 	DynamicFactions[x][fBank]);			
		cache_get_value_name_int(i, "App", 	DynamicFactions[x][fApp]);
		cache_get_value_name_int(i, "Lock", 	DynamicFactions[x][fLock]);		

		cache_get_value_name(i, "Name1", fRankNames[x][0], 100);
		cache_get_value_name(i, "Name2", fRankNames[x][1], 100);
		cache_get_value_name(i, "Name3", fRankNames[x][2], 100);
		cache_get_value_name(i, "Name4", fRankNames[x][3], 100);
		cache_get_value_name(i, "Name5", fRankNames[x][4], 100);
		cache_get_value_name(i, "Name6", fRankNames[x][5], 100);
		cache_get_value_name(i, "Name7", fRankNames[x][6], 100);
		
		gString[0] = EOS;
		if(DynamicFactions[x][fLock] == 0) format(gString, sizeof(gString), "{%s}%s{FFFFFF}'s HQ\n(locked)", ColorFaction[x], DynamicFactions[x][fName]);
		else format(gString, sizeof(gString), "{%s}%s{FFFFFF}'s HQ\n(unlocked)", ColorFaction[x], DynamicFactions[x][fName]);
		DynamicFactions[x][fLabel] = Create3DTextLabel(gString,COLOR_WHITE,DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ],20.0, 0, 1);
		switch(x) {
			case 1, 2, 3, 14: y = CreateDynamicPickup(1247, 23, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ]);
			case 4, 5, 6, 10: y = CreateDynamicPickup(1313, 23, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ]);
			default: y = CreateDynamicPickup(1314, 23, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ]);
		}
		PickupInfo[y][pkID] = x;
		PickupInfo[y][pkType] = 3;	
	}
	printf("Factions: %d", factions);
	return true;
}
function LoadGraffiti() {
	printf("Clan zones: %d", cache_num_rows());
	if(cache_num_rows() == 0)
		return true;

	SQL_clanzone = cache_num_rows();

	gString[0] = EOS;
	for(new i = 0; i < cache_num_rows(); i++) {
	   	cache_get_value_name_int(i, "ID", GraffitiInfo[i][gfID]);
	   	cache_get_value_name_float(i, "X", GraffitiInfo[i][gfX]); 
	   	cache_get_value_name_float(i, "Y", GraffitiInfo[i][gfY]); 
	 	cache_get_value_name_float(i, "Z", GraffitiInfo[i][gfZ]);
	  	cache_get_value_name_float(i, "Rot", GraffitiInfo[i][gfRot]); 
	   	cache_get_value_name_int(i, "Owned", GraffitiInfo[i][gfOwned]); 

		GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], 0.0, 0.0, GraffitiInfo[i][gfRot]);
		if(GraffitiInfo[i][gfOwned] == 0 ) gString = "Clan Name\nClan Tag";
		else format(gString, sizeof(gString), "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
		SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, gString, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	}
	return true;
}
function InsertSafeZone() {
	new sfz, x;
 	for(new i, j = cache_num_rows(); i != j; i++) {
		sfz ++;
	    cache_get_value_name_int(i, "ID", x); 
 		cache_get_value_name_float(i, "szX", SafeZone[x][szX]); 
 		cache_get_value_name_float(i, "szY", SafeZone[x][szY]); 
 		cache_get_value_name_float(i, "szZ", SafeZone[x][szZ]); 
		cache_get_value_name_int(i, "szRange", SafeZone[x][szRange]); 
	}
	printf("Safezones: %d", sfz);
	return true;
}

function LoadProperty() {
	new house = cache_num_rows();
	for(new i = 1; i <= house; i++) {
		new idd = i - 1;

		cache_get_value_name_int(idd, "ID", HouseInfo[i][hID]);			
		cache_get_value_name_float(idd, "Entrancex", HouseInfo[i][hEntrancex]); 			
		cache_get_value_name_float(idd, "Entrancey", HouseInfo[i][hEntrancey]); 			
		cache_get_value_name_float(idd, "Entrancez", HouseInfo[i][hEntrancez]); 			
		cache_get_value_name_float(idd, "Exitx", HouseInfo[i][hExitx]);				
		cache_get_value_name_float(idd, "Exity", HouseInfo[i][hExity]);				
		cache_get_value_name_float(idd, "Exitz", HouseInfo[i][hExitz]);				
		cache_get_value_name(idd, "Owner", HouseInfo[i][hOwner], MAX_PLAYER_NAME);
		cache_get_value_name(idd, "Discription", HouseInfo[i][hDiscription], 64);
		cache_get_value_name_int(idd, "Value", HouseInfo[i][hValue]);	
		cache_get_value_name_int(idd, "Hel", HouseInfo[i][hHel]); 			
		cache_get_value_name_int(idd, "Arm", HouseInfo[i][hArm]); 			
		cache_get_value_name_int(idd, "Interior", HouseInfo[i][hInterior]);	
		cache_get_value_name_int(idd, "Lockk", HouseInfo[i][hLock]); 		
		cache_get_value_name_int(idd, "Owned", HouseInfo[i][hOwned]); 		
		cache_get_value_name_int(idd, "Rentabil", HouseInfo[i][hRentabil]); 	
		cache_get_value_name_int(idd, "Takings", HouseInfo[i][hTakings]); 		
		cache_get_value_name_int(idd, "Level", HouseInfo[i][hLevel]); 		
		cache_get_value_name_int(idd, "Radio", HouseInfo[i][hRadio]); 		
		cache_get_value_name_int(idd, "Virtual", HouseInfo[i][hVirtual]); 		
		cache_get_value_name_int(idd, "Garage", HouseInfo[i][hGarage]); 		
		cache_get_value_name_int(idd, "Zise", HouseInfo[i][hSize]);			
	}
	for(new i = 1; i <= house; i++) {
		HouseLabel[i] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1, -1, 100.0);
		UpdateLabel(1, i);
	}
	housess = house;
	printf("Houses: %d", house);
	return true;
}

function InsertClans() {
	new x, clans = cache_num_rows();
 	for(new i, j = clans; i != j; i++) {
		cache_get_value_name_int(i, "ID", x);
	   	cache_get_value_name(i, "Owner", ClanInfo[x][clOwner], MAX_PLAYER_NAME);
	   	cache_get_value_name(i, "Name", ClanInfo[x][clName], 64);
	 	cache_get_value_name(i, "Motd", ClanInfo[x][clMotd], 64);
	  	cache_get_value_name(i, "Tag", ClanInfo[x][clTag], 32);

	  	cache_get_value_name(i, "RankColor1", ClanInfo[x][clRankColor1], 32);
	   	cache_get_value_name(i, "RankColor2", ClanInfo[x][clRankColor2], 32);
	   	cache_get_value_name(i, "RankColor3", ClanInfo[x][clRankColor3], 32);
	  	cache_get_value_name(i, "RankColor4", ClanInfo[x][clRankColor4], 32);
	 	cache_get_value_name(i, "RankColor5", ClanInfo[x][clRankColor5], 32);
	  	cache_get_value_name(i, "RankColor6", ClanInfo[x][clRankColor6], 32);
		
	   	cache_get_value_name(i, "RankName1", ClanInfo[x][clRankName1], 32);
	   	cache_get_value_name(i, "RankName2", ClanInfo[x][clRankName2], 32);
	   	cache_get_value_name(i, "RankName3", ClanInfo[x][clRankName3], 32);
	  	cache_get_value_name(i, "RankName4", ClanInfo[x][clRankName4], 32);
	 	cache_get_value_name(i, "RankName5", ClanInfo[x][clRankName5], 32);
	  	cache_get_value_name(i, "RankName6", ClanInfo[x][clRankName6], 32);
	  	ClanInfo[x][cID] = x;
		
	  	cache_get_value_name(i, "Color", ClanInfo[x][clColor], 32); 
	  	cache_get_value_name_int(i, "Slots", ClanInfo[i][clSlots]);
	  	cache_get_value_name_int(i, "HQ", ClanInfo[i][clHQ]);				
	  	cache_get_value_name_int(i, "PremiumPoints", ClanInfo[i][clPremiumPoints]);
		cache_get_value_name_int(i, "Days", ClanInfo[i][clDays]);			
		cache_get_value_name(i, "RegisterDate", ClanInfo[x][clRegisterDate], 32);
	}
	printf("Clans: %d", clans);
	GClanMembers();
	return true;
}
function LoadJobs() {
	new jobs = cache_num_rows();
 	for(new x = 1; x < jobs; x++) {
 		new i = x - 1;
		cache_get_value_name_int(i, "ID",    	JobInfo[x][jID]); 			
	   	cache_get_value_name(i, "Name", JobInfo[x][jName], 32); 		
		cache_get_value_name_int(i, "NeedLevel",  	JobInfo[x][jLevel]); 	
		cache_get_value_name_float(i, "PosX",    	JobInfo[x][jPosX]); 			
		cache_get_value_name_float(i, "PosY",    	JobInfo[x][jPosY]); 			
		cache_get_value_name_float(i, "PosZ", 	JobInfo[x][jPosZ]); 			
		cache_get_value_name_int(i, "Legal",   	JobInfo[x][jLegal]); 			
		cache_get_value_name_int(i, "Skill1Veh",   	JobInfo[x][jSkill1Veh]); 
		cache_get_value_name_int(i, "Skill2Veh",   	JobInfo[x][jSkill2Veh]); 
		cache_get_value_name_int(i, "Skill3Veh", 	JobInfo[x][jSkill3Veh]); 
		cache_get_value_name_int(i, "Skill4Veh", 	JobInfo[x][jSkill4Veh]); 
		cache_get_value_name_int(i, "Skill5Veh", 	JobInfo[x][jSkill5Veh]); 
		cache_get_value_name_int(i, "Skill6Veh", 	JobInfo[x][jSkill6Veh]); 
		cache_get_value_name(i, "Owner", JobInfo[x][jOwner], MAX_PLAYER_NAME);
		cache_get_value_name_int(i, "Bank", 	JobInfo[x][jBank]); 	

		gString[0] = EOS;
		format(gString, sizeof(gString), "{ffffff}Job ID: {15B864}%d{FFFFFF}\n{ffffff}Job: {15B864}%s{FFFFFF}\n{ffffff}Owner: {15B864}%s{FFFFFF}\nLevel: {15B864}%d{FFFFFF}\nPress {15B864}Y{FFFFFF} to get the job\nPress {15B864}N{FFFFFF} to quit job", x, JobInfo[x][jName], JobInfo[x][jOwner], JobInfo[x][jLevel]);
		JobInfo[x][jLabel] = CreateDynamic3DTextLabel(gString, 0xFFFFFF00, JobInfo[x][jPosX], JobInfo[x][jPosY], JobInfo[x][jPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
		JobInfo[x][jPickup] = CreateDynamicPickup(1275, 23, JobInfo[x][jPosX], JobInfo[x][jPosY], JobInfo[x][jPosZ], -1, -1, -1, 100.0);
	}
	printf("Jobs: %d", jobs);
	return true;
}
function InsertGarages() {
	garage = cache_num_rows();
	for(new x = 1; x <= garage; x++) {
		new idd = x - 1;
		cache_get_value_name_int(idd, "ID", GarageInfo[x][gID]);
   	   	cache_get_value_name_float(idd, "EntranceX", GarageInfo[x][gEnterX]);
		cache_get_value_name_float(idd, "EntranceY", GarageInfo[x][gEnterY]);
		cache_get_value_name_float(idd, "EntranceZ", GarageInfo[x][gEnterZ]);	
		cache_get_value_name_float(idd, "EntranceR", GarageInfo[x][gEnterR]);
		cache_get_value_name_float(idd, "ExitX", GarageInfo[x][gExitX]);
		cache_get_value_name_float(idd, "ExitY", GarageInfo[x][gExitY]);
		cache_get_value_name_float(idd, "ExitZ", GarageInfo[x][gExitZ]);
		cache_get_value_name_float(idd, "ExitR", GarageInfo[x][gExitR]);
		cache_get_value_name_int(idd, "House", GarageInfo[x][gHouses]);
		cache_get_value_name_int(idd, "Virtual", GarageInfo[x][gVirtualWorld]);
	}
	for(new x = 1; x <= garage; x++) {
		GarageInfo[x][gPickup] = CreateDynamicPickup(1318, 23, GarageInfo[x][gEnterX], GarageInfo[x][gEnterY], GarageInfo[x][gEnterZ]);
		GarageLabel[x] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, GarageInfo[x][gEnterX], GarageInfo[x][gEnterY], GarageInfo[x][gEnterZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		UpdateLabel(3, x);	
	}
	printf("Garages: %d", garage);
	return true;
}

function LoadBizz() {
	new bizz = cache_num_rows();
	for(new i = 1; i <= bizz; i++) {
		new idd = i - 1;
		cache_get_value_name(idd, "Owner", BizzInfo[i][bOwner], MAX_PLAYER_NAME);
		cache_get_value_name(idd, "Message", BizzInfo[i][bMessage], 64);
		cache_get_value_name_int(idd, "ID", BizzInfo[i][bID]);			
		cache_get_value_name_int(idd, "Owned", BizzInfo[i][bOwned]);
   		cache_get_value_name_float(idd, "EntranceX", BizzInfo[i][bEntranceX]);		
   		cache_get_value_name_float(idd, "EntranceY", BizzInfo[i][bEntranceY]);		
   		cache_get_value_name_float(idd, "EntranceZ", BizzInfo[i][bEntranceZ]);		
   		cache_get_value_name_float(idd, "ExitX", BizzInfo[i][bExitX]);			
   		cache_get_value_name_float(idd, "ExitY", BizzInfo[i][bExitY]);			
   		cache_get_value_name_float(idd, "ExitZ", BizzInfo[i][bExitZ]);			
   		cache_get_value_name_int(idd, "LevelNeeded", BizzInfo[i][bLevel]); 		
   		cache_get_value_name_int(idd, "BuyPrice", BizzInfo[i][bBuyPrice]); 		
   		cache_get_value_name_int(idd, "EntranceCost", BizzInfo[i][bFee]);
   		cache_get_value_name_int(idd, "Till", BizzInfo[i][bBalance]);
   		cache_get_value_name_int(idd, "Locked", BizzInfo[i][bLocked]);
   		cache_get_value_name_int(idd, "Interior", BizzInfo[i][bInterior]); 		
   		cache_get_value_name_int(idd, "Virtual", BizzInfo[i][bVirtual]); 		
 		cache_get_value_name_int(idd, "Radio", BizzInfo[i][bRadio]);		
 		cache_get_value_name_int(idd, "Static", BizzInfo[i][bStatic]); 		
 		cache_get_value_name_int(idd, "Gas", BizzInfo[i][bGas]);			
 		cache_get_value_name_int(idd, "Type", BizzInfo[i][bType]);			
	}
	for(new x = 1; x <= bizz; x++) {
		BizzInfo[x][bPickup] = CreateDynamicPickup(BizzInfo[x][bType] != 19 ? 1239 : 1318, 23, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ]);
		UpdateLabel(2,BizzInfo[x][bID]);	
		LoadGPS(BizzInfo[x][bType], x);
		PickupInfo[BizzInfo[x][bPickup]][pkID] = x;
		PickupInfo[BizzInfo[x][bPickup]][pkType] = 2;

		switch(BizzInfo[x][bType]) {
			case 1: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],52,0,-1,0,-1,500.0); // banca
			case 2: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],6,0,-1,0,-1,500.0); // gun shop
			case 3: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],49,0,-1,0,-1,500.0); // club
			case 4: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],50,0,-1,0,-1,500.0); // restaurant	
			case 5: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],38,0,-1,0,-1,500.0); // sexshop	
			case 6: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],17,0,-1,0,-1,500.0); // 24/7	
			case 7: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],45,0,-1,0,-1,500.0); // binco
			case 8: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],10,0,-1,0,-1,500.0); // burger	
			case 9: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],25,0,-1,0,-1,500.0); // casino	
			case 10: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],16,0,-1,0,-1,500.0); // cnn	
			case 12: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],55,0,-1,0,-1,500.0); // car				
			case 13: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],23,0,-1,0,-1,500.0); // cs				
			case 15: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],63,0,-1,0,-1,500.0); // car color			
			case 16: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],23,0,-1,0,-1,500.0); // paint		
			case 17: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],51,0,-1,0,-1,500.0); // gas station		
			case 18: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],53,0,-1,0,-1,500.0); // race	
			case 19: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],63,0,-1,0,-1,500.0); // pns		
			case 20: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],9,0,-1,0,-1,500.0); // pescarie	
			case 21: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],29,0,-1,0,-1,500.0); // pizza
			case 23: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],9,0,-1,0,-1,500.0); // tuning
			case 27: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],9,0,-1,0,-1,500.0); // tuning
		}
	}
	bussines = bizz;
	printf("Bussines: %d", bizz);
	return true;
}
function LoadGPS(type, x) {
	switch(type) {
		case 1: GpsBizzType[0] ++, BizzTypeID[0][GpsBizzType[0]] = x;
		case 2: GpsBizzType[1] ++, BizzTypeID[1][GpsBizzType[1]] = x;
		case 3: GpsBizzType[2] ++, BizzTypeID[2][GpsBizzType[2]] = x;
		case 4: GpsBizzType[3] ++, BizzTypeID[3][GpsBizzType[3]] = x;
		case 5: GpsBizzType[4] ++, BizzTypeID[4][GpsBizzType[4]] = x;
		case 6: GpsBizzType[5] ++, BizzTypeID[5][GpsBizzType[5]] = x;
		case 7: GpsBizzType[6] ++, BizzTypeID[6][GpsBizzType[6]] = x;
		case 8: GpsBizzType[7] ++, BizzTypeID[7][GpsBizzType[7]] = x;
		case 9: GpsBizzType[8] ++, BizzTypeID[8][GpsBizzType[8]] = x;
		case 10: GpsBizzType[9] ++, BizzTypeID[9][GpsBizzType[9]] = x;
		case 11: GpsBizzType[10] ++, BizzTypeID[10][GpsBizzType[10]] = x;
		case 16: GpsBizzType[11] ++, BizzTypeID[11][GpsBizzType[11]] = x;
		case 17: GpsBizzType[12] ++, BizzTypeID[12][GpsBizzType[12]] = x;
		case 18: GpsBizzType[13] ++, BizzTypeID[13][GpsBizzType[13]] = x;
		case 19: GpsBizzType[14] ++, BizzTypeID[14][GpsBizzType[14]] = x;
		case 21: GpsBizzType[15] ++, BizzTypeID[15][GpsBizzType[15]] = x;
		case 22: GpsBizzType[16] ++, BizzTypeID[16][GpsBizzType[16]] = x;
		case 23: GpsBizzType[17] ++, BizzTypeID[17][GpsBizzType[17]] = x;
	}
	return true;
}

stock SaveSeif(const id) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `seif` SET `sMoney` = '%d', `sDrugs` = '%d', `sMaterials` = '%d' WHERE `sID` = '%d'", SafeInfo[id][sMoney], SafeInfo[id][sDrugs], SafeInfo[id][sMaterials], SafeInfo[id][sID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}
function LoadSafes() {	
	printf("Safes: %d", cache_num_rows());
	if(cache_num_rows() == 0)
		return true;

	gString[0] = EOS;
 	for(new i = 0; i < cache_num_rows(); i++) {			
 		cache_get_value_name_int(i, "sID", SafeInfo[i][sID]); 
		cache_get_value_name_int(i, "sFactionID", SafeInfo[i][sFactionID]); 
		cache_get_value_name_float(i, "sPosX", SafeInfo[i][sPosX]); 		
		cache_get_value_name_float(i, "sPosY",   	SafeInfo[i][sPosY]); 		
		cache_get_value_name_float(i, "sPosZ",    	SafeInfo[i][sPosZ]); 		
		cache_get_value_name_int(i, "sMoney",    	SafeInfo[i][sMoney]); 		
		cache_get_value_name_int(i, "sDrugs",    	SafeInfo[i][sDrugs]); 		
		cache_get_value_name_int(i, "sMaterials",   	SafeInfo[i][sMaterials]); 
		cache_get_value_name_int(i, "sVirtualID",  	SafeInfo[i][sVirtualID]); 

	 	CreateDynamicPickup(1274, 23, SafeInfo[i][sPosX], SafeInfo[i][sPosY], SafeInfo[i][sPosZ], SafeInfo[i][sVirtualID]);
		format(gString, 100, "Seiful factiunii\n%s", FactionName(i+1));
		CreateDynamic3DTextLabel(gString, 0xFFEA00FF,SafeInfo[i][sPosX], SafeInfo[i][sPosY], SafeInfo[i][sPosZ], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, SafeInfo[i][sVirtualID]);
	}
	GetFMembers();
	return true;
}
function LoadHQClans() {
	new clanhq = cache_num_rows();
 	for(new x = 1; x <= clanhq; x++) {
 		new i = x - 1;
		cache_get_value_name_int(i, "cID",    	ClanHQInfo[x][cID]);				
		cache_get_value_name_float(i, "cPosX",    	ClanHQInfo[x][cPosX]);			
		cache_get_value_name_float(i, "cPosY",    	ClanHQInfo[x][cPosY]);			
		cache_get_value_name_float(i, "cPosZ",    	ClanHQInfo[x][cPosZ]);			
		cache_get_value_name_float(i, "cEnterX",    	ClanHQInfo[x][cEnterX]);			
		cache_get_value_name_float(i, "cEnterY",    	ClanHQInfo[x][cEnterY]);			
		cache_get_value_name_float(i, "cEnterZ",    	ClanHQInfo[x][cEnterZ]);		
		cache_get_value_name_int(i, "cPrice",    	ClanHQInfo[x][cPrice]);			
		cache_get_value_name_int(i, "cClan",    	ClanHQInfo[x][cClan]);			
		cache_get_value_name_int(i, "cVirtualWorld",    	ClanHQInfo[x][cVirtualWorld]);			
	}
	for(new i = 1; i <= clanhq; i++) UpdateLabel(4, i);
	clanhqid = clanhq;
	printf("HQ clans: %d", clanhq);
	return true;
}

function LoadSVehicle() {
	new servervehs = cache_num_rows();
	for(new x = 1; x < servervehs; x++) {
		new i = x - 1;
		cache_get_value_name_int(i, "vID",    	ServerVehicles[x][vID]);			
		cache_get_value_name_int(i, "vModel",    	ServerVehicles[x][vModel]);		
	 	cache_get_value_name_float(i, "LocationX", ServerVehicles[x][vLocation][0]);	
	 	cache_get_value_name_float(i, "LocationY", ServerVehicles[x][vLocation][1]);	
	 	cache_get_value_name_float(i, "LocationZ", ServerVehicles[x][vLocation][2]);	
		cache_get_value_name_float(i, "Angle",    	ServerVehicles[x][vAngle]);
		cache_get_value_name_int(i, "Color1",    	ServerVehicles[x][vColor][0]);	
		cache_get_value_name_int(i, "Color2",    	ServerVehicles[x][vColor][1]);
		cache_get_value_name_int(i, "Faction",    	ServerVehicles[x][vFaction]);		
		cache_get_value_name_int(i, "Rank",    	ServerVehicles[x][vRank]);		
		cache_get_value_name_int(i, "Virtual",    	ServerVehicles[x][vVirtual]);

		if(ServerVehicles[x][vModel] >= 400 && ServerVehicles[x][vModel] <= 611) {
			if(ServerVehicles[x][vFaction] == 1 || ServerVehicles[x][vFaction] == 2 || ServerVehicles[x][vFaction] == 3 || ServerVehicles[x][vFaction] == 14) {
				ServerVehicles[x][vSpawned] = CreateVehicleEx(ServerVehicles[x][vModel], ServerVehicles[x][vLocation][0], ServerVehicles[x][vLocation][1], ServerVehicles[x][vLocation][2], ServerVehicles[x][vAngle], ServerVehicles[x][vColor][0], ServerVehicles[x][vColor][1], -1, 1);
			} else {
				ServerVehicles[x][vSpawned] = CreateVehicleEx(ServerVehicles[x][vModel], ServerVehicles[x][vLocation][0], ServerVehicles[x][vLocation][1], ServerVehicles[x][vLocation][2], ServerVehicles[x][vAngle], ServerVehicles[x][vColor][0], ServerVehicles[x][vColor][1], -1, 0);
			}
			new idd = ServerVehicles[x][vSpawned];
			SetVehicleVirtualWorld(idd, ServerVehicles[x][vVirtual]);
			if(ServerVehicles[x][vFaction] != 0) {
				if(ServerVehicles[x][vModel] == 411) {
					if(ServerVehicles[x][vFaction] == 1 || ServerVehicles[x][vFaction] == 2 || ServerVehicles[x][vFaction] == 3 || ServerVehicles[x][vFaction] == 14) {
						new policecar = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
						SetObjectMaterialText(policecar, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
						new lspdcar = CreateObject(19419,0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000);
						AttachObjectToVehicle(policecar, idd, 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
						AttachObjectToVehicle(lspdcar, idd, 0.0646, 0.1661, 0.6957, 0.0000, 0.0000, 0.0000);
					}
					if(ServerVehicles[x][vFaction] == 4) {
						new infobj = CreateObject(19309,0,0,0,0,0,0,0);
						AttachObjectToVehicle(infobj, idd, -0.009999, -2.380007, 0.319999, 0.000000, 0.000000, 0.000000);
					}
					if(ServerVehicles[x][vFaction] == 15) {
						new uber = CreateObject(19309,0,0,0,0,0,0,0);
						SetObjectMaterialText(uber, "Uber", 0, 50, "Arial", 27, 1, COLOR_WHITE, 0xFF000000, 1);
						AttachObjectToVehicle(uber, idd, 0.009999, -0.105000, 0.789999, -0.000000, -0.000000, -91.454948);
					}
				}
				if(ServerVehicles[x][vModel] == 560) {
					if(ServerVehicles[x][vFaction] == 12 || ServerVehicles[x][vFaction] == 13) {
						new taiddiobj = CreateObject(19308, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
						AttachObjectToVehicle(taiddiobj, idd, -0.00930, -0.23880, 0.92300,0.00000, 0.00000, 0.00000);
					}
					if(ServerVehicles[x][vFaction] == 4) {
						new sulobj = CreateObject(1014, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
						AttachObjectToVehicle(sulobj, idd, 0.000000, -2.225003, 0.354999, 11.055000, 0.000000, 0.000000);
					}
					if(ServerVehicles[x][vFaction] == 15) {
						new uber1 = CreateObject(19309,0,0,0,0,0,0,0);
						SetObjectMaterialText(uber1, "Uber", 0, 50, "Arial", 27, 1, COLOR_WHITE, 0xFF000000, 1);
						AttachObjectToVehicle(uber1, idd, 0.000000, -0.199999, 0.919999, 0.000000, 0.000000, 0.000000);
					}
				}
				if(ServerVehicles[x][vModel] == 541) {
					if(ServerVehicles[x][vFaction] == 2) {
						new object1 = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
						new object2 = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(object1, idd, 0.375000,0.524999,0.375000,0.000000,0.000000,0.000000);
						AttachObjectToVehicle(object2, idd, 0.375000,0.524999,0.375000,0.000000,0.000000,0.000000);
					}
					if(ServerVehicles[x][vFaction] == 4) {
						new bullobj = CreateObject(1146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(bullobj, idd, 0.000000, -2.105000, 0.324999, 0.000000, 0.000000, 0.000000);
					}
					if(ServerVehicles[x][vFaction] == 15) {
						new uber2 = CreateObject(19309,0,0,0,0,0,0,0);
						SetObjectMaterialText(uber2, "Uber", 0, 50, "Arial", 27, 1, COLOR_WHITE, 0xFF000000, 1);
						AttachObjectToVehicle(uber2, idd, 0.000000, -0.229999, 0.709999, 2.009999, 0.000000, 0.000000);
					}
				}
				if(ServerVehicles[x][vModel] == 525) {
					new object1 = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					new object2 = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(object1, idd, -0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
					AttachObjectToVehicle(object2, idd, 0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
				}
			}

			new str[64];
			if(ServerVehicles[idd][vFaction] != 0) format(str, 64, "F%d %d", ServerVehicles[idd][vFaction], idd);
			else format(str, sizeof(str), "RO-0%d", ServerVehicles[x][vSpawned]);
			SetVehicleNumberPlate(idd, str);
		}
	}
	printf("Server vehicles: %d", servervehs);
	return true;
}


function GetVehicleID(vehicleid) {
	for(new i = 1; i < MAX_SVEHICLES; i++) {
		if(ServerVehicles[i][vSpawned] == vehicleid) return i;
	}
	return false;
}
stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid) {
	new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,PX,PY,PZ);
	GetVehiclePos(vehicleid, X,Y,Z);
	new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	if(Distance <= radi*radi) return true;
	return false;
}
function ResetGates() {
	GateStatus = 0;
	MoveDynamicObject(ttcgate[0], 2423.84619, -2083.33496, 15.34760, 3.0);
	MoveDynamicObject(ttcgate[1], 2423.84619, -2094.83081, 15.34760, 3.0);
	return true;
}
function HideDeathMessage() {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			for(new x = 0; x < 5; x++) SendDeathMessageToPlayer(i, 1001, 1001, 200);
		}		
	}		
	if(Licitatie == 1) SCMTA(COLOR_YELLOW, "In acest moment este o licitatie activa. Pentru mai multe detalii, foloseste comanda /info.");
	return true;
}
YCMD:restartmissions(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	ResetQuest();
	return true;
}
function GetNeedProgress(playerid, caz) {
	return PlayerInfo[playerid][pNeedProgress][caz];
}
stock missionName(playerid, type, id) {
	new string[256];
	switch(type) {
		case 0: format(string, sizeof(string), "Omoara %d jucatori la arena de paintball", PlayerInfo[playerid][pNeedProgress][id]);
		case 1: format(string, sizeof(string), "Livreaza %d cutii cu pizza", PlayerInfo[playerid][pNeedProgress][id]);
		case 2: format(string, sizeof(string), "Prinde %d pesti", PlayerInfo[playerid][pNeedProgress][id]);
		case 3: format(string, sizeof(string), "Livreaza %d vehicule cu materiale", PlayerInfo[playerid][pNeedProgress][id]);
		case 4: format(string, sizeof(string), "Vinde %d saci cu faina", PlayerInfo[playerid][pNeedProgress][id]);
		case 5: format(string, sizeof(string), "Fura %d vehicule", PlayerInfo[playerid][pNeedProgress][id]);	
		case 6: format(string, sizeof(string), "Vinde o arma unui jucator");		
		case 7: format(string, sizeof(string), "Viziteaza muntele Chilliad");
		case 8: format(string, sizeof(string), "Viziteaza aeroportul din Los Santos");
		case 9: format(string, sizeof(string), "Viziteaza stadionul de Baseball LV");		
		case 10: format(string, sizeof(string), "Mergi intr-un club si imbata-te");	
		case 11: format(string, sizeof(string), "Castiga la Mine Sweeper");
		case 12: format(string, sizeof(string), "Localizeaza un player");		
		case 13: format(string, sizeof(string), "Drogheaza-te");	
		case 14: format(string, sizeof(string), "Cumpara o cafea dintr-un bar");	
		case 15..16: {
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3) 
				format(string, sizeof(string), "Aresteaza %d suspecti", PlayerInfo[playerid][pNeedProgress][id]);
			else if(PlayerInfo[playerid][pMember] == 7) 
				format(string, sizeof(string), "Ofera %d licente", PlayerInfo[playerid][pNeedProgress][id]);
			else if(PlayerInfo[playerid][pMember] == 8) 
				format(string, sizeof(string), "Tracteaza %d vehicule", PlayerInfo[playerid][pNeedProgress][id]);
			else if(PlayerInfo[playerid][pMember] == 9) 
				format(string, sizeof(string), "Da %d anunturi", PlayerInfo[playerid][pNeedProgress][id]);
			else if(PlayerInfo[playerid][pMember] == 11) 
				format(string, sizeof(string), "Finalizeaza %d contracte", PlayerInfo[playerid][pNeedProgress][id]);
			else if(PlayerInfo[playerid][pMember] == 12) 
				format(string, sizeof(string), "Transporta %d playeri la destinatia dorita", PlayerInfo[playerid][pNeedProgress][id]);
			else if(PlayerInfo[playerid][pMember] == 13) 
				format(string, sizeof(string), "Ofera viata la %d playeri", PlayerInfo[playerid][pNeedProgress][id]);
			else format(string, sizeof(string), "Prinde %d pesti", PlayerInfo[playerid][pNeedProgress][id]);
		}
		case 17: format(string, sizeof(string), "Termina %d curse la arena de curse", PlayerInfo[playerid][pNeedProgress][id]);	
		case 18: format(string, sizeof(string), "Plaseaza %d contracte", PlayerInfo[playerid][pNeedProgress][id]);	
		case 19: format(string, sizeof(string), "Repara vehiculul de %d ori intr-un PNS", PlayerInfo[playerid][pNeedProgress][id]);
		case 20: format(string, sizeof(string), "Joaca barbut cu o persoana");
	
	}
	return string;
}
function QuestProgress(playerid, type, id) {
	new progress;
	switch(type) {
		case 0..5: progress = 1 + random(15);
		case 6..14: progress = 1;
		case 15..16: progress = 1 + random(8);
		case 17..19: progress = 1 + random(5);
		case 20: progress = 1;
	}
	PlayerInfo[playerid][pNeedProgress][id] = progress;
	PlayerInfo[playerid][pProgress][id] = 0;
	new query[180];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `NeedProgress%d`='%d' WHERE `ID`='%d'", id+1, progress, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL ,query, "", "");
	return true;
}
function GiveQuest(playerid) {
	new i = playerid;
	PlayerInfo[i][pDailyMission][0] = random(20);
	PlayerInfo[i][pDailyMission][1] = 1+random(19);
	if(PlayerInfo[i][pDailyMission][0] == PlayerInfo[i][pDailyMission][1]) PlayerInfo[i][pDailyMission][1] = 0;
	Update(i, pDailyMissionx);
	Update(i, pDailyMission2x);
	QuestProgress(i, PlayerInfo[i][pDailyMission][0], 0);
	QuestProgress(i, PlayerInfo[i][pDailyMission][1], 1);
	return true;
}
function ResetQuest() {
	new query[256];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `DailyMission`='-1', `Progress`='0', `DailyMission2`='-1', `Progress2`='0', `NeedProgress1`='0', `NeedProgress2`='0'");
	mysql_tquery(SQL ,query, "", "");
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			PlayerInfo[i][pDailyMission][0] = random(20);
			PlayerInfo[i][pDailyMission][1] = 1+random(19);
			if(PlayerInfo[i][pDailyMission][0] == PlayerInfo[i][pDailyMission][1]) PlayerInfo[i][pDailyMission][1] = 0;
			Update(i, pDailyMissionx);
			Update(i, pDailyMission2x);
			QuestProgress(i, PlayerInfo[i][pDailyMission][0], 0);
			QuestProgress(i, PlayerInfo[i][pDailyMission][1], 1);
			SCM(i, COLOR_YELLOW, "* Misiunea zilei a fost resetata. Foloseste /quests pentru a vedea noile misiuni!");
		}
	}
	return true;
}
function CheckMission(playerid, id) {
	new string[180], query[180], money = 50000 + PlayerInfo[playerid][pLevel] * 1000 + random(50000);
	if(PlayerInfo[playerid][pDailyMission][id] != -1) {
		PlayerInfo[playerid][pProgress][id] ++;	
		if(PlayerInfo[playerid][pProgress][id] == PlayerInfo[playerid][pNeedProgress][id]) {
			format(string, sizeof(string), "Misiunea '%s' a fost terminata.", missionName(playerid, PlayerInfo[playerid][pDailyMission][id], id));
			SCM(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), "Ban nhan duoc $%s si un RP.", FormatNumber(money));
			SCM(playerid, COLOR_YELLOW, string);
			PlayerInfo[playerid][pExp] ++;
			GivePlayerCash(playerid, 1, money);
			PlayerInfo[playerid][pProgress][id] ++;
			UpdateProgress(playerid);
		}
		else if(PlayerInfo[playerid][pProgress][id] < PlayerInfo[playerid][pNeedProgress][id]) {
			format(string, sizeof(string), "Progres pentru misiunea '%s': %d/%d", missionName(playerid, PlayerInfo[playerid][pDailyMission][id], id), PlayerInfo[playerid][pProgress][id], PlayerInfo[playerid][pNeedProgress][id]);
			SCM(playerid, COLOR_YELLOW, string);
		}
		if(id == 0) mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Progress`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pProgress][id], PlayerInfo[playerid][pSQLID]);
		else if(id == 1) mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Progress2`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pProgress][id], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, query, "", "");		
	}
	Update(playerid, pRP);
	return true;
}
YCMD:missions(playerid, params[], help) {
	new string[180], status1[180], status2[180];
	if(PlayerInfo[playerid][pProgress][0] >= GetNeedProgress(playerid, 0)) format(status1, 256, "Misiune terminata");
	else format(status1, 256, "%d/%d", PlayerInfo[playerid][pProgress][0], GetNeedProgress(playerid, 0));
	if(PlayerInfo[playerid][pProgress][1] >= GetNeedProgress(playerid, 1)) format(status2, 256, "Misiune terminata");
	else format(status2, 256, "%d/%d", PlayerInfo[playerid][pProgress][1], GetNeedProgress(playerid, 1));
	format(string, sizeof(string), "(1) %s (Progres: %s)", missionName(playerid, PlayerInfo[playerid][pDailyMission][0], 0), status1);
	SCM(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "(2) %s (Progres: %s)", missionName(playerid, PlayerInfo[playerid][pDailyMission][1], 1), status2);
	SCM(playerid, COLOR_YELLOW, string);
	return true;
}
function SaveQuest(playerid) {
	new szQuery[1024], items[1024];
	format(items, sizeof(items), 
		"%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d", 
		PlayerInfo[playerid][pSpecialQuest][0], PlayerInfo[playerid][pSpecialQuest][1], PlayerInfo[playerid][pSpecialQuest][2], PlayerInfo[playerid][pSpecialQuest][3], PlayerInfo[playerid][pSpecialQuest][4],
		PlayerInfo[playerid][pSpecialQuest][5], PlayerInfo[playerid][pSpecialQuest][6], PlayerInfo[playerid][pSpecialQuest][7], PlayerInfo[playerid][pSpecialQuest][8], PlayerInfo[playerid][pSpecialQuest][9],
		PlayerInfo[playerid][pSpecialQuest][10], PlayerInfo[playerid][pSpecialQuest][11], PlayerInfo[playerid][pSpecialQuest][12], PlayerInfo[playerid][pSpecialQuest][13], PlayerInfo[playerid][pSpecialQuest][14],
		PlayerInfo[playerid][pSpecialQuest][15], PlayerInfo[playerid][pSpecialQuest][16], PlayerInfo[playerid][pSpecialQuest][17], PlayerInfo[playerid][pSpecialQuest][18], PlayerInfo[playerid][pSpecialQuest][19],
		PlayerInfo[playerid][pSpecialQuest][20], PlayerInfo[playerid][pSpecialQuest][21], PlayerInfo[playerid][pSpecialQuest][22], PlayerInfo[playerid][pSpecialQuest][23], PlayerInfo[playerid][pSpecialQuest][24]);			
	mysql_format(SQL, szQuery, sizeof(szQuery), 
		"UPDATE `users` SET `SpecialQuest`='%s' WHERE `ID`='%d'", items, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	return true;
}
function SaveAchievements(playerid) {
	new szQuery[1024], items[1024];
	format(items, sizeof(items), 
		"%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d", 
		PlayerInfo[playerid][pAchievementStatus][0], PlayerInfo[playerid][pAchievementStatus][1], PlayerInfo[playerid][pAchievementStatus][2], PlayerInfo[playerid][pAchievementStatus][3], PlayerInfo[playerid][pAchievementStatus][4],
		PlayerInfo[playerid][pAchievementStatus][5], PlayerInfo[playerid][pAchievementStatus][6], PlayerInfo[playerid][pAchievementStatus][7], PlayerInfo[playerid][pAchievementStatus][8], PlayerInfo[playerid][pAchievementStatus][9],
		PlayerInfo[playerid][pAchievementStatus][10], PlayerInfo[playerid][pAchievementStatus][11], PlayerInfo[playerid][pAchievementStatus][12], PlayerInfo[playerid][pAchievementStatus][13], PlayerInfo[playerid][pAchievementStatus][14],
		PlayerInfo[playerid][pAchievementStatus][15], PlayerInfo[playerid][pAchievementStatus][16], PlayerInfo[playerid][pAchievementStatus][17], PlayerInfo[playerid][pAchievementStatus][18], PlayerInfo[playerid][pAchievementStatus][19],		
		PlayerInfo[playerid][pAchievementStatus][20], PlayerInfo[playerid][pAchievementStatus][21], PlayerInfo[playerid][pAchievementStatus][22], PlayerInfo[playerid][pAchievementStatus][23], PlayerInfo[playerid][pAchievementStatus][24],
		PlayerInfo[playerid][pAchievementStatus][25], PlayerInfo[playerid][pAchievementStatus][26], PlayerInfo[playerid][pAchievementStatus][27], PlayerInfo[playerid][pAchievementStatus][28], PlayerInfo[playerid][pAchievementStatus][29],	
		PlayerInfo[playerid][pAchievementStatus][30], PlayerInfo[playerid][pAchievementStatus][31]);
		
	format(szQuery, sizeof(szQuery), 
		"UPDATE `users` SET `AchievementStatus`='%s' WHERE `ID`='%d'", items, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");	
	return true;
}
function Info(playerid, gift, hard) {
	gString[0] = EOS;
	format(gString, 150, "[+] RPoints and gift points was modified: +%d (total: %s) / +%d (total: %s).", hard, FormatNumbers(PlayerInfo[playerid][pHpoints]), gift, FormatNumbers(PlayerInfo[playerid][pGiftPoints]));
	SendClientMessage(playerid, COLOR_GREEN, gString);
	format(gString, 150, "congratulations!~n~you received ~p~~h~%d ~w~~h~and ~y~~h~%d gift points~n~total: ~r~~h~%s RPoints ~w~~h~and ~r~%s gift points", hard, gift, FormatNumbers(PlayerInfo[playerid][pHpoints]), FormatNumbers(PlayerInfo[playerid][pGiftPoints]));
	PlayerTextDrawSetString(playerid, InfoPTD, gString);
	PlayerTextDrawShow(playerid, InfoPTD);
	TimerInfo[playerid] = gettime()+6;
	return true;
}
function finishAchievement(playerid, id) {
	if(PlayerInfo[playerid][pAchievementStatus][id] == 1) return true;
	PlayerInfo[playerid][pAchievementStatus][id] = 1;
	SaveAchievements(playerid);

	new string[256], money = 25000 + random(5000);
	new hp = 30 + random(30);
	new gp = 5 + random(15);
	GivePlayerCash(playerid, 1, money);
	PlayerInfo[playerid][pExp] ++;
	Update(playerid, pRP);
	
	format(string, sizeof(string), "(Achievements): {FFFFFF}Chuc mung! Realizarea '%s' a fost deblocata.", achievementNames(id));
	SCM(playerid, 0x87E32BFF, string);
			
	format(string, sizeof(string), "~n~Realizare deblocata!~n~~y~\"%s\"~w~~h~~n~Ban nhan duoc: $%d si 1 respect point.~n~", achievementNames(id), money);
	PlayerTextDrawSetString(playerid, AchivPTD[0], string);
	PlayerTextDrawShow(playerid, AchivPTD[0]);
	TextDrawShowForPlayer(playerid, AchivTD[0]);
	TextDrawShowForPlayer(playerid, AchivTD[1]);
	PlayerInfo[playerid][pHpoints] += hp;
	PlayerInfo[playerid][pGiftPoints] += gp;
	if(PlayerInfo[playerid][pGiftPoints] > 500) PlayerInfo[playerid][pGiftPoints] = 500;
	Update(playerid, pGiftPointsx);
	Update(playerid, pHpointsx);
	Info(playerid, gp, hp);
	SetTimerEx("HideTDAchiv", 10000, false, "i", playerid);
	return true;
}
function HideTDAchiv(playerid) {
	PlayerTextDrawHide(playerid, AchivPTD[0]);
	TextDrawHideForPlayer(playerid, AchivTD[0]);
	TextDrawHideForPlayer(playerid, AchivTD[1]);
	return true;
}
function UpdateVar2(playerid, varname[], amount) {
	if(playerid == INVALID_PLAYER_ID) return true;
	new query[256];
	format(query, sizeof(query), "UPDATE `users` SET `%s`=`%s`+1 WHERE `ID`='%d'", varname, varname, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, query, "", "");
	return true;
}
function UpdateVar3(playerid, varname[]) {
	if(playerid == INVALID_PLAYER_ID) return true;
	new query[256];
	format(query, sizeof(query), "UPDATE `users` SET `%s`=`%s`+1 WHERE `ID`='%d'", varname, varname, playerid);
	mysql_tquery(SQL, query, "", "");
	return true;
}
function OpenCells() {
	new Float: Pos[3];
	for(new i = 0; i < 12; i++) {
		GetDynamicObjectPos(JailGate[i], Pos[0], Pos[1], Pos[2]);
		MoveDynamicObject(JailGate[i], Pos[0], Pos[1], Pos[2]-5, 2);
	}
	return true;
}
function CloseCells() {
	new Float: Pos[3];
	for(new i = 0; i < 12; i++) {
		GetDynamicObjectPos(JailGate[i], Pos[0], Pos[1], Pos[2]);
		MoveDynamicObject(JailGate[i], Pos[0], Pos[1], 1770.986938, 2);
	}
	return true;
}
function LVPDGates(id) {
	switch(id) {
		case 1: MoveDynamicObject(gatelvpd[0], 2293.85132, 2497.67554, 4.53215, 5);
		case 2: MoveDynamicObject(gatelvpd[1], 2335.20093, 2443.69922, 7.23391, 5);
		case 3: MoveDynamicObject(gatelvpd[2], 2238.21460, 2450.26953, 10.69610,  1, 0.00000, 90.00000, 90.00000);		
	}
	return true;
}
function Ranked(playerid) {
	new score = PlayerInfo[playerid][pArenaStats][0]-PlayerInfo[playerid][pArenaStats][1];
	if(score == 30) return true;
	if(score == 60) return true;
	if(score == 90) return true;
	if(score == 120) return true;
	if(score == 150) return true;
	if(score == 180) return true;
	if(score == 210) return true;
	if(score == 230) return true;
	if(score == 260) return true;
	if(score == 290) return true;
	if(score == 320) return true;
	if(score == 350) return true;
	if(score == 380) return true;
	if(score == 410) return true;											
	return false;
}	
function Deranked(playerid) {
	new score = PlayerInfo[playerid][pArenaStats][0]-PlayerInfo[playerid][pArenaStats][1];
	score+=1;
	if(score == 30) return true;
	if(score == 60) return true;
	if(score == 90) return true;
	if(score == 120) return true;
	if(score == 150) return true;
	if(score == 180) return true;
	if(score == 210) return true;
	if(score == 230) return true;
	if(score == 260) return true;
	if(score == 290) return true;
	if(score == 320) return true;
	if(score == 350) return true;
	if(score == 380) return true;
	if(score == 410) return true;											
	return false;
}	
task SyncUp[60000]() {
	new query[256], tmphour, tmpminute, hour, Year, Month, Day, minn, tmpsecond, sec;
	GetFMembers();
	GClanMembers();
	gettime(hour,minn,sec);
	gettime(tmphour, tmpminute, tmpsecond);
	getdate(Year, Month, Day);	
	PayDay(false);

	if(tmpminute == 00 || tmpminute == 10 || tmpminute == 20 || tmpminute == 30 || tmpminute == 40 || tmpminute == 50) OpenCells();
	else CloseCells();
	new string[256];
	if(Iter_Count(Player) >= ServerBonus) {
		ServerBonus += 15;
		new premiums[40];
		for(new i = 0; i < MAX_PLAYERS; i++) {
			switch(ServerPremium) {
				case 0: { 
					premiums = "30 Premium Points"; 
					PlayerInfo[i][pPremiumPoints] += 10;
					Update(i, pPremiumPointsx);
				}
				case 1: { 
					premiums = "200 RPoints"; 
					PlayerInfo[i][pHpoints] += 200;
					Update(i, pHpointsx);
				}
				case 2: { 
					premiums = "100 Gift Points"; 
					PlayerInfo[i][pGiftPoints] += 100;
					Update(i, pGiftPointsx);
				}
				case 3: { 
					premiums = "5 Respect Points"; 
					PlayerInfo[i][pExp] += 5;
					Update(i, pRP);
				}
			}
		}
		format(string, sizeof(string), "Server Bonus: {FFFFFF}Ban nhan duoc %s din partea server-ului", premiums);
		SCMTA(COLOR_NICEGREEN, string);
		ServerPremium = random(3);
		switch(ServerPremium) {
			case 0: { premiums = "30 Premium Points"; }
			case 1: { premiums = "200 RPoints"; }
			case 2: { premiums = "100 Gift Points"; }
			case 3: { premiums = "5 Respect Points"; }
		}
		format(string, sizeof(string), "Server Bonus: {FFFFFF}Urmatorul bonus va fi la %d jucatori conectati si consta in %s", ServerBonus, premiums);
		SCMTA(COLOR_NICEGREEN, string);
	}

	FixHour(tmphour);
	WantedTime2();
	
	tmphour = shifthour;
	if((tmphour > ghour) || (tmphour == 0 && ghour == 23)) {	
		if(hour == 00 && tmpminute == 0) {		
			ResetQuest();
			if(Day == 1) {
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `HoursMonth`='0'");
				mysql_tquery(SQL, query, "", "");	
			
			}
	
			for(new i = 0; i < MAX_CLANS; i++) {
				if(ClanInfo[i][clDays] > 0) {
					ClanInfo[i][clDays] --;
					mysql_format(SQL, query, sizeof(query), "UPDATE `clans` SET `Days`='%d' WHERE `ID`='%d'", ClanInfo[i][clDays], i);
					mysql_tquery(SQL, query, "", "");
					if(ClanInfo[i][clDays] == 0) RemoveClan(i);		
				}
			}
			
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Days`=`Days`+1 WHERE `Member`>'0'");
			mysql_tquery(SQL, query, "", "");
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `ClanDays`=`ClanDays`+1 WHERE `Clan`>'0'");
			mysql_tquery(SQL, query, "", "");		
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `DayLogin`='0',`DayHours`='0',`DailyLogin`='0'");
			mysql_tquery(SQL, query, "", "");
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `HelpedPlayersToday`='0' WHERE `Helper`>='1'");
			mysql_tquery(SQL ,query, "", "");
			
			foreach(new i: Player) {
				if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
					if(PlayerInfo[i][pDailyLogin] == 1) PlayerInfo[i][pDailyLogin] = 0;
					if(PlayerInfo[i][pMember] != 0) PlayerInfo[i][pDays] ++;
					
					PlayerInfo[i][pUsed] = 1;
					if(PlayerInfo[i][pHelper] != 0) PlayerInfo[i][pHelpedPlayersToday] = 0;
				}
			}	
		}
		ghour = tmphour;
		if(realtime) SetWorldTimeEx(hour);
	}
	return true;
}
IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY) {
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) return true;
	return false;
}

function IsPlayerInTurf(playerid, turfid) {
	if(turfid == -1) return false;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY]) return true;
	return false;
}
function GetPlayerTurf(playerid) {
	for(new i = 0; i < sizeof(Turfs); i++) {
		if(IsPlayerInTurf(playerid, i)) return i;
	}
	return -1;
}
task Production[300000]() {
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerDrunk[i] > 0) {
				PlayerDrunk[i] = 0;
			 	PlayerDrunkTime[i] = 0;
				SetPlayerDrunkLevel(i, 0);
			}
			if(PlayerInfo[i][pPayDay] < 6) PlayerInfo[i][pPayDay] += 1;
		}
	}
	return true;
}
timer ResetPD[60000]() return Paydaydat = 0;

function UpdatePlayer(playerid) {
	ResetMoneyBar(playerid);
	switch(StoreMoney[playerid]) {
		case 0: UpdateMoneyBar(playerid, MoneyMoney[playerid]);
		case 1: UpdateMoneyBar(playerid, MoneyMoney[playerid]+1000000000);
		default: UpdateMoneyBar(playerid, 2147483647);
	}
	return true;
}
function PayDay(bool: Types) {
	new hour,minn,sec, year, month, day, interest, rent; gString[0] = EOS;
	getdate(year, month, day);
	gettime(hour,minn,sec);
	if((minn == 0 && Paydaydat == 0) || Types) {
		defer ResetPD();
		Paydaydat = 1;
		defer ScadeLicentele();
		if(hour == 0) {
			foreach(new idd: PersonalVehicles) CarInfo[idd][Dayss] ++;
			mysql_tquery(SQL, "UPDATE cars SET days = days+1");
			ServerBonus = 15;
		}

		foreach(new i: Player) {
			if(IsPlayerLogged[i]) {	
				if(PlayerInfo[i][pHouse] != 999) {
					rent = 250 * PlayerInfo[i][pLevel];
					HouseInfo[PlayerInfo[i][pHouse]][hTakings] += rent;
				}
				new tmpintrate;
				if(PlayerInfo[i][pPremiumAccount] == 1) {
					tmpintrate = 2;
					PlayerInfo[i][pPayDayHad] += 1;
					if(PlayerInfo[i][pPayDayHad] >= 5) {
						PlayerInfo[i][pExp]++;
						PlayerInfo[i][pPayDayHad] = 0;
					}
					new bonus = PlayerInfo[i][pPayCheck] / 2;
					PlayerInfo[i][pPayCheck] += bonus;
				}
				else tmpintrate = 1;
				Tax += TaxValue;
				new checks = PlayerInfo[i][pLevel]*2500+random(3000);
				if(PlayerInfo[i][pDailyLogin] == 0) {
					checks += checks*2;
					SCM(i, COLOR_GOLD, "Daily Login: Ban nhan duoc de doua ori mai multe respect points si bani pentru primul tau Payday de astazi.");
					PlayerInfo[i][pExp] ++;
				}
				GivePlayerCash(i, 1, checks);
				interest = (PlayerInfo[i][pAccount]/1781)*(tmpintrate);
				if(PlayerInfo[i][pDailyLogin] == 0) interest = interest*2;
				if(PlayerInfo[i][pDailyLogin] == 0) PlayerInfo[i][pExp] += 2;
				else PlayerInfo[i][pExp] += 1;
				UpdateProgress(i);

				GivePlayerBank(i, interest+1000);
				PlayerInfo[i][pPetPoints] += 30;
				Update(i, pPetPointsx);
				Update(i, pBankx);
				Update(i, pMBankx);
				if(PlayerInfo[i][pPetStatus] == 1) {
					GivePlayerCash(i, 1, PlayerInfo[i][pPetLevel] * 70000);
					format(gString, sizeof(gString), "Pet Benefits: You got +$%s.", FormatNumber(PetMoney*PlayerInfo[i][pPetLevel]));
				}
				Update(i, pRP);

				PlayerInfo[i][pConnectTime] += PlayerInfo[i][pSeconds]/3600;
				if(PlayerInfo[i][pSeconds] >= 1800) {
					new query[180];
					mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `DayHours`=`DayHours`+1 WHERE `ID`='%d'", PlayerInfo[i][pSQLID]);
					mysql_tquery(SQL, query, "", "");
					mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `HoursMonth`=`HoursMonth`+1 WHERE `ID`='%d'", PlayerInfo[i][pSQLID]);
					mysql_tquery(SQL, query, "", "");
				}
				
				if(PlayerInfo[i][pDailyLogin] == 0) {
					PlayerInfo[i][pDailyLogin] = 1;
					UpdateVar(i, "DailyLogin", 1);
				}
				if(PlayerInfo[i][pShowBanca] == 1) {
					format(gString, 45, "$%s", GetBankMoney(i));
					PlayerTextDrawSetString(i, BancaTD, gString);
				}
				PlayerInfo[i][pSeconds] = 0;
				PlayerInfo[i][pHpoints] += 20;
				PlayerInfo[i][pGiftPoints] += 20;
				if(PlayerInfo[i][pGiftPoints] > 500) PlayerInfo[i][pGiftPoints] = 500;
				Update(i, pGiftPointsx);
				Update(i, pHpointsx);
				TimerPayDay[i] = gettime()+7;
				Connected[i] = 0;
				Info(i, 20, 20);
			}
		}
		if(hour == 21) {
			new gold = 1 + random(4);
			new money = 10000 + random(5000);
			for(new h = 0; h < MAX_CLANS; h++) {
				if(strlen(ClanInfo[h][clName]) != 0) {
					if(GetClanTurfs(h) >= 10) {
						foreach(new i: Player) {
							if(PlayerInfo[i][pClan] == h && h != 0) {
								PlayerInfo[i][pPremiumPoints] += gold;
								Update(i, pPremiumPointsx);
								GivePlayerCash(i, 1, money);
								format(gString, sizeof(gString), "Ban nhan duoc %d Premium Points si $%s deoarece clanul tau are peste 10 teriotrii.", gold, FormatNumber(money));
								SCM(i, COLOR_MONEY, gString);
							}
						}				
					}
				}
			}		
		}
		if(RestartPayday == 1) {
			SCMTA(COLOR_CLIENT, "Server-ul a fost restartat! Va rugam sa reveniti.");
			GameModeExit();
		}	
	}
	return true;
}
timer ScadeLicentele[4000]() {
	foreach(new i: Player) {
		if(IsPlayerLogged[i]) {
			if(PlayerInfo[i][pCarLicT] > 0) PlayerInfo[i][pCarLicT] -= 1;
			if(PlayerInfo[i][pFlyLicT] > 0) PlayerInfo[i][pFlyLicT] -= 1;
			if(PlayerInfo[i][pBoatLicT] > 0) PlayerInfo[i][pBoatLicT] -= 1;
			if(PlayerInfo[i][pGunLicT] > 0) {
				PlayerInfo[i][pGunLicT] -= 1;
				if(PlayerInfo[i][pGunLicT] == 0) ResetWeapons(i);
			}
			if(PlayerInfo[i][pCarLic] == 1 && PlayerInfo[i][pCarLicT] == 0) PlayerInfo[i][pCarLic] = 0;
			if(PlayerInfo[i][pFlyLic] == 1 && PlayerInfo[i][pFlyLicT] == 0) PlayerInfo[i][pFlyLic] = 0;
			if(PlayerInfo[i][pBoatLic] == 1 && PlayerInfo[i][pBoatLicT] == 0) PlayerInfo[i][pBoatLic] = 0;
			if(PlayerInfo[i][pGunLic] == 1 && PlayerInfo[i][pGunLicT] == 0) PlayerInfo[i][pGunLic] = 0;
			
			if(PlayerInfo[i][pRob] < 20)  PlayerInfo[i][pRob]++;
			if(PlayerInfo[i][pFpunish] > 0) PlayerInfo[i][pFpunish]--;
			if(PlayerInfo[i][pCarLicS] > 0) PlayerInfo[i][pCarLicS] --;
			if(PlayerInfo[i][pGunLicS] > 0) PlayerInfo[i][pGunLicS] --;
			if(PlayerInfo[i][pFlyLicS] > 0) PlayerInfo[i][pFlyLicS] --;
			if(PlayerInfo[i][pBoatLicS] > 0) PlayerInfo[i][pBoatLicS] --;			
			if(IsACop(i)) {
				if(PlayerInfo[i][pLawyer] < 10) PlayerInfo[i][pLawyer] += 1;
			}	
			if(PlayerInfo[i][pEscapePoints] < 20) {
				PlayerInfo[i][pEscapePoints] ++;
				UpdateVar(i, "EscapePoints", PlayerInfo[i][pEscapePoints]);			
			}
		}
	}	
	return true;
}
stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);
stock RemovePlayerWeapon(playerid, weaponid);
public RemovePlayerWeapon(playerid, weaponid) {
	new plyWeapons[12] = 0, plyAmmo[12] = 0;
	for(new sslot = 0; sslot != 12; sslot++) {
		new wep, ammo;
		GetPlayerWeaponData(playerid, sslot, wep, ammo);
		if(wep != weaponid && ammo != 0) GetPlayerWeaponData(playerid, sslot, plyWeapons[sslot], plyAmmo[sslot]);
	}
	ResetWeapons(playerid);
	for(new sslot = 0; sslot != 12; sslot++) {
		if(plyAmmo[sslot] != 0) ServerWeapon(playerid, plyWeapons[sslot], plyAmmo[sslot]);
	}
	return true;
}
strtok(const string[], &index) {
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' ')) index++;
	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1))) {
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

public OnRconLoginAttempt(ip[], password[], success) {
	foreach(new i: Player) {
		if(strcmp(GetIP(i), ip, false) != 0)
			continue;

		Kick(i);
		break;
	}
	return true;
}

function OnPlayerRegister(playerid, password[]) {
	new getdata[50], year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(getdata, sizeof(getdata), "%d-%d-%d %d:%d:%d", year, month, day, hour, minute, second);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery),"INSERT INTO `users` (`name`,`password`, `Age`, `Email`, `Model`, `RegisterDate`, `CChar`) VALUES ('%s','%s','%d', '%s', '%d', '%s', '%d')",GetName(playerid), password, PlayerInfo[playerid][pAge], PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pModel], getdata, PlayerInfo[playerid][pChar]);
	mysql_tquery(SQL, gQuery, "", "");
	strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
	return true;
}

function GetVehicleSpeedUp(playerid, carid) {
	new x, m = CarInfo[carid][cMaxSpeed];
	x = CarInfo[carid][cLegendary] ? 300 : m;
	x = CarInfo[carid][cStage] ? StageSpeed[0][CarInfo[carid][cStage]]+x : x;
	return Carspeed(GetPlayerVehicleID(playerid)) < (m-3) || Carspeed(GetPlayerVehicleID(playerid)) > (x-3) ? (true) : (false);
}

function GiveVehicleSpeed(i) {
	if(ServerSystem[11] == 1 || !IsPlayerInAnyVehicle(i)) return true;
	
	new
		vehicleid = GetPlayerVehicleID(i),
		keys,
		Float:vx,
		Float:vy,
		Float:vz,
		carid = FindSpawnID(GetPlayerVehicleID(i))
	;   

	if(GetVehicleSpeedUp(i, carid))
		return true;

	GetPlayerKeys(i, keys, _:vx, _:vx);

	if ((keys & (KEY_VEHICLE_FORWARD | KEY_VEHICLE_BACKWARD | KEY_HANDBRAKE)) == KEY_VEHICLE_FORWARD) {

		GetVehicleVelocity(vehicleid, vx, vy, vz);


		if (vx * vx + vy * vy < g_SpeedThreshold)
			return true;


		vx *= SPEED_MULTIPLIER;
		vy *= SPEED_MULTIPLIER;


		if (vz > 0.04 || vz < -0.04)
			vz -= 0.020;

		SetVehicleVelocity(vehicleid, vx, vy, vz);
	}
	return true;
}
function OnPlayerLoginIn(playerid,password[]) {
	gQuery[0] = EOS;
	format(gQuery, sizeof(gQuery), "SELECT * FROM users WHERE `name`='%s' AND `password`='%s' LIMIT 1", GetName(playerid),password);
   	mysql_tquery(SQL, gQuery, "CheckAccounts", "i", playerid);
	return true;
}

function CheckAccounts(playerid) {
	gString[0] = EOS;
	switch(cache_num_rows()) {
		case 1: {
			new result[300];
			TextDrawHideForPlayer(playerid, LoginTD[0]);
			TextDrawHideForPlayer(playerid, LoginTD[1]);
	 		GameTextForPlayer(playerid, "~g~LOADING...", 3000,3);

			cache_get_value_name(0, "password", PlayerInfo[playerid][pKey], 32);							  								
			cache_get_value_name(0, "PetName", PlayerInfo[playerid][pPetName], 32);						 					
			cache_get_value_name(0, "Email", PlayerInfo[playerid][pEmail], 32);							  					
			cache_get_value_name(0, "Victim", PlayerInfo[playerid][pVictim], 32);							  					
			cache_get_value_name(0, "Accused", PlayerInfo[playerid][pAccused], 32);						  					
			cache_get_value_name(0, "Crime1", PlayerInfo[playerid][pCrime1], 32);						  					
			cache_get_value_name(0, "Crime2", PlayerInfo[playerid][pCrime2], 32);						  					
			cache_get_value_name(0, "Crime3", PlayerInfo[playerid][pCrime3], 32);						  					
			cache_get_value_name(0, "BReason", PlayerInfo[playerid][pBReason], 32);						  					
			cache_get_value_name(0, "BBy", PlayerInfo[playerid][pBBy], 24);		
			
			cache_get_value_name_int(0, "DellayStock", 	DeelayCommand[playerid][17]);					 						
			cache_get_value_name_int(0, "Hidden", 	PlayerInfo[playerid][pHidden]);	   
			cache_get_value_name_int(0, "QuestFinish", 	PlayerInfo[playerid][pQuestFinish]);							 						
			cache_get_value_name_int(0, "Quest", 	PlayerInfo[playerid][pQuest]);							  																			
			cache_get_value_name_int(0, "Manager", 	PlayerInfo[playerid][pManager]);													
			cache_get_value_name_int(0, "Level", 	PlayerInfo[playerid][pLevel]);							  						
			cache_get_value_name_int(0, "Leader", 	PlayerInfo[playerid][pLeader]);							 						
			cache_get_value_name_int(0, "Admin", 	PlayerInfo[playerid][pAdmin]);							  						
			cache_get_value_name_int(0, "Respect", 	PlayerInfo[playerid][pExp]);													
			cache_get_value_name_int(0, "Youtuber", 	PlayerInfo[playerid][pYouTuber]);						   						
			cache_get_value_name_int(0, "Scripter", 	PlayerInfo[playerid][pScripter]);						   						
			cache_get_value_name_int(0, "Backpack", 	PlayerInfo[playerid][pBackpack]);						   						
			cache_get_value_name_int(0, "ShowBanca", 	PlayerInfo[playerid][pShowBanca]);						  						
			cache_get_value_name_int(0, "ShowProgress1", 	PlayerInfo[playerid][pShowProgress][0]);					  						
			cache_get_value_name_int(0, "ShowProgress2", 	PlayerInfo[playerid][pShowProgress][1]);					  						
			cache_get_value_name_int(0, "ShowProgress3", 	PlayerInfo[playerid][pShowProgress][2]);					  				
			cache_get_value_name_int(0, "ShowProgress4", 	PlayerInfo[playerid][pShowProgress][3]);					  													
			cache_get_value_name_int(0, "Tutorial", 	PlayerInfo[playerid][pTutorial]);						   			
			cache_get_value_name_int(0, "PetLevel", 	PlayerInfo[playerid][pPetLevel]);						   			
			cache_get_value_name_int(0, "PetStatus", 	PlayerInfo[playerid][pPetStatus]);						  				
			cache_get_value_name_int(0, "Pet", 	PlayerInfo[playerid][pPet]);												
			cache_get_value_name_int(0, "Credit", 	PlayerInfo[playerid][pCredit]);							 				
			cache_get_value_name_int(0, "DM", 	PlayerInfo[playerid][pDM]);								 						
			cache_get_value_name_int(0, "Vip", 	PlayerInfo[playerid][pVip]);														
			cache_get_value_name_int(0, "Helper", 	PlayerInfo[playerid][pHelper]);							 						
			cache_get_value_name_int(0, "Premium", 	PlayerInfo[playerid][pPremiumAccount]);													
			cache_get_value_name_float(0, "ConnectedTime", 	PlayerInfo[playerid][pConnectTime]);					   						
			cache_get_value_name_int(0, "Sex", 	PlayerInfo[playerid][pSex]);										
			cache_get_value_name_int(0, "Age", 	PlayerInfo[playerid][pAge]);										
			cache_get_value_name_int(0, "Muted", 	PlayerInfo[playerid][pMuted]);							  		
			cache_get_value_name_int(0, "MuteTime", 	PlayerInfo[playerid][pMuteTime]);						   	
			cache_get_value_name_int(0, "Money", 		MoneyMoney[playerid]);							  		
			cache_get_value_name_int(0, "MStore", 		StoreMoney[playerid]);							 		
			cache_get_value_name_int(0, "Bank", 	PlayerInfo[playerid][pAccount]);							   		
			cache_get_value_name_int(0, "MBank", 	PlayerInfo[playerid][pStoreAccount]);							  	
			cache_get_value_name_int(0, "Crimes", 	PlayerInfo[playerid][pCrimes]);							 		
			cache_get_value_name_int(0, "Kills", 	PlayerInfo[playerid][pKills]);							  		
			cache_get_value_name_int(0, "Deaths", 	PlayerInfo[playerid][pDeaths]);							 		
			cache_get_value_name_int(0, "Arrested", 	PlayerInfo[playerid][pArrested]);						   	
			cache_get_value_name_int(0, "WantedDeaths", 	PlayerInfo[playerid][pWantedDeaths]);					   	
			cache_get_value_name_int(0, "Phonebook", 	PlayerInfo[playerid][pPhoneBook]);						  		
			cache_get_value_name_int(0, "WantedLevel", 	PlayerInfo[playerid][pWantedLevel]);								
			cache_get_value_name_int(0, "Job", 	PlayerInfo[playerid][pJob]);										
			cache_get_value_name_int(0, "Paycheck", 	PlayerInfo[playerid][pPayCheck]);						   	
			cache_get_value_name_int(0, "Jailed", 	PlayerInfo[playerid][pJailed]);							 		
			cache_get_value_name_int(0, "JailTime", 	PlayerInfo[playerid][pJailTime]);						   	
			cache_get_value_name_int(0, "Materials", 	PlayerInfo[playerid][pMats]);						  	
			cache_get_value_name_int(0, "Drugs", 	PlayerInfo[playerid][pDrugs]);							  		
			cache_get_value_name_int(0, "Member", 	PlayerInfo[playerid][pMember]);							 		
			cache_get_value_name_int(0, "Rank", 	PlayerInfo[playerid][pRank]);							   	
			cache_get_value_name_int(0, "CChar", 	PlayerInfo[playerid][pChar]);							  	
			cache_get_value_name_int(0, "FWarn", 	PlayerInfo[playerid][pFACWarns]);							  	
			cache_get_value_name_int(0, "FPunish", 	PlayerInfo[playerid][pFpunish]);									
			cache_get_value_name_int(0, "Acceptpoints", 	PlayerInfo[playerid][pLawyer]);					   		
			cache_get_value_name_int(0, "LawSkill", 	PlayerInfo[playerid][pLawSkill]);						   	
			cache_get_value_name_int(0, "DrugsSkill", 	PlayerInfo[playerid][pDrugsSkill]);						 		
			cache_get_value_name_int(0, "StivuitorSkill", 	PlayerInfo[playerid][pStivuitorSkill]);					 		
			cache_get_value_name_int(0, "TruckerSkill", 	PlayerInfo[playerid][pTruckerSkill]);					   	
			cache_get_value_name_int(0, "IceSkill", 	PlayerInfo[playerid][pJackerSkill]);						   		
			cache_get_value_name_int(0, "GarbageSkill", 	PlayerInfo[playerid][pGarbageSkill]);					   	
			cache_get_value_name_int(0, "FarmerSkill", 	PlayerInfo[playerid][pFarmerSkill]);								
			cache_get_value_name_int(0, "FishSkill", 	PlayerInfo[playerid][pFishSkill]);						  		
			cache_get_value_name_int(0, "MatSkill", 	PlayerInfo[playerid][pMatSkill]);						   	
			cache_get_value_name_int(0, "RobSkill", 	PlayerInfo[playerid][pRobSkill]);						   	
			cache_get_value_name_int(0, "Team", 	PlayerInfo[playerid][pTeam]);							   	
			cache_get_value_name_int(0, "Model", 	PlayerInfo[playerid][pModel]);							  		
			cache_get_value_name_int(0, "PhoneNr", 	PlayerInfo[playerid][pPhone]);									
			cache_get_value_name_int(0, "House", 	PlayerInfo[playerid][pHouse]);							  		
			cache_get_value_name_int(0, "Bizz", 	PlayerInfo[playerid][pBizz]);							   	
			cache_get_value_name_int(0, "Rob", 	PlayerInfo[playerid][pRob]);										
			cache_get_value_name_int(0, "CarLicT", 	PlayerInfo[playerid][pCarLicT]);									
			cache_get_value_name_int(0, "CarLic", 	PlayerInfo[playerid][pCarLic]);							 		
			cache_get_value_name_int(0, "FlyLicT", 	PlayerInfo[playerid][pFlyLicT]);									
			cache_get_value_name_int(0, "FlyLic", 	PlayerInfo[playerid][pFlyLic]);							 		
			cache_get_value_name_int(0, "BoatLicT", 	PlayerInfo[playerid][pBoatLicT]);						   	
			cache_get_value_name_int(0, "BoatLic", 	PlayerInfo[playerid][pBoatLic]);									
			cache_get_value_name_int(0, "GunLicT", 	PlayerInfo[playerid][pGunLicT]);									
			cache_get_value_name_int(0, "GunLic", 	PlayerInfo[playerid][pGunLic]);							 		
			cache_get_value_name_int(0, "PayDay", 	PlayerInfo[playerid][pPayDay]);							 		
			cache_get_value_name_int(0, "PayDayHad", 	PlayerInfo[playerid][pPayDayHad]);						  		
			cache_get_value_name_int(0, "Warnings", 	PlayerInfo[playerid][pWarns]);						   		
			cache_get_value_name_int(0, "Rented", 	PlayerInfo[playerid][pRented]);							 		
			cache_get_value_name_int(0, "Fuel", 	PlayerInfo[playerid][pFuel]);							   	
			cache_get_value_name_int(0, "WTalkie", 	PlayerInfo[playerid][pWTalkie]);									
			cache_get_value_name_int(0, "Lighter", 	PlayerInfo[playerid][pLighter]);									
			cache_get_value_name_int(0, "Cigarettes", 	PlayerInfo[playerid][pCigarettes]);						 		
			cache_get_value_name_int(0, "Banned", 	PlayerInfo[playerid][pBanned]);							 		
			cache_get_value_name_int(0, "Radio2", 	PlayerInfo[playerid][pMP3]);							 		
			cache_get_value_name_int(0, "WantedTime", 		WantedTime[playerid]);						 		
			cache_get_value_name_int(0, "HudGen", 	PlayerInfo[playerid][pHudGen]);							 		
			cache_get_value_name_int(0, "id", 	PlayerInfo[playerid][pSQLID]);	 
			 
			new turf;						   	
			cache_get_value_name_int(0, "WarTurf", turf);								
			cache_get_value_name_int(0, "WarKills", 	ucideri[playerid][turf]);						   	
			cache_get_value_name_int(0, "WarDeaths", 	decese[playerid][turf]);						  		
			cache_get_value_name_int(0, "Referral", 	PlayerInfo[playerid][pReferral]);						   	
			cache_get_value_name_int(0, "ReferralRP", 	PlayerInfo[playerid][pReferralRP]);						 		
			cache_get_value_name_int(0, "ReferralMoney", 	PlayerInfo[playerid][pReferralMoney]);					  			
			cache_get_value_name_int(0, "referralp", 	PlayerInfo[playerid][pReferralP]);						  		
			cache_get_value_name_int(0, "BTemp", 	PlayerInfo[playerid][pBTemp]);							  		
			cache_get_value_name_int(0, "BYear", 	PlayerInfo[playerid][pBYear]);							  		
			cache_get_value_name_int(0, "BMonth", 	PlayerInfo[playerid][pBMonth]);							 		
			cache_get_value_name_int(0, "BDay", 	PlayerInfo[playerid][pBDay]);							   	
			cache_get_value_name_int(0, "HardPoints", 	PlayerInfo[playerid][pHpoints]);						 		
			cache_get_value_name_int(0, "JobBoost", 	PlayerInfo[playerid][pJobBoost]);						   	
			cache_get_value_name_int(0, "DailyBonus", 	PlayerInfo[playerid][pDailyBonus]);						 		
			cache_get_value_name_int(0, "ShowJob", 	PlayerInfo[playerid][pShowJob]);									
			cache_get_value_name_int(0, "GiftPoints", 	PlayerInfo[playerid][pGiftPoints]);						 		
			cache_get_value_name_int(0, "NewbieMute", 	PlayerInfo[playerid][pNewbieMute]);						 		
			cache_get_value_name_int(0, "ReportTime", 	PlayerInfo[playerid][pReportTime]);						 		
			cache_get_value_name_int(0, "WTChannel", 		WTChannel[playerid]);						  	
			cache_get_value_name_int(0, "HelpedPlayers", 	PlayerInfo[playerid][pHelpedPlayers]);					  		
			cache_get_value_name_int(0, "HelpedPlayersToday", 	PlayerInfo[playerid][pHelpedPlayersToday]);				 			
			cache_get_value_name_int(0, "ShowFP", 	PlayerInfo[playerid][pShowFP]);							 		
			cache_get_value_name_int(0, "ShowLogo", 	PlayerInfo[playerid][pShowLogo]);						   	
			cache_get_value_name_int(0, "ShowCeas", 	PlayerInfo[playerid][pShowCeas]);						   	
				
			cache_get_value_name_int(0, "GoldPoints", 	PlayerInfo[playerid][pPremiumPoints]);						 		
			cache_get_value_name_int(0, "NewbieChat", 		NewbieChat[playerid]);						 			
			cache_get_value_name_int(0, "TogLC", 		toglc[playerid]);							  		
			cache_get_value_name_int(0, "TogFC", 		gFam[playerid]);							  			
			cache_get_value_name_int(0, "TogWT", 		WTToggle[playerid]);							  			
			cache_get_value_name_int(0, "HidePM", 		HidePM[playerid]);							 			
			cache_get_value_name_int(0, "TogNews", 		gNews[playerid]);									
			cache_get_value_name_int(0, "TogLicitatie", 		toglicitatie[playerid]);					   			
			cache_get_value_name_int(0, "TogClan", 		togclan[playerid]);										
			cache_get_value_name_int(0, "TogVip", 		togvip[playerid]);							 			
			cache_get_value_name_int(0, "TogPremium", 		togpremium[playerid]);						 			
			cache_get_value_name_int(0, "TogEvent", 		togevent[playerid]);						   			
			cache_get_value_name_int(0, "TogDing", 		togding[playerid]);										
			cache_get_value_name_int(0, "TogSurf", 		togsurf[playerid]);										
			cache_get_value_name_int(0, "TogRaport", 		tograport[playerid]);						  		
			cache_get_value_name_int(0, "TogAlert", 		togalert[playerid]);						   			
			cache_get_value_name_int(0, "TogJob", 		togjob[playerid]);							 			
			cache_get_value_name_int(0, "TogRainBow", 		tograinbow[playerid]);						 			
			cache_get_value_name_int(0, "TogFind", 		togfind[playerid]);										
			cache_get_value_name_int(0, "PhoneOnline", 		PhoneOnline[playerid]);									
			cache_get_value_name_int(0, "Clan", 	PlayerInfo[playerid][pClan]);							   		
			cache_get_value_name_int(0, "Tag", 	PlayerInfo[playerid][pTag]);											
			cache_get_value_name_int(0, "ClanRank", 	PlayerInfo[playerid][pClanRank]);						   		
			cache_get_value_name_int(0, "ClanWarn", 	PlayerInfo[playerid][pClanWarn]);						   		
			cache_get_value_name_int(0, "ClanDays", 	PlayerInfo[playerid][pClanDays]);						   		
			cache_get_value_name_int(0, "InvalidCommands", 	PlayerInfo[playerid][pInvalidCommands]);								
			cache_get_value_name_int(0, "Commands", 	PlayerInfo[playerid][pCommands][0]);						   			
			cache_get_value_name_int(0, "Commands2", 	PlayerInfo[playerid][pCommands][1]);						  			
			cache_get_value_name_int(0, "Commands3", 	PlayerInfo[playerid][pCommands][2]);						  			
			cache_get_value_name_int(0, "Commands4", 	PlayerInfo[playerid][pCommands][3]);						  			
			cache_get_value_name_int(0, "Commands5", 	PlayerInfo[playerid][pCommands][4]);						  	
			
			new Crates[100];
			cache_get_value_name(0, "Crates", result); format(Crates, 64, result);
			sscanf(Crates, "p<|>iiiii", PlayerInfo[playerid][pCrates][0], PlayerInfo[playerid][pCrates][1], PlayerInfo[playerid][pCrates][2], PlayerInfo[playerid][pCrates][3], PlayerInfo[playerid][pCrates][4]);
		   	
		   	new Tickete[64];
			cache_get_value_name(0, "Tickete", result); format(Tickete, 64, result);
			sscanf(Tickete, "p<|>ii", PlayerInfo[playerid][pTickete][0], PlayerInfo[playerid][pTickete][1]);
			
			new voucherss[30];
			cache_get_value_name(0, "Voucher", result); format(voucherss, 20, result);
			sscanf(voucherss, "p<|>iii", PlayerInfo[playerid][pVoucher][0], PlayerInfo[playerid][pVoucher][1], PlayerInfo[playerid][pVoucher][2]);
		   
			new questsvar[1028];
			cache_get_value_name(0, "SpecialQuest", result); format(questsvar, 256, result);
			sscanf(questsvar, "p<|>iiiiiiiiiiiiiiiiiiiiiiiii", 
			PlayerInfo[playerid][pSpecialQuest][0], PlayerInfo[playerid][pSpecialQuest][1], PlayerInfo[playerid][pSpecialQuest][2], PlayerInfo[playerid][pSpecialQuest][3], PlayerInfo[playerid][pSpecialQuest][4],
			PlayerInfo[playerid][pSpecialQuest][5], PlayerInfo[playerid][pSpecialQuest][6], PlayerInfo[playerid][pSpecialQuest][7], PlayerInfo[playerid][pSpecialQuest][8], PlayerInfo[playerid][pSpecialQuest][9],
			PlayerInfo[playerid][pSpecialQuest][10], PlayerInfo[playerid][pSpecialQuest][11], PlayerInfo[playerid][pSpecialQuest][12], PlayerInfo[playerid][pSpecialQuest][13], PlayerInfo[playerid][pSpecialQuest][14],
			PlayerInfo[playerid][pSpecialQuest][15], PlayerInfo[playerid][pSpecialQuest][16], PlayerInfo[playerid][pSpecialQuest][17], PlayerInfo[playerid][pSpecialQuest][18], PlayerInfo[playerid][pSpecialQuest][19],
			PlayerInfo[playerid][pSpecialQuest][20], PlayerInfo[playerid][pSpecialQuest][21], PlayerInfo[playerid][pSpecialQuest][22], PlayerInfo[playerid][pSpecialQuest][23], PlayerInfo[playerid][pSpecialQuest][24]);

			new skin[64];
			cache_get_value_name(0, "Skin", result); format(skin, 64, result);
			sscanf(skin, "p<|>iiiiiiiiii", PlayerInfo[playerid][pSkins][0], PlayerInfo[playerid][pSkins][1], PlayerInfo[playerid][pSkins][2], PlayerInfo[playerid][pSkins][3], PlayerInfo[playerid][pSkins][4],
			PlayerInfo[playerid][pSkins][5], PlayerInfo[playerid][pSkins][6], PlayerInfo[playerid][pSkins][7], PlayerInfo[playerid][pSkins][8], PlayerInfo[playerid][pSkins][9]);
			
			new guns[32];
			cache_get_value_name(0, "Guns", guns);
			sscanf(guns, "p<|>iiiii", PlayerInfo[playerid][pGuns][0], PlayerInfo[playerid][pGuns][1], PlayerInfo[playerid][pGuns][2], PlayerInfo[playerid][pGuns][3], PlayerInfo[playerid][pGuns][4]);

			new achivar[256];
			cache_get_value_name(0, "AchievementStatus", result); format(achivar, 256, result);
			sscanf(achivar, "p<|>iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", 
			PlayerInfo[playerid][pAchievementStatus][0], PlayerInfo[playerid][pAchievementStatus][1], PlayerInfo[playerid][pAchievementStatus][2], PlayerInfo[playerid][pAchievementStatus][3], PlayerInfo[playerid][pAchievementStatus][4],
			PlayerInfo[playerid][pAchievementStatus][5], PlayerInfo[playerid][pAchievementStatus][6], PlayerInfo[playerid][pAchievementStatus][7], PlayerInfo[playerid][pAchievementStatus][8], PlayerInfo[playerid][pAchievementStatus][9],
			PlayerInfo[playerid][pAchievementStatus][10], PlayerInfo[playerid][pAchievementStatus][11], PlayerInfo[playerid][pAchievementStatus][12], PlayerInfo[playerid][pAchievementStatus][13], PlayerInfo[playerid][pAchievementStatus][14],
			PlayerInfo[playerid][pAchievementStatus][15], PlayerInfo[playerid][pAchievementStatus][16], PlayerInfo[playerid][pAchievementStatus][17], PlayerInfo[playerid][pAchievementStatus][18], PlayerInfo[playerid][pAchievementStatus][19],		
			PlayerInfo[playerid][pAchievementStatus][20], PlayerInfo[playerid][pAchievementStatus][21], PlayerInfo[playerid][pAchievementStatus][22], PlayerInfo[playerid][pAchievementStatus][23], PlayerInfo[playerid][pAchievementStatus][24],
			PlayerInfo[playerid][pAchievementStatus][25], PlayerInfo[playerid][pAchievementStatus][26], PlayerInfo[playerid][pAchievementStatus][27], PlayerInfo[playerid][pAchievementStatus][28], PlayerInfo[playerid][pAchievementStatus][29],	
			PlayerInfo[playerid][pAchievementStatus][30], PlayerInfo[playerid][pAchievementStatus][31]);
			
			cache_get_value_name_int(0, "SpawnChange", 		SpawnChange[playerid]);				 
			cache_get_value_name_float(0, "Seconds", 	PlayerInfo[playerid][pSeconds]);				   
			cache_get_value_name_int(0, "Seconds", 		Connected[playerid]);					 
			cache_get_value_name_int(0, "Used", 	PlayerInfo[playerid][pUsed]);						
			cache_get_value_name_int(0, "RacePlace1", 	PlayerInfo[playerid][pRacePlace][0]);				  
			cache_get_value_name_int(0, "RacePlace2", 	PlayerInfo[playerid][pRacePlace][1]);				  
			cache_get_value_name_int(0, "RacePlace3", 	PlayerInfo[playerid][pRacePlace][2]);				  
			cache_get_value_name_int(0, "RacePlace4", 	PlayerInfo[playerid][pRacePlace][3]);				  
			cache_get_value_name_int(0, "ArenaKills", 	PlayerInfo[playerid][pArenaStats][0]);				  
			cache_get_value_name_int(0, "ArenaDeaths", 	PlayerInfo[playerid][pArenaStats][1]);				 	
			cache_get_value_name_int(0, "PaintKills1", 	PlayerInfo[playerid][pPaintKills][0]);			   
			cache_get_value_name_int(0, "PaintKills2", 	PlayerInfo[playerid][pPaintKills][1]);			   
			cache_get_value_name_int(0, "PaintKills3", 	PlayerInfo[playerid][pPaintKills][2]);			   
			cache_get_value_name_int(0, "PaintDeaths1", 	PlayerInfo[playerid][pPaintDeaths][2]);			  
			cache_get_value_name_int(0, "PaintDeaths2", 	PlayerInfo[playerid][pPaintDeaths][2]);			  
			cache_get_value_name_int(0, "PaintDeaths3", 	PlayerInfo[playerid][pPaintDeaths][2]);			  
			cache_get_value_name_int(0, "CarLicS", 	PlayerInfo[playerid][pCarLicS]);				   
			cache_get_value_name_int(0, "BoatLicS", 	PlayerInfo[playerid][pBoatLicS]);				  
			cache_get_value_name_int(0, "FlyLicS", 	PlayerInfo[playerid][pFlyLicS]);				   
			cache_get_value_name_int(0, "GunLicS", 	PlayerInfo[playerid][pGunLicS]);				   
			cache_get_value_name_int(0, "ShowDMG", 	PlayerInfo[playerid][pShowDMG]);					 
			cache_get_value_name_int(0, "Slot", 	PlayerInfo[playerid][pSlot]);						
			cache_get_value_name_int(0, "DailyMission", 	PlayerInfo[playerid][pDailyMission][0]);				
			cache_get_value_name_int(0, "DailyMission2", 	PlayerInfo[playerid][pDailyMission][1]);			   	
			cache_get_value_name_int(0, "NeedProgress1", 	PlayerInfo[playerid][pNeedProgress][0]);			   	
			cache_get_value_name_int(0, "NeedProgress2", 	PlayerInfo[playerid][pNeedProgress][1]);			   	
			cache_get_value_name_int(0, "Progress", 	PlayerInfo[playerid][pProgress][0]);					
			cache_get_value_name_int(0, "Progress2", 	PlayerInfo[playerid][pProgress][1]);				   
			cache_get_value_name_int(0, "PizzaSkill", 	PlayerInfo[playerid][pPizzaSkill]);				  
			cache_get_value_name_int(0, "CurierSkill", 	PlayerInfo[playerid][pCurierSkill]);				 
			cache_get_value_name_int(0, "GasCan", 	PlayerInfo[playerid][pGasCan]);					  
			cache_get_value_name_int(0, "Glasses", 	PlayerInfo[playerid][pGlasses]);					 
			cache_get_value_name_int(0, "ShowGlasses", 	PlayerInfo[playerid][pShowGlasses]);				 
			cache_get_value_name_int(0, "ShowHP", 	PlayerInfo[playerid][pShowHP]);					  
			cache_get_value_name_int(0, "ShowAP", 	PlayerInfo[playerid][pShowAP]);					  
			cache_get_value_name_int(0, "Pin", 	PlayerInfo[playerid][pPin]);											
			cache_get_value_name_int(0, "Color", 	PlayerInfo[playerid][pColor]);					   
			cache_get_value_name_int(0, "Days", 	PlayerInfo[playerid][pDays]);						
			cache_get_value_name_int(0, "PilotSkill", 	PlayerInfo[playerid][pPilotSkill]);				  
			cache_get_value_name_int(0, "EscapePoints", 	PlayerInfo[playerid][pEscapePoints]);					
			cache_get_value_name_int(0, "Hat", 	PlayerInfo[playerid][pHat]);						 
			cache_get_value_name_int(0, "Coins", 	PlayerInfo[playerid][pCoins]);					   
			cache_get_value_name_int(0, "ShowHat", 	PlayerInfo[playerid][pShowHat]);					 
			cache_get_value_name_int(0, "DailyLogin", 	PlayerInfo[playerid][pDailyLogin]);				  
			cache_get_value_name_int(0, "Crash", 	PlayerInfo[playerid][pCrash]);					   
			cache_get_value_name_int(0, "AJail", 	PlayerInfo[playerid][pAJail]);					   
			cache_get_value_name_int(0, "HW", 	PlayerInfo[playerid][pHW]);						  
			cache_get_value_name_int(0, "AW", 	PlayerInfo[playerid][pAW]);						  
			cache_get_value_name_int(0, "LW", 	PlayerInfo[playerid][pLW]);						  

			WarKills[playerid] = ucideri[playerid][turf];
			WarDeaths[playerid] = decese[playerid][turf];
			LoadPlayerCars(playerid);	
			login[playerid] = -1;
		}
		case 0: {
			if(gPlayerLogTries[playerid] == 0) 
				return KickEx(playerid);
			Dialog_Show(playerid, DIALOG_LOGIN3,DIALOG_STYLE_PASSWORD,"Logare", "Welcome to the "SERVER_NAME" RPG Server.\n\nPlease enter you password below!","Login","Quit");
		 	gPlayerLogTries[playerid] --;
			format(gString, sizeof(gString), "Incorrect password. You have %d remaining login attemps left.", gPlayerLogTries[playerid]);
			SCM(playerid, COLOR_WARNING, gString);		
			return true;		
		}
	}
	if(Iter_Contains(LoginQueue[0], playerid)) {
		Iter_Remove(LoginQueue[0], playerid);
		if(Iter_Count(LoginQueue[1]) > 0 && Iter_Count(LoginQueue[0]) <= MAX_LOGIN) {
			new last = Iter_First(LoginQueue[1]);
			Iter_Remove(LoginQueue[1], last);
			Iter_Add(LoginQueue[0], last);
			GameTextForPlayer(last,"  ", 100, 3);
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT * FROM `users` WHERE `name`='%s' LIMIT 1", GetName(last));
			mysql_tquery(SQL, gQuery, "CheckClassIP", "i", last);
		}
	}
	new clanid = PlayerInfo[playerid][pClan];
	if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 0) {
		format(gString, sizeof(gString), "%s%s", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername]);
		SetPlayerName(playerid, gString);
	}
	else if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 1) {
		format(gString, sizeof(gString), "%s%s", PlayerInfo[playerid][pUsername], ClanInfo[clanid][clTag]);
		SetPlayerName(playerid, gString);
	}
	format(gString, sizeof(gString), "~g~~h~+%d%09d", StoreMoney[playerid], MoneyMoney[playerid]);
	switch(PlayerInfo[playerid][pShowBanca]) {
		case 0: {
			PlayerTextDrawSetString(playerid, MoneyTD0, gString);
			PlayerTextDrawShow(playerid, MoneyTD0);
		}
		case 1: {
			PlayerTextDrawSetString(playerid, MoneyTD1, gString);
			PlayerTextDrawShow(playerid, MoneyTD1);
		}
	}
	if(PlayerInfo[playerid][pShowCeas] != 0) PlayerTextDrawShow(playerid, CeasPTD), TextDrawShowForPlayer(playerid, CeasTD);
	TimerMoney[playerid] = gettime()+5;

	SetPlayerToTeamColor(playerid);
	ADeathMessage(playerid, INVALID_PLAYER_ID, 200);
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Status` = '1', `IP`='%s' WHERE `ID`='%d'", ip, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");
	UpdateVar(playerid, "DayLogin", 1);
	IsPlayerLogged[playerid] = 1;
	SpawnPlayer(playerid);
	StopAudioStreamForPlayer(playerid);
	GameTextForPlayer(playerid,"",100,3);
	for(new j = 0; j <= 100; j++) SCM(playerid, COLOR_WHITE, "");

	if(PlayerInfo[playerid][pBTemp] == 1) { TempBanCheck(playerid); return true; }
	if(PlayerInfo[playerid][pBanned] == 1) {
		SCM(playerid, COLOR_WARNING, "Acest cont este banat permanent!");
		format(gString, sizeof(gString), "Ai fost banat de adminul %s.",PlayerInfo[playerid][pBBy]);
		SCM(playerid, COLOR_CLIENT, gString);
		format(gString, sizeof(gString), "Motivul: %s",PlayerInfo[playerid][pBReason]);
		SCM(playerid, COLOR_CLIENT, gString);
		KickEx(playerid);
		SetPlayerCameraPos(playerid, 1183.0143, -965.7394, 129.6071);
		SetPlayerCameraLookAt(playerid, 1183.7214, -965.0270, 129.2470);
		TogglePlayerSpectating(playerid, 0);		
		return true;
	}
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pChar], 2269.6230,-74.9329,26.7724, 1.0, -1, -1, -1, -1, -1, -1);
	if(gTeam[playerid] == 0) gTeam[playerid] = 3;
	else gTeam[playerid] = PlayerInfo[playerid][pTeam];
	
	if(PlayerInfo[playerid][pAdmin] > 0) Iter_Add(PlayerAdmins, playerid);
	if(PlayerInfo[playerid][pHelper] > 0) Iter_Add(PlayerHelpers, playerid);
	if(PlayerInfo[playerid][pVip] != 0 || PlayerInfo[playerid][pAdmin] != 0) Iter_Add(PlayerVips, playerid);
	if(PlayerInfo[playerid][pPremiumAccount] != 0 || PlayerInfo[playerid][pAdmin] != 0) Iter_Add(PlayerPremiums, playerid);
	if(PlayerInfo[playerid][pDailyMission][0] == -1 || PlayerInfo[playerid][pDailyMission][1] == -1) GiveQuest(playerid);
	if(PlayerInfo[playerid][pTutorial] >= 10) {	
		if(PlayerInfo[playerid][pBizz] != 255) finishAchievement(playerid, 2);
		if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) finishAchievement(playerid, 3);
		new years, mounth, days;
		getdate(years,mounth,days);
		CalculateEmails(playerid);
		check_save(playerid);
	}	
	TogglePlayerSpectating(playerid, false);
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	HudProgress[playerid][0] = CreatePlayerProgressBar(playerid, 270.00, 430.00, 105.50, 18.20, 0x00000090, 100.0);	
	UpdateProgress(playerid);

	new year, days, mounth, string2[128];
	format(string2, 256, "Welcome back, %s!", GetName(playerid));
	SCM(playerid, -1, string2);
	getdate(year, mounth, days);
	if(PlayerInfo[playerid][pMember] != 0) {
		if(PlayerInfo[playerid][pDays] == 30) {
			if(PlayerInfo[playerid][pMember] == 11) finishAchievement(playerid, 23);	
			else if(IsACop(playerid)) finishAchievement(playerid, 24);	
			else if(IsAMember(playerid)) finishAchievement(playerid, 25);	
			else finishAchievement(playerid, 22);		
		}
	}
	for(new x = 1; x < 15; x++) {
		switch(x) { 
			case 1,2,3: SetPlayerMapIcon(playerid, 60+x, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ], 30, -1, MAPICON_LOCAL);
			case 4: SetPlayerMapIcon(playerid, 60+x, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ], 62, -1, MAPICON_LOCAL);
			case 5: SetPlayerMapIcon(playerid, 60+x, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ], 58, -1, MAPICON_LOCAL);
			case 6: SetPlayerMapIcon(playerid, 60+x, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ], 61, -1, MAPICON_LOCAL);
			case 10: SetPlayerMapIcon(playerid, 60+x, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ], 59, -1, MAPICON_LOCAL);
		}
	}
	GivePlayerMoney(playerid, GetPlayerCash(playerid));
	if(PlayerInfo[playerid][pShowProgress][2] == 1) for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, GoalTD[i]);
	if(PlayerInfo[playerid][pDailyLogin] == 0) SCM(playerid, COLOR_NICEGREEN, "Daily Login: {FFFFFF}Vei primi de doua ori mai multi bani si puncte de respect la urmatorul payday.");
	if(PlayerInfo[playerid][pLevel] < 5) SCM(playerid, COLOR_NICEGREEN, "Daily Quests: {FFFFFF}Pentru a vedea ce misiuni ai in aceasta zi, foloseste /quests.");
	new string[180], premiums[40];
	if(strlen(PlayerInfo[playerid][pPin]) != 0 && PlayerInfo[playerid][pPinLogged] == 0) {
		IsPin[playerid] = 2;
		SCM(playerid, COLOR_LGREEN, "(PIN): {FFFFFF}Pentru a avea acces la cont trebuie sa introduci contul tau pin!");
		for(new i = 0; i < 7; i++) TextDrawShowForPlayer(playerid, PinTD[i]);
		for(new i = 0; i < 11; i++) PlayerTextDrawShow(playerid, PinPTD[i]);
		SelectTextDraw(playerid, 0xE52C2FFF);
	}
	else SCM(playerid, COLOR_LGREEN, "(PIN): {FFFFFF}Pentru o securitate in plus poti adauga (/addpin).");
	switch(ServerPremium) {
		case 0: { premiums = "30 Premium Points"; }
		case 1: { premiums = "200 RPoints"; }
		case 2: { premiums = "100 Gift Points"; }
		case 3: { premiums = "150 Roll Points"; }
		case 4: { premiums = "5 Respect Points"; }
	}
	format(string, sizeof(string), "{CEED5C}Server Bonus: {FFFFFF}Urmatorul bonus va fi la %d jucatori conectati si consta in %s.", ServerBonus, premiums);
	SCM(playerid, COLOR_WHITE, string);
	if(clanid != 0) {
		format(string, sizeof(string), "{%s}(CMOTD): %s.", ClanInfo[PlayerInfo[playerid][pClan]][clColor], ClanInfo[PlayerInfo[playerid][pClan]][clMotd]);
		MesajLung(playerid, -1, string);
	}
	if(PlayerInfo[playerid][pMember] != 0) {
		if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0)
		{
			new factioninfo[128];
			format(factioninfo,sizeof(factioninfo), "(FMOTD): %s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
			MesajLung(playerid,COLOR_YELLOW,factioninfo);
		}		
	}
	if(PlayerInfo[playerid][pDailyBonus] != days) {
		new
			rp = PlayerInfo[playerid][pLevel] * 1,
			money = PlayerInfo[playerid][pLevel] * 70000 + random(1000);

		GivePlayerCash(playerid, 1, money);
		PlayerInfo[playerid][pExp] += rp;
		Update(playerid, pRP);
		SCM(playerid, COLOR_WHITE, "{CEED5C}Daily Bonus: {FFFFFF}Chuc mung! Ban nhan duoc un bonus pentru ca te-ai connectat pe server.");
		format(string, sizeof(string), "{CEED5C}Daily Bonus: {FFFFFF}Bonusul consta in %d Respect points si $%s.", rp, FormatNumber(money));
		SCM(playerid, -1, string);
		PlayerInfo[playerid][pDailyBonus] = days;
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET `DailyBonus`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pDailyBonus], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,string,"","");
	}
	if(PlayerInfo[playerid][pWantedLevel] > 0 && PlayerInfo[playerid][pTutorial] >= 10) {
		format(string2, sizeof(string2), "Aveai wanted %d inainte sa iesi de pe server.",PlayerInfo[playerid][pWantedLevel]);
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		SCM(playerid, COLOR_LIGHTRED, string2);
	}
	if(PlayerInfo[playerid][pMember] != 0 && PlayerInfo[playerid][pTutorial] >= 10) {
		new disc[84];
		format(disc,sizeof(disc),"(Factiune) %s s-a conectat pe server.",GetName(playerid));
		SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, disc);
	}
	if(PlayerInfo[playerid][pAdmin] > 0) {
		format(gString, sizeof(gString), "HelloBot: Admin %s has just logged in.", GetName(playerid));
		SendAdminMessage(COLOR_LOGS, gString, 1);
	}
	switch(PlayerInfo[playerid][pTutorial]) {
		case 1..2: {
			SCM(playerid, COLOR_LIGHTGOLD, "Mergi la checkpoint marcat pe minimap si tasteaza </exam> pentru a obtine permisul de conducere auto.");
			if(InExamen[playerid] < 1) {
				CP[playerid] = 53;
				SetPlayerCheckpointEx(playerid, 2333.3345,-17.7633,26.4844, 2.0);
			}
		}
		case 3..4: {
			SCM(playerid, COLOR_LIGHTGOLD, "Mergi si achizitioneaza-ti un telefon din magazinul marcat pe minimap.");				
			CP[playerid] = 53;
			SetPlayerCheckpointEx(playerid, 2242.7649,52.7174,26.6671, 2.0);
		}
		case 5..6: {
			SCM(playerid, COLOR_LIGHTGOLD, "Mergi si schimba-ti look-ul la afacerea de tip 'Clothing store' marcata pe minimap.");	
			SCM(playerid, COLOR_LIGHTGOLD, "Pentru a schimba skin-ul tasteaza comanda </clothes> in business. Un meniu iti va aparea pe ecran. Alege un skin.");
			CP[playerid] = 53;
			SetPlayerCheckpointEx(playerid, 2277.7778,51.3101,26.4844, 2.0);
		}
	}
	PlayerInfo[playerid][pTutorial] = 10;
	return true;
}
timer HideTextdraw[8000](playerid) 
	return PlayerTextDrawHide(playerid, InfosTD);

function BroadCast(color,const string[]) return SCMTA(color, string);
function LeaderChat(color,const string[]) {
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pLeader] >= 1 || PlayerInfo[i][pAdmin] >= 1) {
				if(toglc[i] == 0) SCM(i, color, string);
			}
		}
	}
	return true;
}
function SendNewbieMessage2(color,const string[]) {
	new text[180];
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pAdmin] != 0 || PlayerInfo[i][pHelper] != 0) {
				format(text, 256, string);
				SCM(i, color, text);
			}
		}
	}
	return true;
}
function SendNewbieMessage(color,const string[]) {
	new text[180];
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(IsPlayerLogged[i] == 1 && NewbieChat[i] == 0) {
				format(text, 256, string);
				SCM(i, color, text);
			}
		}
	}
	return true;
}
function SendMessage(color,const string[]) {
	new text[180];
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(IsPlayerLogged[i] == 1) {
				if(PlayerInfo[i][pAdmin] == 0) {
					format(text, 256, string);
					SCM(i, color, text);
				}
			}
		}
	}
	printf("%s", string);
	return true;
}
function SendAdminMessage(color,const string[],level) {
	new text[180];
	foreach(new i: PlayerAdmins) {
		if(PlayerInfo[i][pAdmin] >= level) {
			format(text, 256, string);
			SCM(i, color, text);
		}
	}
	printf("%s", string);
	return true;
}
function SendAdminHelperMessage(color, string[]) {

	foreach(new i: PlayerAdmins)
		SCM(i, color, string);

	foreach(new i: PlayerHelpers)
		SCM(i, color, string);

	printf("%s", string);

	return true;
}
function SendIP(color,const string[]) {
	foreach(new i: Player) {
		if(PlayerInfo[i][pAdmin] >= 1) {
			if(togip[i] == 1) SCM(i, color, string);
		}
	}
	return true;
}
function HLChat(color,const string[]) {
	foreach(new i: Player) {
		if(PlayerInfo[i][pHelper] >= 1 && IsPlayerLogged[i] == 1) SCM(i, color, string);
	}
	printf("%s", string);
	return true;
}
function OOCOff(color,const string[]) {
	foreach(new i: Player) {
		if(!gOoc[i]) SCM(i, color, string);
	}
	return true;
}

stock MesajLung(playerid, color, text[]) {
	new string[300], szText1[180], szText2[180];
	if(strlen(text) > 130) {
		strmid(szText1, text, 130, 256);
		strmid(szText2, text, 0, 130);
		format(string, sizeof(string), "%s", szText2);
		SCM(playerid, color, string);
		format(string, sizeof(string), "... %s", szText1);
		SCM(playerid, color, string);
	}
	else SCM(playerid, color, text);
	return true;
}
stock Translate32Bit(&store_money, &more_int, BigInt[]) {
	new value32[25], value64[10], int = 0, rchar[20];
	format(rchar, 20, "%s", BigInt);
	if(strfind(rchar, "-", true) != -1) int = 1;

	switch(int) {
		case 0: {
			if(strlen(BigInt) > 9) {
				strmid(value64, BigInt, 0, strlen(BigInt)-9);
				strmid(value32, BigInt, strlen(BigInt)-9, 25);
				store_money += strval(value64);
				Add64Bit(store_money, more_int, strval(value32));
			}
			else {
				new moneys[25];
				format(moneys, 25, "%d", strval(BigInt));
				Add64Bit(store_money, more_int, strval(moneys));
			}
		}
		case 1: {
			if(strlen(BigInt) > 10) {
				strmid(value64, BigInt, 1, strlen(BigInt)-9);
				strmid(value32, BigInt, strlen(BigInt)-9, 25);
				store_money -= strval(value64);
				Add64Bit(store_money, more_int, -strval(value32));
			}
			else Add64Bit(store_money, more_int, strval(BigInt));		
		}
	}
	return true;
}
stock MesajLung2(color, text[]) {
	new string[300], szText1[180], szText2[180];
	if(strlen(text) > 100) {
		strmid(szText2, text, 0, 100);
		strmid(szText1, text, 100, 256);
		format(string, sizeof(string), "%s", szText2);
		SCMTA(color, string);
		format(string, sizeof(string), "... %s", szText1);
		SCMTA(color, string);
	}
	else SCMTA(color, text);

	return true;
}
function OOCNews(color,string[]) {
	foreach(new i: Player) {
		if(!gNews[i]) SCM(i, color, string);
	}
	return true;
}
function OOCNews2(color,const string[]) {
	foreach(new i: Player) {
		SCM(i, color, string);
	}	
	return true;
}
function SendRadioMessage(member, color, string[]) {
	foreach(new i: Player) {
		if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member) SCM(i, color, string);
		if(SpecFaction[i] == member) SCM(i, color, string);
	}
	return true;
}
function SendTeamMessage(member, color, string[]) {
	foreach(new i: Player) {
		if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member) SCM(i, color, string);
		if(SpecFaction[i] == member) SCM(i, color, string);
	}
	return true;
}
function SendFactionMessage(family, color, string[]) {
	foreach(new i: Player) {
		if(IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family) {
				if(!gFam[i]) MesajLung(i, color, string);
			}
			if(SpecFaction[i] == family) MesajLung(i, color, string);
		}
	}
	return true;
}
function SendTeamBeepMessage(team, color, string[]) {
	foreach(new i: Player) {
		if(gTeam[i] == team) SCM(i, color, string);
	}
	return true;
}
function SendEnemyMessage(color, string[]) {
	foreach(new i: Player) {
		if(gTeam[i] >= 3) SCM(i, color, string);
	}
	return true;
}
StopLoopingAnim(playerid) {
	gPlayerUsingLoopingAnim[playerid] = 0;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
PreloadAnimLib(playerid, animlib[]) ApplyAnimation(playerid,animlib,"Null",0.0,0,0,0,0,0);

function ValidNeonCar(carid) {
	if(GetVehicleModel(carid) == 400 || GetVehicleModel(carid) == 401 || GetVehicleModel(carid) == 402 || GetVehicleModel(carid) == 404 || GetVehicleModel(carid) == 405 || GetVehicleModel(carid) == 406 || GetVehicleModel(carid) == 410 || GetVehicleModel(carid) == 411 || GetVehicleModel(carid) == 412
	|| GetVehicleModel(carid) == 415 || GetVehicleModel(carid) == 419 || GetVehicleModel(carid) == 421 || GetVehicleModel(carid) == 422 || GetVehicleModel(carid) == 426 || GetVehicleModel(carid) == 429 || GetVehicleModel(carid) == 436 || GetVehicleModel(carid) == 439 || GetVehicleModel(carid) == 445
	|| GetVehicleModel(carid) == 451 || GetVehicleModel(carid) == 458 || GetVehicleModel(carid) == 474 || GetVehicleModel(carid) == 475 || GetVehicleModel(carid) == 477 || GetVehicleModel(carid) == 479 || GetVehicleModel(carid) == 480 || GetVehicleModel(carid) == 491 || GetVehicleModel(carid) == 499
	|| GetVehicleModel(carid) == 494 || GetVehicleModel(carid) == 495 || GetVehicleModel(carid) == 502 || GetVehicleModel(carid) == 503 || GetVehicleModel(carid) == 506 || GetVehicleModel(carid) == 507 || GetVehicleModel(carid) == 516 || GetVehicleModel(carid) == 517 || GetVehicleModel(carid) == 518
	|| GetVehicleModel(carid) == 533 || GetVehicleModel(carid) == 534 || GetVehicleModel(carid) == 535 || GetVehicleModel(carid) == 536 || GetVehicleModel(carid) == 540 || GetVehicleModel(carid) == 541 || GetVehicleModel(carid) == 545 || GetVehicleModel(carid) == 546 || GetVehicleModel(carid) == 547
	|| GetVehicleModel(carid) == 550 || GetVehicleModel(carid) == 551 || GetVehicleModel(carid) == 555 || GetVehicleModel(carid) == 558 || GetVehicleModel(carid) == 559 || GetVehicleModel(carid) == 560 || GetVehicleModel(carid) == 561 || GetVehicleModel(carid) == 562 || GetVehicleModel(carid) == 565
	|| GetVehicleModel(carid) == 566 || GetVehicleModel(carid) == 567 || GetVehicleModel(carid) == 579 || GetVehicleModel(carid) == 580 || GetVehicleModel(carid) == 585 || GetVehicleModel(carid) == 587 || GetVehicleModel(carid) == 589 || GetVehicleModel(carid) == 602 || GetVehicleModel(carid) == 603)
  		return true;
	return false;
}
function ValidTuningCar(carid) {
	if(GetVehicleModel(carid) == 558 || GetVehicleModel(carid) == 565 || GetVehicleModel(carid) == 561 || GetVehicleModel(carid) == 562 || GetVehicleModel(carid) == 559 || GetVehicleModel(carid) == 560)
		return true;
	return false;
}
function SaveWeapons(playerid) {
	return true;
}
function GiveWeapons(playerid) {
	return true;
}
function ChatLog(player[], userid, text[]) {
	InsertLog(userid, text, LOG_CHAT);
	return true;
}
stock NearMessage(playerid, color, string[], Float: distance = 25.0) {
	new Float: Coordss[3];
	GetPlayerPos(playerid, Coordss[0], Coordss[1], Coordss[2]);
	foreach(new i: Player) {
		if(IsPlayerInRangeOfPoint(i, distance, Coordss[0], Coordss[1], Coordss[2]) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))) {
			SCM(i, color, string);
		}
	}
	return true;
}
function IsPlayerSkydiving(playerid) {
	new index = GetPlayerAnimationIndex(playerid);
	return (index >= 958 && index <= 962);
}

function IsPlayerUsingParachute(playerid) {
	new index = GetPlayerAnimationIndex(playerid);
	return (index >= 963 && index <= 979);
}
stock FactionName(fid) {
	new string[35];
	if(fid == 0) string = "None";
	else format(string, sizeof(string), DynamicFactions[fid][fName]);
	return string;
}

task RentCar[20000]() {
	new query[144], result[MAX_PLAYERS];
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER) {
			new vehicle = GetPlayerVehicleID(i);
			if(vehicle == VehicleRent[i]) {
				RentPrice[i] = BizzInfo[15][bFee];
				BizzInfo[15][bBalance] += BizzInfo[15][bFee];
				mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='15'",BizzInfo[15][bBalance]);
				mysql_tquery(SQL,query, "", "");
				if(PlayerMoney(i, BizzInfo[15][bFee])) {
					RemovePlayerFromVehicleEx(i);
					PlayerTextDrawHide(i, FareTD);
					RentPrice[i] = 0;
					HireCar[i] = 0;
					SCM(i, COLOR_GREY, "Ai fost dat afara din vehicul deoarece nu ai banii necesari!");
					result[i] = 1;
					return true;
				}
				GivePlayerCash(i, 0, 150);
			}
		}
	}
	return true;
}
function SetWorldTimeEx(hour) {
	SetWorldTime(hour);	
	SetWeather(0);
	return true;
}
stock GetFactionMembersOn2(fid) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pMember] == fid) { x++; }
		}
	}
	return x;
}
stock GetFactionMembersOn(playerid) {
	new x;
	foreach(new i: Player) {
		if(IsPlayerConnected(i) && IsPlayerLogged[i] == 1) {
			if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember]) { x++; }
		}
	}
	return x;
}
stock GetNeedPointsR(playerid) {
	new points;
	new x = PlayerInfo[playerid][pMember];
	switch(PlayerInfo[playerid][pRank]) {
		case 1: points = FactionInfo[x][fRank1];
		case 2: points = FactionInfo[x][fRank2];
		case 3: points = FactionInfo[x][fRank3];
		case 4: points = FactionInfo[x][fRank4];
		case 5: points = FactionInfo[x][fRank5];
		case 6: points = FactionInfo[x][fRank6];
	}
	return points;
}
stock GetNeedPoints2(playerid) {
	new points;
	new x = PlayerInfo[playerid][pMember];
	switch(PlayerInfo[playerid][pRank]) {
		case 1: points = FactionInfo[x][fRank1];
		case 2: points = FactionInfo[x][fRank2];
		case 3: points = FactionInfo[x][fRank3];
		case 4: points = FactionInfo[x][fRank4];
		case 5: points = FactionInfo[x][fRank5];
		case 6: points = FactionInfo[x][fRank6];
	}
	return points-PlayerInfo[playerid][pCommands][0];
}
function GetClanTurfs(clanid) {
	new x;
	for(new j = 0; j < MAX_SAFEZONES; j++) {
		if(j != 0) {
			if(GraffitiInfo[j][gfOwned] == clanid) x++;
		}	
	}	
	return x;
}

function GClanMembers() {
	new szQuery[256];
	for(new i = 0; i < 200; i++) {
		if(strlen(ClanInfo[i][clName]) > 0) {
			mysql_format(SQL, szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Clan`='%d'", i);
			mysql_tquery(SQL, szQuery, "GClanMemberss", "i", i);
		}	
	}	
	return true;
}
stock GClanMemberss(id) {
	ClanMembers[id] = cache_num_rows();
	return true;
}
function GetCMembers(clan) return ClanMembers[clan];

stock PutPlayerInVehicleEx(playerid,vehicleid,seatid) {
	PlayerEnterTime[playerid]+=221;
	PutPlayerInVehicle(playerid,vehicleid,seatid);
	GetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
	return true;
}
stock RemovePlayerFromVehicleEx(playerid) {
	PlayerEnterTime[playerid]+=221;
	RemovePlayerFromVehicle(playerid);
	return true;
}

function BizWithType(type) {
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(BizzInfo[i][bType] == type) return i;
	}
	return false;
}
YCMD:createbiz(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return true;
	new type, value, level;
	if(sscanf(params, "iii", type, value, level)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/createbiz <type> <value> <level>");
		SCM(playerid, -1, "Types: Banca (1), Gun Shop (2), Club (3), Restaurant (4), Sex shop (5), 24/7 (6), Binco (7), Burger (8), Casino (9)");
		SCM(playerid, -1, "CNN (10), Gas Station (17), PNS (19), Pizza (21), Shop Fish (23)");
		return true;
	}
	if(type > 10 && type < 17 || type == 20 || type == 22 || type > 23 || type < 1) return SCM(playerid, COLOR_GREY, "Invalid type!");
	GetPlayerPos(playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);

	new biz = BizWithType(type);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`, `Static`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')",
	pPos[playerid][0], pPos[playerid][1], pPos[playerid][2], BizzInfo[biz][bExitX], BizzInfo[biz][bExitY], BizzInfo[biz][bExitZ], level, value, type, BizzInfo[biz][bInterior], BizzInfo[biz][bStatic]);
	mysql_tquery(SQL, gQuery, "InsertBizz", "iiiii", playerid, biz, level, value, type);
	bussines++;
	return true;
}

function InsertBizz(playerid, biz, level, value, type) {
	new idd = cache_insert_id();
	gQuery[0] = EOS;
	if(type == 17) {
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `bizz` SET `Gas`='%d' WHERE `ID`='%d'", 1, idd);
		mysql_tquery(SQL, gQuery, "", "");
		BizzInfo[idd][bGas] = 1;
	}
	BizzInfo[idd][bExitX] = BizzInfo[biz][bExitX]; BizzInfo[idd][bExitY] = BizzInfo[biz][bExitY]; BizzInfo[idd][bExitZ] = BizzInfo[biz][bExitZ];
	BizzInfo[idd][bEntranceX] = pPos[playerid][0];
	BizzInfo[idd][bEntranceY] = pPos[playerid][1];
	BizzInfo[idd][bEntranceZ] = pPos[playerid][2];
	BizzInfo[idd][bBuyPrice] = value;
	BizzInfo[idd][bLevel] = level;
	BizzInfo[idd][bVirtual] = idd;
	BizzInfo[idd][bType] = type;
	BizzInfo[idd][bInterior] = BizzInfo[biz][bInterior];
	BizzInfo[idd][bStatic] = BizzInfo[biz][bStatic];
	LoadGPS(type, idd);

	switch(BizzInfo[idd][bType]) {
		case 1: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],52,0,-1,0,-1,500.0); // banca
		case 2: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],6,0,-1,0,-1,500.0); // gun shop
		case 3: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],49,0,-1,0,-1,500.0); // club
		case 4: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],50,0,-1,0,-1,500.0); // restaurant
		case 5: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],38,0,-1,0,-1,500.0); // sexshop
		case 6: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],17,0,-1,0,-1,500.0); // 24/7
		case 7: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],45,0,-1,0,-1,500.0); // binco
		case 8: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],10,0,-1,0,-1,500.0); // burger
		case 9: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],25,0,-1,0,-1,500.0); // casino
		case 10: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],16,0,-1,0,-1,500.0); // cnn
		case 12: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],55,0,-1,0,-1,500.0); // car
		case 13: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],23,0,-1,0,-1,500.0); // cs
		case 15: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],63,0,-1,0,-1,500.0); // car color
		case 16: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],23,0,-1,0,-1,500.0); // paint
		case 17: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],51,0,-1,0,-1,500.0); // gas station
		case 18: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],53,0,-1,0,-1,500.0); // race
		case 19: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],63,0,-1,0,-1,500.0); // pns
		case 20: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],9,0,-1,0,-1,500.0); // pescarie
		case 21: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],29,0,-1,0,-1,500.0); // pizza
		case 23: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],9,0,-1,0,-1,500.0); // tuning
		case 27: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],29,0,-1,0,-1,500.0); // tuning
	}
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `bizz` SET `Virtual`='%d' WHERE `ID`='%d'", idd, idd);
	mysql_tquery(SQL, gQuery, "", "");

	BizzInfo[idd][bPickup] = CreateDynamicPickup(1239, 23, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]);
	UpdateLabel(2,idd);
	return true;
}

function SetPlayerFreeze(playerid, time) {
	UnFreezeTimer[playerid] = gettime()+time;
	TogglePlayerControllable(playerid, false);
	return true;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z) {
	if(objectid == ExamObject) { 
		if(weaponid == 23) {
			ExamHP[playerid] --;
			if(ExamHP[playerid] == 0) {
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, playerid + 10);
				PlayerInfo[playerid][pGunLic] = 1;
				PlayerInfo[playerid][pGunLicT] = 100;
				ClearAnimations(playerid);
				TogglePlayerControllable(playerid, true);
				SetPlayerFreeze(playerid, 2);
				RemovePlayerWeapon(playerid, 23);
				SetPlayerPosEx(false, playerid, 2639.8896,-970.0893,39.8281);
				SCMf(playerid, COLOR_LGREEN, "[Licenses] {FFFFFF} Ban nhan duoc licenta de weapon pentru 100 de ore.");
				gQuery[0] = EOS;
				mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `GunLic`='1', `GunLicT`='100' WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, gQuery, "", "");
				InExamen[playerid] = 0;
			}
		}
	}
	return true;
}
save_crates(playerid) {
	new query[128];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Crates`='%d|%d|%d|%d|%d' WHERE `id`='%d'", PlayerInfo[playerid][pCrates][0],PlayerInfo[playerid][pCrates][1],PlayerInfo[playerid][pCrates][2],PlayerInfo[playerid][pCrates][3], PlayerInfo[playerid][pCrates][4], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, query,  "", "" );
}
save_tickete(playerid) {
	new query[128];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Tickete`='%d|%d' WHERE `id`='%d'", PlayerInfo[playerid][pTickete][0],PlayerInfo[playerid][pTickete][1], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, query,  "", "" );
}
save_vouchers(playerid) {
	new query[128];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Voucher`='%d|%d|%d' WHERE `id`='%d'", PlayerInfo[playerid][pVoucher][0],PlayerInfo[playerid][pVoucher][1],PlayerInfo[playerid][pVoucher][2], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, query,  "", "" );
}
YCMD:shop(playerid, params[], help) return Dialog_Show(playerid, DIALOG_SHOPMENU, DIALOG_STYLE_TABLIST_HEADERS, "Shop Menu", "Shop Type\tItem\n{FFEA3B}[+] Shop Info{FFFFFF}\nNormal Shop\t17 items\nVip Cars\t9 items\nExtra Peacks\t3 items", "Select", "Cancel");

stock UpgradeVip(vip) {
	new x[20];
	switch(vip) {
		case 0: { x = "None"; }
		case 1: { x = "VIP User"; }
		case 2: { x = "VIP Plus"; }
	}
	return x;
}
stock PriceVIP(vip) {
	new x;
	switch(vip) {
		case 0: x = 0;
		case 1: x = 400;
		case 2: x = 800;
	}
	return x;
}
function ShowShop(playerid) {
	new
		gold = PlayerInfo[playerid][pPremiumPoints],
		string[250], szDialog[4000];
	switch(ShopType[playerid]) {
		case 0: {
			format(szDialog, sizeof(szDialog), "Informati despre punctele premium:\n\nCum obtin punctele premium?\nPunctele premium se obtin prin 2 modalitati:\n1.Donare(Poti face o donatie pentru sustinera comunitati pe (/panel), Categoria Donatie)\n2.Poti castiga puncte premium zilnic pe joc la evenimente sau la diferite actiuni. (Ex: /buylevel, Quest special, Questuri zilnice)");
			Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Shop: Info", szDialog, "Select", "Back");
		}
		case 1: {
			strcat(szDialog, "#\tType\tPrice\n");
			if(PlayerInfo[playerid][pPremiumAccount] != 1) {
				if(gold >= 150) format(string, sizeof(string), "{FFFFFF}1.\tPremium Account\t{509C61}150 Premium Points\n");
				else format(string, sizeof(string), "{FFFFFF}1.\tPremium Account\t{F35E5E}150 Premium Points\n");
			} else format(string, sizeof(string), "{FFFFFF}1.\t{F35E5E}You already have a premium account\n");
			strcat(szDialog, string);
			if(PlayerInfo[playerid][pVip] != 2) {
				if(gold > PriceVIP(PlayerInfo[playerid][pVip]+1)) format(string, sizeof(string), "{FFFFFF}2.\t%s\t{509C61}%d Premium Points\n", UpgradeVip(PlayerInfo[playerid][pVip]+1), PriceVIP(PlayerInfo[playerid][pVip]+1));
				else format(string, sizeof(string), "{FFFFFF}2.\t%s\t{F35E5E}%d Premium Points\n", UpgradeVip(PlayerInfo[playerid][pVip]+1), PriceVIP(PlayerInfo[playerid][pVip]+1));
			} else format(string, sizeof(string), "{FFFFFF}2.\t{F35E5E}You have upgraded to the maximum\n");
			strcat(szDialog, string);	
			if(gold >= 300) format(string, sizeof(string), "{FFFFFF}3.\tClan\t{509C61}300 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}3.\tClan\t{F35E5E}300 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 50) format(string, sizeof(string), "{FFFFFF}4.\tChange nickname\t{509C61}50 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}4.\tChange nickname\t{F35E5E}50 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 40) format(string, sizeof(string), "{FFFFFF}5.\tHidden color\t{509C61}40 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}5.\tHidden color\t{F35E5E}40 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 40) format(string, sizeof(string), "{FFFFFF}6.\tVehicle slots\t{509C61}40 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}6.\tExtra vehicle slots\t{F35E5E}40 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 30) format(string, sizeof(string), "{FFFFFF}7.\tClear 1 warn\t{509C61}30 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}7.\tClear 1 warn\t{F35E5E}30 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 35) format(string, sizeof(string), "{FFFFFF}8.\tVehicle KM reset\t{509C61}35 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}8.\tVehicle KM reset\t{F35E5E}35 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 20) format(string, sizeof(string), "{FFFFFF}9.\tMP3 Player\t{509C61}20 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}9.\tMP3 Player\t{F35E5E}20 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 20) format(string, sizeof(string), "{FFFFFF}10.\tiPhone\t{509C61}20 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}10.\tiPhone\t{F35E5E}20 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 15) format(string, sizeof(string), "{FFFFFF}11.\tRadio House\t{509C61}15 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}11.\tRadio House\t{F35E5E}15 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 15) format(string, sizeof(string), "{FFFFFF}12.\tRadio Business\t{509C61}15 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}12.\tRadio Business\t{F35E5E}15 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 20) format(string, sizeof(string), "{FFFFFF}13.\tBoost job\t{509C61}20 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}13.\tBoost job\t{F35E5E}20 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 50) format(string, sizeof(string), "{FFFFFF}14.\tRare Voucher (50 PP)\t{509C61}55 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}14.\tRare Voucher (50 PP)\t{F35E5E}55 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 110) format(string, sizeof(string), "{FFFFFF}15.\tEpic Voucher (100 PP)\t{509C61}110 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}15.\tEpic Voucher (100 PP)\t{F35E5E}110 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 525) format(string, sizeof(string), "{FFFFFF}16.\tLegendary Voucher (500 PP)\t{509C61}525 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}16.\tLegendary Voucher (500 PP)\t{F35E5E}525 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 99) format(string, sizeof(string), "{FFFFFF}17.\tClear Faction Punish\t{509C61}99 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}17.\tClear Faction Punish\t{F35E5E}99 Premium Points\n");
			strcat(szDialog, string);
			Dialog_Show(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Shop: Normal", szDialog, "Select", "Close");
		}
		case 2: {
			strcat(szDialog, "#\tType\tStock\tPrice\n");
			if(ServerStock[0] == 0) format(string, sizeof(string), "{FFFFFF}1.\tInfernus Premium\t-\t{F35E5E}SOON\n");
			else {
				if(gold >= 5600) format(string, sizeof(string), "{FFFFFF}1.\tInfernus Premium\t%d\t{509C61}5600 Premium Points\n", ServerStock[0]);
				else format(string, sizeof(string), "{FFFFFF}1.\tInfernus Premium\t%d\t{F35E5E}5600 Premium Points\n", ServerStock[0]);
			}
			strcat(szDialog, string);
			if(gold >= 5400) format(string, sizeof(string), "{FFFFFF}2.\tHotering Race A\t-\t{509C61}5400 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}2.\tHotering Race A\t-\t{F35E5E}5400 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 5400) format(string, sizeof(string), "{FFFFFF}3.\tHotering Race B\t-\t{509C61}5400 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}3.\tHotering Race B\t-\t{F35E5E}5400 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 5400) format(string, sizeof(string), "{FFFFFF}4.\tHotering Race C\t-\t{509C61}5400 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}4.\tHotering Race C\t-\t{F35E5E}5400 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 5450) format(string, sizeof(string), "{FFFFFF}5.\tStreach\t-\t{509C61}5450 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}5.\tStreach\t-\t{F35E5E}5450 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 5400) format(string, sizeof(string), "{FFFFFF}6.\tSparrow\t-\t{509C61}5400 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}6.\tSparrow\t-\t{F35E5E}5400 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 5500) format(string, sizeof(string), "{FFFFFF}7.\tMaverick\t-\t{509C61}5500 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}7.\tMaverick\t-\t{F35E5E}5500 Premium Points\n");
			strcat(szDialog, string);	
			if(gold >= 5800) format(string, sizeof(string), "{FFFFFF}8.\tShamal\t-\t{509C61}5800 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}8.\tShamal\t-\t{F35E5E}5800 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 6200) format(string, sizeof(string), "{FFFFFF}9.\tMonster\t-\t{509C61}6200 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}9.\tMonster\t-\t{F35E5E}6200 Premium Points\n");
			strcat(szDialog, string);
			Dialog_Show(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Shop: VIP Cars", szDialog, "Select", "Close");
		}
		case 3: {
			strcat(szDialog, "#\tType\tPrice\n");
			if(gold >= 1000) format(string, sizeof(string), "{FFFFFF}1.\tStarter Pack\t{509C61}1000 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}1.\tStarter Pack\t{F35E5E}1000 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 850) format(string, sizeof(string), "{FFFFFF}2.\tVoucher Pack\t{509C61}850 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}2.\tVoucher Pack\t{F35E5E}850 Premium Points\n");
			strcat(szDialog, string);
			if(gold >= 500) format(string, sizeof(string), "{FFFFFF}3.\tVehicle Pack\t{509C61}500 Premium Points\n");
			else format(string, sizeof(string), "{FFFFFF}3.\tVehicle Pack\t{F35E5E}500 Premium Points\n");
			strcat(szDialog, string);	
			Dialog_Show(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Shop: Extra Packs", szDialog, "Select", "Close");
		}
	}
	return true;
}
stock SetInteriorCamera(playerid) {
	new string[180];
	format(string, sizeof(string), "interior id: %d", SInterior[playerid]);
	PlayerTextDrawSetString(playerid, ShopTDs[0], string);
	PlayerTextDrawShow(playerid, ShopTDs[0]);
	new i = SInterior[playerid]-1;
	SetPlayerPosEx(false, playerid, InteriorPos[i][0], InteriorPos[i][1], InteriorPos[i][2]);
			
	switch(SInterior[playerid]) {																	
		case 1: SetPlayerCameraPos(playerid, 226.6298, 1292.9222, 1084.1265), SetPlayerCameraLookAt(playerid, 225.8987, 1292.2417, 1083.6882), SetPlayerInterior(playerid, 1);
		case 2: SetPlayerCameraPos(playerid, 2285.6091, -1134.0924, 1051.5907), SetPlayerCameraLookAt(playerid, 2284.9370, -1134.8314, 1051.4012), SetPlayerInterior(playerid, 11);
		case 3: SetPlayerCameraPos(playerid, 326.8593, 1477.6793, 1085.2574), SetPlayerCameraLookAt(playerid, 327.1747, 1478.6263, 1085.0721), SetPlayerInterior(playerid, 15);
		case 4: SetPlayerCameraPos(playerid, -51.7679, 1403.2477, 1086.7109), SetPlayerCameraLookAt(playerid, -51.3880, 1404.1694, 1086.4764), SetPlayerInterior(playerid, 8);
		case 5: SetPlayerCameraPos(playerid, 301.3609, 311.8316, 1003.6948), SetPlayerCameraLookAt(playerid, 301.7389, 310.9072, 1003.6548), SetPlayerInterior(playerid, 4);
		case 6: SetPlayerCameraPos(playerid, 2305.6182, -1211.9570, 1051.2274), SetPlayerCameraLookAt(playerid, 2306.5337, -1211.5588, 1050.8679), SetPlayerInterior(playerid, 6);
		case 7: SetPlayerCameraPos(playerid, 2234.6445, -1111.8185, 1051.3431), SetPlayerCameraLookAt(playerid, 2234.1465, -1110.9523, 1051.1779), SetPlayerInterior(playerid, 5);
		case 8: SetPlayerCameraPos(playerid, 2261.9775, -1133.6704, 1051.4977), SetPlayerCameraLookAt(playerid, 2262.1741, -1134.6493, 1051.3431), SetPlayerInterior(playerid, 10);
		case 9: SetPlayerCameraPos(playerid, 2215.8022, -1076.6887, 1052.4047), SetPlayerCameraLookAt(playerid, 2214.8125, -1076.5696, 1052.2395), SetPlayerInterior(playerid, 1);
		case 10: SetPlayerCameraPos(playerid, 267.8929, 304.8710, 1000.8421), SetPlayerCameraLookAt(playerid, 268.8906, 304.9142, 1000.6469), SetPlayerInterior(playerid, 2);
		case 11: SetPlayerCameraPos(playerid, 245.2803, 307.2553, 1000.2034), SetPlayerCameraLookAt(playerid, 245.4770, 306.2764, 999.9384), SetPlayerInterior(playerid, 1);

		case 12: SetPlayerCameraPos(playerid, -726.296447, 1583.010864, 3.056015), SetPlayerCameraLookAt(playerid, -730.181274, 1586.031982, 2.172098), SetPlayerInterior(playerid, 10);
		case 13: SetPlayerCameraPos(playerid, 231.6437, 1186.1727, 1081.5111), SetPlayerCameraLookAt(playerid, 231.8882, 1187.1407, 1081.3771), SetPlayerInterior(playerid, 3);
		case 14: SetPlayerCameraPos(playerid, 487.8189, 1398.1814, 1082.1277), SetPlayerCameraLookAt(playerid, 488.1149, 1399.1350, 1082.0073), SetPlayerInterior(playerid, 2);
		case 15: SetPlayerCameraPos(playerid, 17.5855, 1341.0245, 1087.9324), SetPlayerCameraLookAt(playerid, 18.5301, 1341.3497, 1087.7039), SetPlayerInterior(playerid, 10);
		case 16: SetPlayerCameraPos(playerid, -282.8742, 1469.5415, 1086.3295), SetPlayerCameraLookAt(playerid, -283.7869, 1469.9467, 1086.2946), SetPlayerInterior(playerid, 15);
		case 17: SetPlayerCameraPos(playerid, -261.3119, 1453.3258, 1086.6284), SetPlayerCameraLookAt(playerid, -262.2391, 1453.6963, 1086.4338), SetPlayerInterior(playerid, 4);
		case 18: SetPlayerCameraPos(playerid, 86.9224, 1322.4597, 1086.1943), SetPlayerCameraLookAt(playerid, 86.5379, 1323.3815, 1086.0942), SetPlayerInterior(playerid, 9);
		case 19: SetPlayerCameraPos(playerid, 2320.5571, -1025.0186, 1051.2029), SetPlayerCameraLookAt(playerid, 2320.2698, -1024.0619, 1051.3535), SetPlayerInterior(playerid, 9);
		case 20: SetPlayerCameraPos(playerid, 2491.5051, -1696.2813, 1015.5330), SetPlayerCameraLookAt(playerid, 2492.0032, -1697.1469, 1015.3875), SetPlayerInterior(playerid, 3);
		case 21: SetPlayerCameraPos(playerid, 2195.4080, -1200.0920, 1049.8566), SetPlayerCameraLookAt(playerid, 2194.8584, -1200.9266, 1049.6566), SetPlayerInterior(playerid, 6);
		case 22: SetPlayerCameraPos(playerid, 376.9280, 1416.3525, 1082.3102), SetPlayerCameraLookAt(playerid, 375.9368, 1416.4741, 1082.1262), SetPlayerInterior(playerid, 15);
		case 23: SetPlayerCameraPos(playerid, 2262.5979, -1211.7606, 1049.7876), SetPlayerCameraLookAt(playerid, 2261.6389, -1211.4824, 1049.5773), SetPlayerInterior(playerid, 10);
		case 24: SetPlayerCameraPos(playerid, 445.7094, 1396.8407, 1086.2308), SetPlayerCameraLookAt(playerid, 445.9051, 1397.8197, 1085.9220), SetPlayerInterior(playerid, 2);
		case 25: SetPlayerCameraPos(playerid, 386.4680, 1470.9492, 1081.3369), SetPlayerCameraLookAt(playerid, 385.4917, 1471.1572, 1081.1287), SetPlayerInterior(playerid, 15);
		case 26: SetPlayerCameraPos(playerid, 21.8199, 1403.2657, 1085.2496), SetPlayerCameraLookAt(playerid, 22.0875, 1404.2279, 1085.0442), SetPlayerInterior(playerid, 5);
		case 27: SetPlayerCameraPos(playerid, 2364.7788, -1134.1288, 1051.4226), SetPlayerCameraLookAt(playerid, 2365.0901, -1133.1803, 1051.2433), SetPlayerInterior(playerid, 8);
		case 28: SetPlayerCameraPos(playerid, 2237.0874, -1080.0449, 1049.6121), SetPlayerCameraLookAt(playerid, 2237.3455, -1079.0806, 1049.4729), SetPlayerInterior(playerid, 2);
		case 29: SetPlayerCameraPos(playerid, 294.5133, 1472.1792, 1081.0778), SetPlayerCameraLookAt(playerid, 294.7190, 1473.1558, 1080.9685), SetPlayerInterior(playerid, 15);
		case 30: SetPlayerCameraPos(playerid, 220.7936, 1139.6627, 1083.8789), SetPlayerCameraLookAt(playerid, 221.0227, 1140.6345, 1083.6494), SetPlayerInterior(playerid, 4);
		case 31: SetPlayerCameraPos(playerid, -69.9296, 1350.8909, 1081.0660), SetPlayerCameraLookAt(playerid, -69.7377, 1351.8710, 1080.7916), SetPlayerInterior(playerid, 6);
		case 32: SetPlayerCameraPos(playerid, 259.8786, 1237.9282, 1085.5304), SetPlayerCameraLookAt(playerid, 260.2392, 1238.8597, 1085.1702), SetPlayerInterior(playerid, 9);
		case 33: SetPlayerCameraPos(playerid, 2469.2764, -1699.1567, 1014.5864), SetPlayerCameraLookAt(playerid, 2468.3062, -1698.9172, 1014.3065), SetPlayerInterior(playerid, 2);

		case 34: SetPlayerCameraPos(playerid, 136.0863, 1364.8931, 1086.5968), SetPlayerCameraLookAt(playerid, 136.4150, 1365.8356, 1086.3867), SetPlayerInterior(playerid, 5);
		case 35: SetPlayerCameraPos(playerid, 225.1230, 1021.7136, 1084.7102), SetPlayerCameraLookAt(playerid, 225.5872, 1022.5983, 1084.5348), SetPlayerInterior(playerid, 7);
		case 36: SetPlayerCameraPos(playerid, 231.2208, 1063.1127, 1085.9523), SetPlayerCameraLookAt(playerid, 231.6671, 1064.0059, 1085.5946), SetPlayerInterior(playerid, 6);
		case 37: SetPlayerCameraPos(playerid, 225.9759, 1115.1960, 1081.7931), SetPlayerCameraLookAt(playerid, 226.9668, 1115.0742, 1081.6378), SetPlayerInterior(playerid, 5);
	}
	switch(SInterior[playerid]) {
		case 1..11: pHouseType[playerid] = 1;
		case 12..33: pHouseType[playerid] = 2;
		case 34..37: pHouseType[playerid] = 3;
	}
	return true;
}
function ShowShopTDs(playerid) {
	TextDrawShowForPlayer(playerid, ShopTD[0]);
	TextDrawShowForPlayer(playerid, ShopTD[1]);
	PlayerTextDrawShow(playerid, ShopTDs[0]);
	PlayerTextDrawShow(playerid, ShopTDs[1]);
	TextDrawShowForPlayer(playerid, ShopTD[4]);
	PlayerTextDrawSetString(playerid, ShopTDs[0], "Interior id: 1");
	PlayerTextDrawShow(playerid, ShopTDs[0]);
	SelectTextDraw(playerid, 0xFF0000FF);
	return true;
}
function HideShopTDs(playerid) {
	TextDrawHideForPlayer(playerid, ShopTD[0]);
	TextDrawHideForPlayer(playerid, ShopTD[1]);
	PlayerTextDrawHide(playerid, ShopTDs[0]);
	PlayerTextDrawHide(playerid, ShopTDs[1]);
	TextDrawHideForPlayer(playerid, ShopTD[4]);
	CancelSelectTextDraw(playerid);
	return true;
}
AntiDeAMX() {
	new a[][] = {
 		"Unarmed (Fist)",
 		"Brass K"
 	};
	#pragma unused a
	return true;
}
YCMD:addsafezone(playerid, params[], help) {
	new range, Float: Pos[3];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, "Nu ai acces!");
	if(sscanf(params, "i", range)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/addsafezone <raza>");
	if(range < 15) return SCM(playerid, COLOR_ERROR, "Error: {FFFFFF}Raza prea mica. (minim 15m)");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO `safezones` (`X`, `Y`, `Z`, `Range`) VALUES ('%f', '%f', '%f', '%d')", Pos[0], Pos[1], Pos[2], range);
	mysql_tquery(SQL, gQuery, "SQL_InsertSafeZone", "iifff", playerid, range, Pos[0], Pos[1], Pos[2]);
	return true;
}
function SQL_InsertSafeZone(playerid, range, Float: x, Float: y, Float: z) {
	new i = cache_insert_id();
	SafeZone[i][szX] = x;
	SafeZone[i][szY] = y;
	SafeZone[i][szZ] = z;
	SafeZone[i][szRange] = range;
	SCM(playerid, COLOR_GOLD, "Acest loc a fost adaugat cu succes in baza de date.");
	gString[0] = EOS;
	format(gString, sizeof(gString), "Informatii: ID %d, Coordonate (%f, %f, %f), raza %d.", i, x, y, z, range);
	SCM(playerid, COLOR_GOLD, gString);
	return true;
}
YCMD:editsafezone(playerid, params[], help) {
	new szDialog[1024], szDialog2[1024];
	new szZone[128];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_WHITE, "Nu ai acces!");
	for(new i = 0; i < MAX_SAFEZONES; i++) {
		if(SafeZone[i][szRange] >= 15) {
			GetPlayer3DZone2(SafeZone[i][szX], SafeZone[i][szY], SafeZone[i][szZ], szZone, sizeof(szZone));
			format(szDialog, sizeof(szDialog), "%d. %s\n", i, szZone);
			strcat(szDialog2, szDialog);
		}
	}
	Dialog_Show(playerid, DIALOG_EDITSF, DIALOG_STYLE_TABLIST, "Safezones:", szDialog2, "Select", "Cancel");
	return true;
}
YCMD:sound(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, "Acces denied!");
	PlayerPlaySound(playerid, strval(params), 0, 0, 0);
	return true;
}
YCMD:inevent(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	new x, string[180];
	SCM(playerid, -1, "Players in event:");
	foreach(new i: Player) {
		if(InEvent[i] == 1) {
			x++;
			format(string, sizeof(string), "%s (%d)", GetName(i), i);
			SCM(playerid, -1, string);
		}
	}
	format(string, sizeof(string), "Au fost gasiti %d jucatori.", x);
	SCM(playerid, -1, string);
	return true;
}
YCMD:createhouse(playerid, params[], help) {
	new pret, nivel;
	if(PlayerInfo[playerid][pScripter] < 1) return SendClientMessage(playerid, COLOR_GREY, "Nu ai acces!");
	if(CreateHouse[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Deja creezi o casa!");
	if(sscanf(params, "ii", pret, nivel)) return SendClientMessage(playerid, COLOR_GREY, "Syntax: {FFFFFF}/createhouse <price> <nivel>");
	PlayerTextDrawSetString(playerid, ShopTDs[1], "Seteaza");
	CreateHouse[playerid] = 1;
	SInterior[playerid] = 1;
	pPret[playerid] = pret;
	pNivel[playerid] = nivel;
	GetPlayerPos(playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
	pInteriorID[playerid] = GetPlayerInterior(playerid), pVirtual[playerid] = GetPlayerVirtualWorld(playerid);
	SetInteriorCamera(playerid);
	ShowShopTDs(playerid);
	SetPlayerVirtualWorld(playerid, playerid+900);
	return true;
}
stock IsInWaterCar(playerid) {
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 601) { return true; }
	return false;
}
stock HasExtinguisher(playerid) {
	if(GetPlayerWeapon(playerid) == 42 && !IsPlayerInAnyVehicle(playerid)) { return true; }
	return false;
}
stock Peeing(playerid) return GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_PISSING;
stock Pressing(playerid) {
	new keys, updown, leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);
	return keys;
}
stock IsPlayerInWater(playerid) {
	new Float:X, Float:Y, Float:Z, an = GetPlayerAnimationIndex(playerid);
	GetPlayerPos(playerid, X, Y, Z);
	if((1544 >= an >= 1538 || an == 1062 || an == 1250) && (Z <= 0 || (Z <= 41.0 && IsPlayerInArea(playerid, -1387, -473, 2025, 2824))) ||
	(1544 >= an >= 1538 || an == 1062 || an == 1250) && (Z <= 2 || (Z <= 39.0 && IsPlayerInArea(playerid, -1387, -473, 2025, 2824)))) return true;
 	return false;
}
YCMD:gototeste(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, AdminOnly);
	SetPlayerPosEx(false, playerid, -1412.5878, -188.8160, 25.4375);
	SetPlayerFacingAngle(playerid, 120.2642);
	SetPlayerVirtualWorld(playerid, 6699);
	return true;
}
YCMD:addstock(playerid, params[], help) {
	if(PlayerInfo[playerid][pScripter] < 1) return SCM(playerid, COLOR_LGREEN, AdminOnly);
	new type, value;
	if(sscanf(params, "ii", type, value)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/addstock <type> <value>");
		SCM(playerid, COLOR_WHITE, "(0) Infernus PREMIUM *Ice creams* | (1) Vehicul Crates *Ice creams* | (2) Vouchere Rare (Ice cream)");
		SCM(playerid, COLOR_WHITE, "(3) Bullet PREMIUM  (Ice cream) | (4) NRG-500 PREMIUM (Ice cream)");
		return true;
	}
	if(type > 4) return SCM(playerid, COLOR_LGREEN, "Invalid.");
	new string[128];
	ServerStock[type] = value;
	switch(type) {
		case 0: format(string, sizeof(string), "Adminul %s a adaugat stock %d la Infernus PREMIUM.", GetName(playerid), ServerStock[type]);
		case 1: {
			new labeles[250];
			format(labeles, sizeof(labeles), "{597F9C}(Stock: %d)\n{20F5F1}Vehicle Crate{FFFFFF}\nUse {20F5F1}/buycrate{FFFFFF} to buy crate\n{FFFFFF}Crate Price: {20F5F1}7000 RPoints {FFFFFF} / {20F5F1}700 Premium Points", ServerStock[1]);
			UpdateDynamic3DTextLabelText(LabelCrates, -1, labeles);
			format(string, sizeof(string), "Adminul %s a adaugat stock %d la Vehicle Crates.", GetName(playerid), ServerStock[type]);
		}
		case 2: format(string, sizeof(string), "Adminul %s a adaugat in Ice creams shop %d vouchere..", GetName(playerid), ServerStock[type]);
		case 3: format(string, sizeof(string), "Adminul %s a adaugat in Ice creams shop %d Bullet Premium", GetName(playerid), ServerStock[type]);
		case 4: format(string, sizeof(string), "Adminul %s a adaugat in Ice creams shop %d NRG-500 Premium", GetName(playerid), ServerStock[type]);
	}
	SendAdminMessage(COLOR_YELLOW, string, 6);
	return true;
}
save_stock() {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `stuff` SET `ServerStock`='%d|%d|%d|%d|%d' WHERE `ID`='1'", ServerStock[0], ServerStock[1], ServerStock[2], ServerStock[3], ServerStock[4]);
	mysql_tquery(SQL, gQuery, "", "");
}

YCMD:startquest(playerid, params[], help) {
	if(PlayerInfo[playerid][pQuestFinish] == 1)
		return SCM(playerid, COLOR_LGREEN, "Already finished a quest.");

	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_LGREEN, "Error: Nu ai level 3.");
	if(PlayerInfo[playerid][pBoatLic] == 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai nevoie de licenta de barca pentru a incepe quest-ul.");
	if(StartQuest[playerid] != 0) return SCM(playerid, COLOR_LGREEN, "Error: Ai inceput deja quest-ul.");
	if(CheckObjects(playerid) == sizeof(QuestPos)) {
		SetPlayerRaceCheckpoint(playerid, 1, 2257.2080,-1340.5638,23.9833, 0.0, 0.0, 0.0, 5.0);
		CP[playerid] = 669;
		SCM(playerid, COLOR_WHITE, "{31d6e4}(Winter Quest): {FFFFFF}Hay giao phan qua tai cac checkpoint tren ban do.");
		return true;
	}
	if(PlayerToPoint(3.0, playerid, 2233.9841,-1333.1261,23.9815)) {
		for(new i = 0; i < sizeof(QuestPos); i++) {
			if(PlayerInfo[playerid][pSpecialQuest][i] != 0) {}
			else {
				PlayerInfo[playerid][pObjectQuest][i] = CreatePlayerObject(playerid, 19057, QuestPos[i][0], QuestPos[i][1], QuestPos[i][2], 0.0, 0.0, 0.0, 30.0);
				SetPlayerMapIcon(playerid, 70+i, QuestPos[i][0], QuestPos[i][1], QuestPos[i][2], 56, -1, MAPICON_GLOBAL);
			}
		}
		QuestVehicle[playerid] = CreateVehicleEx(413, 2215.2151,-1371.0704,24.0743,176.3354, 1, 1, -1, 0);
		Gas[QuestVehicle[playerid]] = 100;
		PutPlayerInVehicle(playerid, QuestVehicle[playerid], 0);
		SCMEx(playerid, -1, "{31d6e4}(Winter Quest): {FFFFFF}Ai inceput questul %d/%d Progress, pentru mai multe detali foloseste (/questinfo).", CheckObjects(playerid), sizeof(QuestPos));
		StartQuest[playerid] = 1;
	}
	else {
		CP[playerid] = 43;
		SetPlayerCheckpointEx(playerid, 2233.9841,-1333.1261,23.9815, 2.0);
		SCM(playerid, COLOR_LGREEN, "Error: Nu esti in zona de unde poti lua quest-ul");
		return true;
	}
	return true;
}
YCMD:gotoquest(playerid, params[], help) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_LGREEN, AdminOnly);
	new id;
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gotoquest <objectid>");
	SetPlayerPosEx(false, playerid, QuestPos[id][0], QuestPos[id][1], QuestPos[id][2]);
	SCMEx(playerid, COLOR_LGREEN, "Te-ai teleportat cu succes la object quest id %d", id);
	return true;
}
YCMD:stopquest(playerid, params[], help) {
	if(StartQuest[playerid] != 1) return true;
	StartQuest[playerid] = 0;
	for(new i = 0; i < sizeof(QuestPos); i++) {
		if(PlayerInfo[playerid][pSpecialQuest][i] == 1) {}
		else {
			DestroyPlayerObject(playerid, PlayerInfo[playerid][pObjectQuest][i]);
			RemovePlayerMapIcon(playerid, 70+i);
		}
	}
	HaveGift[playerid] = -1;
	DestroyVehicle(QuestVehicle[playerid]);
	SCMEx(playerid, COLOR_YELLOW, "Ai oprit questul progress %d/%d.", CheckObjects(playerid), sizeof(QuestPos));
	return true;
}
YCMD:questinfo(playerid, params[], help) {
	if(PlayerInfo[playerid][pLevel] < 3)
		return SCM(playerid, COLOR_LGREEN, "Error: Nu ai level 3.");

	SCMEx(playerid, COLOR_WHITE, "{31d6e4}Winter Quest: %d/25 progress.", CheckObjects(playerid));
	SCM(playerid, COLOR_WHITE, "La acest quest missiunea ta este de a colecta toate cele 25 de cadouri.");
	SCM(playerid, COLOR_WHITE, "Pentru a incepe quest-ul vei avea nevoie de o licenta de condus.");
	SCM(playerid, COLOR_WHITE, "Pentru a ridica codurile vei folosi tasta 'Y' langa cadul dvs.");
	SCM(playerid, COLOR_WHITE, "Vei avea la indeamana un vehicul de tip Pony pentru a te deplasa mai usor.");
	SCM(playerid, COLOR_WHITE, "Premiul consta in:");
	SCM(playerid, COLOR_WHITE, "$50.000.000 - $70.000.000.");
	SCM(playerid, COLOR_WHITE, "50 - 70 Premim Points.");
	SCM(playerid, COLOR_WHITE, "100 - 300 Gift Points.");
	SCM(playerid, COLOR_WHITE, "1000 - 1500 RPoints.");
	return true;
}
function SetCheckpoint(playerid) {
	new rand = random(5);
	switch(rand) {
		case 0: SetPlayerCheckpointEx(playerid, 2566.9636,-2450.5378,13.6262, 5.0);
		case 1: SetPlayerCheckpointEx(playerid, 2550.3438,-2221.8779,13.3113, 5.0);
		case 2: SetPlayerCheckpointEx(playerid, 1767.1932,-2031.7592,13.7906, 5.0);
		case 3: SetPlayerCheckpointEx(playerid, 2684.4473,-1110.4076,69.3969, 5.0);
		case 4: SetPlayerCheckpointEx(playerid, 2311.5100,-1238.0265,24.0475, 5.0);
		case 5: SetPlayerCheckpointEx(playerid, 797.5410,-617.5146,16.3359, 5.0);		
	}
	CP[playerid] = 60;
	return true;
}

stock SpawnPlayerCar(dbid) {
	new string[180];
	new engine,lights,alarm,doors,bonnet,boot,objective;
	if(dbid == -1) return true;
	if(CarInfo[dbid][Confiscated] == 1) return true;
	CarInfo[dbid][Spawned] = CreateVehicleEx(CarInfo[dbid][cModel],CarInfo[dbid][cLocationx],CarInfo[dbid][cLocationy],CarInfo[dbid][cLocationz],CarInfo[dbid][cAngle],CarInfo[dbid][cColorOne],CarInfo[dbid][cColorTwo], -1, 0);
	SetVehicleVirtualWorld(CarInfo[dbid][Spawned], CarInfo[dbid][cVirtual]);
	VehicleOwned[CarInfo[dbid][Spawned]] = CarInfo[dbid][Spawned];
	VehicleSQL[CarInfo[dbid][Spawned]] = dbid;

	SetVehicleHealth(CarInfo[dbid][Spawned], CarInfo[dbid][cVip] ? 2000 : 1000);

	Iter_Add(PersonalVSpawned, dbid);
	MyVehicleSpawn[CarInfo[dbid][cOnline]] ++;
	attach_vip_text(dbid);
	AttachNeon(dbid);

	Gas[CarInfo[dbid][Spawned]] = CarInfo[dbid][cFuel];
	GetVehicleParamsEx(CarInfo[dbid][Spawned],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(CarInfo[dbid][Spawned],0,lights,alarm,CarInfo[dbid][cLock],bonnet,boot,objective);
	CarInfo[dbid][cTime] = gettime()+600;
	SetTunning(dbid);
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Spawned='%d' WHERE ID=%d", CarInfo[dbid][Spawned], CarInfo[dbid][cID]);
	mysql_tquery(SQL, string, "", "");
	return true;
}

stock saveCar(idd) {
	if(idd == 0) return true;
	new query[1000];
	mysql_format(SQL, query, sizeof(query),
		"UPDATE cars SET Model='%d', Locationx='%f', Locationy='%f', Locationz='%f', Angle='%f', ColorOne='%d', ColorTwo='%d', Owner='%s', Value='%d', License='%s', Userid='%d', `Virtual`='%d'  WHERE ID=%d",
	CarInfo[idd][cModel], CarInfo[idd][cLocationx], CarInfo[idd][cLocationy], CarInfo[idd][cLocationz], CarInfo[idd][cAngle], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo], CarInfo[idd][cOwner], CarInfo[idd][cValue],
	CarInfo[idd][cLicense], CarInfo[idd][Userid], CarInfo[idd][cVirtual], CarInfo[idd][cID]);
	mysql_tquery(SQL, query, "", "");
	return true;
}

stock SCMEx(playerid, color, fstring[], {Float, _}:...) {
	new n = numargs() * 4;
	if (n == 3 * 4) {
		return SendClientMessage(playerid, color, fstring);
	}
	else {
		new message[255];
		new arg_start;
		new arg_end;
		new i = 0;
		#emit CONST.pri  fstring
		#emit ADD.C	0x4
		#emit STOR.S.pri arg_start
		#emit LOAD.S.pri n
		#emit ADD.C	0x8
		#emit STOR.S.pri arg_end
		for (i = arg_end; i >= arg_start; i -= 4) {
			#emit LCTRL	5
			#emit LOAD.S.alt i
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S  fstring
		#emit PUSH.C  128
		#emit PUSH.ADR message
		#emit PUSH.S  n
		#emit SYSREQ.C format
		i = n / 4 + 1;
		while (--i >= 0) {
			#emit STACK 0x4
		}
		return SendClientMessage(playerid, color, message);
	}
}
#include <accs_system>
// #pragma dynamic (64*1024)

